// The {Maybe} algebraic data type can express 0 or 1 value of type {T}
type Maybe<T> {
	case None;
	case Some(t: T);
}

// Using {match} over an algebraic data type
def add(x: Maybe<int>, val: int) -> Maybe<int> {
	match (x) {  // match over the structure of x
		None => return Maybe<int>.None;		// None has no arguments
		Some(y) => return Maybe.Some(y + val);	// can bind the arguments of {Some}
	} // the compiler checks the match must handle all cases
}
