// Algebraic datatype representing the result of an operation, including
// "ok" or a fixed number of potential kinds of errors.
type Result {
	case Ok;
	case OutOfMemory;
	case FileNotFound(filename: string);
	case FileTooLarge(filename: string, size: int);
}

// An operation returns a {Result} so that the caller can match on it.
def doOperation(fname: string) -> Result {
	// ... do work, returning ok or one of the error cases
	if (fname == null) return Result.FileNotFound(fname);
	return Result.Ok;
}

// We can write a routine to handle each kind of Result differently.
def report(r: Result) {
	match (r) {  // match on the shape of the result

		Ok => return; // great, nothing is ruined!
	
		// Not so great, report an error.
		OutOfMemory => System.error("InternalError", "out of memory");
	
		// in a match case, we can bind the arguments the case to use on the RHS,
		// e.g. {fname} here
		FileNotFound(fname) => System.error("FileNotFound", fname);
		
		// we don't have to use the same names as in the declaration
		FileTooLarge(fname, sz) => System.error("FileTooLarge", fname);

	} // the compiler will check that all cases are handled in a match statement
}
