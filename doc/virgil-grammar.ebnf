Virgil ::=  ToplevelDecl* EOF
ToplevelDecl ::=  ClassDecl | ComponentDecl | VariantDecl | EnumDecl | ExportDecl | VarMember | DefMember

ClassDecl ::= TK_class IdentParam ( "(" VarParamDecls? ")" )? ( TK_extends TypeRef TupleExpr? )? "{" Member* "}"
ComponentDecl ::= TK_import? TK_component TK_ident "{" Member* "}"
VariantDecl ::=  TK_type IdentParam ( "(" ParamDecls? ")" )? "{" (DefMethod | VariantCase)* "}"
EnumDecl ::=  TK_enum TK_ident ( "(" ParamDecls? ")" )? "{" ( EnumCase ( "," EnumCase )* )? "}"

Member ::=  DefMember | NewMember | VarMember
VarMember ::=  TK_private? TK_var VarDecls ";"
DefMember ::=  TK_private? TK_def ((TK_var? VarDecls ";") | IndexMethod | Method)
NewMember ::=  TK_new "(" NewParamDecls? ")" ( ":"? TK_super TupleExpr )? BlockStmt
VariantCase ::=  TK_case TK_ident ( "(" ParamDecls? ")" )? ( ";" | Members )
EnumCase ::=  TK_ident ( "(" ( Expr ( "," Expr )* )? ")" )?

VarParamDecl ::=  TK_var? TK_ident ":" TypeRef
VarParamDecls ::= VarParamDecl ("," VarParamDecl)*
ParamDecl ::=  TK_ident ":" TypeRef
ParamDecls ::= ParamDecl ("," ParamDecl)*
NewParamDecl ::=  TK_ident (":" TypeRef)?
NewParamDecls ::= NewParamDecl ("," NewParamDecl)*
IdentParam ::= TK_ident | (TK_identp TypeArgs ">")
TypeRef ::=  ( "(" TypeArgs? ")" | IdentParam ( "." IdentParam )* ) ( "->" TypeRef )*
TypeArgs ::= TypeRef ("," TypeRef)*

VarDecl ::= TK_ident ((":" TypeRef) | ("=" Expr) | (":" TypeRef "=" Expr))
VarDecls ::= VarDecl ( "," VarDecl )*
IndexMethod ::= IdentParam "[" VarParamDecls? "]" ( "=" ParamDecl | "->" TypeRef ) MethodBody
DefMethod ::= TK_private? TK_def (IndexMethod | Method)
Method ::=  IdentParam "(" VarParamDecls? ")" ( "->" ( TK_this | TypeRef ) )? MethodBody

MethodBody ::= ";" | BlockStmt
ExportDecl ::=  TK_export ( DefMethod | ( TK_string | Ident ) ( "=" SymbolParam )? ";" )
Symbol ::= TK_ident ("." TK_ident)*
SymbolParam ::= IdentParam ("." IdentParam)*

BlockStmt ::= "{" Stmt* "}"
Stmt ::=  BlockStmt | EmptyStmt | IfStmt | WhileStmt | MatchStmt | VarStmt | DefStmt | BreakStmt | ContinueStmt | ReturnStmt | ForStmt | ExprStmt
EmptyStmt ::=  ";"
IfStmt ::=  TK_if "(" Expr ")" Stmt ( TK_else Stmt )?
WhileStmt ::=  TK_while "(" Expr ")" Stmt
MatchStmt ::=  TK_match "(" Expr ")" "{" ( MatchCase MatchCase* )? "}" ( TK_else Stmt )?
MatchCase ::=  "_" | (MatchPattern ( "," MatchPattern )*) "=>" Stmt
MatchPattern ::=  IdTypePattern | SymbolPattern | Const
IdTypePattern ::=  TK_ident ":" TypeRef
SymbolPattern ::= Symbol ( "(" ( TK_ident ( "," TK_ident )* )? ")" )?
VarStmt ::=  TK_var TK_ident VarDecls ";"
DefStmt ::=  TK_def TK_ident VarDecls ";"
BreakStmt ::=  TK_break ";"
ContinueStmt ::=  TK_continue ";"
ReturnStmt ::=  TK_return Expr? ";"
ForStmt ::=  TK_for "(" VarDecl ( "<" Expr | TK_in Expr | ";" Expr ";" Expr ) ")" Stmt
ExprStmt ::=  Expr ";"

Expr ::= SubExpr (Assign Expr)?
SubExpr ::= InExpr (Infix InExpr)?
InExpr ::= Term TermSuffix*
TermSuffix ::= (MemberSuffix | ApplySuffix | IndexSuffix | IncOrDec)
MemberSuffix ::=  "." ( IdentParam | TK_int | Operator )
ApplySuffix ::= "(" Exprs? ")"
IndexSuffix ::= "[" Exprs "]"
Term ::= (IncOrDec | "-")? (ParamExpr | Literal | ArrayExpr | TupleExpr | IfExpr)
TupleExpr ::=  "(" Exprs? ")"
ArrayExpr ::=  "[" Exprs? "]"
ParamExpr ::=  "_"
IfExpr ::= TK_if "(" Expr "," Expr ( "," Expr )? ")"
Literal ::= Const | TK_this
Const ::= TK_char | TK_string | TK_int | TK_float | TK_true | TK_false | TK_null

IncOrDec ::=  "++" | "--"
Operator ::= Infix | CastOrQuery | "-" | "~" | "[]" | "[]="
CastOrQuery ::= ("!" | "?") ( "<" TypeArgs ">" )?
Assign ::= "=" | "<<=" | ">>=" | "|=" | "&=" | "<<<=" ">>>=" | "+=" | "-=" | "*=" | "/=" | "%=" | "^="
Infix ::=  "==" | "!=" | "||" | "&&" | "<" | "<=" | ">" | ">=" | "|" | "&" | "<<" | "<<<" | ">>" | ">>>" | "+" | "-" | "*" | "/" | "%" | "^"

TK_break ::= "break"
TK_case ::= "case"
TK_class ::= "class"
TK_component ::= "component"
TK_continue ::= "continue"
TK_def ::= "def"
TK_else ::= "else"
TK_enum ::= "enum"
TK_export ::= "export"
TK_extends ::= "extends"
TK_false ::= "false"
TK_for ::= "for"
TK_if ::= "if"
TK_import ::= "import"
TK_in ::= "in"
TK_layout ::= "layout"
TK_match ::= "match"
TK_new ::= "new"
TK_null ::= "null"
TK_private ::= "private"
TK_return ::= "return"
TK_struct ::= "struct"
TK_super ::= "super"
TK_this ::= "this"
TK_true ::= "true"
TK_type ::= "type"
TK_var ::= "var"
TK_while ::= "while"
TK_struct ::= "struct"
TK_layout ::= "layout"

TK_ident ::=
TK_identp ::=
TK_char ::=
TK_int ::=
TK_float ::=
TK_string ::=