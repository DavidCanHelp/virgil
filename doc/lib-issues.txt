___   _____ ____     _____ ______ ______ _    _ ______ ______
 |      |    |__|_     |   |_____ |_____ |    | |_____ |_____
_|__| __|__ _|___|   __|__ _____| _____| |____| |_____ _____|

-- migrations ---------------------
  add unit testing framework
  put? naming: DataBuffer
  Aeneas util vs lib/util
  StringBuffer -> StringBuilder in aeneas
  Migrate all tests to use common 'progress' format
  migrate Aeneas to use lib/util?

-- missing functionality ----------
 unit tests for all libraries
 render floating point numbers
 import or other dependency mechanism?

-- fix naming conventions  --------
 Buffer vs Stream
 Builder
 Reader vs Decoder vs Parser vs Lexer
 Writer vs Encoder
 write vs put vs append
 read vs get
 set
 put, putx, put_x, putX
 i1/i2 vs i8/i16


-- Future organization of standard library -------
Datastructures:
  - List
  - HashMap
  - Arrays
  - BitMatrix
  - Vector
  - WorkQueue

Strings/render
  - Strings
  - all primitives <-> string
  - GlobMatcher
  - RegexMatcher
  - StringBuilder
  - Utf8

Parsing
  - Symbol
  - Tokens
  - Lexing utils
  - Parsing utils

IO
  - ByteBuffer
  - CharBuffer
  - ByteStream
  - Decoder
  - Encoder
  - File API
  - Sockets API
  - HTTP API
  - line-by-line file load
  - raw stdin (ioctl)

Shell/cmdline
  - options and arguments
  - terminal
  - animations, spinners

Dev/test
  - UnitTests framework
  - ErrorGen/location framework
  - unimplemented, fatal
  - logging
  - benchmarking framework
  - clocks, timing
  - progress format utilities

Misc:
  - Random number generator(s)
  - basic statistics
  - dates?

Algorithms:
  - Directed graphs
  - Undirected graphs
  - Sorting


-- done ----------
* StringBuffer -> StringBuilder in lib/util
* put? naming for appending to things: Vector, StringBuffer
* lang: vector/map indexing
  * vector.get(e)                       vector[e]
  * vector.set(e, e)                    vector[e] = e;
  * map.get(e)                          map[e]
  * map.set(e, e)                       map[e] = e;
* vector.get, vector.set, hashmap.get, hashmap.set	=> indexing syntax []


Experiential notes
------------------------
 Errors: Wizard + Aeneas both parse complex formats and generate error messages for users
   - Wizard primarily parses binary and generates file-section-offset errors
   - Wizard spec tests are in text
   - Aeneas parses text
   - Both text parsers might benefit from having common lower-level lexing utils (tokens, errors, buffer, etc)
   - Aeneas parses text as bytes, only allows UTF-8 inside string constants

 StringBuffer/StringBuilder migration is hardest across Aeneas/Wizard
    - %1 to %d syntax
    - putlist, puta, additional utilities
    - is all of this obviated by string interpolation / matching features in Virgil?

 Benchmarks and new apps and utilities all benefit from having "quick hack" utilites at the ready
    - easy parse of a int command line parameter
    - load file as text, line-by-line
    - render strings, lines
    - terminal colors
    - datastructures
    - should be as easy or easier to use than System.putx
    - could be easier with some kind of import statement, or dev script that adds lib/util as part of the v3c command?

In:
  ParserState
  Decoder
    Wasm
    JVM

  Decode:
    - i8, i16, i32, i64 signed/unsigned big/little endian
    - i32leb, i64leb, u32leb, u64leb
    - UTF-8
  Parse:
    - bool
    - int
    - long
    - hex
    - binary
    - float
    - string literal
    - char literal


Out:					New Name (?)
  DataBuffer (seekable)			DataWriter
    i1[le,ge]				put_b8
    i2					put_b16
    i4					put_b32
    i8					put_b64
    i4leb				put_i32leb
    i8leb				put_i64leb
    iN					put_bN
    iK					put_bK
    zeroN				put_zeros
    skipN
    align
    bb					put_bb
    bbb					put_bbb
    skip_u4leb
    overwrite_u4leb
  StringBuffer/Builder			StringWriter
    putd[_iNN]
    putx[_NN]
    putc
    putz
    puts[q]
    pututf8				move to Utf8
    ln					putln?
    sp					putsp?
    putk				put_cK?
  * putf
  * putN

  TraceBuffer				TraceWriter
    outln
  * out
  TerminalBuffer			TerminalWriter
    blue
    green
    cyan
    red
    yellow
    purple
    end
    out
 *HTMLBuffer
  * tag
