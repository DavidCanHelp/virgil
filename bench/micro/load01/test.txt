// Copyright (c) 2011 Google Inc.
// See the file "license.txt" for license terms.

class DarwinSyscall {
	value num: int;
	value sig: Type;
	new(num) { }
}

component DarwinModule {
	value int_t: Type = Int.TYPE;		// platform-sized int
	value uint_t: Type = Int.TYPE;		// platform-sized unsigned int
	value size_t: Type = Int.TYPE;		// platform-sized size
	value off_t: Type = Int.TYPE;		// TODO: 64-bit offset
	value void_t: Type = Void.TYPE;		// void
	value int_p: Type = ptr(int_t);		// pointer to int
	value off_p: Type = ptr(off_t);		// pointer to offset
	value str_t: Type = MachModule.PTR_32.ptrType;	// pointer to null-terminated char array
	value addr_t: Type = MachModule.PTR_32.ptrType;	// address
	value pid_t: Type = Int.TYPE;
	// 128-bit types
	value u128_t: Type = bytes(16); // TODO: 128 bit types
	// 64-bit types
	value i64_t: Type = Tuple.newType(Lists.cons2(Int.TYPE, Int.TYPE));
	value u64_t: Type = Int.TYPE;
	value long: Type = Int.TYPE;
	value u_long: Type = Int.TYPE;
	value long_p: Type = ptr(long);
	// 32-bit types
	value i32_t: Type = Int.TYPE;
	value u32_t: Type = Int.TYPE;
	value u32_p: Type = ptr(u32_t);
	// 16-bit types
	value i16_t: Type = Int.TYPE; // TODO
	value u16_t: Type = Int.TYPE; // TODO
	// 8-bit types
	value u8_t: Type = Byte.TYPE;

	value sigset_t: Type = Int.TYPE;		// signal set
	value id_t: Type = Int.TYPE;			// id
	value idtype_t: Type = Int.TYPE;		// type of id
	value mach_port_name_t: Type = Int.TYPE;	// mach port
	value key_t: Type = Int.TYPE;			// key for semaphores
	value mode_t: Type = Int.TYPE;
	value time_t: Type = Int.TYPE;
	value suseconds_t: Type = Int.TYPE;
	value func_p: Type = MachModule.PTR_32.ptrType;
	value sigset_p: Type = ptr(sigset_t);
	value sem_p: Type = ptr(int_t);
	value attrgroup_t: Type = u32_t;
	value au_id_p: Type = ptr(int_t);

	value timeval_p: Type = addr_t;
//	= cstruct("timeval", [
//		("tv_sec",  time_t),
//		("tv_usec", suseconds_t)
//	]);
	value timespec_p: Type = cstruct("timespec", [
		("tv_sec",  time_t),
		("tv_usec", long)
	]);
	value timezone_p: Type = addr_t;
//	 = cstruct("timezone", [
//		("tz_minuteswest", int_t),
//		("tz_dsstime",     int_t)
//	]);
	value mac_p: Type = cstruct("mac", [
		("m_buflen", size_t),
		("m_string", str_t)
	]);
	value sigaction_p: Type = cstruct("sigaction", [
		("sa_handler", func_p),
		("sa_mask",    sigset_t),
		("sa_flags",   int_t)
	]);
	value sigaltstack_p: Type = cstruct("sigaltstack", [
		("ss_sp",    addr_t),
		("ss_size",  int_t),
		("ss_flags", int_t)
	]);
	value x86_exception_state_p: Type = cstruct("x86_exception_state", [
		("trapno", u32_t),
		("err", u32_t),
		("faultvaddr", u32_t)
	]);
	value x86_thread_state_p: Type = cstruct("x86_thread_state", [
		("eax", u32_t),
		("ebx", u32_t),
		("ecx", u32_t),
		("edx", u32_t),
		("edi", u32_t),
		("esi", u32_t),
		("ebp", u32_t),
		("esp", u32_t),
		("ss", u32_t),
		("eflags", u32_t),
		("eip", u32_t),
		("cs", u32_t),
		("ds", u32_t),
		("es", u32_t),
		("fs", u32_t),
		("gs", u32_t)
	]);
	value x86_float_state_p: Type = cstruct("x86_float_state", [
		("fpu_reserved0", bytes(8)),
		("fpu_fsw",       i32_t),
		("fpu_ftw",       u8_t),
		("fpu_rsrv1",     u8_t),
		("fpu_fop",       u16_t),
		("fpu_ip",        u32_t),
		("fpu_cs",        u16_t),
		("fpu_rsrv2",     u16_t),
		("fpu_dp",        u32_t),
		("fpu_ds",        u16_t),
		("fpu_rsrv3",     u16_t),
		("fpu_mxcsr",     u32_t),
		("fpu_mxcsrmask", u32_t),
		("fpu_stmm0",     u128_t),
		("fpu_stmm1",     u128_t),
		("fpu_stmm2",     u128_t),
		("fpu_stmm3",     u128_t),
		("fpu_stmm4",     u128_t),
		("fpu_stmm5",     u128_t),
		("fpu_stmm6",     u128_t),
		("fpu_stmm7",     u128_t),
		("fpu_xmm0",      u128_t),
		("fpu_xmm1",      u128_t),
		("fpu_xmm2",      u128_t),
		("fpu_xmm3",      u128_t),
		("fpu_xmm4",      u128_t),
		("fpu_xmm5",      u128_t),
		("fpu_xmm6",      u128_t),
		("fpu_xmm7",      u128_t),
		("fpu_rsrv4",     bytes(14*16)),
		("fpu_reserved1", i32_t)
	]);
	value mcontext_x86_p: Type = cstruct("mcontext_x86", [
		("es", inline(x86_exception_state_p)),
		("ss", inline(x86_thread_state_p)),
		("fs", inline(x86_float_state_p))
	]);
	value mcontext_p: Type = mcontext_x86_p; // TODO: depends on machine
	value ucontext_p: Type = cstruct("ucontext", [
		("uc_onstack",      int_t),
		("uc_sigmask",      sigset_t),
		("uc_stack",        inline(sigaltstack_p)),
		("uc_link",         addr_t),		// TODO: ucontext_p
		("uc_mcsize",       size_t),
		("uc_mcontext",     mcontext_p),
		("__mcontext_data", inline(mcontext_p))
	]);
	value sockaddr_p: Type = cstruct("sockaddr", [
		("sa_len",    u8_t),
		("sa_family", u8_t),
		("sa_data",   bytes(14))
	]);
	value siginfo_p: Type = cstruct("siginfo", [
		("si_signo",  int_t),
		("si_errno",  int_t),
		("si_code",   int_t),
		("si_pid",    int_t),
		("si_uid",    int_t),
		("si_status", int_t),
		("si_addr",   addr_t),
		("si_value",  addr_t), // TODO: union of int and void*
		("si_band",   long),
		("__pad",     bytes(28))
	]);
	value itimerval_p: Type = cstruct("itimerval", [
		("it_interval", inline(timeval_p)),
		("it_value",    inline(timeval_p))
	]);
	value rlimit_p: Type = cstruct("rlimit", [
		("rlim_cur", u64_t),
		("rlim_max", u64_t)
	]);
	value rusage_p: Type = cstruct("rusage", [
		("ru_utime",   inline(timeval_p)),
		("ru_stime",   inline(timeval_p)),
		("ru_maxrss",  long),
		("ru_ixrss",   long),
		("ru_idrss",   long),
		("ru_isrss",   long),
		("ru_minflt",  long),
		("ru_majflt",  long),
		("ru_nswap",   long),
		("ru_inblock", long),
		("ru_oublock", long),
		("ru_msgsnd",  long),
		("ru_msgrcv",  long),
		("ru_nsignal", long),
		("ru_nvcsw",   long),
		("ru_nivcsw",  long)
	]);
	value pollfd_p: Type = cstruct("pollfd", [
		("fd",      int_t),
		("events",  i16_t),
		("revents", i16_t)
	]);
	value iovec_p: Type = cstruct("iovec", [
		("iov_base", addr_t),
		("iov_len",  size_t)
	]);
	value kevent_p: Type = cstruct("kevent", [
		("ident",  int_p),
		("filter", i16_t),
		("flags",  u16_t),
		("fflags", u32_t),
		("data",   int_p),
		("udata",  addr_t)
	]);
	value kevent64_s_p: Type = cstruct("kevent64_s", [
		("ident",  u64_t),
		("filte",  i16_t),
		("flags",  u16_t),
		("fflags", u32_t),
		("data",   i64_t),
		("udata",  u64_t),
		("ext1",   u64_t),
		("ext2",   u64_t)
	]);
	value attrlist_p: Type = cstruct("", [
		("bitmapcount", u16_t),
		("reserved",    u16_t),
		("commonattr",  attrgroup_t),
		("volattr",     attrgroup_t),
		("dirattr",     attrgroup_t),
		("fileattr",    attrgroup_t),
		("forkattr",    attrgroup_t)
	]);
	value sembuf_p: Type = cstruct("sembuf", [
		("sem_num", u16_t),
		("sem_op",  i16_t),
		("sem_flg", i16_t)
	]);
	value fsobj_id_p: Type = cstruct("fsobj_id", [
		("fid_objno", u32_t),
		("fid_generation", u32_t)
	]);
	value fsid_p: Type = cstruct("fsid", [
		("val1", int_t),
		("val2", int_t)
	]);
	value statfs_p: Type = cstruct("statfs", [
		("f_otype",       i16_t),
		("f_oflags",      i16_t),
		("f_bsize",       long),
		("f_iosize",      long),
		("f_blocks",      long),
		("f_bfree",       long),
		("f_bavail",      long),
		("f_files",       long),
		("f_ffree",       long),
		("f_fsid",        inline(fsid_p)),
		("f_owner",       int_t),
		("f_reserved1",   i16_t),
		("f_type",        i16_t),
		("f_flags",       long),
		("f_reserved2",   bytes(8)),
		("f_fstypename",  bytes(15)),
		("f_mntonname",   bytes(1024)),
		("f_mntfromname", bytes(1024)),
		("f_reserved3", u8_t),
		("f_reserved4", bytes(16))
	]);
	value statfs64_p: Type = cstruct("statfs64", [
		("f_bsize",       u32_t),
		("f_iosize",      i32_t),
		("f_blocks",      u64_t),
		("f_bfree",       u64_t),
		("f_bavail",      u64_t),
		("f_files",       u64_t),
		("f_ffree",       u64_t),
		("f_fsid",        inline(fsid_p)),
		("f_owner",       int_t),
		("f_type",        u32_t),
		("f_flags",       u32_t),
		("f_fssubtype",   u32_t),
		("f_fstypename",  bytes(16)),
		("f_mntonname",   bytes(1024)),
		("f_mntfromname", bytes(1024)),
		("f_reserved",    bytes(32))
	]);
	value vstat_p: Type = cstruct("vstat", [
		("vst_volid",     inline(fsid_p)),
		("vst_nodeid",    inline(fsobj_id_p)),
		("vst_vnodetype", u32_t),
		("vst_vnodetag",  u32_t),
		("vst_mode",      mode_t),
		("vst_nlink",     u16_t),
		("vst_uid",       int_t),
		("vst_gid",       int_t),
		("vst_dev",       u32_t),
		("vst_rdev",      u32_t),
		("vst_atimespec", inline(timespec_p)),
		("vst_mtimespec", inline(timespec_p)),
		("vst_ctimespec", inline(timespec_p)),
		("vst_filesize",  off_t),
		("vst_blocks",    i64_t),
		("vst_blksize",   u32_t),
		("vst_flags",     u32_t)
	]);
	value fhandle_p: Type = cstruct("fhandle", [
		("fh_len",  int_t),
		("fh_data", bytes(128))
	]);
	value eventreq_p: Type = cstruct("eventreq", [
		("er_type",      int_t),
		("er_handle",    int_t),
		("er_data",      addr_t),
		("er_rcnt",      int_t),
		("er_wcnt",      int_t),
		("er_ecnt",      int_t),
		("er_eventbits", int_t)
	]);
	value fssearchblock_p: Type = cstruct("fssearchblock", [
		("returnattrs",         attrlist_p),
		("returnbuffer",        addr_t),
		("returnbuffersize",    size_t),
		("maxmatches",          u_long),
		("timelimit",           inline(timeval_p)),
		("searchparams1",       addr_t),
		("sizeofsearchparams1", size_t),
		("searchparams2",       addr_t),
		("sizeofsearchparams2", size_t),
		("searchattrs",         inline(attrlist_p))
	]);
	value searchstate_p: Type = cstruct("searchstate", [
		("reserved", bytes(556))
	]);
	value ipc_perm_p: Type = cstruct("ipc_perm", [
		("uid",  int_t),
		("gid",  int_t),
		("cuid", int_t),
		("cgid", int_t),
		("mode", mode_t),
		("_seq", u16_t),
		("_key", key_t)
	]);
	value msqid_ds_p: Type = cstruct("msqid_ds", [
		("msg_perm",   inline(ipc_perm_p)),
		("msg_first",  i32_t),
		("msg_last",   i32_t),
		("msg_cbytes", long),
		("msg_qnum",   long),
		("msg_qbytes", long),
		("msg_lspid",  int_t),
		("msg_lrpid",  int_t),
		("msg_stime",  time_t),
		("msg_pad1",   i32_t),
		("msg_rtime",  time_t),
		("msg_pad2",   i32_t),
		("msg_ctime",  time_t),
		("msg_pad3",   i32_t),
		("msg_pad4",   bytes(12))
	]);
	value shmid_ds_p: Type = cstruct("shmid_ds", [
		("shm_perm",     inline(ipc_perm_p)),
		("shm_segsz",    int_t),
		("shm_lpid",     int_t),
		("shm_cpid",     int_t),
		("shm_nattch",   i16_t),
		("shm_atime",    time_t),
		("shm_dtime",    time_t),
		("shm_ctime",    time_t),
		("shm_internal", addr_t)
	]);
	value shared_file_mapping_np_p: Type = cstruct("shared_file_mapping_np", [
		("sfm_address", u64_t),
		("sfm_size", u64_t),
		("sfm_file_offset", u64_t),
		("sfm_max_prot", int_t),
		("sfm_init_prot", int_t)
	]);
	value sf_hdtr_p: Type = cstruct("sf_hdtr", [
		("headers",  iovec_p),
		("hdr_cnt",  int_t),
		("trailers", iovec_p),
		("trl_cnt",  int_t)
	]);
	value msghdr_p: Type = cstruct("msghdr", [
		("msg_name",       addr_t),
		("msg_namelen",    size_t),
		("msg_iov",        iovec_p),
		("msg_iovlen",     size_t),
		("msg_control",    addr_t),
		("msg_controllen", size_t),
		("msg_flags",      int_t)
	]);
	value posix_spawn_args_desc_p: Type;
	value auditinfo_addr_p: Type;
	value auditinfo_p: Type;
	value semun_t: Type;		// TODO: represents a union

	method inline(t: Type) -> Type {
		return null; // TODO
	}
	method bytes(i: int) -> Type {
		return null; // TODO
	}
	method ptr(t: Type) -> Type {
		return MachModule.PTR_32.create(false, List.new(t, null));
	}
	method cstruct(name: string, fields: Array<(string, Type)>) -> Type {
		var s = MachStruct_TypeCon.new(name, 32); // TODO: support 64-bit darwin
		for (i = 0; i < fields.length; i++) {
			var f = fields(i), offset = i; // TODO: compute correct offset
			s.addField(f.0, f.1, offset, false); // TODO: handle inline structs
		}
		return s.create(false, null);
	}

	field darwinType: Type; // type of the "Darwin" component

	new() {
		var cdecl = VstComponent.new(Token.new("<builtin>", "Darwin", 0, 0), null);
		var typeCon = V3Component_TypeCon.new(cdecl);
		darwinType = typeCon.create(false, null);
		cdecl.memberMap = Strings.newMap();

		const("STDIN", 0);
		const("STDOUT", 1);
		const("STDERR", 2);
		const("MAXPATHLEN", 1024);

		const("EPERM",		1); // Operation not permitted
		const("ENOENT",		2); // No such file or directory
		const("ESRCH",		3); // No such process
		const("EINTR",		4); // Interrupted system call
		const("EIO",		5); // Input/output error
		const("ENXIO",		6); // Device not configured
		const("E2BIG",		7); // Argument list too long
		const("ENOEXEC",	8); // Exec format error
		const("EBADF",		9); // Bad file descriptor
		const("ECHILD",		10); // No child processes
		const("EDEADLK",	11); // Resource deadlock avoided
		const("ENOMEM",		12); // Cannot allocate memory
		const("EACCES",		13); // Permission denied
		const("EFAULT",		14); // Bad address
		const("ENOTBLK",	15); // Block device required
		const("EBUSY",		16); // Device / Resource busy
		const("EEXIST",		17); // File exists
		const("EXDEV",		18); // Cross-device link
		const("ENODEV",		19); // Operation not supported by device
		const("ENOTDIR",	20); // Not a directory
		const("EISDIR",		21); // Is a directory
		const("EINVAL",		22); // Invalid argument
		const("ENFILE",		23); // Too many open files in system
		const("EMFILE",		24); // Too many open files
		const("ENOTTY",		25); // Inappropriate ioctl for device
		const("ETXTBSY",	26); // Text file busy
		const("EFBIG",		27); // File too large
		const("ENOSPC",		28); // No space left on device
		const("ESPIPE",		29); // Illegal seek
		const("EROFS",		30); // Read-only file system
		const("EMLINK",		31); // Too many links
		const("EPIPE",		32); // Broken pipe
		const("EDOM",		33); // Numerical argument out of domain
		const("ERANGE",		34); // Result too large
		var EAGAIN = 
		const("EAGAIN",		35); // Resource temporarily unavailable
		const("EWOULDBLOCK",	EAGAIN); // Operation would block
		const("EINPROGRESS",	36); // Operation now in progress
		const("EALREADY",	37); // Operation already in progress
		const("ENOTSOCK",	38); // Socket operation on non-socket
		const("EDESTADDRREQ",	39); // Destination address required
		const("EMSGSIZE",	40); // Message too long
		const("EPROTOTYPE",	41); // Protocol wrong type for socket
		const("ENOPROTOOPT",	42); // Protocol not available
		const("EPROTONOSUPPORT",43); // Protocol not supported
		const("ESOCKTNOSUPPORT",44); // Socket type not supported
		var ENOTSUP = 
		const("ENOTSUP",	45); // Operation not supported
		const("EOPNOTSUPP",	ENOTSUP); // Operation not supported on socket
		const("EPFNOSUPPORT",	46); // Protocol family not supported
		const("EAFNOSUPPORT",	47); // Address family not supported by protocol family
		const("EADDRINUSE",	48); // Address already in use
		const("EADDRNOTAVAIL",	49); // Can't assign requested address
		const("ENETDOWN",	50); // Network is down
		const("ENETUNREACH",	51); // Network is unreachable
		const("ENETRESET",	52); // Network dropped connection on reset
		const("ECONNABORTED",	53); // Software caused connection abort
		const("ECONNRESET",	54); // Connection reset by peer
		const("ENOBUFS",	55); // No buffer space available
		const("EISCONN",	56); // Socket is already connected
		const("ENOTCONN",	57); // Socket is not connected
		const("ESHUTDOWN",	58); // Can't send after socket shutdown
		const("ETOOMANYREFS",	59); // Too many references: can't splice
		const("ETIMEDOUT",	60); // Operation timed out
		const("ECONNREFUSED",	61); // Connection refused
		const("ELOOP",		62); // Too many levels of symbolic links
		const("ENAMETOOLONG",	63); // File name too long
		const("EHOSTDOWN",	64); // Host is down
		const("EHOSTUNREACH",	65); // No route to host
		const("ENOTEMPTY",	66); // Directory not empty
		const("EPROCLIM",	67); // Too many processes
		const("EUSERS",		68); // Too many users
		const("EDQUOT",		69); // Disc quota exceeded
		const("ESTALE",		70); // Stale NFS file handle
		const("EREMOTE",	71); // Too many levels of remote in path
		const("EBADRPC",	72); // RPC struct is bad
		const("ERPCMISMATCH",	73); // RPC version wrong
		const("EPROGUNAVAIL",	74); // RPC prog. not avail
		const("EPROGMISMATCH",	75); // Program version wrong
		const("EPROCUNAVAIL",	76); // Bad procedure for program
		const("ENOLCK",		77); // No locks available
		const("ENOSYS",		78); // Function not implemented
		const("EFTYPE",		79); // Inappropriate file type or format
		const("EAUTH",		80); // Authentication error
		const("ENEEDAUTH",	81); // Need authenticator
		const("EPWROFF",	82); // Device power is off
		const("EDEVERR",	83); // Device error, e.g. paper out
		const("EOVERFLOW",	84); // Value too large to be stored in data type
		const("EBADEXEC",	85); // Bad executable
		const("EBADARCH",	86); // Bad CPU type in executable
		const("ESHLIBVERS",	87); // Shared library version mismatch
		const("EBADMACHO",	88); // Malformed Macho file
		const("ECANCELED",	89); // Operation canceled
		const("EIDRM",		90); // Identifier removed
		const("ENOMSG",		91); // No message of desired type   
		const("EILSEQ",		92); // Illegal byte sequence
		const("ENOATTR",	93); // Attribute not found
		const("EBADMSG",	94); // Bad message
		const("EMULTIHOP",	95); // Reserved
		const("ENODATA",	96); // No message available on STREAM
		const("ENOLINK",	97); // Reserved
		const("ENOSR",		98); // No STREAM resources
		const("ENOSTR",		99); // Not a STREAM
		const("EPROTO",		100); // Protocol error
		const("ETIME",		101); // STREAM ioctl timeout
		const("EOPNOTSUPP",	102); // Operation not supported on socket
		const("ENOPOLICY",	103); // No such policy registered
		const("ELAST",		103); // Must be equal largest errno

		const("O_RDONLY",	0); // open read-only
		const("O_WRONLY",	1); // open read-only
		const("O_RDWR",		2); // open read-only
		const("O_NONBLOCK",	0x0004);  // no delay
		const("O_APPEND",	0x0008);  // set append mode
		const("O_SYNC",		0x0080);  // synch I/O file integrity
		const("O_SHLOCK",	0x0010);  // open with shared file lock
		const("O_EXLOCK",	0x0020);  // open with exclusive file lock
		const("O_ASYNC",	0x0040);  // signal pgrp when data ready
		const("O_NOFOLLOW",	0x0100);  // don't follow symlinks
		const("O_CREAT",	0x0200);  // create if nonexistant
		const("O_TRUNC",	0x0400);  // truncate to zero length
		const("O_EXCL",		0x0800);  // error if already exists
		const("O_EVTONLY",	0x8000);  // descriptor requested for event notifications only
		const("O_NOCTTY",	0x20000); // don't assign controlling terminal

		syscall(1,   void_t,"exit",     [int_t]);
//		syscall(2,   int_t, "fork",     ());
		syscall(3,   size_t,"read",     [int_t, addr_t, size_t]);
		syscall(4,   size_t,"write",    [int_t, addr_t, size_t]);
		syscall(5,   int_t, "open",     [str_t, int_t, int_t]);
		syscall(6,   int_t, "close",    [int_t]);
//		syscall(7,   int_t, "wait4",    [int_t, addr_t, int_t, addr_t]);
//		syscall(9,   int_t, "link",     [addr_t, addr_t]);
//		syscall(10,  int_t, "unlink",   [addr_t]);
//		syscall(12,  int_t, "chdir",    [addr_t]);
//		syscall(13,  int_t, "fchdir",   [int_t]);
//		syscall(14,  int_t, "mknod",    [addr_t, int_t, int_t]);
		syscall(15,  int_t, "chmod",    [str_t, int_t]);
//		syscall(16,  int_t, "chown",    [addr_t, int_t, int_t]);
//		syscall(18,  int_t, "getfsstat", [addr_t, int_t, int_t]);
//		syscall(20,  int_t, "getpid",   []);
//		syscall(23,  int_t, "setuid",   [int_t]);
//		syscall(24,  int_t, "getuid",   []);
//		syscall(25,  int_t, "geteuid",  []);
//		syscall(26,  int_t, "ptrace",   [int_t, pid_t, addr_t, int_t]);
//		syscall(27,  int_t, "recvmsg",  [int_t, msghdr_p, int_t]);
//		syscall(28,  int_t, "sendmsg",  [int_t, addr_t, int_t]);
//		syscall(29,  int_t, "recvfrom", [int_t, addr_t, size_t, int_t, sockaddr_p, int_p]);
//		syscall(30,  int_t, "accept",   [int_t, addr_t, int_p]);
//		syscall(31,  int_t, "getpeername", [int_t, addr_t, int_p]);
//		syscall(32,  int_t, "getsockname", [int_t, addr_t, int_p]);
//		syscall(33,  int_t, "access",   [addr_t, int_t]);
//		syscall(34,  int_t, "chflags",  [str_t, int_t]);
//		syscall(35,  int_t, "fchflags", [int_t, int_t]);
//		syscall(36,  int_t, "sync",     []);
//		syscall(37,  int_t, "kill",     [int_t, int_t, int_t]);
//		syscall(39,  int_t, "getppid",  []);
//		syscall(41,  int_t, "dup",      [uint_t]);
//		syscall(42,  int_t, "pipe",     []);
//		syscall(43,  int_t, "getegid",  []);
//		syscall(44,  int_t, "profil",   [addr_t, size_t, uint_t, uint_t]);
		syscall(46,  int_t, "sigaction", [int_t, sigaction_p, sigaction_p]);
//		syscall(47,  int_t, "getgid",   []);
		syscall(48,  int_t, "sigprocmask", [int_t, addr_t, addr_t]);
//		syscall(49,  int_t, "getlogin", [str_t, uint_t]);
//		syscall(50,  int_t, "setlogin", [str_t]);
//		syscall(51,  int_t, "acct",     [str_t]);
		syscall(52,  int_t, "sigpending", [sigset_p]);
//		syscall(53,  int_t, "sigaltstack", [sigaltstack_p, sigaltstack_p]);
//		syscall(54,  int_t, "ioctl",    [int_t, size_t, addr_t]);
//		syscall(55,  int_t, "reboot",   [int_t, str_t]);
//		syscall(56,  int_t, "revoke",   [str_t]);
//		syscall(57,  int_t, "symlink",  [str_t, str_t]);
//		syscall(58,  int_t, "readlink", [str_t, str_t, int_t]);
//		syscall(59,  int_t, "execve",   [str_t, addr_t, addr_t]);
//		syscall(60,  int_t, "umask",    [int_t]);
//		syscall(61,  int_t, "chroot",   [addr_t]);
//		syscall(65,  int_t, "msync",    [addr_t, size_t, int_t]);
//		syscall(66,  int_t, "vfork",    []);
//		syscall(73,  int_t, "munmap",   [addr_t, size_t]);
//		syscall(74,  int_t, "mprotect", [addr_t, size_t, int_t]);
//		syscall(75,  int_t, "madvise",  [addr_t, size_t, int_t]);
//		syscall(78,  int_t, "mincore",  [addr_t, size_t, addr_t]);
//		syscall(79,  int_t, "getgroups", [uint_t, int_p]);
//		syscall(80,  int_t, "setgroups", [uint_t, int_p]);
//		syscall(81,  int_t, "getpgrp",  []);
//		syscall(82,  int_t, "setpgid",  [int_t, int_t]);
//		syscall(83,  int_t, "setitimer",    [uint_t, itimerval_p, itimerval_p]);
//		syscall(85,  int_t, "swapon",       []);
//		syscall(86,  int_t, "getitimer",    [uint_t, itimerval_p]);
//		syscall(89,  int_t, "getdtablesize", []);
//		syscall(90,  int_t, "dup2",         [uint_t, uint_t]);
		syscall(92,  int_t, "fcntl",        [int_t, int_t, uint_t]);
//		syscall(93,  int_t, "select",       [int_t, int_p, int_p, int_p, timeval_p]);
//		syscall(95,  int_t, "fsync",        [int_t]);
//		syscall(96,  int_t, "setpriority",  [int_t, id_t, int_t]);
//		syscall(97,  int_t, "socket",       [int_t, int_t, int_t]);
//		syscall(98,  int_t, "connect",      [int_t, addr_t, int_t]);
//		syscall(100, int_t, "getpriority",  [int_t, id_t]);
//		syscall(104, int_t, "bind",         [int_t, addr_t, int_t]);
//		syscall(105, int_t, "setsockopt",   [int_t, int_t, int_t, addr_t, int_t]);
//		syscall(106, int_t, "listen",       [int_t, int_t]);
//		syscall(111, int_t, "sigsuspend",   [sigset_t]);
		syscall(116, int_t, "gettimeofday", [timeval_p, timezone_p]);
//		syscall(117, int_t, "getrusage",    [int_t, rusage_p]);
//		syscall(118, int_t, "getsockopt",   [int_t, int_t, int_t, addr_t, int_p]);
//		syscall(120, size_t, "readv",       [int_t, iovec_p, uint_t]);
//		syscall(121, size_t, "writev",      [int_t, iovec_p, uint_t]);
//		syscall(122, int_t, "settimeofday", [timeval_p, timezone_p]);
//		syscall(123, int_t, "fchown",       [int_t, int_t, int_t]);
		syscall(124, int_t, "fchmod",       [int_t, int_t]);
//		syscall(126, int_t, "setreuid",     [int_t, int_t]);
//		syscall(127, int_t, "setregid",     [int_t, int_t]);
//		syscall(128, int_t, "rename",       [str_t, str_t]);
//		syscall(131, int_t, "flock",        [int_t, int_t]);
//		syscall(132, int_t, "mkfifo",       [str_t, int_t]);
//		syscall(133, int_t, "sendto",       [int_t, addr_t, size_t, int_t, addr_t, int_t]);
//		syscall(134, int_t, "shutdown",     [int_t, int_t]);
//		syscall(135, int_t, "socketpair",   [int_t, int_t, int_t, int_p]);
		syscall(136, int_t, "mkdir",        [str_t, int_t]);
		syscall(137, int_t, "rmdir",        [str_t]);
//		syscall(138, int_t, "utimes",       [str_t, timeval_p]);
//		syscall(139, int_t, "futimes",      [int_t, timeval_p]);
//		syscall(140, int_t, "adjtime",      [timeval_p, timeval_p]);
//		syscall(142, int_t, "gethostuuid",  [str_t, timespec_p]);
//		syscall(147, int_t, "setsid",       []);
//		syscall(151, int_t, "getpgid",      [pid_t]);
//		syscall(152, int_t, "setprivexec",  [int_t]);
//		syscall(153, size_t, "pread",   [int_t, addr_t, size_t, off_t]);
//		syscall(154, size_t, "pwrite",  [int_t, addr_t, size_t, off_t]);
//		syscall(155, int_t, "nfssvc",   [int_t, addr_t]);
//		syscall(157, int_t, "statfs",   [str_t, statfs_p]);
//		syscall(158, int_t, "fstatfs",  [int_t, statfs_p]);
//		syscall(159, int_t, "unmount",  [str_t, int_t]);
//		syscall(161, int_t, "getfh",    [str_t, fhandle_p]);
//		syscall(165, int_t, "quotactl", [str_t, int_t, int_t, addr_t]);
//		syscall(167, int_t, "mount",    [str_t, str_t, int_t, addr_t]);
//		syscall(169, int_t, "csops",    [pid_t, uint_t, addr_t, size_t]);
//		syscall(173, int_t, "waitid",   [idtype_t, id_t, siginfo_p, int_t]);
//		syscall(176, int_t, "add_profil", [addr_t, size_t, u_long, uint_t]);
//		syscall(180, int_t, "kdebug_trace", [int_t, int_t, int_t, int_t, int_t, int_t]);
//		syscall(181, int_t, "setgid",    [int_t]);
//		syscall(182, int_t, "setegid",   [int_t]);
//		syscall(183, int_t, "seteuid",   [int_t]);
		syscall(184, int_t, "sigreturn", [ucontext_p, int_t]);
//		syscall(185, int_t, "chud",      [u64_t, u64_t, u64_t, u64_t, u64_t, u64_t]);
//		syscall(187, int_t, "fdatasync", [int_t]);
		syscall(188, int_t, "stat",     [str_t, addr_t]);
		syscall(189, int_t, "fstat",    [int_t, addr_t]);
//		syscall(190, int_t, "lstat",    [str_t, addr_t]);
//		syscall(191, int_t, "pathconf", [str_t, int_t]);
//		syscall(192, int_t, "fpathconf", [int_t, int_t]);
//		syscall(194, int_t, "getrlimit", [uint_t, rlimit_p]);
//		syscall(195, int_t, "setrlimit", [uint_t, rlimit_p]);
//		syscall(196, int_t, "getdirentries", [int_t, str_t, uint_t, addr_t]);
//		syscall(197, addr_t, "mmap",    [addr_t, size_t, int_t, int_t, int_t, off_t]);
		syscall(199, off_t, "lseek",    [int_t, off_t, int_t, int_t]);
//		syscall(200, int_t, "truncate", [str_t, off_t]);
//		syscall(201, int_t, "ftruncate", [int_t, off_t]);
//		syscall(202, int_t, "__sysctl", [int_p, uint_t, addr_t, int_p, addr_t, size_t]);
//		syscall(203, int_t, "mlock", [addr_t, size_t]);
//		syscall(204, int_t, "munlock", [addr_t, size_t]);
//		syscall(205, int_t, "undelete", [str_t]);
//		syscall(206, int_t, "ATsocket", [int_t]);
//		syscall(207, int_t, "ATgetmsg", [int_t, addr_t, addr_t, int_p]);
//		syscall(208, int_t, "ATputmsg", [int_t, addr_t, addr_t, int_t]);
//		syscall(209, int_t, "ATPsndreq", [int_t, addr_t, int_t, int_t]);
//		syscall(210, int_t, "ATPsndrsp", [int_t, addr_t, int_t, int_t]);
//		syscall(211, int_t, "ATPgetreq", [int_t, addr_t, int_t]);
//		syscall(212, int_t, "ATPgetrsp", [int_t, addr_t]);
//		syscall(216, int_t, "mkcomplex", [str_t, mode_t, u_long]);
//		syscall(217, int_t, "statv", [str_t, vstat_p]);
//		syscall(218, int_t, "lstatv", [str_t, vstat_p]);
//		syscall(219, int_t, "fstatv", [int_t, vstat_p]);
//		syscall(220, int_t, "getattrlist", [str_t, attrlist_p, addr_t, size_t, u_long]);
//		syscall(221, int_t, "setattrlist", [str_t, attrlist_p, addr_t, size_t, u_long]);
//		syscall(222, int_t, "getdirentriesattr", [int_t, attrlist_p, addr_t, size_t, long_p, long_p, long_p, u_long]);
//		syscall(223, int_t, "exchangedata", [str_t, str_t, u_long]);
//		syscall(225, int_t, "searchfs", [str_t, fssearchblock_p, u32_p, u32_t, u32_t, searchstate_p]);
//		syscall(226, int_t, "delete", [str_t]);
//		syscall(227, int_t, "copyfile", [str_t, str_t, int_t, int_t]);
//		syscall(228, int_t, "fgetattrlist", [int_t, attrlist_p, addr_t, size_t, u_long]);
//		syscall(229, int_t, "fsetattrlist", [int_t, attrlist_p, addr_t, size_t, u_long]);
//		syscall(230, int_t, "poll", [pollfd_p, uint_t, int_t]);
//		syscall(231, int_t, "watchevent", [eventreq_p, int_t]);
//		syscall(232, int_t, "waitevent",  [eventreq_p, timeval_p]);
//		syscall(233, int_t, "modwatch",   [eventreq_p, int_t]);
//		syscall(234, size_t, "getxattr",  [str_t, addr_t, addr_t, size_t, u32_t, int_t]);
//		syscall(235, size_t, "fgetxattr", [int_t, addr_t, addr_t, size_t, u32_t, int_t]);
//		syscall(236, int_t, "setxattr",   [str_t, addr_t, addr_t, size_t, u32_t, int_t]);
//		syscall(237, int_t, "fsetxattr",  [int_t, addr_t, addr_t, size_t, u32_t, int_t]);
//		syscall(238, int_t, "removexattr", [str_t, addr_t, int_t]);
//		syscall(239, int_t, "fremovexattr", [int_t, addr_t, int_t]);
//		syscall(240, size_t, "listxattr",   [str_t, addr_t, size_t, int_t]);
//		syscall(241, size_t, "flistxattr",  [int_t, addr_t, size_t, int_t]);
//		syscall(242, int_t, "fsctl",       [str_t, u_long, addr_t, uint_t]);
//		syscall(243, int_t, "initgroups",  [uint_t, int_p, int_t]);
//		syscall(244, int_t, "posix_spawn", [int_p, str_t, posix_spawn_args_desc_p, addr_t, addr_t]);
//		syscall(245, int_t, "ffsctl",  [int_t, u_long, addr_t, uint_t]);
//		syscall(247, int_t, "nfsclnt", [int_t, addr_t]);
//		syscall(248, int_t, "fhopen",  [fhandle_p, int_t]);
//		syscall(250, int_t, "minherit", [addr_t, size_t, int_t]);
//		syscall(251, int_t, "semsys",  [uint_t, int_t, int_t, int_t, int_t]);
//		syscall(252, int_t, "msgsys",  [uint_t, int_t, int_t, int_t, int_t]);
//		syscall(253, int_t, "shmsys",  [uint_t, int_t, int_t, int_t]);
//		syscall(254, int_t, "semctl",  [int_t, int_t, int_t, semun_t]);
//		syscall(255, int_t, "semget",  [key_t, int_t, int_t]);
//		syscall(256, int_t, "semop",   [int_t, sembuf_p, int_t]);
//		syscall(258, int_t, "msgctl",  [int_t, int_t, msqid_ds_p]);
//		syscall(259, int_t, "msgget",  [key_t, int_t]);
//		syscall(260, int_t, "msgsnd",  [int_t, addr_t, size_t, int_t]);
//		syscall(261, size_t, "msgrcv", [int_t, addr_t, size_t, long, int_t]);
//		syscall(262, addr_t, "shmat",  [int_t, addr_t, int_t]);
//		syscall(263, int_t, "shmctl",  [int_t, int_t, shmid_ds_p]);
//		syscall(264, int_t, "shmdt",   [addr_t]);
//		syscall(265, int_t, "shmget",  [key_t, size_t, int_t]);
//		syscall(266, int_t, "shm_open",   [str_t, int_t, int_t]);
//		syscall(267, int_t, "shm_unlink", [str_t]);
//		syscall(268, addr_t, "sem_open",  [str_t, int_t, int_t, int_t]);
//		syscall(269, int_t, "sem_close",  [sem_p]);
//		syscall(270, int_t, "sem_unlink", [str_t]);
//		syscall(271, int_t, "sem_wait",   [sem_p]);
//		syscall(272, int_t, "sem_trywait", [sem_p]);
//		syscall(273, int_t, "sem_post", [sem_p]);
//		syscall(274, int_t, "sem_getvalue", [sem_p, int_p]);
//		syscall(275, int_t, "sem_init", [sem_p, int_t, uint_t]);
//		syscall(276, int_t, "sem_destroy", [sem_p]);
//		syscall(277, int_t, "open_extended", [str_t, int_t, int_t, int_t, int_t, addr_t]);
//		syscall(278, int_t, "umask_extended", [int_t, addr_t]);
//		syscall(279, int_t, "stat_extended", [str_t, addr_t, addr_t, addr_t]);
//		syscall(280, int_t, "lstat_extended", [str_t, addr_t, addr_t, addr_t]);
//		syscall(281, int_t, "fstat_extended", [int_t, addr_t, addr_t, addr_t]);
//		syscall(282, int_t, "chmod_extended", [str_t, int_t, int_t, int_t, addr_t]);
//		syscall(283, int_t, "fchmod_extended", [int_t, int_t, int_t, int_t, addr_t]);
//		syscall(284, int_t, "access_extended", [addr_t, size_t, addr_t, int_t]);
//		syscall(285, int_t, "settid", [int_t, int_t]);
//		syscall(286, int_t, "gettid", [int_p, int_p]);
//		syscall(287, int_t, "setsgroups", [int_t, addr_t]);
//		syscall(288, int_t, "getsgroups", [addr_t, addr_t]);
//		syscall(289, int_t, "setwgroups", [int_t, addr_t]);
//		syscall(290, int_t, "getwgroups", [addr_t, addr_t]);
//		syscall(291, int_t, "mkfifo_extended", [str_t, int_t, int_t, int_t, addr_t]);
//		syscall(292, int_t, "mkdir_extended", [str_t, int_t, int_t, int_t, addr_t]);
//		syscall(293, int_t, "identitysvc", [int_t, addr_t]);
//		syscall(294, int_t, "shared_region_check_np", [addr_t]);
//		syscall(295, int_t, "shared_region_map_np", [int_t, u32_t, shared_file_mapping_np_p]);
//		syscall(296, int_t, "vm_pressure_monitor", [int_t, int_t, u32_p]);
//		syscall(297, u32_t, "psynch_rw_longrdlock", [addr_t, u32_t, u32_t, u32_t, int_t]);
//		syscall(298, u32_t, "psynch_rw_yieldwrlock", [addr_t, u32_t, u32_t, u32_t, int_t]);
//		syscall(299, int_t, "psynch_rw_downgrade", [addr_t, u32_t, u32_t, u32_t, int_t]);
//		syscall(300, u32_t, "psynch_rw_upgrade", [addr_t, u32_t, u32_t, u32_t, int_t]);
//		syscall(301, u32_t, "psynch_mutexwait", [addr_t,  u32_t, u32_t , u64_t, u32_t]);
//		syscall(302, u32_t, "psynch_mutexdrop", [addr_t,  u32_t, u32_t , u64_t, u32_t]);
//		syscall(303, int_t, "psynch_cvbroad", [addr_t, u32_t, u32_t, addr_t,  u32_t, u32_t, u64_t, u32_t]);
//		syscall(304, int_t, "psynch_cvsignal", [addr_t, u32_t, u32_t, addr_t,  u32_t, u32_t, int_t, u32_t]);
//		syscall(305, u32_t, "psynch_cvwait", [addr_t, u32_t, u32_t, addr_t,  u32_t, u32_t, u64_t, u64_t]);
//		syscall(306, u32_t, "psynch_rw_rdlock", [addr_t, u32_t, u32_t, u32_t, int_t]);
//		syscall(307, u32_t, "psynch_rw_wrlock", [addr_t, u32_t, u32_t, u32_t, int_t]);
//		syscall(308, u32_t, "psynch_rw_unlock", [addr_t, u32_t, u32_t, u32_t, int_t]);
//		syscall(309, u32_t, "psynch_rw_unlock2", [addr_t, u32_t, u32_t, u32_t]);
//		syscall(310, int_t, "getsid", [pid_t]);
//		syscall(311, int_t, "settid_with_pid", [pid_t, int_t]);
//		syscall(313, int_t, "aio_fsync", [int_t, addr_t]);
//		syscall(314, size_t, "aio_return", [addr_t]);
//		syscall(315, int_t, "aio_suspend", [addr_t, int_t, addr_t]);
//		syscall(316, int_t, "aio_cancel", [int_t, addr_t]);
//		syscall(317, int_t, "aio_error", [addr_t]);
//		syscall(318, int_t, "aio_read",  [addr_t]);
//		syscall(319, int_t, "aio_write", [addr_t]);
//		syscall(320, int_t, "lio_listio", [int_t, addr_t, int_t, addr_t]);
//		syscall(322, int_t, "iopolicysys", [int_t, addr_t]);
//		syscall(324, int_t, "mlockall", [int_t]);
//		syscall(325, int_t, "munlockall", [int_t]);
//		syscall(327, int_t, "issetugid", []);
//		syscall(328, int_t, "__pthread_kill", [int_t, int_t]);
//		syscall(329, int_t, "__pthread_sigmask", [int_t, addr_t, addr_t]);
//		syscall(330, int_t, "__sigwait", [addr_t, addr_t]);
//		syscall(331, int_t, "__disable_threadsignal", [int_t]);
//		syscall(332, int_t, "__pthread_markcancel", [int_t]);
//		syscall(333, int_t, "__pthread_canceled", [int_t]);
//		syscall(334, int_t, "__semwait_signal", [int_t, int_t, int_t, int_t, i64_t, i32_t]);
//		syscall(336, int_t, "proc_info", [i32_t, i32_t, u32_t, u64_t, addr_t, i32_t]);
//		syscall(337, int_t, "sendfile", [int_t, int_t, off_t, off_p, sf_hdtr_p, int_t]);
//		syscall(338, int_t, "stat64", [str_t, addr_t]);
//		syscall(339, int_t, "fstat64", [int_t, addr_t]);
//		syscall(340, int_t, "lstat64", [str_t, addr_t]);
//		syscall(341, int_t, "stat64_extended", [str_t, addr_t, addr_t, addr_t]);
//		syscall(342, int_t, "lstat64_extended", [str_t, addr_t, addr_t, addr_t]);
//		syscall(343, int_t, "fstat64_extended", [int_t, addr_t, addr_t, addr_t]);
//		syscall(344, size_t, "getdirentries64", [int_t, addr_t, size_t, off_p]);
//		syscall(345, int_t, "statfs64", [str_t, statfs64_p]);
//		syscall(346, int_t, "fstatfs64", [int_t, statfs64_p]);
//		syscall(347, int_t, "getfsstat64", [addr_t, int_t, int_t]);
//		syscall(348, int_t, "__pthread_chdir", [str_t]);
//		syscall(349, int_t, "__pthread_fchdir", [int_t]);
//		syscall(350, int_t, "audit", [addr_t, int_t]);
//		syscall(351, int_t, "auditon", [int_t, addr_t, int_t]);
//		syscall(353, int_t, "getauid", [au_id_p]);
//		syscall(354, int_t, "setauid", [au_id_p]);
//		syscall(355, int_t, "getaudit", [auditinfo_p]);
//		syscall(356, int_t, "setaudit", [auditinfo_p]);
//		syscall(357, int_t, "getaudit_addr", [auditinfo_addr_p, int_t]);
//		syscall(358, int_t, "setaudit_addr", [auditinfo_addr_p, int_t]);
//		syscall(359, int_t, "auditctl", [str_t]);
//		syscall(360, addr_t, "bsdthread_create", [addr_t, addr_t, addr_t, addr_t, u32_t]);
//		syscall(361, int_t, "bsdthread_terminate", [addr_t, size_t, u32_t, u32_t]);
//		syscall(362, int_t, "kqueue", []);
//		syscall(363, int_t, "kevent", [int_t, kevent_p, int_t, kevent_p, int_t, timespec_p]);
//		syscall(364, int_t, "lchown", [str_t, int_t, int_t]);
//		syscall(365, int_t, "stack_snapshot", [pid_t, addr_t, u32_t, u32_t, u32_t]);
//		syscall(366, int_t, "bsdthread_register", [addr_t, addr_t, int_t, addr_t, addr_t, u64_t]);
//		syscall(367, int_t, "workq_open", []);
//		syscall(368, int_t, "workq_kernreturn", [int_t, addr_t, int_t, int_t]);
//		syscall(369, int_t, "kevent64", [int_t, kevent64_s_p, int_t, kevent64_s_p, int_t, uint_t, timespec_p]);
//		syscall(370, int_t, "__old_semwait_signal", [int_t, int_t, int_t, int_t, timespec_p]);
//		syscall(371, int_t, "__old_semwait_signal_nocancel", [int_t, int_t, int_t, int_t, timespec_p]);
//		syscall(372, u64_t, "thread_selfid",  []);
//		syscall(380, int_t, "__mac_execve",   [str_t, addr_t, addr_t, mac_p]);
//		syscall(381, int_t, "__mac_syscall",  [str_t, int_t, addr_t]);
//		syscall(382, int_t, "__mac_get_file", [str_t, mac_p]);
//		syscall(383, int_t, "__mac_set_file", [str_t, mac_p]);
//		syscall(384, int_t, "__mac_get_link", [str_t, mac_p]);
//		syscall(385, int_t, "__mac_set_link", [str_t, mac_p]);
//		syscall(386, int_t, "__mac_get_proc", [mac_p]);
//		syscall(387, int_t, "__mac_set_proc", [mac_p]);
//		syscall(388, int_t, "__mac_get_fd",   [int_t, mac_p]);
//		syscall(389, int_t, "__mac_set_fd",   [int_t, mac_p]);
//		syscall(390, int_t, "__mac_get_pid",  [pid_t, mac_p]);
//		syscall(391, int_t, "__mac_get_lcid", [pid_t, mac_p]);
//		syscall(392, int_t, "__mac_get_lctx", [mac_p]);
//		syscall(393, int_t, "__mac_set_lctx", [mac_p]);
//		syscall(394, int_t, "setlcid", [pid_t, pid_t]);
//		syscall(395, int_t, "getlcid", [pid_t]);
//		syscall(396, size_t, "read_nocancel",   [int_t, addr_t, size_t]);
//		syscall(397, size_t, "write_nocancel",  [int_t, addr_t, size_t]);
//		syscall(398, int_t, "open_nocancel",    [str_t, int_t, int_t]);
//		syscall(399, int_t, "close_nocancel",   [int_t]);
//		syscall(400, int_t, "wait4_nocancel",   [int_t, addr_t, int_t, addr_t]);
//		syscall(401, int_t, "recvmsg_nocancel", [int_t, msghdr_p, int_t]);
//		syscall(402, int_t, "sendmsg_nocancel", [int_t, addr_t, int_t]);
//		syscall(403, int_t, "recvfrom_nocancel", [int_t, addr_t, size_t, int_t, sockaddr_p, int_p]);
//		syscall(404, int_t, "accept_nocancel", [int_t, addr_t, int_p]);
//		syscall(405, int_t, "msync_nocancel",  [addr_t, size_t, int_t]);
//		syscall(406, int_t, "fcntl_nocancel",  [int_t, int_t, int_t]);
//		syscall(407, int_t, "select_nocancel", [int_t, int_p, int_p, int_p, timeval_p]);
//		syscall(408, int_t, "fsync_nocancel",  [int_t]);
//		syscall(409, int_t, "connect_nocancel", [int_t, addr_t, int_t]);
//		syscall(410, int_t, "sigsuspend_nocancel", [sigset_t]);
//		syscall(411, size_t, "readv_nocancel",  [int_t, iovec_p, uint_t]);
//		syscall(412, size_t, "writev_nocancel", [int_t, iovec_p, uint_t]);
//		syscall(413, int_t, "sendto_nocancel",  [int_t, addr_t, size_t, int_t, addr_t, int_t]);
//		syscall(414, size_t, "pread_nocancel",  [int_t, addr_t, size_t, off_t]);
//		syscall(415, size_t, "pwrite_nocancel", [int_t, addr_t, size_t, off_t]);
//		syscall(416, int_t, "waitid_nocancel",  [idtype_t, id_t, siginfo_p, int_t]);
//		syscall(417, int_t, "poll_nocancel",    [pollfd_p, uint_t, int_t]);
//		syscall(418, int_t, "msgsnd_nocancel",  [int_t, addr_t, size_t, int_t]);
//		syscall(419, size_t, "msgrcv_nocancel", [int_t, addr_t, size_t, int_t, int_t]);
//		syscall(420, int_t, "sem_wait_nocancel", [sem_p]);
//		syscall(421, int_t, "aio_suspend_nocancel", [addr_t, int_t, addr_t]);
//		syscall(422, int_t, "__sigwait_nocancel", [addr_t, addr_t]);
//		syscall(423, int_t, "__semwait_signal_nocancel", [int_t, int_t, int_t, int_t, i64_t, int_t]);
//		syscall(424, int_t, "__mac_mount", [str_t, str_t, int_t, addr_t, mac_p]);
//		syscall(425, int_t, "__mac_get_mount", [str_t, mac_p]);
//		syscall(426, int_t, "__mac_getfsstat", [addr_t, int_t, addr_t, int_t, int_t]);
//		syscall(427, size_t, "fsgetpath", [addr_t, size_t, addr_t, u64_t]);
//		syscall(428, mach_port_name_t, "audit_session_self", []);
//		syscall(429, int_t, "audit_session_join", [mach_port_name_t]);
//		syscall(430, int_t, "pid_suspend", [int_t]);
//		syscall(431, int_t, "pid_resume", [int_t]);
//		syscall(432, int_t, "fileport_makeport", [int_t, addr_t]);
//		syscall(433, int_t, "fileport_makefd", [mach_port_name_t]);

	}
	method syscall<T>(num: int, returnType: Type, name: string, paramTypes: Array<Type>) {
		V3Op.registerOp(darwinType, name, MachOp.newMachSystemOp(num, paramTypes, returnType));
	}
	method const(name: string, val: int) -> int {
		// TODO
		return val;
	}
	method install(compiler: Compiler) {
		compiler.prog.typeEnv.store("Darwin", darwinType.typeCon);
	}
}
