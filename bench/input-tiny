// Copyright (c) 2010 Ben L. Titzer.
// Please see the file "license.txt" for license terms.

class V3ProgramNormalizer {
	value NO_TYPES: Array<Type> = [];
	value NO_NESTED: Array<V3TypeNorm> = [];
	value NO_OFFSETS: Array<int> = [];

	value compiler: Compiler;
	value prog: Program;
	value rma: RMAnalyzer;
	value recordMap: PartialMap<Record, Array<Val>> = V3.newRecordMap();
	value normMap: PartialMap<Type, V3TypeNorm> = TypeUtil.newTypeMap();

	field compRecords: List<(Record, Record)>;
	field voidNorm: V3TypeNorm;
	field opnorm: V3OpDelegateNormalizer;

	new(compiler, prog, rma) {
		voidNorm = V3TypeNorm.new(Void.TYPE, NO_TYPES, NO_NESTED, NO_OFFSETS);
		opnorm = V3OpDelegateNormalizer.new(this);
	}

	method normalizeIrClass(t: Type, rmaType: RmaType) {
		if (rmaType.origClass == null) return ();
		if (rmaType.classNorm != null) return ();
		// build super class first
		local s = rmaType.superInfo;
		local sc: IrClass, firstField = 0;
		if (s != null) {
			if (s.classNorm == null) normalizeIrClass(s.origType, s);
			sc = s.classNorm;
			firstField = s.fields.length;
		}
		// create a new builder (which adds super members)
		local b = IrClassBuilder.new(t, sc);
		local f = firstField;
		while (f < rmaType.fields.length) {
			normalizeRmaField(b, rmaType.fields(f));
			f = f + 1;
		}

		local m = 0;
		while (m < rmaType.methods.length) {
			normalizeRmaMethod(b, s, rmaType.methods(m));
			m = m + 1;
		}
		local ic = b.build();
		if (rmaType.isAllocated) ic.setFlag(IrUtil.C_ALLOCATED);
		if (rmaType.isInHeap) ic.setFlag(IrUtil.C_HEAP);
		rma.newIr.setIrClass(t, ic);
		rmaType.classNorm = ic;
	}
	method normalizeRmaField(b: IrClassBuilder, rm: RmaField) {
		if (rm == null || !rm.isRead) return (); // remove write-only fields
		local f = rm.origMember.asField();
		local fieldType = rm.origMember.getFieldType();
		local source = IrField.!(rm.origMember.member).source;
		local tne = normalizeType(fieldType).sub;
		local i = 0, complex = tne.length > 1, fa = Array<IrField>.new(tne.length);
		while (i < tne.length) {
			local nf = IrField.new(tne(i));
			nf.source = source;
			if (complex) nf.setFlag(IrUtil.F_NORM);
			if (!rm.isWritten) nf.setFlag(IrUtil.F_VALUE);
			fa(i) = nf;
			b.addIrField(nf);
			i = i + 1;
		}
		rm.fieldNorm = fa;
	}
	method normalizeRmaMethod(b: IrClassBuilder, superInfo: RmaType, list: List<RmaMethod>) {
		while (list != null) {
			local m = list.head;
			if (m.methodNorm == null) {
				// this method must be declared/implemented here.
				local om = m.origMember;
				local nm = IrMethod.new(om.methodTypeArgs, 
					normalizeParamTypes(om), normalizeType(om.getReturnType()).getType());
				local mm = IrMethod.!(om.member);
				nm.source = mm.source;
				if (mm.checkFlag(IrUtil.M_NEW)) nm.setFlag(IrUtil.M_NEW);
				if (!m.implUsed) nm.setFlag(IrUtil.M_ABSTRACT);
				if (superInfo != null) {
					local sm = superInfo.findMethodImpl(om, false);
					if (sm != null) b.setIrMethod(sm.methodNorm.index, nm);
					else b.addIrMethod(nm);
				} else {
					b.addIrMethod(nm);
				}
				m.methodNorm = nm;
			}
			list = list.tail;
		}
	}
	method normalizeParamTypes(memberRef: IrSpec) -> Array<Type> {
		local p = memberRef.getParamTypes(), max = p.length;
		local i = 0, seq = Sequence<Type>.new().grow(max);
		while (i < max) {
			seq.addN(normalizeType(p(i)).sub);
			i = i + 1;
		}
		return seq.extract();
	}
	method normalizeRecords(origType: Type, rmaType: RmaType) {
		// TODO(perf): don't create intermediate list, use apply() directly
		local list = Maps.keyList(rmaType.instances);
		if (list == null) return();
		if (V3.isPrimitiveArray(origType)) {
			// primitive arrays don't need to be normalized
			while (list != null) {
				recordMap.set(list.head, [Val.!(list.head)]);
				list = list.tail;
			}
			return();
		}
		local recordSize: int;
		if (rmaType.classNorm != null) recordSize = rmaType.classNorm.fields.length;
		if (V3.isComponent(origType)) {
			// update the dynamic portion for the component to point to the new record
			local dyn = rma.prog.dynamic;
			local decl = V3.asComponent(origType).componentDecl;
			local r = dyn.getComponentRecord(decl);
			local nr = dyn.newRecord(origType, recordSize);
			dyn.setComponentRecord(decl, nr);
			recordMap.set(r, Values.NONE);
			compRecords = Lists.cons((r, nr), compRecords);
		} else {
			local tn = normalizeType(origType), isArray = V3.isArray(origType);
			while (list != null) {
				// create empty record(s) for each live record
				local r = list.head;
				if (isArray) recordSize = r.values.length;
				recordMap.set(r, tn.mapP(recordSize, newRecord));
				list = list.tail;
			}
		}
	}
	method finishNormalizingRecords() {
		recordMap.apply(populateRecord);
		local list = compRecords;
		while (list != null) {
			populateSimpleRecord(list.head.0, list.head.1);
			list = list.tail;
		}
	}
	method finishNormalization() {
		opnorm.finishHelperComponent();
	}
	method populateRecord(r: Record, nr: Array<Val>) {
		// fill in the values of the (empty) record
		if (r.values.length == 0 || nr.length == 0) return();
		if (V3.isPrimitiveArray(r.rtype)) return(); // no need for normalization
		if (V3.isArray(r.rtype)) {
			// may need to convert an array of tuples to a tuple of arrays
			local nta = Arrays.map(nr, toRecord);
			local etn = normalizeType(V3Array.elementType(r.rtype));
			local i = 0;
			while (i < r.values.length) {
				local nv = normalizeValAsArray(r.values(i), etn);
				local j = 0;
				while (j < etn.size) {
					nta(j).values(i) = nv(j);
					j = j + 1;
				}
				i = i + 1;
			}
		} else {
			// normalize the (live) values of the record
			populateSimpleRecord(r, Record.!(nr(0)));
		}
	}
	method populateSimpleRecord(r: Record, nrr: Record) {
		local rmaType = rma.getRmaType(r.rtype);
		local i = 0;
		while (i < rmaType.fields.length) {
			local f = rmaType.fields(i);
			if (f != null && f.fieldNorm != null && f.fieldNorm.length > 0) {
				// the field is not dead and at least one element
				local nf = f.fieldNorm(0);
				local nfn = normalizeType(f.origMember.getFieldType());
				normalizeValIntoArray(r.values(i), nfn, nrr.values, nf.index);
			}
			i = i + 1;
		}
	}
	method normalizeTir(origMember: IrSpec, rm: RmaMethod) {
		local returnType = normalizeType(origMember.getReturnType()).getType();
		local tirNorm = TirNormalizer.new(this, origMember, origMember.asMethod().tir, returnType);
		tirNorm.normalizeTir(rm.methodNorm);
	}
	method normalizeFieldRef(memberRef: IrSpec) -> Array<IrSpec> {
		local rm = rma.createRmaMember(memberRef);
		return Arrays.map(RmaField.!(rm).fieldNorm, simpleIrFieldSpec);
	}
	method simpleIrFieldSpec(m: IrField) -> IrSpec {
		return IrSpec.new(m.container.ctype, m, null, null);
	}
	method normalizeMethodRef(memberRef: IrSpec) -> IrSpec {
		local rm = rma.createRmaMember(memberRef);
		return IrSpec.new(rm.container.origType, RmaMethod.!(rm).methodNorm, null, null);
	}
	method normalizeMethod(m: IrMethod, mono: Type -> Type) -> IrMethod {
		local max = m.paramTypes.length;
		local i = 0, s = Sequence<Type>.new().grow(max);
		while (i < max) {
			s.addN(normalizeType(mono(m.paramTypes(i))).sub);
			i = i + 1;
		}
		local returnType = normalizeType(mono(m.returnType)).getType();
		return IrMethod.new(null, s.extract(), returnType);
	}
	method normalizeType(utype: Type) -> V3TypeNorm {
		if (utype == null) return null;
		local typeNorm = normMap.get(utype);
		if (typeNorm == null) typeNorm = recursiveNormalize(utype);
		return typeNorm;
	}
	method recursiveNormalize(utype: Type) -> V3TypeNorm {
		if (utype == Void.TYPE) {
			return voidNorm;
		} else if (V3.isComponent(utype)) {
			return V3TypeNorm.new(utype, NO_TYPES, NO_NESTED, NO_OFFSETS);
		} else if (V3.isFunction(utype)) {
			local p = normalizeType(Function.getParamType(utype));
			local r = normalizeType(Function.getReturnType(utype));
			local pt = Tuple.newType(Lists.fromArray(p.sub));
			local rt = Tuple.newType(Lists.fromArray(r.sub));
			local ft = Function.newType(pt, rt);
			return V3TypeNorm.new(utype, [ft], NO_NESTED, NO_OFFSETS);
		} else if (V3.isArray(utype)) {
			// normalize element type
			local enorm = normalizeType(V3Array.elementType(utype));
			if (enorm.size == 0) {
				return V3TypeNorm.new(utype, [V3.voidArrayType], NO_NESTED, [0]);
			} else {
				// PERF: special case 1-element normalized arrays
				local ae = Arrays.map(enorm.sub, V3Array.newType);
				return V3TypeNorm.new(utype, ae, enorm.nested, enorm.offsets);
			}
		} else if (V3.isTuple(utype)) {
			// flatten tuples
			local seqT = Sequence<Type>.new();
			local seqO = Sequence<int>.new();
			local seqN = Sequence<V3TypeNorm>.new();
			local p = utype.nested;
			while (p != null) {
				local n = normalizeType(p.head);
				seqO.add(seqT.length);
				seqN.add(n);
				seqT.addN(n.sub);
				p = p.tail;
			}
			return V3TypeNorm.new(utype, seqT.extract(), seqN.extract(), seqO.extract());
		}
		return V3TypeNorm.new(utype, [utype], NO_NESTED, NO_OFFSETS);
	}
	method normalizeValAsVal(v: Val, tn: V3TypeNorm) -> Val {
		if (v == Values.BOTTOM && tn.size <= 1) return Values.BOTTOM;
		local a = normalizeValAsArray(v, tn);
		if (a.length == 0) return Values.BOTTOM;
		if (a.length == 1) return a(0);
		return Tuple_Value.new(a);
	}
	method normalizeValAsArray(v: Val, tn: V3TypeNorm) -> Array<Val> {
		return normalizeValIntoArray(v, tn, tn.newValArray(), 0);
	}
	method normalizeValIntoArray(v: Val, tn: V3TypeNorm, array: Array<Val>, index: int) -> Array<Val>{
		if (v == Values.BOTTOM) {
			// bottom: assume array already contains Value.BOTTOMs
		} else if (V3.isTuple(tn.orig)) {
			// tuple: recursively normalize all of the sub
			local tnn = tn.nested;
			local i = 0, ov = (Tuple_Value.!(v)).values;
			while (i < tnn.length) {
				local etn = tnn(i);
				normalizeValIntoArray(ov(i), etn, array, index);
				index = index + etn.size;
				i = i + 1;
			}
		} else if (Record.?(v)) {
			// record: copy record val(s) into the array
			Arrays.copyInto(recordMap.get(Record.!(v)), array, index);
		} else if (Delegate.?(v)) {
			// delegate: normalize record and method
			local del = Delegate.!(v);
			local ctn = normalizeType(del.memberRef.container);
			array(index) = Delegate.new(normalizeValAsVal(del.val, ctn), normalizeMethodRef(del.memberRef));
		} else if (ExpOpDelegate.?(v)) {
			// operator delegate: normalize and rebuild the operator
			array(index) = opnorm.normalizeOp(ExpOpDelegate.!(v).op);
		} else {
			// primitive: simply copy the value into the array
			array(index) = v;
		}
		return array;
	}
	method newRecord(size: int, rtype: Type) -> Val {
		return prog.dynamic.newRecord(rtype, size);
	}
	method toRecord(v: Val) -> Record {
		return Record.!(v);
	}
}

class V3TypeNorm {
	value orig: Type;
	value sub: Array<Type>;
	value nested: Array<V3TypeNorm>;
	value offsets: Array<int>;
	field size: int;
	field vtype: Type;

	new(orig, sub, nested, offsets) {
		size = sub.length;
	}
	method getType() -> Type {
		if (vtype == null) {
			if (size == 0) vtype = Void.TYPE;
			else if (size == 1) vtype = sub(0);
			else vtype = Tuple.newType(Lists.fromArray(sub));
		}
		return vtype;
	}
	method isComplex() -> bool {
		return size > 1;
	}
	method map0<R>(f: Type -> R) -> Array<R> {
		return Arrays.map(sub, f);
	}
	method mapP<A, R>(a: A, f: (A, Type) -> R) -> Array<R> {
		local i = 0, r = Array<R>.new(sub.length);
		while (i < size) {
			r(i) = f(a, sub(i));
			i = i + 1;
		}
		return r;
	}
	method newValArray() -> Array<Val> {
		if (size == 0) return Values.NONE;
		return Array<Val>.new(size);
	}
}
