// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// TODO: this benchmark is not complete. It currently only generates genomes
// with random numbers and does not yet implementation mutations and evaluation
class Genome {
	def numStates: int;
	def numInputs: int;
	def numOutputs: int;
	var next: Array<byte>;
	var action: Array<byte>;

	new(numStates, numInputs, numOutputs) {
		next = Array<byte>.new(numStates * numInputs);
		action = Array<byte>.new(numStates * numInputs);
	}
	def getAction(state: int, input: int) -> byte {
		return action(index(state, input));
	}
	def getNextState(state: int, input: int) -> byte {
		return next(index(state, input));
	}
	def index(state: int, input: int) -> int {
		return state * numInputs + input;
	}
	def randomize() {
		for (i = 0; i < next.length; i++) {
			next(i) = byte.!(Genetica.random2(numStates, i));
		}
		for (j = 0; j < action.length; j++) {
			action(j) = byte.!(Genetica.random2(numOutputs, j));
		}
	}
	def duplicate() -> Genome {
		var other = Genome.new(numStates, numInputs, numOutputs);
		for (i = 0; i < next.length; i++) other.next(i) = next(i);
		for (j = 0; j < next.length; j++) other.action(j) = action(j);
		return other;
	}
	def mutate() {
		var index = Genetica.random(next.length);
		var which = Genetica.random(2);
		if (which == 0) {
			// mutate the next array
			next(index) = byte.!(Genetica.random2(numStates, index));
		} else {
			// mutate the output array
			action(index) = byte.!(Genetica.random2(numOutputs, index));
		}
	}
	def crossover(other: Genome) {
		var index = Genetica.random(next.length);
		var tmpNext = next(index);
		var tmpAction = action(index);
		next(index) = other.next(index);
		action(index) = other.action(index);
		other.next(index) = tmpNext;
		other.action(index) = tmpAction;
	}
	def print() {
		for (i = 0; i < numStates; i++) {
			System.puti(i);
			System.puts(" (");
			for (j = 0; j < numInputs; j++) {
				System.puti(getAction(i, j));
				System.putc(',');
				System.puti(getNextState(i, j));
				System.putc(';');
			}
			System.puts(") ");
		}
		System.ln();
	}
}

class Instance {
	var genome: Genome;
	var state: int;

	def action(input: int) -> int {
		var output = genome.getAction(state, input);
		state = genome.getNextState(state, input);
		return output;
	}
}

component Genetica {
	var seed       = 121013;
	var numInputs  = 4;
	var numOutputs = 4;
	var numStates  = 5;

	def main(args: Array<string>) -> int {
		if (args.length < 1) {
			System.puts("Usage: Genetica <popcount>\n");
			return 1;
		}
		var array = generate(Int.parse(args(0)));
		for (i = 0; i < array.length; i++) array(i).print();
		// TODO: perform mutations and fitness calculations.
		return 0;
	}
	def generate(numGenomes: int) -> Array<Genome> {
		var array = Array<Genome>.new(numGenomes);
		for (i = 0; i < numGenomes; i++) {
			array(i) = Genome.new(numStates, numInputs, numOutputs);
			array(i).randomize();
		}
		return array;
	}
	def mutate(genome: Genome, count: int) {
		for (i = 0; i < count; i++) genome.mutate();
	}
	def crossover(g1: Genome, g2: Genome, count: int) {
		for (i = 0; i < count; i++) g1.crossover(g2);
	}
	def random(max: int) -> int {
		seed = seed * 1664525 + 1013904223;
		var result = (seed & 2147483647) % max;
		seed = seed ^ (seed #>> 16) ^ (seed #>> 24);
		return result;
	}
	def random2(max: int, extra: int) -> int {
		seed = seed * 1664525 + 1013904223 + extra;
		seed = seed ^ (seed #>> 16) ^ (seed #>> 24);
		var result = (seed & 2147483647) % max;
		return result;
	}
}
