#!/bin/bash

BIN=$(cd $(dirname ${BASH_SOURCE[0]})/.. && pwd)
JAR=$BIN/jar
JAR_LINK=$BIN/Aeneas.jar
V3C_LINK=$BIN/v3c
VIRGIL_LOC=${VIRGIL_LOC:=$(cd $BIN/.. && pwd)}
AENEAS_SYS=${AENEAS_SYS:=${VIRGIL_LOC}/rt/darwin/*.v3}
AENEAS_LOC=${AENEAS_LOC:=${VIRGIL_LOC}/aeneas/src}
AENEAS_JVM_TUNING=${AENEAS_JVM_TUNING:="-d32 -client -Xms900m -Xmx900m -XX:+UseSerialGC"}

debug=0
CYAN='[0;36m'
RED='[0;31m'
GREEN='[0;32m'
NORM='[0;00m'

if [ "-d" = "$1" ]; then
	debug=1
	shift
fi

command=$1
shift
command_args=$@

function printvar() {
	local val="${!1}"
	if [ -z "$val" ]; then 
		if [ -f $BIN/.$1 ]; then
			echo export "$1=\"$(cat $BIN/.$1)\"";
		else
			echo export "$1=";
		fi
	else 
		echo export "$1=\"$val\"";
	fi
}

function execute() {
	[ $debug = 1 ] && echo $@
	$@
}

function get_aeneas_version() {
	echo $(grep version ${AENEAS_LOC}/main/Version.v3 | cut -d\" -f2)
}

function update_aeneas_version() {
	local v=$(grep version ${AENEAS_LOC}/main/Version.v3 | cut -d\" -f2)
	local build=$(echo $v | cut -d. -f2)
	local nbuild=$(printf "%04d" $(expr 1 + $build))
	local vfile=$AENEAS_LOC/main/Version.v3
	sed -e "s/$build/$nbuild/g" $vfile > /tmp/Version.v3
	cp /tmp/Version.v3 $vfile
	echo $(get_aeneas_version)
}

function make_test_bin() {
	local testdir="/tmp/$USER/virgil-test"
	mkdir -p $testdir
	echo $testdir
}

function make_build_file() {
	local target=$1
	local release=$2
	local version=$(get_aeneas_version)
	if [ "$release" = "release" ]; then
		case $version in
		*[1,3,5,7,9] )
			# bump the version number if it is odd
			version=$(update_aeneas_version)
		;;
		esac
		echo Release version: $version
		version="Release-$version"
		release=1
	fi

        local build_file=$AENEAS_LOC/main/Build.v3
	local build_time=$(date "+%Y-%m-%d %H:%M:%S")
	if [ "$release" == "release" ]; then
		local build_data="$target $build_time Release"
	else
		local build_data="$target $build_time by ${USER}@${HOST}"
	fi

	echo "component Build { new() { " > $build_file
	echo "Version.buildData = \"$build_data\";" >> $build_file
	echo " } }" >> $build_file

	echo $build_file
}

function do_aeneas_compile() {
	local HOST_AENEAS=$1
	local TARGET_DIR=$2/$3
	local target=$3
	mkdir -p $TARGET_DIR
	echo "${CYAN}Compiling ($HOST_AENEAS -> $TARGET_DIR/Aeneas)...${NORM}"

	V3C=$HOST_AENEAS $V3C_LINK-$target $V3C_OPTS -heap-size=500m -jvm.script -jvm.args="$AENEAS_JVM_TUNING" -output=$TARGET_DIR ${AENEAS_LOC}/*/*.v3
	if [ $? != 0 ]; then
		exit $?
	fi
        ls -al $TARGET_DIR/Aeneas*
}

bootstrap_help="Bootstrap the compiler from source code"
function run_bootstrap() {
	STABLE_V3C=$(revert_to_stable)
	if [ -z "$1" ]; then
	    targets=$($BIN/dev/sense_host)
	else
	    targets=$*
	fi

	first=$(echo $targets | cut -d' ' -f1)

        build_file=$(make_build_file $first)
        do_aeneas_compile $STABLE_V3C $VIRGIL_LOC/bin/bootstrap $first

	for t in $targets; do
	    build_file=$(make_build_file $t)
	    do_aeneas_compile $VIRGIL_LOC/bin/bootstrap/$first/Aeneas $VIRGIL_LOC/bin/current $t
	done

	$BIN/.setup-v3c
	rm -f $build_file
}

archive_help="Create a source and binary archive of the current version of Aeneas"
function run_archive() {
	force=0
	if [ "force" = "$1" ]; then
		force=1
		shift
	fi
	if [ -z "$1" ]; then
		dest=$AENEAS_ARCHIVE
	else
		dest=$1
	fi
	version=$(get_aeneas_version)
	dest=$dest/$version
	mkdir -p $dest
	SRC=src-$version
	source="$dest/Aeneas-src-$version.zip"
	if [ $force = 1 ]; then
		echo "Deleting previous Aeneas $version archives..."
		rm -f ${dest}/*
	fi
	if [ -z "$dest" ]; then
		echo "Usage: aeneas archive <destination>"
		exit 1
	elif [ -f $source ]; then
		echo "Destination $source already exists (use 'force' to overwrite)."
		exit 2
	fi

	STABLE_V3C=$(revert_to_stable)

	echo Archiving Aeneas $version...

	TMP=$(make_test_bin)/aeneas-archive
	mkdir -p $TMP/$SRC

	cd $TMP
	cp -r ${AENEAS_LOC}/* $SRC
	zip -rq $source $SRC

	RT=$VIRGIL_LOC/rt
	cat $(ls $RT/darwin/*.v3 $RT/native/*.v3 $RT/gc/*.v3 | sort) > $TMP/rt-x86-darwin-$version.v3
	cat $(ls $RT/linux/*.v3 $RT/native/*.v3 $RT/gc/*.v3 | sort) > $TMP/rt-x86-linux-$version.v3
	(cd $RT/jvm/bin && zip -rq $dest/rt-jvm-$version.zip *.class)

	FILES=$(find $SRC -name '*.v3' | sort)

	# compile bootstrap compiler (TODO: pick appropriate host platform)
	target="x86-darwin"
	$STABLE_V3C -target=$target -rt.gc -rt.gctables -rt.sttables -heap-size=500m -output=$TMP $FILES rt-$target-$version.v3
	if [ "$?" != 0 ]; then
		exit $?
	fi
	BOOTSTRAP_V3C=$TMP/Aeneas-bootstrap
	mv $TMP/Aeneas $BOOTSTRAP_V3C

	for target in x86-darwin x86-linux; do
		cp rt-$target-$version.v3 $dest
		$BOOTSTRAP_V3C -target=$target -rt.gc -rt.gctables -rt.sttables -heap-size=500m -output=$TMP $FILES rt-$target-$version.v3
		if [ "$?" != 0 ]; then
			exit $?
		fi
		mv $TMP/Aeneas $dest/Aeneas-$version.$target
	done

	ls -al ${dest}/*${version}*
}

benchmark_help="Benchmark various Aeneas compile speed factors"
function run_benchmark() {
	local versions=""
	local tests="parser seman execute run-aeneas aeneas-x86-darwin aeneas-jar"
	while [ -x "$1" ]; do
		versions="$versions $1"
		shift
	done
	if [ -z "$versions" ]; then
		versions=$V3C_LINK
	fi

	if [ $# -gt 0 ]; then
		tests="$*"
	fi

	TMP=$(make_test_bin)/aeneas-bench
	mkdir -p $TMP
	if [ ! -x $TMP/btime ]; then
		echo Compiling btime.c...
		gcc -m32 -lm -O2 -o $TMP/btime $VIRGIL_LOC/bench/btime.c
	fi
	cat $AENEAS_LOC/*/*.v3 > $TMP/Aeneas.v3
	cat $AENEAS_SYS > $TMP/DarwinSys.v3
	for v in $versions; do
		if [[ $tests == *parser* ]]; then
			echo "$CYAN$v$NORM test/parser"
			$v -test $VIRGIL_LOC/test/parser/*.v3 &> /dev/null # warmup
			$TMP/btime $TMP/parse 25 $v -test $VIRGIL_LOC/test/parser/*.v3
		fi

		if [[ $tests == *seman* ]]; then
			echo "$CYAN$v$NORM test/seman"
			$v -test $VIRGIL_LOC/test/seman/*.v3 &> /dev/null # warmup
			$TMP/btime $TMP/seman 25 $v -test $VIRGIL_LOC/test/seman/*.v3
		fi

		if [[ $tests == *execute* ]]; then
			echo "$CYAN$v$NORM test/execute $V3C_OPTS"
			$v -test $VIRGIL_LOC/test/execute/*.v3 &> /dev/null # warmup
			$TMP/btime $TMP/execute 10 $v $V3C_OPTS -test $VIRGIL_LOC/test/execute/*.v3

			echo "$CYAN$v$NORM test/execute -ra $V3C_OPTS"
			$v -test -ra $VIRGIL_LOC/test/execute/*.v3 &> /dev/null # warmup
			$TMP/btime $TMP/execute-ra 10 $v $V3C_OPTS -test -ra $VIRGIL_LOC/test/execute/*.v3
		fi

		if [[ $tests == *run-aeneas* ]]; then
			echo "$CYAN$v$NORM -run $V3C_OPTS $TMP/Aeneas.v3"
			$v -run $TMP/Aeneas.v3 &> /dev/null # warmup
			$TMP/btime $TMP/run-aeneas 10 $v $V3C_OPTS -run $TMP/Aeneas.v3
		fi

		if [[ $tests == *aeneas-x86-darwin* ]]; then
			local args="$V3C_OPTS -output=$TMP -target=x86-darwin $TMP/Aeneas.v3 $TMP/DarwinSys.v3"
			echo "$CYAN$v$NORM $args"
			$v -run $args &> /dev/null # warmup
			$TMP/btime $TMP/aeneas-x86-darwin 10 $v $args
		fi
	done
}

function link() {
	rm -f $2
	execute ln -s $1 $2
}

bump_help="Bump the Aeneas source version number"
function run_bump() {
	local version=$(update_aeneas_version)
	echo "Aeneas is now version: $version"
}

function revert_to_stable() {
    do_clean
    $BIN/.setup-v3c
    readlink $V3C_LINK
}

release_help="Release the current Aeneas binaries, overwriting existing stable binaries"
function run_release() {
	echo $RED
	ls -al $BIN/stable/*/*
	echo $GREEN
	ls -al $BIN/current/*/*
	echo $NORM
	echo -n "Do you really want to overwrite stable with current? (y/n) "
	read
	if [ "$REPLY" != "y" ]; then
		echo Aborted.
		exit 1
	fi
	rm -rf $BIN/stable/*
	cp -r $BIN/current/* $BIN/stable/
}

clean_help="Remove binaries and temporary files and install stable compiler"
function run_clean() {
	do_clean
}
function do_clean() {
	local testbin=$(make_test_bin)
	local rm_ext=".jar .class .elf .s"
	rm -rf $testbin
	rm -f ${AENEAS_LOC}/main/Build.v3
	rm -f $JAR_LINK
	rm -f $V3C_LINK
	rm -rf ${VIRGIL_LOC}/bin/bootstrap/*
	rm -rf ${VIRGIL_LOC}/bin/current/*
	rm -f $JAR_LINK
	rm -f $V3C_LINK
	cp $BIN/.auto-v3c $V3C_LINK
}

function show_file() {
	[ -f $1 ] && ls -al $1
}

version_help="Print out current version of the compiler and state of symbolic links"
function run_version() {
	echo Aeneas Source Version: $(get_aeneas_version)
	printvar AENEAS_JVM_TUNING
	show_file $V3C_LINK
	show_file $JAR_LINK
	show_file $BIN/x86-darwin/Aeneas*
	if [ -x $V3C_LINK ]; then
		$V3C_LINK -version
		show_file $V3C_LINK
	else
		echo No Virgil III compiler currently installed.
	fi
}

# TODO: x86/asm
test_help="Run test cases for Aeneas compiler"
function run_test() {
	if [ $# == 1 ]; then
		local host=$1
		export TEST_TARGET=$1
	elif [ $# != 2 ]; then
	    AENEAS_HOSTS=$($BIN/dev/sense_host)
	    if [ "$?" != 0 ]; then
		echo $AENEAS_HOSTS
		exit 1
	    fi
		local host=$(echo $AENEAS_HOSTS | cut -d' ' -f1)
		export TEST_TARGET=$host
	else
		local host=$1
		export TEST_TARGET=$2
	fi

	echo "${CYAN}Testing${NORM}: host=$host target=$TEST_TARGET V3C_OPTS=$V3C_OPTS"
	V3C_STABLE=$(revert_to_stable)
	export VIRGIL_TEST_OUT=$(make_test_bin)
	# run tests on stable
	for dir in cfg core; do
		td=$VIRGIL_LOC/test/$dir
		echo "--------------------------------------------------------------------"
		echo "${CYAN}($V3C_STABLE) $dir${NORM}"
		(cd $td && AENEAS_TEST=$V3C_STABLE $td/test.bash)
	done

	local target_tests="cfg core parser seman execute large pointer darwin linux rt stacktrace gc system apps bench"

	# Compile Aeneas with stable compiler
	do_aeneas_compile $V3C_STABLE $VIRGIL_TEST_OUT/aeneas/bootstrap $host
	local BOOTSTRAP=$VIRGIL_TEST_OUT/aeneas/bootstrap/$host/Aeneas
	local CURRENT=$VIRGIL_TEST_OUT/aeneas/current/$host/Aeneas
	export AENEAS_TEST=$BOOTSTRAP
	# run bootstrap tests
	for dir in $target_tests; do
		td=$VIRGIL_LOC/test/$dir
		echo "--------------------------------------------------------------------"
		echo "${CYAN}($BOOTSTRAP) $dir${NORM}"
		(cd $td && AENEAS_TEST=$BOOTSTRAP $td/test.bash)
	done

	# Compile aeneas with bootstrap compiler
	do_aeneas_compile $BOOTSTRAP $VIRGIL_TEST_OUT/aeneas/current $host
	diff -rq $VIRGIL_TEST_OUT/aeneas/bootstrap/ $VIRGIL_TEST_OUT/aeneas/current/
	if [ $? = 0 ]; then
		# binaries match exactly. no need to test again
		echo "  bin/current == bin/bootstrap ${GREEN}ok${NORM}"
		exit 0
	fi

	# run compiled tests
	for dir in $target_tests; do
		td=$VIRGIL_LOC/test/$dir
		echo "--------------------------------------------------------------------"
		echo "${CYAN}($CURRENT) $dir${NORM}"
		(cd $td && AENEAS_TEST=$CURRENT $td/test.bash)
	done
}

diagnose_help="Run a single test with extra diagnostic output"
function run_diagnose() {
	local args=""
	local jvm=0
	if [ "x$1" = "x-jvm" ]; then
		jvm=1
		args="$args -jvm"
		shift
	fi
	if [ $# != 1 ]; then
		echo "Usage: aeneas diagnose <one test>"
	else
		cat $*
		local testbin=""
		if [ "$jvm" = 1 ]; then
			testbin=$(make_test_bin)
			echo $testbin
			local rtpath=$VIRGIL_LOC/rt/jvm/bin
			local args="-target=jvm-test -output=$testbin -jvm.rt-path=$rtpath -multiple -verbose=1 $opts"
			echo "Compiling to jvm..."
			execute $V3C_LINK $args $*
			echo

			echo "Running on jvm..."
			execute java -classpath $rtpath:$testbin V3S_Tester $*
		else
			execute $V3C_LINK $args -verbose=1 -test -expect=expect.txt $*
		fi
		execute $V3C_LINK $args -target=ssa -expect=expect.txt $*
		execute $V3C_LINK $args -target=ssa -ra -expect=expect.txt $*
		if [ "$jvm" = 1 ]; then
			local fn=${1%*.*}
			execute javap -classpath $testbin -c V3K_$fn
		fi
	fi
}

starter_help="Create a starter zip from the current repository"
function run_starter() {
    run_clean

    date=$(date +%Y%m%d)
    dir=/tmp/$USER/virgil-starter-$date
    dest=$dir/virgil

    rm -rf $dir
    mkdir -p $dest
    mkdir -p $dest/bin

    cd $VIRGIL_LOC
    cp -r rt $dest
    cp -r lib $dest
    cp -r doc $dest
    cp bin/.setup-v3c $dest/bin
    cp bin/.setup-v3c $dest/bin/v3c
    cp bin/v3c-x86-darwin $dest/bin/
    cp bin/v3c-x86-linux $dest/bin/
    cp bin/v3c-jar $dest/bin/
    cp bin/virgil $dest/bin/
    cp -r bin/stable $dest/bin

    cd $dir
    zip -rq virgil-starter-$date.zip virgil
    ls -al $dir/virgil-starter-$date.zip
}

function usage() {
    echo "Usage: aeneas [-d] command [options] files"
    echo "Available commands:"
    for run_command in $(declare -Ff | grep 'run_' | cut -d ' ' -f3 | sort); do
        local command=${run_command/run_/}
        local help=""
        local help_var="${command}_help"
        local help=${!help_var}
        if [ -z "$help" ]; then
            local help="[no description available]"
        fi
        printf "  %-16s %s\n" "$command" "$help" | head -n 1
    done
}

run_command="run_${command}"
shift

command_type=$(type -t ${run_command})
if [ "${command_type}" != "function" ]; then
    usage "aeneas: unknown command '${command}'"
    exit 255
fi

$run_command $command_args
