#!/bin/bash

BIN=$(cd $(dirname ${BASH_SOURCE[0]})/.. && pwd)
JAR=$BIN/jar
JAR_LINK=$BIN/Aeneas.jar
V3C_LINK=$BIN/v3c
VIRGIL_LOC=${VIRGIL_LOC:=$(cd $BIN/.. && pwd)}
AENEAS_LOC=${AENEAS_LOC:=${VIRGIL_LOC}/aeneas/src}
AENEAS_JVM_TUNING=${AENEAS_JVM_TUNING:="-d32 -client -Xms900m -Xmx900m -XX:+UseSerialGC"}

BOOTSTRAP_TARGETS="jar x86-darwin"

debug=0
CYAN='[0;36m'
RED='[0;31m'
GREEN='[0;32m'
NORM='[0;00m'

if [ "-d" = "$1" ]; then
	debug=1
	shift
fi

command=$1
shift
command_args=$@

function printvar() {
	local val="${!1}"
	if [ -z "$val" ]; then 
		if [ -f $BIN/.$1 ]; then
			echo export "$1=\"$(cat $BIN/.$1)\"";
		else
			echo export "$1=";
		fi
	else 
		echo export "$1=\"$val\"";
	fi
}

function execute() {
	[ $debug = 1 ] && echo $@
	$@
}

function get_aeneas_version() {
	echo $(grep version ${AENEAS_LOC}/main/Version.v3 | cut -d\" -f2)
}

function update_aeneas_version() {
	local v=$(grep version ${AENEAS_LOC}/main/Version.v3 | cut -d\" -f2)
	local build=$(echo $v | cut -d. -f2)
	local nbuild=$(printf "%04d" $(expr 1 + $build))
	local vfile=$AENEAS_LOC/main/Version.v3
	sed -e "s/$build/$nbuild/g" $vfile > /tmp/Version.v3
	cp /tmp/Version.v3 $vfile
	echo $(get_aeneas_version)
}

function make_test_bin() {
	local testdir="/tmp/$USER/virgil-test"
	mkdir -p $testdir
	echo $testdir
}

function make_build_file() {
	local target=$1
	local release=$2
	local version=$(get_aeneas_version)
	if [ "$release" = "release" ]; then
		case $version in
		*[1,3,5,7,9] )
			# bump the version number if it is odd
			version=$(update_aeneas_version)
		;;
		esac
		echo Release version: $version
		version="Release-$version"
		release=1
	fi

        local build_file=$AENEAS_LOC/main/Build.v3
	local build_time=$(date "+%Y-%m-%d %H:%M:%S")
	if [ "$release" == "release" ]; then
		local build_data="$target $build_time Release"
	else
		local build_data="$target $build_time by ${USER}@${HOST}"
	fi

	echo "component Build { new() { " > $build_file
	echo "Version.buildData = \"$build_data\";" >> $build_file
	echo " } }" >> $build_file

	echo $build_file
}

function do_aeneas_bootstrap() {
	local target=$1
	BOOTSTRAP_DIR=$BIN/bootstrap/$target
	mkdir -p $BOOTSTRAP_DIR
	echo "${CYAN}Bootstrap (stable -> $target)${NORM}..."

	export V3C=
        $V3C_LINK-$target -heap-size=500m -jvm.script -jvm.args="$AENEAS_JVM_TUNING" -output=$BOOTSTRAP_DIR ${AENEAS_LOC}/*/*.v3
	if [ $? != 0 ]; then
		exit $?
	fi
        ls -al $BOOTSTRAP_DIR/Aeneas*
	if [ -z "$host" ]; then
		host=$target
	fi
}

function do_aeneas_compile() {
	local host=$1
	local target=$2
	BOOTSTRAP_DIR=$BIN/bootstrap/$target
	CURRENT_DIR=$BIN/current/$target
	mkdir -p $CURRENT_DIR
	echo "${CYAN}Compiling ($host -> $target) Aeneas${NORM}..."

	export V3C=$BIN/bootstrap/$host/Aeneas
	$V3C_LINK-$target -heap-size=500m -jvm.script -jvm.args="$AENEAS_JVM_TUNING" -output=$CURRENT_DIR ${AENEAS_LOC}/*/*.v3
	if [ $? != 0 ]; then
		exit $?
	fi
	export V3C=
        ls -al $CURRENT_DIR/Aeneas*
	$BIN/.setup-v3c
}

bootstrap_help="Bootstrap the compiler from source code"
function run_bootstrap() {
	do_clean
	if [ -z "$1" ]; then
		targets=$BOOTSTRAP_TARGETS
	else
		targets=$1
	fi

	host=$(echo $targets | cut -d' ' -f1)

	for t in $targets; do
		build_file=$(make_build_file $t)
		do_aeneas_bootstrap $t
	done

	for t in $targets; do
		build_file=$(make_build_file $t)
		do_aeneas_compile $host $t
	done

	rm -f $build_file
}

function link() {
	rm -f $2
	execute ln -s $1 $2
}

bump_help="Bump the Aeneas source version number"
function run_bump() {
	local version=$(update_aeneas_version)
	echo "Aeneas is now version: $version"
}

clean_help="Remove binaries and temporary files and install stable compiler"
function run_clean() {
	do_clean
}
function do_clean() {
	local testbin=$(make_test_bin)
	local rm_ext=".jar .class .elf .s"
	rm -rf $testbin
	rm -f ${AENEAS_LOC}/main/Build.v3
	rm -f $JAR_LINK
	rm -f $V3C_LINK
	rm -rf ${VIRGIL_LOC}/bin/bootstrap/*
	rm -rf ${VIRGIL_LOC}/bin/current/*
	rm -f $BIN/Aeneas.jar
	rm -f $V3C_LINK
	cp $BIN/.auto-v3c $V3C_LINK
}

function show_file() {
	[ -f $1 ] && ls -al $1
}

version_help="Print out current version of the compiler and state of symbolic links"
function run_version() {
	echo Aeneas Source Version: $(get_aeneas_version)
	printvar AENEAS_JVM_TUNING
	show_file $V3C_LINK
	show_file $JAR_LINK
	show_file $BIN/x86-darwin/Aeneas*
	if [ -x $V3C_LINK ]; then
		$V3C_LINK -version
		show_file $V3C_LINK
	else
		echo No Virgil III compiler currently installed.
	fi
}

function link_test_aeneas() {
	link $1/Aeneas $V3C_LINK
	if [ -f $1/Aeneas.jar ]; then
		link $1/Aeneas.jar $BIN/Aeneas.jar
	fi
}

# TODO: x86/asm
test_help="Run test cases for Aeneas compiler"
function run_test() {
	if [ $# == 1 ]; then
		local host=$1
		local TEST_TARGET=$1
	elif [ $# != 2 ]; then
		echo "Usage: aeneas test <host> <target>"
		exit 1
	else
		local host=$1
		export TEST_TARGET=$2
	fi

	do_clean
	export V3C=
	export VIRGIL_TEST_OUT=$(make_test_bin)
	# run tests on stable
	for dir in cfg core; do
		td=$VIRGIL_LOC/test/$dir
		echo "--------------------------------------------------------------------"
		echo "${CYAN}(stable) $dir${NORM}"
		(cd $td && $td/test.bash)
	done

	local target_tests="cfg core parser seman execute large pointer darwin rt stacktrace gc system apps bench"

	do_clean

	# Bootstrap aeneas from source
	do_aeneas_bootstrap $host
	# run bootstrap tests
	link_test_aeneas $BIN/bootstrap/$host
	for dir in $target_tests; do
		td=$VIRGIL_LOC/test/$dir
		echo "--------------------------------------------------------------------"
		echo "${CYAN}(bootstrap/$host) $dir${NORM}"
		(cd $td && $td/test.bash)
	done

	# Compile aeneas with bootstrap compiler
	do_aeneas_compile $host $host
	diff -rq $BIN/bootstrap $BIN/current
	if [ $? = 0 ]; then
		# binaries match exactly. no need to test again
		echo "  bin/current == bin/bootstrap ${GREEN}ok${NORM}"
		exit 0
	fi

	rm -rf $VIRGIL_TEST_OUT
	export VIRGIL_TEST_OUT=$(make_test_bin)
	# run compiled tests
	link_test_aeneas $BIN/current/$host
	for dir in $target_tests; do
		td=$VIRGIL_LOC/test/$dir
		echo "--------------------------------------------------------------------"
		echo "${CYAN}(current/$host) $dir${NORM}"
		(cd $td && $td/test.bash)
	done
}

diagnose_help="Run a single test with extra diagnostic output"
function run_diagnose() {
	local args=""
	local jvm=0
	if [ "x$1" = "x-jvm" ]; then
		jvm=1
		args="$args -jvm"
		shift
	fi
	if [ $# != 1 ]; then
		echo "Usage: aeneas diagnose <one test>"
	else
		cat $*
		local testbin=""
		if [ "$jvm" = 1 ]; then
			testbin=$(make_test_bin)
			echo $testbin
			local rtpath=$VIRGIL_LOC/rt/jvm/bin
			local args="-target=jvm-test -output=$testbin -jvm.rt-path=$rtpath -multiple -verbose=1 $opts"
			echo "Compiling to jvm..."
			execute $V3C_LINK $args $*
			echo

			echo "Running on jvm..."
			execute java -classpath $rtpath:$testbin V3S_Tester $*
		else
			execute $V3C_LINK $args -verbose=1 -test -expect=expect.txt $*
		fi
		execute $V3C_LINK $args -target=ssa -expect=expect.txt $*
		execute $V3C_LINK $args -target=ssa -rma -expect=expect.txt $*
		if [ "$jvm" = 1 ]; then
			local fn=${1%*.*}
			execute javap -classpath $testbin -c V3K_$fn
		fi
	fi
}

function usage() {
    echo "Usage: aeneas [-d] command [options] files"
    echo "Available commands:"
    for run_command in $(declare -Ff | grep 'run_' | cut -d ' ' -f3 | sort); do
        local command=${run_command/run_/}
        local help=""
        local help_var="${command}_help"
        local help=${!help_var}
        if [ -z "$help" ]; then
            local help="[no description available]"
        fi
        printf "  %-16s %s\n" "$command" "$help" | head -n 1
    done
}

run_command="run_${command}"
shift

command_type=$(type -t ${run_command})
if [ "${command_type}" != "function" ]; then
    usage "aeneas: unknown command '${command}'"
    exit 255
fi

$run_command $command_args
