// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility methods for Ranges.
component Ranges {
	// Make a copy of a range (as an array).
	def dup<T>(r: Range<T>) -> Array<T> {
		var result = Array<T>.new(r.length);
		for (i < r.length) result[i] = r[i];
		return result;
	}
	// Compare elements of {x} and {y} for equality.
	def equal<A>(x: Range<A>, y: Range<A>) -> bool {
		if (x == y) return true;
		if (x.length != y.length) return false;
		for (i < x.length) if (x[i] != y[i]) return false;
		return true;
	}
	// Reverse the elements of the range {r} in place.
	def reverse<T>(r: Range<T>) {
		var limit = r.length >> 1;
		for (i < limit) {
			var tmp = r[i];
			r[i] = r[r.length - i - 1];
			r[r.length - i - 1] = tmp;
		}
	}
	// Grow a {range} if it is smaller than {size}, returning either {range} or a new one.
	def grow<T>(range: Range<T>, size: int) -> Range<T> {
		if (size > range.length) {
			var n = Array<T>.new(size), max = range.length;
			for (i < max) n[i] = range[i];
			return n;
		}
		return range;
	}
}
