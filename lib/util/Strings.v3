// Copyright 2010 Google Inc. All rights reserved.
// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A component that contains a number of utility methods for manipulating
// strings, including hashing, comparing, etc.
component Strings {
	// compute a hash code of {str}
	def hash(str: string) -> int {
		var hashval = str.length;
		for (c in str) hashval = hashval * 31 + c;
		return hashval;
	}
	// compare two strings for equality
	def equal(arr1: string, arr2: string) -> bool {
		if (arr1 == arr2) return true;
		if (arr1.length != arr2.length) return false;
		for (i < arr1.length) {
			if (arr1[i] != arr2[i]) return false;
		}
		return true;
	}
	// create a new HashMap with string as the key type
	def newMap<V>() -> PartialMap<string, V> {
		return HashMap.new(hash, equal);
	}
	// render an integer {val} as decimal into {buf} at {pos},
	// assuming sufficient space at the end of the array
	def renderDecimal(buf: Array<byte>, pos: int, val: int) -> int {
		if (val < 0) {
			// handle negative integers
			if (val == -2147483648) {
				// special case
				Arrays.copyInto("-2147483648", buf, pos);
				return pos + 11;
			}
			buf[pos++] = '-';
			val = 0 - val;
		}
		if (val < 10) {
			// most common case: small one-byte integer
			buf[pos] = Chars.hexMap_u[val];
			return pos + 1;
		} else if (val < 100) {
			// second most common case: two-byte integer
			buf[pos + 1] = Chars.hexMap_u[val % 10];
			buf[pos] = Chars.hexMap_u[val / 10];
			return pos + 2;
		} else {
			// convert decimal integer
			var nonZero = false;
			for (radix = 1000000000; radix > 0; radix = radix / 10) {
				var digit = val / radix;
				val = val % radix;
				if (digit != 0) nonZero = true;
				if (nonZero) buf[pos++] = Chars.hexMap_u[digit];
			}
			return pos;
		}
	}
	// render an integer {val} as hexadecimal into {buf} at {pos}
	def renderHex8(buf: Array<byte>, pos: int, val: int) -> int {
		var end = pos + 7;
		for (i < 8) {
			buf[end - i] = Chars.hexMap_u[val & 0xf];
			val = val >>> 4;
		}
		return end + 1;
	}
	// produce a string from a {render} function that renders into a StringBuilder
	def render(render: StringBuilder -> StringBuilder) -> string {
		return render(StringBuilder.new()).toString();
	}
	// allocate a new string buffer and copy {str} into it
	def toBuffer(str: string) -> StringBuilder {
		return StringBuilder.new().puts(str);
	}
	// render the {fmt} format string with the given parameter {a} and return a string
	def format1<A>(fmt: string, a: A) -> string {
		return StringBuilder.new().put1(fmt, a).toString();
	}
	// render the {fmt} format string with the given parameters {a} and {b} and return a string
	def format2<A, B>(fmt: string, a: A, b: B) -> string {
		return StringBuilder.new().put2(fmt, a, b).toString();
	}
	// render the {fmt} format string with the given parameters {a}, {b}, and {c} and return a string
	def format3<A, B, C>(fmt: string, a: A, b: B, c: C) -> string {
		return StringBuilder.new().put3(fmt, a, b, c).toString();
	}
	// parse a double-quoted string constant in {a} at {pos}
	def parseString(a: Array<byte>, pos: int) -> Parsed<string> {
		if (pos + 1 >= a.length) return error(0);
		if (a[pos] != '\"') return error(0);
		var max = a.length, i = pos + 1, buf = StringBuilder.new();
		while (i < max) {
			var ch = a[i];
			if (ch < ' ' || ch > 127) return error(i - pos);
			if (ch == '\'') return error(i - pos);
			if (ch == '\"') return Parsed.new(true, 1 + i - pos, buf.toString());
			var end = i + 2;
			if (ch == '\\') {
				var parsed = Byte.parseEscape(a, i + 1);
				if (!parsed.passed) return error(i + parsed.length);
				else buf.putc(parsed.val);
				i = i + parsed.length;
			} else {
				buf.putc(ch);
			}
			i++;
		}
		return error(i - pos);
	}
	def error(len: int) -> Parsed<string> {
		return Parsed.new(false, 0, null);
	}
}
