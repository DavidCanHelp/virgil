// Copyright 2013 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A queue of work items, to be performed in order.
class WorkQueue {
	var listHead: WorkUnit;
	var listTail: WorkUnit;
	// add the {work} function with parameter {a} to the work queue
	def add<A, B>(work: A -> B, a: A) {
		var unit = WorkClosure.new(work, a);
		if (listHead == null) listHead = unit;
		else listTail.next = unit;
		listTail = unit;
	}
	// Perform all work in the work queue, in order of insertion, until empty
	def apply() {
		while (true) {
			var unit = listHead;
			if (unit != null) {
				listHead = unit.next;
				unit.run();
			} else {
				listHead = listTail = null;
				break;
			}
		}
	}
}
// A unit of work
class WorkUnit {
	var next: WorkUnit;
	def run();
}
// A closure over the function and parameters comprising a unit of work
class WorkClosure<A, B>(f: A -> B, a: A) extends WorkUnit {
	def run() {
		f(a);
	}
}
