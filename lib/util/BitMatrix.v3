// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// An efficient data structure for a matrix of boolean values.
class BitMatrix {
	def numcols: int;			// number of columns
	def width: int = (numcols + 31) / 32;	// width (in integers) of each row
	private var bits: Array<int>;		// array that stores the data
	new(numrows: int, numcols: int) {
		bits = Array.new(numrows * width);
	}
	// get the value of the bit at {row, col}
	def [row: int, col: int] -> bool {
		var i = row * width + (col >>> 5), mask = 1 << u5.!(col);
		return (bits[i] & mask) != 0;
	}
	// set the bit at {row, col}, returning its previous value
	def [row: int, col: int] = val: bool {
		var i = row * width + (col >>> 5), mask = 1 << u5.!(col);
		var prev = bits[i];
		if (val) {
                	// set the bit if not already set.
                	if ((prev & mask) == 0) bits[i] = prev | mask;
		} else {
                	// clear the bit if it is set.
                        if ((prev & mask) != 0) bits[i] = prev & ~mask;
               	}
	}
	// OR rows {a} and {b} together, storing the result in row {a}
	def or(a: int, b: int) {
        	var array = bits;
		var da = a * width, db = b * width;
		for (i < width) array[da + i] = array[da + i] | array[db + i];
	}
	// extract a range of rows from {minRow} inclusive to {maxRow} exclusive into a new BitMatrix
	def range(minRow: int, maxRow: int) -> BitMatrix {
		var numrows = maxRow - minRow;
		var result = BitMatrix.new(numrows, numcols);
		var start = minRow * width, end = maxRow * width;
                var sbits = this.bits, rbits = result.bits;
		for (i = start; i < end; i++) rbits[i - start] = sbits[i];
		return result;
	}
	// grow this bit matrix to {nrows} rows
	def grow(nrows: int) -> this {
		bits = Arrays.grow(bits, nrows * width);
	}
}
