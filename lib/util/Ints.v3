// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utilities for rendering and parsing integers in various formats, as well
// as additional arithmetic routines.
component Ints {
	// TODO: options for returning on error:
	//    1. return pair of val, #validchars, with < 0 valid indicating error
	//    2. return Parsed<T>
	//    3. accept error sentinel value
	//    4. accept error function
	//    5. encapsulate errors into state object
	def parseDecimal32(a: Array<byte>, pos: int) -> int;
	def parseDecimal64(a: Array<byte>, pos: int) -> i64;

	def parseHex8(a: Array<byte>, pos: int) -> byte;
	def parseHex16(a: Array<byte>, pos: int) -> u16;
	def parseHex32(a: Array<byte>, pos: int) -> u32;
	def parseHex64(a: Array<byte>, pos: int) -> u64;

	def parseBin8(a: Array<byte>, pos: int) -> byte;
	def parseBin16(a: Array<byte>, pos: int) -> u16;
	def parseBin32(a: Array<byte>, pos: int) -> u32;
	def parseBin64(a: Array<byte>, pos: int) -> u64;

	// Render {val} in decimal at the position {pos} in {a}, returning
	// the number of characters output.
	def renderDecimalI32(val: int, a: Array<byte>, pos: int) -> int {
		if (val < 0) {
			a[pos++] = '-';
			return 1 + renderDecimalU32(u32.view(0 - val), a, pos);
		}
		return renderDecimalU32(u32.view(val), a, pos);
	}
	// Render {i} in decimal at the position {pos} in {a}, returning
	// the number of characters output.
	def renderDecimalI64(i: i64, a: Array<byte>, pos: int) -> int {
		var small = i32.view(i);
		if (small == i) return renderDecimalI32(small, a, pos);
		if (i < 0) {
			a[pos++] = '-';
			return 1 + renderDecimalU64(u64.view(0 - i), a, pos);
		}
		return renderDecimalU64(u64.view(i), a, pos);
	}
	// Render {i} in decimal at the position {pos} in {a}, returning
	// the number of characters output.
	def renderDecimalU32(i: u32, a: Array<byte>, pos: int) -> int {
		var p = pos;
		if (i < 10) {  // fastpath for small integers.
			a[p] = byte.view('0' + i);
			return 1;
		}
		if (i < 100) { // fastpath for small integers.
			a[p++] = byte.view('0' + (i / 10));
			a[p++] = byte.view('0' + (i % 10));
			return 2;
		}
		var nonZero = false;
		// XXX(fast): worth it to compute digits low to high? 1 divide vs 2.
		for (radix = 1000000000u; radix > 0; radix = radix / 10) {
			var digit = i / radix;
			i = i % radix;
			if (digit != 0) nonZero = true;
			if (nonZero) a[p++] = byte.view('0' + digit);
		}
		return p - pos;
	}
	// Render {i} in decimal at the position {pos} in {a}, returning
	// the number of characters output.
	def renderDecimalU64(i: u64, a: Array<byte>, pos: int) -> int {
		var small = u32.view(i);
		if (small == i) return renderDecimalU32(small, a, pos);
		var nonZero = false;
		// XXX(fast): worth it to compute digits low to high? 1 divide vs 2.
		var p = pos;
		for (radix = 10000000000000000000ul; radix > 0; radix = radix / 10) {
			var digit = i / radix;
			i = i % radix;
			if (digit != 0) nonZero = true;
			if (nonZero) a[p++] = byte.view('0' + digit);
		}
		return p - pos;
	}
	// Compute the log of a power of two integer {i}.
	def logU32(i: u32) -> int {
		var r = 0;
		if (i == 0) return -1;
		if (i >= (1u << 16)) { r += 16; i >>= 16; }
		if (i >= (1u << 8)) { r += 8; i >>= 8; }
		if (i >= (1u << 4)) { r += 4; i >>= 4; }
		if (i >= (1u << 2)) { r += 2; i >>= 2; }
		if (i >= (1u << 1)) { r += 1; i >>= 1; }
		return r;
	}
	// Compute the log of a power of two integer {i}.
	def logU64(i: u64) -> int {
		var r = 0;
		if (i == 0) return -1;
		if (i >= (1uL << 32)) { r += 32; i >>= 32; }
		var j = u32.view(i);
		if (j >= (1u << 16)) { r += 16; j >>= 16; }
		if (j >= (1u << 8)) { r += 8; j >>= 8; }
		if (j >= (1u << 4)) { r += 4; j >>= 4; }
		if (j >= (1u << 2)) { r += 2; j >>= 2; }
		if (j >= (1u << 1)) { r += 1; j >>= 1; }
		return r;
	}
	def popcntU32(i: u32) -> int; // TODO
	def popcntU64(i: u64) -> int; // TODO
}
