// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utilities for rendering and parsing integers in various formats, as well
// as additional arithmetic routines.
component Ints {
	private def U32_0 = u32.view('0');
	// Parse a decimal integer value beginning at {a[pos]}. Returns a
	// pair of the status (# of characters read if successful, <= 0 if failure),
	// and the value.
	def parseDecimal(a: Array<byte>, pos: int) -> (/*status:*/int, /*value:*/int) {
		if (pos >= a.length) return (0, 0);
		if (a[pos] == '-') {
			// parse positive decimal and negate
			var r = parseDecM(a, pos + 1, 214748364, 8);
			if (r.0 > 0) {
				if (r.0 == 1 && r.1 == 0) return (-2, 0); // special case of -0
				return (1 + r.0, int.view(0u - r.1));
			}
			return (r.0 - 1, 0);
		}
		var r = parseDecM(a, pos, 214748364, 7);
		if (r.0 > 0) return (r.0, int.view(r.1));
		return (r.0, 0);
	}
	// Parse a positive decimal integer value beginning at {a[pos]}. Returns a
	// pair of the status (# of characters read if successful, <= 0 if failure),
	// and the value.
	def parsePosDecimal(a: Array<byte>, pos: int) -> (/*status:*/int, /*value:*/u32) {
		return parseDecM(a, pos, 429496729, 6);
	}
	private def parseDecM(a: Array<byte>, pos: int, maxdiv10: u32, maxmod10: u32) -> (int, u32) {
		var val = 0u, s = pos;
		var max = s + 9;
		if (max > a.length) max = a.length;
		// first 9 digits cannot overflow u32
		if (s < max) {
			var d = a[s] - U32_0;
			if (d == 0) return (1, 0);
			if (d > 9) return (s - pos, val);
			s++;
			val = val * 10 + d;
		}
		while (s < max) {
			var d = a[s] - U32_0;
			if (d > 9) return (s - pos, val);
			s++;
			val = val * 10 + d;
		}
		// check for 10th digit
		if (s < a.length) {
			var d = a[s] - U32_0;
			if (d > 9) return (s - pos, val);
			s++;
			// check for value overflow
			if (val > maxdiv10 || (val == maxdiv10 && d > maxmod10)) {
				return (-1 - (s - pos), val);
			}
			val = val * 10 + d;
			// check for 11th and more digit
			if (s < a.length) {
				var d = a[s] - U32_0;
				if (d <= 9) return (-1 - (s - pos), val);
			}
		}
		return (s - pos, val);
	}
	// Parse a hexadecimal integer value at {a[pos]}.
	def parseHex(a: Array<byte>, pos: int) -> u32 {
		return parseHexM(a, pos, 8);
	}
	def parseHexM(a: Array<byte>, pos: int, maxChars: int) -> u32; // TODO
	// Parse a binary integer value at {a[pos]}.
	def parseBin(a: Array<byte>, pos: int) -> u32 {
		return parseBinM(a, pos, 32);
	}
	def parseBinM(a: Array<byte>, pos: int, maxChars: int) -> u32; // TODO

	// Render {val} in decimal at the position {pos} in {a}, returning
	// the number of characters output.
	def renderDecimal(val: int, a: Array<byte>, pos: int) -> int {
		if (val < 0) {
			a[pos++] = '-';
			return 1 + renderPosDecimal(u32.view(0 - val), a, pos);
		}
		return renderPosDecimal(u32.view(val), a, pos);
	}
	// Render {i} in decimal at the position {pos} in {a}, returning
	// the number of characters output.
	def renderPosDecimal(i: u32, a: Array<byte>, pos: int) -> int {
		var p = pos;
		if (i < 10) {  // fastpath for small integers.
			a[p] = byte.view('0' + i);
			return 1;
		}
		if (i < 100) { // fastpath for small integers.
			a[p++] = byte.view('0' + (i / 10));
			a[p++] = byte.view('0' + (i % 10));
			return 2;
		}
		var nonZero = false;
		// XXX(fast): worth it to compute digits low to high? 1 divide vs 2.
		for (radix = 1000000000u; radix > 0; radix = radix / 10) {
			var digit = i / radix;
			i = i % radix;
			if (digit != 0) nonZero = true;
			if (nonZero) a[p++] = byte.view('0' + digit);
		}
		return p - pos;
	}
	// Compute the log of a power of two integer {i}.
	def log(i: u32) -> int {
		var r = 0;
		if (i == 0) return -1;
		if (i >= (1u << 16)) { r += 16; i >>= 16; }
		if (i >= (1u << 8)) { r += 8; i >>= 8; }
		if (i >= (1u << 4)) { r += 4; i >>= 4; }
		if (i >= (1u << 2)) { r += 2; i >>= 2; }
		if (i >= (1u << 1)) { r += 1; i >>= 1; }
		return r;
	}
	// Compute the number of 1 bits in {i}.
	def popcnt(i: u32) -> int { // XXX: intrinsic on platforms where possible.
		var count = 0;
		while (i != 0) {
			if ((i & 1) != 0) count++;
			i >>>= 1;
		}
		return count;
	}
	// Return the minimum of {a} and {b}.
	def min(a: int, b: int) -> int {
		return if(a < b, a, b);
	}
	// Return the absolute value of {a}.
	def abs(a: int) -> u32 {
		return u32.view(if(a < 0, 0 - a, a));
	}
}

// Parse result for parsing integers and longs.
enum IntParseResult {
	OK, OVERFLOW, UNDERFLOW, TOO_LONG, EMPTY
}
