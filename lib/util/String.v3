// Copyright 2010 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// hexadecimal characters for each 0-15 integer value
def hexMap = "0123456789ABCDEF";

// A component that contains a number of utility methods for manipulating
// strings, including hashing, comparing, etc.
component String {
	// compute a hash code of {str}
	def hash(str: string) -> int {
		var hashval = str.length;
		for (c in str) hashval = hashval * 31 + c;
		return hashval;
	}
	// compare two strings for equality
	def equal(arr1: string, arr2: string) -> bool {
		if (arr1 == arr2) return true;
		if (arr1.length != arr2.length) return false;
		for (i < arr1.length) {
			if (arr1(i) != arr2(i)) return false;
		}
		return true;
	}
	// create a new HashMap with string as the key type
	def newMap<V>() -> PartialMap<string, V> {
		return HashMap.new(hash, equal);
	}
	// render an integer {val} as decimal into {buf} at {pos},
	// assuming sufficient space at the end of the array
	def renderDecimal(buf: Array<byte>, pos: int, val: int) -> int {
		if (val < 0) {
			// handle negative integers
			if (val == -2147483648) {
				// special case
				Arrays.copyInto("-2147483648", buf, pos);
				return pos + 11;
			}
			buf(pos++) = '-';
			val = 0 - val;
		}
		if (val < 10) {
			// most common case: small one-byte integer
			buf(pos) = hexMap(val);
			return pos + 1;
		} else if (val < 100) {
			// second most common case: two-byte integer
			buf(pos + 1) = hexMap(val % 10);
			buf(pos) = hexMap(val / 10);
			return pos + 2;
		} else {
			// convert decimal integer
			var nonZero = false;
			for (radix = 1000000000; radix > 0; radix = radix / 10) {
				var digit = val / radix;
				val = val % radix;
				if (digit != 0) nonZero = true;
				if (nonZero) buf(pos++) = hexMap(digit);
			}
			return pos;
		}
	}
	// render an integer {val} as hexadecimal into {buf} at {pos}
	def renderHex8(buf: Array<byte>, pos: int, val: int) -> int {
		var end = pos + 7;
		for (i < 8) {
			buf(end - i) = hexMap(val & 0xf);
			val = val >>> 4;
		}
		return end + 1;
	}
	// produce a string from a {render} function that renders into a StringBuffer
	def render(render: StringBuffer -> StringBuffer) -> string {
		return render(StringBuffer.new()).toString();
	}
	// allocate a new string buffer and copy {str} into it
	def toBuffer(str: string) -> StringBuffer {
		return StringBuffer.new().puts(str);
	}
	// render the {fmt} format string with the given parameter {a} and return a string
	def format1<A>(fmt: string, a: A) -> string {
		return StringBuffer.new().format1(fmt, a).toString();
	}
	// render the {fmt} format string with the given parameters {a} and {b} and return a string
	def format2<A, B>(fmt: string, a: A, b: B) -> string {
		return StringBuffer.new().format2(fmt, a, b).toString();
	}
	// render the {fmt} format string with the given parameters {a}, {b}, and {c} and return a string
	def format3<A, B, C>(fmt: string, a: A, b: B, c: C) -> string {
		return StringBuffer.new().format3(fmt, a, b, c).toString();
	}
	// parse a double-quoted string constant in {a} at {pos}
	def parseString(a: Array<byte>, pos: int) -> Parsed<string> {
		if (pos + 1 >= a.length) return error(0);
		if (a(pos) != '\"') return error(0);
		var max = a.length, i = pos + 1, buf = StringBuffer.new();
		while (i < max) {
			var ch = a(i);
			if (ch < ' ' || ch > 127) return error(i - pos);
			if (ch == '\'') return error(i - pos);
			if (ch == '\"') return Parsed.new(true, 1 + i - pos, buf.toString());
			var end = i + 2;
			if (ch == '\\') {
				var parsed = Byte.parseEscape(a, i + 1);
				if (!parsed.passed) return error(i + parsed.length);
				else buf.putc(parsed.val);
				i = i + parsed.length;
			} else {
				buf.putc(ch);
			}
			i++;
		}
		return error(i - pos);
	}
	def error(len: int) -> Parsed<string> {
		return Parsed.new(false, 0, null);
	}
}
// A StringBuffer is a utility for building strings. It contains a number
// of methods for appending characters, integers, strings, or renderable
// functions (i.e. functions of type StringBuffer -> StringBuffer). It uses
// parameterized methods to allow calling formatX() methods with any type
// of arguments.
class StringBuffer {
	var buffer = Array<byte>.new(20); // TUNABLE: initial size of string buffer
	var length: int;

	// append a bool {val}, either "true" or "false"
	def appendBool(val: bool) -> StringBuffer {
		if (val) return puts("true");
		else return puts("false");
	}
	// append a char {ch}, escaping special characters
	def appendEscapedChar(ch: byte) -> StringBuffer {
		match (ch) {
			'\'': puts("\\\'");
			'\"': puts("\\\"");
			'\t': puts("\\t");
			'\r': puts("\\r");
			'\n': puts("\\n");
			'\\': puts("\\\\");
		} else if (ch <= '~' && ch >= ' ') {
			putc(ch);
		} else {
			// non-printable: append a hex representation
			putc('\\');
			putc('x');
			putc(hexMap(ch >>> 4));
			putc(hexMap(ch & 0xf));
		}
		return this;
	}
	// append a byte {b}
	def putc(b: byte) -> StringBuffer {
		acquire(1);
		buffer(length++) = b;
		return this;
	}
	// append a string {str}
	def puts(str: string) -> StringBuffer {
		var max = str.length;
		acquire(max);
		var pos = length;
		for (i < max) buffer(pos + i) = str(i);
		length = pos + max;
		return this;
	}
	// append an integer {val} in decimal
	def puti(val: int) -> StringBuffer {
		// check for common case of small, one-byte integer
		if (val >= 0 && val <= 9) return putc(hexMap(val));
		acquire(11);
		length = String.renderDecimal(buffer, length, val);
		return this;
	}
	// append an integer {val} in 0x00000000 format
	def putx(val: int) -> StringBuffer {
		acquire(10);
		buffer(length) = '0';
		buffer(length + 1) = 'x';
		String.renderHex8(buffer, length + 2, val);
		length = length + 10;
		return this;
	}
	// append a comma-separated {list} with the given rendering function {append}
	def appendCommaList<T>(list: List<T>, append: (T, StringBuffer) -> StringBuffer) -> StringBuffer {
		if (list == null) return this;
		append(list.head, this);
		for (l = list.tail; l != null; l = l.tail) {
			append(l.head, puts(", "));
		}
		return this;
	}
	// append a comma-separated list of {array} elements
	def appendArray<T>(array: Array<T>) -> StringBuffer {
		for (i < array.length) {
			if (i > 0) puts(", ");
			put1(array(i));
		}
		return this;
	}
	// append a single item {a} of type string|int|byte|bool|(StringBuffer -> StringBuffer)
	def put1<A>(a: A) -> StringBuffer {
		if (string.?(a)) return puts(string.!(a));
		if (int.?(a)) return puti(int.!(a));
		if (byte.?(a)) return putc(byte.!(a));
		if (bool.?(a)) return appendBool(bool.!(a));
		if (Poly.is<A, StringBuffer -> StringBuffer>(a)) {
			return Poly.as<A, StringBuffer -> StringBuffer>(a)(this);
		}
		return this;
	}
	def format1<A>(fmt: string, a: A) -> StringBuffer {
		return format3(fmt, a, (), ());
	}
	def format2<A, B>(fmt: string, a: A, b: B) -> StringBuffer {
		return format3(fmt, a, b, ());
	}
	def format3<A, B, C>(fmt: string, a: A, b: B, c: C) -> StringBuffer {
		var i = 0, max = fmt.length - 1, start = 0;
		while (i < max) {
			if (fmt(i) == '%') {
				appendRange(fmt, start, i);
				start = i + 2;
				var nc = fmt(i + 1);
				if (nc == '1') { put1(a); i = start; continue; }
				if (nc == '2') { put1(b); i = start; continue; }
				if (nc == '3') { put1(c); i = start; continue; }
				if (nc == '%') { start--; continue; }
			}
			i++;
		}
		appendRange(fmt, start, fmt.length);
		return this;
	}
	// append a range of a string {str}, starting at {start} inclusive to {end} exclusive
	private def appendRange(str: string, start: int, end: int) {
		acquire(end - start);
		var pos = length;
		for (i = start; i < end; i++) buffer(pos++) = str(i);
		length = pos;
	}
	// append a line terminator
	def ln() -> StringBuffer {
		putc('\n');
		return this;
	}
	// append a space
	def sp() -> StringBuffer {
		putc(' ');
		return this;
	}
	// reset the size of this buffer, reusing internal storage
	def reset() -> StringBuffer {
		length = 0;
		return this;
	}
	// pad the buffer to {size} with the pad character {ch}
	def pad(ch: byte, size: int) -> StringBuffer {
		var diff = size - length;
		if (diff <= 0) return this;
		acquire(diff);
		for (i = length; i < size; i++) buffer(i) = ch;
		length = size;
		return this;
	}
	// convert this buffer to a string
	def toString() -> string {
		return Arrays.range(buffer, 0, length);
	}
	// acquire at least {n} bytes of internal storage at the end of the array
	private def acquire(n: int) {
		var nlen = length + n, olen = buffer.length;
		if (nlen > olen) buffer = Arrays.copy(buffer, Array<byte>.new(nlen + olen));
	}
}
