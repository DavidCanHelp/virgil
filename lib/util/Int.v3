// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Low-level utility methods for parsing ints in various formats, including decimal,
// binary, and hexadecimal.
component Int {
	def hexValue(ch: byte) -> int {
		if (ch < '0')  return -1;
		if (ch <= '9') return int.!(ch) - '0';
		if (ch < 'A')  return -1;
		if (ch <= 'F') return 10 + int.!(ch) - 'A';
		if (ch < 'a')  return -1;
		if (ch <= 'f') return 10 + int.!(ch) - 'a';
		return -1;
	}
	def newMap<V>() -> HashMap<int, V> {
		return HashMap<int, V>.new(int.!<int>, int.==);
	}
	// parse a decimal integer that should occupy the entire string {a}
	def parseDecimal(a: Array<byte>) -> Parsed<int> {
		if (a.length == 0) return error(0);
		var ch = a(0), r: Parsed<int>;
		if (ch == '-') r = parseNegDecimal(a, 0);
		else if (ch < '0' || ch > '9') return error(0);
		else r = parsePosDecimal(a, 0);
		if (r.length == a.length) return r;
		return error(r.length);
	}
	// parse a positive decimal integer starting at {a(pos)}
	def parsePosDecimal(a: Array<byte>, pos: int) -> Parsed<int> {
		var v0 = a(pos), passed = true;
		if (v0 == '0') {
			var p1 = pos + 1;
			if (p1 == a.length || a(p1) < '0' || a(p1) > '9') return Parsed.new(true, 1, 0);
			passed = false;
		} else if (v0 < '0' || v0 > '9') {
			return error(0);
		}
		var max = a.length, accum = v0 - int.!('0'), i = pos + 1;
		while (i < max) {
			var d = a(i) - '0';
			if (d < 0 || d > 9) return Parsed.new(passed, i - pos, accum);
			accum = accum * 10 + d;
			if (accum < 0) passed = false; // overflow
			i++;
		}
		return Parsed.new(passed, i - pos, accum); // reached end of array
	}
	// parse a negative integer starting at {a(pos)}, assuming {a(pos) == '-'}
	def parseNegDecimal(a: Array<byte>, pos: int) -> Parsed<int> {
		var p1 = pos + 1, passed = true;
		if (p1 >= a.length) return error(1);
		var v1 = a(p1);
		if (v1 == '0') passed = false;
		else if (v1 < '1' || v1 > '9') return error(1);

		var max = a.length, accum = int.!('0') - v1, i = pos + 2;
		while (i < max) {
			var d = a(i) - '0';
			if (d < 0 || d > 9) return Parsed.new(passed, i - pos, accum);
			accum = accum * 10 - d;
			if (accum >= 0) passed = false; // overflow
			i++;
		}
		return Parsed.new(passed, i - pos, accum); // reached end of array
	}
	// parse a binary value starting at {a(pos)}, assuming
	// {a(pos) == '0' && (a(pos + 1) == 'b' || a(pos + 1) == 'B')}
	def parseBin(a: Array<byte>, pos: int) -> Parsed<int> {
		var i = pos + 2, max = a.length;
		if (i >= max) return error(2);
		var accum = 0;
		while (i < max) {
			var ch = a(i);
			if (ch == '1') accum = accum + accum + 1;
			else if (ch == '0') accum = accum + accum;
			else return bin(i - pos, accum);
			i++;
		}
		return bin(i - pos, accum);
	}
	// parse a hexadecimal value starting at {a(pos)}, assuming
	// {a(pos) == '0' && (a(pos + 1) == 'x' || a(pos + 1) == 'X')}
	def parseHex(a: Array<byte>, pos: int) -> Parsed<int> {
		var i = pos + 2, max = a.length;
		if (i >= max) return error(2);
		var accum = 0;
		while (i < max) {
			var v = hexValue(a(i));
			if (v < 0) return hex(i - pos, accum);
			accum = (accum * 16) | v;
			i++;
		}
		return hex(i - pos, accum);
	}
	private def bin(len: int, val: int) -> Parsed<int> {
		return Parsed.new(len >= 3 && len <= 34, len, val);
	}
	private def hex(len: int, val: int) -> Parsed<int> {
		return Parsed.new(len >= 3 && len <= 10, len, val);
	}
	private def error(len: int) -> Parsed<int> {
		return Parsed.new(false, len, 0);
	}
	// return the minimum of {a} and {b}
	def min(a: int, b: int) -> int {
		return if(a < b, a, b);
	}
}
