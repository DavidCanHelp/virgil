// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Common low-level operations on bytes.
component Byte {
	// checks if {ch} is an ASCII base-10 digit
	def isDecimal(ch: byte) -> bool {
		return ch >= '0' && ch <= '9';
	}
	// checks if {ch} is an ASCII base-16 digit
	def isHex(ch: byte) -> bool {
		return (ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F');
	}
	// checks if {ch} is an ASCII binary digit
	def isBinary(ch: byte) -> bool {
		return ch == '0' || ch == '1';
	}
	// parse a byte constant contained in single quotes starting at {a(pos)}
	def parseByte(a: Array<byte>, pos: int) -> Parsed<byte> {
		if (pos + 2 >= a.length) return error(0);
		if (a[pos] != '\'') return error(0);
		var ch = a[pos + 1];
		if (ch < ' ' || ch > 127) return error(2);
		if (ch == '\'') return error(2);
		if (ch == '\"') return error(2);
		var end = pos + 2;
		if (ch == '\\') {
			var parsed = parseEscape(a, pos + 2);
			if (!parsed.passed) return Parsed.new(false, 2 + parsed.length, ch);
			else ch = parsed.val;
			end = end + parsed.length;
		}
		if (end >= a.length) return error(end - pos);
		if (a[end] == '\'') return Parsed.new(true, 1 + end - pos, ch);
		return error(1 + end - pos);
	}
	// parses an escaped byte such as \n, \r, \t, \\, \xXX starting at {a(pos)}
	def parseEscape(a: Array<byte>, pos: int) -> Parsed<byte> {
		if (pos >= a.length) return error(0);
		match (a[pos]) {
			'r' => return Parsed.new(true, 1, '\r');
			't' => return Parsed.new(true, 1, '\t');
			'n' => return Parsed.new(true, 1, '\n');
			'\"' => return Parsed.new(true, 1, '\"');
			'\'' => return Parsed.new(true, 1, '\'');
			'\\' => return Parsed.new(true, 1, '\\');
			'x' => {
				if (pos + 2 >= a.length) return error(1);
				if (!isHex(a[pos + 1])) return error(1);
				if (!isHex(a[pos + 2])) return error(2);
				return Parsed.new(true, 3, byte.!(Int.hexValue(a[pos + 1]) << 4 | Int.hexValue(a[pos + 2])));
			}
		}
		return error(1);
	}
	def error(len: int) -> Parsed<byte> {
		return Parsed.new(false, 0, '\x00');
	}
}
