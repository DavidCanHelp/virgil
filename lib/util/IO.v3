// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility class for encoding integers and data into a byte stream.
// Has a close relationship with a Buffer, which can be used to buffer
// multiple writes into a larger write transaction
class DataEncoder {
	private var bigEndian: bool;
	private var max: int;
	private var refill: (DataEncoder, int) -> void; // refill policy (e.g. flush to output or grow)
	var array: Array<byte>;
	var pos: int;

	new(bigEndian, array, pos, refill) {
		if (refill == null) this.refill = grow;
	}
	// write a single byte {data}
	def i1(data: int) {
		acquire(1)[pos++] = byte.!(data);
	}
	// write a 2-byte integer {data} using the default endianness
	def i2(data: int) {
		if (bigEndian) i2be(data);
		else i2le(data);
	}
	// write a 4-byte integer {data} using the default endianness
	def i4(data: int) {
		if (bigEndian) i4be(data);
		else i4le(data);
	}
	// write a 2-byte big-endian integer {data}
	def i2be(data: int) {
		var a = acquire(2), p = pos;
		a[p + 0] = byte.!(data >>> 8);
		a[p + 1] = byte.!(data);
		pos = p + 2;
	}
	// write a 2-byte little-endian integer {data}
	def i2le(data: int) {
		var a = acquire(2), p = pos;
		a[p + 0] = byte.!(data);
		a[p + 1] = byte.!(data >>> 8);
		pos = p + 2;
	}
	// write a 4-byte big-endian integer {data}
	def i4be(data: int) {
		var a = acquire(4), p = pos;
		a[p + 0] = byte.!(data >>> 24);
		a[p + 1] = byte.!(data >>> 16);
		a[p + 2] = byte.!(data >>> 8);
		a[p + 3] = byte.!(data);
		pos = p + 4;
	}
	// write a 4-byte little-endian integer {data}
	def i4le(data: int) {
		var a = acquire(4), p = pos;
		a[p + 0] = byte.!(data);
		a[p + 1] = byte.!(data >>> 8);
		a[p + 2] = byte.!(data >>> 16);
		a[p + 3] = byte.!(data >>> 24);
		pos = p + 4;
	}
	// acquire internal storage to store at least {size} bytes in the array
	private def acquire(size: int) -> Array<byte> {
		if (pos + size > array.length) refill(this, size);
		return array;
	}
	// write all of the bytes in {data}
	def iN(data: Array<byte>) {
		if (data == null) return;
		var len = data.length;
		var a = acquire(len), p = pos;
		for (i < len) a[p + i] = data[i];
		pos = p + len;
	}
	// write {len} bytes from {data} starting at {data(off)}
	def iK(data: Array<byte>, off: int, len: int) {
		if (data == null) return;
		var a = acquire(len), p = pos;
		for (i < len) a[p + i] = data[off + i];
		pos = p + len;
	}
	// write {len} 0 bytes
	def zeroN(len: int) {
		var a = acquire(len), end = pos + len;
		for (p = pos; p < end; p++) a[p] = '\x00';
		pos = end;
	}
	// skip {len} bytes
	def skipN(len: int) {
		acquire(len);
		pos = pos + len;
	}
	// reset the cursor to {npos} in order to overwrite data
	def at(npos: int) -> DataEncoder {
		if (pos > max) max = pos;
		pos = npos;
		return this;
	}
	// align the cursor to {size}, assuming {size} is a power of 2
	def align(size: int) {
		var rem = pos & (size - 1);
		if (rem > 0) {
			acquire(size - rem);
			pos = pos + size - rem;
		}
	}
	// return the end position of the encoding stream
	def end() -> int {
		if (pos > max) max = pos;
		return max;
	}
	// reset the cursor to the end of the encoding stream
	def atEnd() -> DataEncoder {
		if (pos > max) max = pos;
		else pos = max;
		return this;
	}
	private def grow(encoder: DataEncoder, size: int) {
		var d = encoder.array;
		encoder.array = Arrays.grow(d, d.length * 4 + size);
	}
}
// An abstraction for a stream which accepts bytes in large chunks
class Stream {
	def outK(data: Array<byte>, start: int, len: int);
}
// A closure over a file descriptor which allows it to act as a stream
class FileStream(file: int) extends Stream {
	def outK(data: Array<byte>, offset: int, length: int) {
		System.fileWriteK(file, data, offset, length);
	}
	def close() {
		System.fileClose(file);
	}
}
// A utility to buffer writes of bytes to a flushing function, with the assumption
// that the flushing function is more efficient with larger writes.
class Buffer {
	private def bufSize: int;
	private def ffunc: (Array<byte>, int, int) -> void;
	private var encoder: DataEncoder;
	private var total: int;

	// create a new buffer with {bufSize} bytes which flushes to {ffunc}
	new(bufSize, ffunc) {
		var array = Array<byte>.new(bufSize);
		encoder = DataEncoder.new(false, array, 0, refill);
	}
	// refill the {encoder} with {size} bytes when full
	private def refill(encoder: DataEncoder, size: int) {
		if (size > encoder.array.length) {
			// a larger buffer is necessary
			encoder.array = Arrays.grow(encoder.array, size + encoder.array.length);
		} else {
			// current buffer will suffice, but need to flush it
			flush();
		}
	}
	// flush any remaining data to the flush function.
	def flush() {
		if (encoder.pos > 0) {
			total = total + encoder.pos;
			ffunc(encoder.array, 0, encoder.pos);
			encoder.pos = 0;
		}
	}
	// get the encoder which can output to this buffer
	def getEncoder() -> DataEncoder {
		return encoder;
	}
	// get the total number of bytes output to this buffer
	def getTotal() -> int {
		return total + encoder.pos;
	}
}
