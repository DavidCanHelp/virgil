namespace v3.lib.file.class;

// Overall structure of a class file.
struct JvmClassFile #big-endian {
	magic: 			u32;
	minor_version: 		u16;
	major_version: 		u16;
	constant_pool_count: 	u16;
	constant_pool: 		cp_info[constant_pool_count-1];
	access_flags:		u16;
	this_class:		u16;
	super_class:		u16;
	interfaces_count:	u16;
	interfaces:		u16[interfaces_count];
	fields_count:		u16;
	fields:			field_info[fields_count];
	methods_count:		u16;
	methods:		method_info[methods_count];
	attributes_count:	u16;
	attributes:		attribute_info[attributes_count];
}

// Access flags bits.
enum AccessFlags(mask: u16) {
	ACC_PUBLIC(0x0001),	// Declared public; may be accessed from outside its package.
	ACC_FINAL(0x0010),	// Declared final; no subclasses allowed.
	ACC_SUPER(0x0020),	// Treat superclass methods specially when invoked by the invokespecial instruction.
	ACC_INTERFACE(0x0200),	// Is an interface, not a class.
	ACC_ABSTRACT(0x0400),	// Declared abstract; must not be instantiated.
	ACC_SYNTHETIC(0x1000),	// Declared synthetic; not present in the source code.
	ACC_ANNOTATION(0x2000),	// Declared as an annotation type.
	ACC_ENUM(0x4000),	// Declared as an enum type.
}

// Kinds of constant pool entries.
enum JvmCpeKind(code: byte) {
	CLASS(7),
	FIELDREF(9),
	METHODREF(10),
	INTERFACEMETHODREF(11),
	STRING(8),
	INTEGER(3),
	FLOAT(4),
	LONG(5),
	DOUBLE(6),
	NAMEANDTYPE(12),
	UTF8(1),
	METHODHANDLE(15),
	METHODTYPE(16),
	INVOKEDYNAMIC(18)
}

// Class constant pool entry.
struct JvmCpeClass #big-endian {
	tag: 		u8; // == JvmCpeKind.CLASS
	name_index:	u16;
}

// Fieldref constant pool entry.
struct JvmCpeFieldRef #big-endian {
	tag:		u8; // == JvmCpeKind.FIELDREF
	class_index:	u16;
	name_and_type_index: u16;
}

// Methodref constant pool entry.
struct JvmCpeMethodRef #big-endian {
	tag:		u8; // == JvmCpeKind.METHODREF
	class_index:	u16;
	name_and_type_index: u16;
}

// Interface Methodref constant pool entry.
struct JvmCpeMethodRef #big-endian {
	tag:		u8; // == JvmCpeKind.INTERFACEMETHODREF
	class_index:	u16;
	name_and_type_index: u16;
}

struct JvmCpeString #big-endian {
	tag:		u8;
	string_index:	u16;
}

struct JvmCpeInteger #big-endian {
	tag:		u8;
	bytes:		u32;
}

struct JvmCpeFloat #big-endian {
	tag: 		u8;
	bytes:		float;
}

struct JvmCpeLong #big-endian {
	tag:		u8;
	bytes:		u64;
}

struct JvmCpeDouble #big-endian {
	tag:		u8;
	bytes:		double;
}

struct JvmCpeNameAndType #big-endian {
	tag:		u8;
	name_index:	u16;
	descriptor_index: u16;
}

struct JvmCpeUtf8 #big-endian {
	tag:		u8;
	length:		u16;
	bytes:		byte[length];
}

struct JvmCpeMethodHandle #big-endian {
	tag:		u8;
	reference_kind:	u8;
	reference_index: u16;
}

struct JvmCpeMethodType #big-endian {
	tag:		u8;
	descriptor_index: u16;
}

struct JvmCpeInvokeDynamic #big-endian {
	tag:		u8;
	bootstrap_method_attr_index: u16;
	name_and_type_index: u16;
}

struct field_info #big-endian {
	access_flags:		u16;
	name_index: 		u16;
	descriptor_index:	u16;
	attributes_count:	u16;
	attributes:		attribute_info[attributes_count];
}

enum FieldAccessFlags(mask: u16) {
	ACC_PUBLIC(0x0001),	// Declared public; may be accessed from outside its package.
	ACC_PRIVATE(0x0002),	// Declared private; usable only within the defining class.
	ACC_PROTECTED(0x0004),	// Declared protected; may be accessed within subclasses.
	ACC_STATIC(0x0008),	// Declared static.
	ACC_FINAL(0x0010),	// Declared final; never directly assigned to after object construction (JLS ยง17.5).
	ACC_VOLATILE(0x0040),	// Declared volatile; cannot be cached.
	ACC_TRANSIENT(0x0080),	// Declared transient; not written or read by a persistent object manager.
	ACC_SYNTHETIC(0x1000),	// Declared synthetic; not present in the source code.
	ACC_ENUM(0x4000),	// Declared as an element of an enum.
}

struct method_info #big-endian {
	access_flags:		u16;
	name_index: 		u16;
	descriptor_index:	u16;
	attributes_count:	u16;
	attributes:		attribute_info[attributes_count];
}

enum MethodAccessFlags(mask: u16) {
	ACC_PUBLIC(0x0001),	// Declared public; may be accessed from outside its package.
	ACC_PRIVATE(0x0002),	// Declared private; accessible only within the defining class.
	ACC_PROTECTED(0x0004),	// Declared protected; may be accessed within subclasses.
	ACC_STATIC(0x0008),	// Declared static.
	ACC_FINAL(0x0010),	// Declared final; must not be overridden (ยง5.4.5).
	ACC_SYNCHRONIZED(0x0020),	// Declared synchronized; invocation is wrapped by a monitor use.
	ACC_BRIDGE(0x0040),	// A bridge method, generated by the compiler.
	ACC_VARARGS(0x0080),	// Declared with variable number of arguments.
	ACC_NATIVE(0x0100),	// Declared native; implemented in a language other than Java.
	ACC_ABSTRACT(0x0400),	// Declared abstract; no implementation is provided.
	ACC_STRICT(0x0800),	// Declared strictfp; floating-point mode is FP-strict.
	ACC_SYNTHETIC(0x1000),	// Declared synthetic; not present in the source code.
}

struct attribute_info #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	info:			byte[attribute_length];
}

struct ConstantValue_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	constantvalue_index:	u16;
}

struct Code_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	max_stack:		u16;
	max_locals:		u16;
	code_length:		u32;
	code[code_length]:	u8;
	exception_table_length: u16;
	exception_table:	exception_info[exception_table_length];
	attributes_count:	u16;
	attributes:		attribute_info[attributes_count];
}

struct exception_info #big-endian {
	start_pc:	u16;
	end_pc:		u16;
	handler_pc:	u16;
	catch_type:	u16;
}

struct StackMapTable_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	number_of_entries:	u16;
	entries:		stack_map_frame[number_of_entries];
}

struct stack_map_frame {
	case same_frame;
	case same_locals_1_stack_item_frame;
	case same_locals_1_stack_item_frame_extended;
	case chop_frame;
	case same_frame_extended;
	case append_frame;
	case full_frame;
}

struct same_frame #big-endian {
	frame_type: 	byte = SAME; /* 0-63 */
}

struct same_locals_1_stack_item_frame #big-endian {
	frame_type:	byte = SAME_LOCALS_1_STACK_ITEM; /* 64-127 */
	stack:		verification_type_info [1];
}

struct same_locals_1_stack_item_frame_extended #big-endian {
	frame_type:	byte = SAME_LOCALS_1_STACK_ITEM_EXTENDED; /* 247 */
	offset_delta:	u16;
	stack:		verification_type_info[1];
}

struct chop_frame #big-endian {
	frame_type:	byte = CHOP; /* 248-250 */
	offset_delta:	u16;
}

struct same_frame_extended #big-endian {
	frame_type:	byte = SAME_FRAME_EXTENDED; /* 251 */
	offset_delta:	u16;
}

struct append_frame #big-endian {
	frame_type:	byte = APPEND; /* 252-254 */
	offset_delta:	u16;
	locals:		verification_type_info[frame_type - 251];
}

struct full_frame #big-endian {
	frame_type:		byte = FULL_FRAME; /* 255 */
	offset_delta:		u16;
	number_of_locals:	u16;
	locals:			verification_type_info[number_of_locals];
	number_of_stack_items:	u16;
	stack:			verification_type_info[number_of_stack_items];
}

struct verification_type_info #big-endian {
    case Top_variable_info;
    case Integer_variable_info;
    case Float_variable_info;
    case Long_variable_info;
    case Double_variable_info;
    case Null_variable_info;
    case UninitializedThis_variable_info;
    case Object_variable_info;
    case Uninitialized_variable_info;
}

struct Top_variable_info #big-endian {
	tag: byte = ITEM_Top; /* 0 */
}

struct Integer_variable_info #big-endian {
	tag: byte = ITEM_Integer; /* 1 */
}

struct Float_variable_info #big-endian {
	tag: byte = ITEM_Float; /* 2 */
}

struct Long_variable_info #big-endian {
	tag: byte = ITEM_Long; /* 4 */
}

struct Double_variable_info #big-endian {
	tag: byte = ITEM_Double; /* 3 */
}

struct Null_variable_info #big-endian {
	tag: byte = ITEM_Null; /* 5 */
}

struct UninitializedThis_variable_info #big-endian {
	tag: byte = ITEM_UninitializedThis; /* 6 */
}

struct Object_variable_info #big-endian {
	tag: byte = ITEM_Object; /* 7 */
	cpool_index: u16;
}

struct Uninitialized_variable_info #big-endian {
	tag: byte = ITEM_Uninitialized; /* 8 */
	offset: u16;
}

struct Exceptions_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	number_of_exceptions:	u16;
	exception_index_table:	u2[number_of_exceptions];
}

struct InnerClasses_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	number_of_classes:	u16;
	classes:		innerclass_info[number_of_classes];
}

struct innerclass_info #big-endian {
	inner_class_info_index:		u16;
	outer_class_info_index:		u16;
	inner_name_index:		u16;
	inner_class_access_flags:	u16;
}

enum InnerClassAccessFlags {
	ACC_PUBLIC(0x0001),	// Marked or implicitly public in source.
	ACC_PRIVATE(0x0002),	// Marked private in source.
	ACC_PROTECTED(0x0004),	// Marked protected in source.
	ACC_STATIC(0x0008),	// Marked or implicitly static in source.
	ACC_FINAL(0x0010),	// Marked final in source.
	ACC_INTERFACE(0x0200),	// Was an interface in source.
	ACC_ABSTRACT(0x0400),	// Marked or implicitly abstract in source.
	ACC_SYNTHETIC(0x1000),	// Declared synthetic; not present in the source code.
	ACC_ANNOTATION(0x2000),	// Declared as an annotation type.
	ACC_ENUM(0x4000),	// Declared as an enum type.
}

struct EnclosingMethod_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	class_index:		u16;
	method_index:		u16;
}

struct Synthetic_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
}

struct Signature_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	signature_index:	u16;
}

struct SourceFile_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	sourcefile_index:	u16;
}

struct SourceDebugExtension_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	debug_extension: byte[attribute_length];
}

struct LineNumberTable_attribute #big-endian {
	attribute_name_index:		u16;
	attribute_length:		u32;
	line_number_table_length:	u16;
	line_number_table: {
		start_pc:		u16;
		line_number:		u16;	
	}[line_number_table_length];
}

struct LocalVariableTable_attribute #big-endian {
	attribute_name_index:		u16;
	attribute_length:		u32;
	local_variable_table_length:	u16;
	local_variable_table: {
		start_pc:		u16;
	        length:			u16;
		name_index:		u16;
		descriptor_index:	u16;
		index:			u16;
	}[local_variable_table_length];
}

struct LocalVariableTypeTable_attribute #big-endian {
	attribute_name_index:			u16;
	attribute_length:			u32;
	local_variable_type_table_length:	u16;
	local_variable_type_table: {
		start_pc:			u16;
		length:				u16;
		name_index:			u16;
		signature_index:		u16;
		index:				u16;
	}[local_variable_type_table_length];
}

struct Deprecated_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
}

struct RuntimeVisibleAnnotations_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	num_annotations:	u16;
	annotations:		annotation[num_annotations];
}

struct annotation #big-endian {
	type_index:			u16;
	num_element_value_pairs:	u16;
	element_value_pairs: {
		element_name_index:	u16;
        	value:			element_value;
	}[num_element_value_pairs];
}


struct element_value #big-endian {
	tag: byte;
	case const_value {
		const_value_index: u16;
	}
	case enum_const_value {
		type_name_index: u16;
		const_name_index: u16;
	}
	case class_info {
		class_info_index: u16;
	}
	case {
		annotation_value: annotation;
	}
	case array_value {
		num_values: u16;
		values: element_value[num_values];
	}
}

struct RuntimeInvisibleAnnotations_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	num_annotations:	u16;
	annotations:		annotation[num_annotations];
}

struct RuntimeVisibleParameterAnnotations_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	num_parameters:		byte;
    	parameter_annotations: {
		num_annotations:	u16;
		annotations:		annotation[num_annotations];
	}[num_parameters];
}

struct RuntimeInvisibleParameterAnnotations_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	num_parameters:		byte;
	parameter_annotations: {
		num_annotations:	u16;
		annotations:		annotation[num_annotations];
	}[num_parameters];
}

struct AnnotationDefault_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	default_value:		element_value;
}

struct BootstrapMethods_attribute #big-endian {
	attribute_name_index:	u16;
	attribute_length:	u32;
	num_bootstrap_methods:	u16;
	bootstrap_methods: {
		bootstrap_method_ref:		u16;
		num_bootstrap_arguments:	u16;
		bootstrap_arguments:		u16[num_bootstrap_arguments];
	} [num_bootstrap_methods];
}
