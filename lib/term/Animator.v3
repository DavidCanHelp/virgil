// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Uses the system clock to repeatedly call the {animate} function at an adjustable
// target frequency. Keypresses are handled between frames and are passed to the
// {keypress} function. CTRL-C keypresses automatically terminate the animation
// loop.
class Animator(animate: u32 -> void, keypress: int -> void) {
	var cpu: u32;  // CPU load due to animation; 1000 = 100%
	var fps: u32;  // actual frames per second
	private var targetfps = 30u;  // target frames per second
	private var interval: u32;    // 1000000 / target frames per second
	def run() {
		var last = ticksUs();
		while (targetfps > 0) {
			// Perform an animation frame
			if (targetfps > 1000) {
				animate(0);
				processKeypress(0);
				continue;
			}
			var t0 = ticksUs();
			animate((t0 - last, last = t0).0);

			// Wait for keypresses for at most {interval} us.
			var t1 = ticksUs();
			cpu = (1000u * (ticksUs() - last)) / interval;
			if (cpu > 1000u) cpu = 1000u;
			while ((t1 - t0) < interval) {
				processKeypress(interval - (t1 - t0));
				t1 = ticksUs();
			}
			// Calculate frames per second
			fps = 2000000u / (t1 - t0);
			if ((fps & 1) == 1) fps++;  // round up 0.5
			fps = fps >>> 1;
		}
	}
	def stop() {
		targetfps = 0;
	}
	def setFPS(f: u32) {
		if (f <= 0) f = 1;
		if (f > 1000000) targetfps = 1000000;
		else targetfps = f;
		interval = 1000000u / targetfps;
	}
	def getFPS() -> u32 {
		return targetfps;
	}
	private def processKeypress(us: u32) {
		var ch = RawStdin.poll(int.!(us / 1000));
		if (ch == -1) return;           // No keypress.
		else if (ch == '\x03') stop();  // CTRL-C terminates the animation.
		else keypress(ch);              // Call the keypress handler.
	}
	private def ticksUs() -> u32 {
		return u32.!(System.ticksUs());
	}
}
