// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def ESC = '\x1b';
def upperLeftChar  = '\x6c';
def horizontalChar = '\x71'; // 196
def verticalChar   = '\x78'; // 179
def upperRightChar = '\x6b'; // 191
def lowerLeftChar  = '\x6d'; // 192
def lowerRightChar = '\x6a'; // 217

// Provides rudimentary control for vt100-compatible terminals.
component Vt100 {
	def puts = System.puts;
	def putc = System.putc;
	def puti = System.puti;
	def ln = System.ln;

	private def start = esc("[");

	def fgBlack = esc("[0;30m");
	def fgRed = esc("[0;31m");
	def fgGreen = esc("[0;32m");
	def fgBrown = esc("[0;33m");
	def fgBlue = esc("[0;34m");
	def fgPurple = esc("[0;35m");
	def fgCyan = esc("[0;36m");
	def fgLightGray = esc("[0;37m");
	def fgNorm = esc("[0m");

	def fgDarkgray = esc("[1;30m");
	def fgBrightRed = esc("[1;31m");
	def fgBrightGreen = esc("[1;32m");
	def fgYellow = esc("[1;33m");
	def fgBrightBlue = esc("[1;34m");
	def fgMagenta = esc("[1;35m");
	def fgBrightCyan = esc("[1;36m");
	def fgWhite = esc("[1;37m");

	def bgRed = esc("[0;41m");
	def bgGreen = esc("[0;42m");
	def bgYellow = esc("[0;43m");
	def bgBlue = esc("[0;44m");
	def bgMagenta = esc("[0;45m");
	def bgCyan = esc("[0;46m");
	def bgWhite = esc("[0;46m");

	def moveCursor(x: int, y: int) {
		if (x < 2 && y < 2) return moveHome();
		// move to arbitrary position
		start();
		puti(x);
		putc(';');
		puti(y);
		putc('H');
	}
	def moveHome = esc("[H");
	def moveCursorUp = icmd('A');
	def moveCursorDown = icmd('B');
	def moveCursorForward = icmd('C');
	def moveCursorBackward = icmd('D');
	def eraseOneLeft = lit("\x1b[0D \x1b[0D");
	def scrollUp = esc("M");
	def scrollDown = esc("D");
	def eraseToEndOfLine = esc("[K");
	def eraseToStartOfLine = esc("[1K");
	def eraseLine = esc("[2K");
	def eraseDown = esc("[J");
	def eraseUp = esc("[1J");
	def eraseScreen = esc("[2J");
	def setNormalBackground = esc("[0m");
	def setBackground(color: int) {
		if (color <= 0) return setNormalBackground();
		start();
		puti(40 + color - 1);
		putc('m');
	}
	def setNormalForeground = esc("[1m");
	def setForeground(color: int) {
		if (color <= 0) return setNormalForeground();
		start();
		puti(30 + color - 1);
		putc('m');
	}
	def enterExtendedAsciiMode = lit("\x0E");
	def enterNormalAsciiMode = lit("\x0F");
	def selectLineDraw = lit("\x1b)0");
	def showCursor = esc("[?25h");
	def hideCursor = esc("[?25l");

	private def lit(s: string) -> void -> void {
		return LitCmd.new(s).do;
	}
	def esc(s: string) -> void -> void {
		var buf = Array<byte>.new(s.length + 1);
		buf[0] = ESC;
		for (i < s.length) buf[i + 1] = s[i];
		return LitCmd.new(buf).do;
	}
	private def icmd(end: byte) -> int -> void {
		return IntCmd.new(end).do;
	}
	def drawBox(x: int, y: int, innerWidth: int, innerHeight: int) {
		var height = innerHeight + 2, width = innerWidth + 2;
		selectLineDraw();
		enterExtendedAsciiMode();
		moveCursor(x, y);
		putc(upperLeftChar);
		for (i < innerWidth) putc(horizontalChar);
		putc(upperRightChar);
		for (i < innerHeight) {
			moveCursor(i + 1 + x, y);
			putc(verticalChar);
			moveCursor(i + 1 + x, y + width - 1);
			putc(verticalChar);
		}
		moveCursor(height + x - 1, y);
		putc(lowerLeftChar);
		for (i < innerWidth) putc(horizontalChar);
		putc(lowerRightChar);
		enterNormalAsciiMode();
	}
}

// Acts as a closure over a string, but is somewhat more space efficient
// than a partially applied function.
class LitCmd(s: string) {
	def do() { System.puts(s); }
}

// XXX: global mutable buffers are _not_ thread safe.
def SP = ' ';
def ibuf0 = [ESC, SP];
def ibuf1 = [ESC, SP, SP];
def ibuf2 = [ESC, SP, SP, SP];
def ibuf3 = [ESC, SP, SP, SP, SP];

class IntCmd(end: byte) {
	def do(i: int) {
		if (i <= 1) do0();
		else if (i < 10) do1(i);
		else if (i < 100) do2(i);
		else do3(i);
	}
	def do0() {
		ibuf0[1] = end;
		System.puts(ibuf0);
	}
	def do1(i: int) {
		ibuf1[2] = end;
		ibuf1[1] = byte.!('0' + i);
		System.puts(ibuf1);
	}
	def do2(i: int) {
		ibuf2[3] = end;
		ibuf2[2] = byte.!('0' + (i % 10));
		ibuf2[1] = byte.!('0' + (i / 10));
		System.puts(ibuf2);
	}
	def do3(i: int) {
		ibuf3[4] = end;
		ibuf2[3] = byte.!('0' + (i % 10));
		ibuf2[2] = byte.!('0' + ((i / 10) % 10));
		ibuf2[1] = byte.!('0' + ((i / 100) % 10));
		System.puts(ibuf3);
	}
}
