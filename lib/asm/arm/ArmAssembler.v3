// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The set of general purpose registers on Arm.
type ArmReg {
	case R0;  case R1;  case R2;  case R3;
	case R4;  case R5;  case R6;  case R7;
	case R8;  case R9;  case R10; case R11;
	case R12; case R13; case R14; case R15;
}
type ArmCond {
	case EQ;    // Equal
	case NE;    // Not equal
	case CS;    // Carry set/unsigned higher or same
	case CC;    // Carry clear/unsigned lower
	case MI;    // Minus/negative
	case PL;    // Plus/positive or zero
	case VS;    // Overflow
	case VC;    // No overflow
	case HI;    // Unsigned higher
	case LS;    // Unsigned lower or same
	case GE;    // Signed greater than or equal
	case LT;    // Signed less than
	case GT;    // Signed greater than
	case LE;    // Signed less than or equal
	case AL;    // Always (unconditional)
	def negate() -> ArmCond {
		// XXX: make this an array lookup.
		match (this) {
			EQ => return ArmCond.NE;
			NE => return ArmCond.EQ;
			CS => return ArmCond.CC;
			CC => return ArmCond.CS;
			MI => return ArmCond.PL;
			PL => return ArmCond.MI;
			VS => return ArmCond.VC;
			VC => return ArmCond.VS;
			HI => return ArmCond.LS;
			LS => return ArmCond.HI;
			GE => return ArmCond.LT;
			LT => return ArmCond.GE;
			GT => return ArmCond.LE;
			LE => return ArmCond.GT;
			_ =>  {
				System.error("ArmAssemblerError", "cannot invert arm condition");
				return ArmCond.EQ;
			}
		}
	}
	def commute() -> ArmCond {
		// XXX: make this an array lookup.
		match (this) {
			EQ => return ArmCond.EQ;
			NE => return ArmCond.NE;
			CS => return ArmCond.LS;
			CC => return ArmCond.HI;
			HI => return ArmCond.CC;
			LS => return ArmCond.CS;
			GE => return ArmCond.LE;
			LT => return ArmCond.GT;
			GT => return ArmCond.LT;
			LE => return ArmCond.GE;
			AL => return ArmCond.AL;
			_ =>  {
				System.error("ArmAssemblerError", "cannot commute arm condition");
				return ArmCond.EQ;
			}
		}
	}
}
// Possible right-hand side operands for many arm instructions.
type ArmOperand {
	case Imm8(val: u8, rot: u4);
	case Reg(rm: ArmReg);
	case RegShlImm(rm: ArmReg, shift: u5);
	case RegShrImm(rm: ArmReg, shift: u5);
	case RegSarImm(rm: ArmReg, shift: u5);
	case RegRorImm(rm: ArmReg, shift: u5);
	case RegShlReg(rm: ArmReg, rs: ArmReg);
	case RegShrReg(rm: ArmReg, rs: ArmReg);
	case RegSarReg(rm: ArmReg, rs: ArmReg);
	case RegRorReg(rm: ArmReg, rs: ArmReg);
// TODO	case RegRrx(rm: ArmReg);
}
type ArmOffset {
	case AddImm(off: u12);
	case SubImm(off: u12);
	case AddReg(rm: ArmReg);
	case SubReg(rm: ArmReg);
	// TODO: shifts and rotates
}
type ArmSmallOffset {
	case AddImm(off: u8);
	case SubImm(off: u8);
	case AddReg(rm: ArmReg);
	case SubReg(rm: ArmReg);
}
def BIT25 = 1u << 25;
def BIT23 = 1u << 23;
def BIT22 = 1u << 22;
def BIT20 = 1u << 20;
// Assembles arm instructions into the provided buffer.
class ArmAssembler(w: DataWriter) {
	private var cond: ArmCond = ArmCond.AL;
	def pos() -> int {
		return w.pos;
	}
	def c(n: ArmCond) -> this { cond = n;}
	def eq() -> this { cond = ArmCond.EQ; }
	def ne() -> this { cond = ArmCond.NE; }
	def cs() -> this { cond = ArmCond.CS; }
	def cc() -> this { cond = ArmCond.CC; }
	def mi() -> this { cond = ArmCond.MI; }
	def pl() -> this { cond = ArmCond.PL; }
	def vs() -> this { cond = ArmCond.VS; }
	def vc() -> this { cond = ArmCond.VC; }
	def hi() -> this { cond = ArmCond.HI; }
	def ls() -> this { cond = ArmCond.LS; }
	def ge() -> this { cond = ArmCond.GE; }
	def lt() -> this { cond = ArmCond.LT; }
	def gt() -> this { cond = ArmCond.GT; }
	def le() -> this { cond = ArmCond.LE; }
	def al() -> this { cond = ArmCond.AL; }

	def mov(rd: ArmReg, op: ArmOperand) { data1_1(26, rd, op); }
	def movs(rd: ArmReg, op: ArmOperand) { data1_1(27, rd, op); }

	def lsli(rd: ArmReg, rm: ArmReg, imm: u5) { mov(rd, ArmOperand.RegShlImm(rm, imm)); }
	def lsri(rd: ArmReg, rm: ArmReg, imm: u5) { mov(rd, ArmOperand.RegShrImm(rm, imm)); }
	def asri(rd: ArmReg, rm: ArmReg, imm: u5) { mov(rd, ArmOperand.RegSarImm(rm, imm)); }
	def rori(rd: ArmReg, rm: ArmReg, imm: u5) { mov(rd, ArmOperand.RegRorImm(rm, imm)); }
	def lslr(rd: ArmReg, rm: ArmReg, sh: ArmReg) { mov(rd, ArmOperand.RegShlReg(rm, sh)); }
	def lsrr(rd: ArmReg, rm: ArmReg, sh: ArmReg) { mov(rd, ArmOperand.RegShrReg(rm, sh)); }
	def asrr(rd: ArmReg, rm: ArmReg, sh: ArmReg) { mov(rd, ArmOperand.RegSarReg(rm, sh)); }
	def rorr(rd: ArmReg, rm: ArmReg, sh: ArmReg) { mov(rd, ArmOperand.RegRorReg(rm, sh)); }

	def add(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(8, rd, rn, op); }
	def adds(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(9, rd, rn, op); }
	def adc(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(10, rd, rn, op); }
	def adcs(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(11, rd, rn, op); }
	def sub(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(4, rd, rn, op); }
	def subs(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(5, rd, rn, op); }
	def mul(rd: ArmReg, rs: ArmReg, rm: ArmReg) { emit_rrr(0x00000090, rd, rm, rs); }
	def muls(rd: ArmReg, rs: ArmReg, rm: ArmReg) { emit_rrr(0x00100090, rd, rm, rs); }
	def sdiv(rd: ArmReg, rs: ArmReg, rm: ArmReg) { emit_rrr(0x0710f010, rd, rm, rs); }
	def udiv(rd: ArmReg, rs: ArmReg, rm: ArmReg) { emit_rrr(0x0730f010, rd, rm, rs); }

	private def emit_rrr(opcode: u32, rd: ArmReg, rs: ArmReg, rm: ArmReg) {
		var pat =
			(u32.!(cond.tag) << 28) |
			(u32.!(rd.tag) << 16) |
			(u32.!(rs.tag) << 8) |
			opcode |
			(u32.!(rm.tag));
		emit(int.!(pat));
	}

	def and(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(0, rd, rn, op); }
	def ands(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(1, rd, rn, op); }
	def eor(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(2, rd, rn, op); }
	def eors(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(3, rd, rn, op); }
	def orr(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(24, rd, rn, op); }
	def orrs(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(25, rd, rn, op); }

	def cmp(rn: ArmReg, op: ArmOperand) { data2_0(21, rn, op); }
	def cmn(rn: ArmReg, op: ArmOperand) { data2_0(23, rn, op); }

	def ldrbzx(rd: ArmReg, rn: ArmReg, off: ArmOffset) { emitls(0x05500000, rd, rn, off); }
	def ldrbsx(rd: ArmReg, rn: ArmReg, off: ArmSmallOffset) { emitlss(0x011000D0, rd, rn, off); }
	def ldrhzx(rd: ArmReg, rn: ArmReg, off: ArmSmallOffset) { emitlss(0x011000B0, rd, rn, off); }
	def ldrhsx(rd: ArmReg, rn: ArmReg, off: ArmSmallOffset) { emitlss(0x011000F0, rd, rn, off); }
	def ldrw(rd: ArmReg, rn: ArmReg, off: ArmOffset) { emitls(0x05100000, rd, rn, off); }

	def strb(rd: ArmReg, rn: ArmReg, off: ArmOffset) { emitls(0x05400000, rd, rn, off); }
	def strh(rd: ArmReg, rn: ArmReg, off: ArmSmallOffset) { emitlss(0x010000B0, rd, rn, off); }
	def strw(rd: ArmReg, rn: ArmReg, off: ArmOffset) { emitls(0x05000000, rd, rn, off); }
	// TODO: base register updating load/stores

	def b(cond: ArmCond, off: i24) {
		emit((int.!(cond.tag) << 28) | 0x0a000000 | (off & 0x00FFFFFF));
	}
	def bl(cond: ArmCond, off: i24) {
		emit((int.!(cond.tag) << 28) | 0x0b000000 | (off & 0x00FFFFFF));
	}

	// assembles a load or store instruction
	def emitls(pat: u32, rd: ArmReg, rn: ArmReg, off: ArmOffset) {
		pat = pat |
			(u32.!(cond.tag) << 28) |
			(u32.!(rn.tag) << 16) |
			(u32.!(rd.tag) << 12);
		match (off) {
			AddImm(imm) => pat = pat | BIT23 | imm;
			SubImm(imm) => pat = pat | imm;
			AddReg(rm) => pat = pat | BIT25 | BIT23 | rm.tag;
			SubReg(rm) => pat = pat | BIT25 | rm.tag;
		}
		emit(int.!(pat));
	}
	// assembles a load or store instruction with a small offset
	def emitlss(pat: u32, rd: ArmReg, rn: ArmReg, off: ArmSmallOffset) {
		pat = pat |
			(u32.!(cond.tag) << 28) |
			(u32.!(rn.tag) << 16) |
			(u32.!(rd.tag) << 12);
		match (off) {
			AddImm(imm) => pat = pat | BIT23 | BIT22 | (u32.!(imm >>> 4) << 8) | (imm & 0xFu);
			SubImm(imm) => pat = pat         | BIT22 | (u32.!(imm >>> 4) << 8) | (imm & 0xFu);
			AddReg(rm) => pat = pat | BIT23 | rm.tag;
			SubReg(rm) => pat = pat         | rm.tag;
		}
		emit(int.!(pat));
	}
	// assembles a 1->1 data processing instruction
	def data1_1(opcode: u8, rd: ArmReg, op: ArmOperand) {
		var pat = (u32.!(cond.tag) << 28) |
			(u32.!(opcode) << 20) |
			(u32.!(rd.tag) << 12);
		emit(int.!(pat | shifter(op)));
	}
	// assembles a 2->0 data processing instruction
	def data2_0(opcode: u8, rn: ArmReg, op: ArmOperand) {
		var pat = (u32.!(cond.tag) << 28) |
			(u32.!(opcode) << 20) |
			(u32.!(rn.tag) << 16);
		emit(int.!(pat | shifter(op)));
	}
	// assembles a 2->1 data processing instruction
	def data2_1(opcode: u8, rd: ArmReg, rn: ArmReg, op: ArmOperand) {
		var pat = (u32.!(cond.tag) << 28) |
			(u32.!(opcode) << 20) |
			(u32.!(rn.tag) << 16) |
			(u32.!(rd.tag) << 12);
		emit(int.!(pat | shifter(op)));
	}
	// produces shifter bits (bit 25 and bits 0-11)
	def shifter(op: ArmOperand) -> u32 {
		var bit25 = 0u;
		var low = 0u;
		match (op) {
			Imm8(val, ror) => { bit25 = BIT25; low = (u32.!(ror) << 8) | val; }
			Reg(rm) => { low = rm.tag; }
			RegShlImm(rm, shift) => { low = (u32.!(shift) << 7) | rm.tag; }
			RegShrImm(rm, shift) => { low = (u32.!(shift) << 7) | 0x20 | rm.tag; }
			RegSarImm(rm, shift) => { low = (u32.!(shift) << 7) | 0x40 | rm.tag; }
			RegRorImm(rm, shift) => { low = (u32.!(shift) << 7) | 0x60 | rm.tag; }
			RegShlReg(rm, rs) => { low = (u32.!(rs.tag) << 7) | 0x10 | rm.tag; }
			RegShrReg(rm, rs) => { low = (u32.!(rs.tag) << 7) | 0x30 | rm.tag; }
			RegSarReg(rm, rs) => { low = (u32.!(rs.tag) << 7) | 0x50 | rm.tag; }
			RegRorReg(rm, rs) => { low = (u32.!(rs.tag) << 7) | 0x70 | rm.tag; }
		}
		return bit25 | low;
	}
	def emit(val: int) {
		w.put_b32(val);
		cond = ArmCond.AL;
	}
}
