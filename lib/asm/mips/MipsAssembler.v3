// Copyright 2016 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The set of general purpose registers on MIPS.
type MipsReg {
	case R0;  case R1;  case R2;  case R3;
	case R4;  case R5;  case R6;  case R7;
	case R8;  case R9;  case R10; case R11;
	case R12; case R13; case R14; case R15;
	case R16; case R17; case R18; case R19;
	case R20; case R21; case R22; case R23;
	case R24; case R25; case R26; case R27;
	case R28; case R29; case R30; case R31;
}
class MipsAssembler(w: DataWriter) {
	def pos() -> int { return w.pos; }

	// Arithmetic instructions
	def add(rd: MipsReg, rs: MipsReg, rt: MipsReg)  { emit_r3(0x00000020, rd, rs, rt); }
	def addi(rd: MipsReg, rs: MipsReg, imm: i16)    { emit_r2i(0x20000000, rd, rs, u16.!(imm)); }
	def addiu(rd: MipsReg, rs: MipsReg, imm: u16)   { emit_r2i(0x24000000, rd, rs, imm); }
	def addu(rd: MipsReg, rs: MipsReg, rt: MipsReg) { emit_r3(0x00000021, rd, rs, rt); }
	def and(rd: MipsReg, rs: MipsReg, rt: MipsReg)  { emit_r3(0x00000014, rd, rs, rt); }
	def andi(rd: MipsReg, rs: MipsReg, imm: u16)    { emit_r2i(0x30000000, rd, rs, imm); }
	def div(rs: MipsReg, rt: MipsReg)               { emit_r2i(0x00000000, rs, rt, 0x1a); }
	def divu(rs: MipsReg, rt: MipsReg)              { emit_r2i(0x00000000, rs, rt, 0x1b); }
	def mult(rs: MipsReg, rt: MipsReg)              { emit_r2i(0x00000000, rs, rt, 0x18); }
	def multu(rs: MipsReg, rt: MipsReg)             { emit_r2i(0x00000000, rs, rt, 0x19); }
	def or(rd: MipsReg, rs: MipsReg, rt: MipsReg)   { emit_r3(0x00000025, rd, rs, rt); }
	def ori(rd: MipsReg, rs: MipsReg, imm: u16)     { emit_r2i(0x00000034, rd, rs, imm); }
	def sll(rd: MipsReg, rs: MipsReg, imm: u5)      { w.put_b32be(0x0 | int.view(rs.tag) << 16 | int.view(rd.tag) << 11 | imm << 6); }
	def sllv(rd: MipsReg, rs: MipsReg, rt: MipsReg) { emit_r3(0x00000004, rd, rs, rt); }
	def sra(rd: MipsReg, rs: MipsReg, imm: u5)      { w.put_b32be(0x3 | int.view(rs.tag) << 16 | int.view(rd.tag) << 11 | imm << 6); }
	def srav(rd: MipsReg, rs: MipsReg, rt: MipsReg) { emit_r3(0x00000007, rd, rs, rt); }
	def srl(rd: MipsReg, rs: MipsReg, imm: u5)      { w.put_b32be(0x2 | int.view(rs.tag) << 16 | int.view(rd.tag) << 11 | imm << 6); }
	def srlv(rd: MipsReg, rs: MipsReg, rt: MipsReg) { emit_r3(0x00000006, rd, rs, rt); }
	def xor(rd: MipsReg, rs: MipsReg, rt: MipsReg)  { emit_r3(0x00000026, rd, rs, rt); }
	def xori(rd: MipsReg, rs: MipsReg, imm: u16)    { emit_r2i(0x38000000, rd, rs, imm); }
	def sub(rd: MipsReg, rs: MipsReg, rt: MipsReg)  { emit_r3(0x00000022, rd, rs, rt); }
	def subu(rd: MipsReg, rs: MipsReg, rt: MipsReg) { emit_r3(0x00000023, rd, rs, rt); }

	// Set instructions
	def slt(rd: MipsReg, rs: MipsReg, rt: MipsReg)  { emit_r3(0x0000002a, rd, rs, rt); }
	def slti(rd: MipsReg, rs: MipsReg, imm: i16)    { emit_r2i(0x28000000, rd, rs, u16.!(imm)); }
	def sltiu(rd: MipsReg, rs: MipsReg, imm: u16)   { emit_r2i(0x2c000000, rd, rs, u16.!(imm)); }
	def sltu(rd: MipsReg, rs: MipsReg, rt: MipsReg) { emit_r3(0x0000002b, rd, rs, rt); }

	// Branch instructions
	def beq(rs: MipsReg, rt: MipsReg, off: i16)  { emit_r2i(0x10000000, rs, rt, u16.!(off)); }
	def beql(rs: MipsReg, rt: MipsReg, off: i16) { emit_r2i(0x30000000, rs, rt, u16.!(off)); }
	def bgez(rs: MipsReg, off: i16)    { emit_r1(0x02010000, rs, u16.!(off)); }
	def bgezal(rs: MipsReg, off: i16)  { emit_r1(0x02110000, rs, u16.!(off)); }
	def bgezall(rs: MipsReg, off: i16) { emit_r1(0x02130000, rs, u16.!(off)); }
	def bgezl(rs: MipsReg, off: i16)   { emit_r1(0x02030000, rs, u16.!(off)); }
	def bgtz(rs: MipsReg, off: i16)    { emit_r1(0x1b000000, rs, u16.!(off)); }
	def bgtzl(rs: MipsReg, off: i16)   { emit_r1(0x3b000000, rs, u16.!(off)); }
	def blez(rs: MipsReg, off: i16)    { emit_r1(0x18000000, rs, u16.!(off)); }
	def blezl(rs: MipsReg, off: i16)   { emit_r1(0x38000000, rs, u16.!(off)); }
	def bltz(rs: MipsReg, off: i16)    { emit_r1(0x38000000, rs, u16.!(off)); }
	def bltzal(rs: MipsReg, off: i16)  { emit_r1(0x04100000, rs, u16.!(off)); }
	def bltzall(rs: MipsReg, off: i16) { emit_r1(0x04120000, rs, u16.!(off)); }
	def bltzl(rs: MipsReg, off: i16)   { emit_r1(0x42020000, rs, u16.!(off)); }
	def bne(rs: MipsReg, rt: MipsReg, off: i16) { emit_r2i(0x14000000, rs, rt, u16.!(off)); }
	def bnel(rs: MipsReg, rt: MipsReg, off: i16) { emit_r2i(0x54000000, rs, rt, u16.!(off)); }

	def brk(code: u20) { w.put_b32be(0x0000000d | int.view(code) << 6); }

	def j(target: u26) { w.put_b32be(0x08000000 | target); }
	def jal(target: u26) { w.put_b32be(0x0c000000 | target); }
	def jalr(rd: MipsReg, rs: MipsReg) { emit_r3(0x00000009, rd, rs, MipsReg.R0); }
	def jr(target: MipsReg) { w.put_b32be(0x00000008 | int.view(target.tag) << 21); }

	// Trap instructions
	def teq(rs: MipsReg, rt: MipsReg, code: u10)  { emit_r2i(0x00000034, rs, rt, u16.!(code) << 6); }
	def tne(rs: MipsReg, rt: MipsReg, code: u10)  { emit_r2i(0x00000036, rs, rt, u16.!(code) << 6); }
	def tlt(rs: MipsReg, rt: MipsReg, code: u10)  { emit_r2i(0x00000032, rs, rt, u16.!(code) << 6); }
	def tltu(rs: MipsReg, rt: MipsReg, code: u10) { emit_r2i(0x00000033, rs, rt, u16.!(code) << 6); }
	def tgt(rs: MipsReg, rt: MipsReg, code: u10)  { emit_r2i(0x00000034, rs, rt, u16.!(code) << 6); }
	def tge(rs: MipsReg, rt: MipsReg, code: u10)  { emit_r2i(0x00000030, rs, rt, u16.!(code) << 6); }
	def tgeu(rs: MipsReg, rt: MipsReg, code: u10) { emit_r2i(0x00000031, rs, rt, u16.!(code) << 6); }

	// Loads and stores
	def lb(rd: MipsReg, rs: MipsReg, offset: u16)  { emit_r2i(0x80000000, rd, rs, offset); }
	def lbu(rd: MipsReg, rs: MipsReg, offset: u16) { emit_r2i(0x90000000, rd, rs, offset); }
	def lh(rd: MipsReg, rs: MipsReg, offset: u16)  { emit_r2i(0x84000000, rd, rs, offset); }
	def lhu(rd: MipsReg, rs: MipsReg, offset: u16) { emit_r2i(0x94000000, rd, rs, offset); }
	def lui(rd: MipsReg, imm: u16)                 { emit_r2i(0x3c000000, MipsReg.R0, rd, imm); }
	def lw(rd: MipsReg, rs: MipsReg, offset: u16)  { emit_r2i(0x8c000000, rd, rs, offset); }
	def sb(rs: MipsReg, rt: MipsReg, offset: u16)  { emit_r2i(0xa0000000, rs, rt, offset); }
	def sh(rs: MipsReg, rt: MipsReg, offset: u16)  { emit_r2i(0xa4000000, rs, rt, offset); }
	def sw(rs: MipsReg, rt: MipsReg, offset: u16)  { emit_r2i(0xac000000, rs, rt, offset); }

	// Access $LO and $HI registers
	def mfhi(rd: MipsReg) { w.put_b32be(0x00000010 | int.view(rd.tag) << 11); }
	def mflo(rd: MipsReg) { w.put_b32be(0x00000012 | int.view(rd.tag) << 11); }

	def move(rd: MipsReg, rs: MipsReg) { or(rd, rs, MipsReg.R0); }

	def syscall(code: u20) { w.put_b32be(0x00000004 | int.view(code) << 6); }

	def emit_r3(opcode: int, rd: MipsReg, rs: MipsReg, rt: MipsReg) {
		w.put_b32be(opcode | int.view(rd.tag) << 11 | int.view(rt.tag) << 16 | int.view(rs.tag) << 21);
	}
	def emit_r2i(opcode: int, rd: MipsReg, rs: MipsReg, imm: u16) {
		w.put_b32be(opcode | int.view(rs.tag) << 21 | int.view(rd.tag) << 16 | imm);
	}
	def emit_r1(opcode: int, rs: MipsReg, imm: u16) {
		w.put_b32be(opcode | int.view(rs.tag) << 21 | imm);
	}
}
