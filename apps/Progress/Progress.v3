// Copyright 2017 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

enum Verbose {
	INLINE,
	CHARACTER,
	LINES
}

def CTRL_C: byte = 0x03;
def CTRL_D: byte = 0x04;
def STDIN = 0;
def STDOUT = 1;

// IO and terminal formatting helpers.
def hexMap = "0123456789ABCDEF";
def RED = Vt100.fgRed;
def GREEN = Vt100.fgGreen;
def NORM = Vt100.fgNorm;
def outc = System.putc;
def outi = System.puti;
def outs = System.puts;
def outln = System.ln;
def green(s: string) {
	GREEN();
	outs(s);
	NORM();
}
def red(s: string) {
	RED();
	outs(s);
	NORM();
}

var verbose = Verbose.LINES;

def main(a: Array<string>) -> int {
//	RawStdin.enable();
	if (System.fileLeft(STDIN) < 0) runStreaming();
	else runFile();
//	RawStdin.restore();
	return 0;
}
def runStreaming() {
	outs("[stdin is streaming]\n");
	var buf = Vector<byte>.new();
	var p = Processor.new(buf);
	while (true) {
		var v = System.fileRead(STDIN);
		if (v < 0) break;
		var b = byte.!(v);
		if (b == CTRL_C) break;
		if (b == CTRL_D) break;
		buf.add(b);
		if (b == '\n') {
			p.processLine(0, buf.length);
			buf.length = 0;
		}
	}
}
def runFile() {
	outs("[stdin is file]\n");
	var fileLength = System.fileLeft(STDIN);
	var buf = Vectors.ofN(Array<byte>.new(fileLength));
	outs("[file is ");
	outi(fileLength);
	outs(" bytes]\n");
	var p = Processor.new(buf);
	for (i < buf.length) buf[i] = byte.!(System.fileRead(STDIN));
	var pos = 0, start = 0;
	while (pos < buf.length) {
		if (buf[pos] == '\n') {
			p.processLine(start, pos);
			start = pos + 1;
		}
		pos++;
	}
	if (start < buf.length) p.processLine(start, buf.length);
	p.report();
}

class Suite(total: int) {
	var passed: int;					// number of tests passed
	def failed = Vector<(string, string, int, int)>.new();	// (name, error, bodyStart, bodyEnd) pairs
	var currentTestName: string;				// name of the currently running test, null if none
	var currentTestBody: int;				// start of the 

	def beginTest(name: string, bodyStart: int) {
		currentTestName = name;
		if (verbose == Verbose.LINES) {
			outs(name);
			outs("...");
		}
	}

	def endTest(error: string, bodyEnd: int) {
		if (error != null) {
			failed.add(currentTestName, error, currentTestBody, bodyEnd);
			reportFailed(error);
		} else {
			passed++;
			reportPassed();
		}
	}

	def reportPassed() {
		match (verbose) {
			INLINE => ;  // TODO
			CHARACTER => {
				green("o");
				space();
			}
			LINES => {
				green("ok");
				outln();
			}
		}
	}
	def reportFailed(error: string) {
		match (verbose) {
			INLINE => ;  // TODO
			CHARACTER => {
				red("X");
				space();
			}
			LINES => {
				red("failed");
				outln();
			}
		}
	}
	def finish() {
		var done = passed + failed.length;
		if (verbose == Verbose.LINES) {
			if (passed == done) {
				outi(passed);
				outs(" tests ");
				green("ok");
				outln();
			} else {
				outi(passed);
				outs(" tests ok, ");
				outi(failed.length);
				red(" failed ");
				outs("of ");
				outi(total);
				outln();
			}
		}
		for (i < failed.length) {
			var t = failed[i];
			red(t.0);
			outs(": ");
			outs(t.1);
			outs("\n");
		}
	}
	def space() {
		var done = passed + failed.length;
		if (done % 10 == 0 || done == total) {
			outc(' ');
		}
		if (done % 50 == 0 || done == total) {
			outi(done);
			outs(" of ");
			outi(total);
			outln();
		}
	}
}

class Processor(buf: Vector<byte>) {
	var suites = Stack<Suite>.new();

	def processLine(pos: int, end: int) {
		if (end == pos) return; // skip empty lines
		match (buf[pos]) {
			'#' => beginSuite(pos+1, end);
			'+' => beginTest(pos+1, end);
			'-' => endTest(pos+1, end);
			_ => ;  // TODO: fail?
		}
	}
	def beginSuite(pos: int, end: int) {
		var str = Arrays.range(buf.array, pos, end);
		var count = Int.parseDecimal(str);
		if (count.passed) suites.push(Suite.new(count.val));
		else ; // TODO: input error
	}
	def suite() -> Suite {
		if (!suites.empty()) return suites.peek();
		return Suite.new(0);
	}
	def beginTest(pos: int, end: int) {
		var curTestName = Arrays.range(buf.array, pos, end);
		var curTestBody = end + 1;
		suite().beginTest(curTestName, curTestBody);
	}
	def endTest(pos: int, end: int) {
		var passed = matchStr("ok", buf.array, pos, end);
		var error: string;
		if (!passed) error = Arrays.range(buf.array, pos, end);
		suite().endTest(error, pos-1);
	}
	def report() {
		while (!suites.empty()) {
			var s = suites.pop();
			s.finish();
		}
	}
}

def matchStr(expected: string, array: Array<byte>, pos: int, end: int) -> bool {
	if ((pos + expected.length) > end) return false;
	for (i < expected.length) {
		if (expected[i] != array[pos + i]) return false;
	}
	return true;
}