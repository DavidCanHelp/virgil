class IndirectNode(index: int, sig: FunctionSig) {
	def targets = Vector<CallNode>.new();
}
class CallNode(func: WasmFunction) {
	def direct = Vector<(CallNode, Array<void>)>.new();
	def indirect = Vector<(IndirectNode, Array<void>)>.new();
	def imports = Vector<(WasmImport, Array<void>)>.new();
}
class CallGraphBuilder(module: WasmModule) {
	def nodes = Vector<CallNode>.new();
	def indirect = Vector<IndirectNode>.new();
	def queue = Vector<CallNode>.new();

	def buildGraph(data: Array<byte>) -> Vector<CallNode> {
		var roots = Vector<CallNode>.new();
		var env = ModuleEnvFor.new(module);
		roots.add(getDirectNode(module.startFunction));
		for (i < module.exports.length) {
			roots.add(getDirectNode(module.exports.get(i).func_index));
		}
		for (i < roots.length) {
			roots.add(queue.get(i));
		}
		while (queue.length > 0) {
			var node = queue.get(--queue.length);
			visit(node, getAst(node, data));
		}
		return roots;
	}
	def getAst(node: CallNode, data: Array<byte>);
	def visit(node: CallNode, v: void);
	def getIndirectNode(index: int) -> IndirectNode {
		if (indirect.length <= index) {
			indirect.grow(index + 1);
			indirect.length = index + 1;
		}
		var node = indirect.get(index);
		if (node == null) {
			node = IndirectNode.new(index, module.signatures.get(index));
			indirect.set(index, node);
			for (i < module.inits.length) {
				var init = module.inits.get(i);
				for (e in init.entries) {
					var func = module.functions.get(e);
					if (func.sig_index == index) node.targets.add(getDirectNode(e));
				}
			}
		}
		return node;
	}
	def getDirectNode(index: int) -> CallNode {
		if (nodes.length <= index) {
			nodes.grow(index + 1);
			nodes.length = index + 1;
		}
		var node = nodes.get(index);
		if (node == null) {
			node = CallNode.new(module.functions.get(index));
			nodes.set(index, node);
		}
		return node;
	}
}