type float {}  // placeholder for float type
type double {} // placeholder for double type

enum ValueType(code: byte, short: byte, lname: string) {
	I32(0x7f, 'i', "i32"),
	I64(0x7e, 'l', "i64"),
	F32(0x7d, 'f', "f32"),
	F64(0x7c, 'd', "f64")
}

enum TypeConstructors(code: byte) {
	AnyFunc(0x70),
	Function(0x60),
	EmptyBlock(0x40)
}

class FunctionSig(ret: Array<ValueType>, params: Array<ValueType>) {
	def prepend(t: ValueType) -> FunctionSig {
		return FunctionSig.new(ret, Arrays.prepend(t, params));
	}
        def equals(that: FunctionSig) -> bool {
        	if (this == that) return true;
           	if (that == null) return false;
                if (this.ret.length != that.ret.length) return false;
                if (this.params.length != that.params.length) return false;
                for (i < this.ret.length) if (this.ret[i] != that.ret[i]) return false;
                for (i < this.params.length) if (this.params[i] != that.params[i]) return false;
                return true;
       	}
}

def nosig: FunctionSig;
def i1 = [ValueType.I32];
def i2 = [ValueType.I32, ValueType.I32];
def l1 = [ValueType.I64];
def l2 = [ValueType.I64, ValueType.I64];
def f1 = [ValueType.F32];
def f2 = [ValueType.F32, ValueType.F32];
def d1 = [ValueType.F64];
def d2 = [ValueType.F64, ValueType.F64];
def v: Array<ValueType> = [];

def SIG = FunctionSig.new;
def i_i  = SIG(i1, i1), d_d  = SIG(d1, d1), f_f  = SIG(f1, f1), l_l  = SIG(l1, l1);
def i_ii = SIG(i1, i2), l_ll = SIG(l1, l2), f_ff = SIG(f1, f2), d_dd = SIG(d1, d2);
def i_dd = SIG(i1, d2), i_ll = SIG(i1, l2), i_ff = SIG(i1, f2), i_l  = SIG(i1, l1);
def i_f = SIG(i1, f1),  i_d  = SIG(i1, d1), l_i  = SIG(l1, i1), l_d  = SIG(l1, d1);
def f_i = SIG(f1, i1),  f_l  = SIG(f1, l1), f_d  = SIG(f1, d1), d_i  = SIG(d1, i1);
def d_l = SIG(d1, l1),  d_f  = SIG(d1, f1), v_ii = SIG(v, i2),  l_f  = SIG(l1, f1);
def i_v = SIG(i1, v),   l_v  = SIG(l1, v),  f_v  = SIG(f1, v),  d_v  = SIG(d1, v);
def v_il = SIG(v, [ValueType.I32, ValueType.I64]);
def v_if = SIG(v, [ValueType.I32, ValueType.F32]);
def v_id = SIG(v, [ValueType.I32, ValueType.F64]);

enum ImmediateKind {
	None,
	LocalIndex,
	GlobalIndex,
	FunctionIndex,
	CallIndirectOperand,
	MemoryOperand,
	BlockType,
	ControlDepth,
	I32V,
	I64V,
	F32,
	F64
}

def noimm = ImmediateKind.None;
def memimm = ImmediateKind.MemoryOperand;
enum WasmOpcode(opcode: byte, immkind: ImmediateKind, sig: FunctionSig) {
	// Control operators
	Unreachable(0x00, noimm, nosig),
	Nop(0x01, noimm, nosig),
	Block(0x02, ImmediateKind.BlockType, nosig),
	Loop(0x03, ImmediateKind.BlockType, nosig),
	If(0x04, ImmediateKind.BlockType, nosig),
	Else(0x05, noimm, nosig),
	End(0x0b, noimm, nosig),
	Br(0x0c, ImmediateKind.ControlDepth, nosig),
	BrIf(0x0d, ImmediateKind.ControlDepth, nosig),
	BrTable(0x0e, ImmediateKind.ControlDepth, nosig),
	Return(0x0f, noimm, nosig),
	// Call operators
	Call(0x10, ImmediateKind.FunctionIndex, nosig),
	CallIndirect(0x11, ImmediateKind.CallIndirectOperand, nosig),
	// Parametric operators
	Drop(0x1a, noimm, nosig),
	Select(0x1b, noimm, nosig),
	// Variable access
	GetLocal(0x20, ImmediateKind.LocalIndex, nosig),
	SetLocal(0x21, ImmediateKind.LocalIndex, nosig),
	TeeLocal(0x22, ImmediateKind.LocalIndex, nosig),
	GetGlobal(0x23, ImmediateKind.GlobalIndex, nosig),
	SetGlobal(0x24, ImmediateKind.GlobalIndex, nosig),
	// Memory loads
	I32Load(0x28, memimm, i_i),
	I64Load(0x29, memimm, l_i),
	F32Load(0x2a, memimm, f_i),
	F64Load(0x2b, memimm, d_i),
	I32Load8_s(0x2c, memimm, i_i),
	I32Load8_u(0x2d, memimm, i_i),
	I32Load16_s(0x2e, memimm, i_i),
	I32Load16_u(0x2f, memimm, i_i),
	I64Load8_s(0x30, memimm, l_i),
	I64Load8_u(0x31, memimm, l_i),
	I64Load16_s(0x32, memimm, l_i),
	I64Load16_u(0x33, memimm, l_i),
	I64Load32_s(0x34, memimm, l_i),
	I64Load32_u(0x35, memimm, l_i),
	// Memory stores
	I32Store(0x36, memimm, v_ii),
	I64Store(0x37, memimm, v_il),
	F32Store(0x38, memimm, v_if),
	F64Store(0x39, memimm, v_id),
	I32Store8(0x3a, memimm, v_ii),
	I32Store16(0x3b, memimm, v_ii),
	I64Store8(0x3c, memimm, v_il),
	I64Store16(0x3d, memimm, v_il),
	I64Store32(0x3e, memimm, v_il),
	// Miscellaneous memory operations
	CurrentMemory(0x3f, ImmediateKind.I32V, i_v),
	GrowMemory(0x40, ImmediateKind.I32V, i_i),
	// Constants
	I32Const(0x41, ImmediateKind.I32V, i_v),
	I64Const(0x42, ImmediateKind.I64V, l_v),
	F32Const(0x43, ImmediateKind.F32, f_v),
	F64Const(0x44, ImmediateKind.F64, d_v),
	// Comparisons
	I32Eqz(0x45, noimm, i_i),
	I32Eq(0x46, noimm, i_ii),
	I32Ne(0x47, noimm, i_ii),
	I32Lt_s(0x48, noimm, i_ii),
	I32Lt_u(0x49, noimm, i_ii),
	I32Gt_s(0x4a, noimm, i_ii),
	I32Gt_u(0x4b, noimm, i_ii),
	I32Le_s(0x4c, noimm, i_ii),
	I32Le_u(0x4d, noimm, i_ii),
	I32Ge_s(0x4e, noimm, i_ii),
	I32Ge_u(0x4f, noimm, i_ii),
	I64Eqz(0x50, noimm, i_l),
	I64Eq(0x51, noimm, i_ll),
	I64Ne(0x52, noimm, i_ll),
	I64Lt_s(0x53, noimm, i_ll),
	I64Lt_u(0x54, noimm, i_ll),
	I64Gt_s(0x55, noimm, i_ll),
	I64Gt_u(0x56, noimm, i_ll),
	I64Le_s(0x57, noimm, i_ll),
	I64Le_u(0x58, noimm, i_ll),
	I64Ge_s(0x59, noimm, i_ll),
	I64Ge_u(0x5a, noimm, i_ll),
	F32Eq(0x5b, noimm, i_ff),
	F32Ne(0x5c, noimm, i_ff),
	F32Lt(0x5d, noimm, i_ff),
	F32Gt(0x5e, noimm, i_ff),
	F32Le(0x5f, noimm, i_ff),
	F32Ge(0x60, noimm, i_ff),
	F64Eq(0x61, noimm, i_dd),
	F64Ne(0x62, noimm, i_dd),
	F64Lt(0x63, noimm, i_dd),
	F64Gt(0x64, noimm, i_dd),
	F64Le(0x65, noimm, i_dd),
	F64Ge(0x66, noimm, i_dd),
	// Numeric operations
	I32Clz(0x67, noimm, i_i),
	I32Ctz(0x68, noimm, i_i),
	I32Popcnt(0x69, noimm, i_i),
	I32Add(0x6a, noimm, i_ii),
	I32Sub(0x6b, noimm, i_ii),
	I32Mul(0x6c, noimm, i_ii),
	I32Div_s(0x6d, noimm, i_ii),
	I32Div_u(0x6e, noimm, i_ii),
	I32Rem_s(0x6f, noimm, i_ii),
	I32Rem_u(0x70, noimm, i_ii),
	I32And(0x71, noimm, i_ii),
	I32Or(0x72, noimm, i_ii),
	I32Xor(0x73, noimm, i_ii),
	I32Shl(0x74, noimm, i_ii),
	I32Shr_s(0x75, noimm, i_ii),
	I32Shr_u(0x76, noimm, i_ii),
	I32Rotl(0x77, noimm, i_ii),
	I32Rotr(0x78, noimm, i_ii),
	I64Clz(0x79, noimm, l_l),
	I64Ctz(0x7a, noimm, l_l),
	I64Popcnt(0x7b, noimm, l_l),
	I64Add(0x7c, noimm, l_ll),
	I64Sub(0x7d, noimm, l_ll),
	I64Mul(0x7e, noimm, l_ll),
	I64Div_s(0x7f, noimm, l_ll),
	I64Div_u(0x80, noimm, l_ll),
	I64Rem_s(0x81, noimm, l_ll),
	I64Rem_u(0x82, noimm, l_ll),
	I64And(0x83, noimm, l_ll),
	I64Or(0x84, noimm, l_ll),
	I64Xor(0x85, noimm, l_ll),
	I64Shl(0x86, noimm, l_ll),
	I64Shr_s(0x87, noimm, l_ll),
	I64Shr_u(0x88, noimm, l_ll),
	I64Rotl(0x89, noimm, l_ll),
	I64Rotr(0x8a, noimm, l_ll),
	F32Abs(0x8b, noimm, f_f),
	F32Neg(0x8c, noimm, f_f),
	F32Ceil(0x8d, noimm, f_f),
	F32Floor(0x8e, noimm, f_f),
	F32Trunc(0x8f, noimm, f_f),
	F32Nearest(0x90, noimm, f_f),
	F32Sqrt(0x91, noimm, f_f),
	F32Add(0x92, noimm, f_ff),
	F32Sub(0x93, noimm, f_ff),
	F32Mul(0x94, noimm, f_ff),
	F32Div(0x95, noimm, f_ff),
	F32Min(0x96, noimm, f_ff),
	F32Max(0x97, noimm, f_ff),
	F32Copysign(0x98, noimm, f_ff),
	F64Abs(0x99, noimm, d_d),
	F64Neg(0x9a, noimm, d_d),
	F64Ceil(0x9b, noimm, d_d),
	F64Floor(0x9c, noimm, d_d),
	F64Trunc(0x9d, noimm, d_d),
	F64Nearest(0x9e, noimm, d_d),
	F64Sqrt(0x9f, noimm, d_d),
	F64Add(0xa0, noimm, d_dd),
	F64Sub(0xa1, noimm, d_dd),
	F64Mul(0xa2, noimm, d_dd),
	F64Div(0xa3, noimm, d_dd),
	F64Min(0xa4, noimm, d_dd),
	F64Max(0xa5, noimm, d_dd),
	F64Copysign(0xa6, noimm, d_dd),
	// Conversion operations
	I32Wrap_I64(0xa7, noimm, i_l),
	I32Trunc_s_F32(0xa8, noimm, i_f),
	I32Trunc_u_F32(0xa9, noimm, i_f),
	I32Trunc_s_F64(0xaa, noimm, i_d),
	I32Trunc_u_F64(0xab, noimm, i_d),
	I64Extend_s_I32(0xac, noimm, l_i),
	I64Extend_u_I32(0xad, noimm, l_i),
	I64Trunc_s_F32(0xae, noimm, l_f),
	I64Trunc_u_F32(0xaf, noimm, l_f),
	I64Trunc_s_F64(0xb0, noimm, l_d),
	I64Trunc_u_F64(0xb1, noimm, l_d),
	F32Convert_s_I32(0xb2, noimm, f_i),
	F32Convert_u_I32(0xb3, noimm, f_i),
	F32Convert_s_I64(0xb4, noimm, f_l),
	F32Convert_u_I64(0xb5, noimm, f_l),
	F32Demote_F64(0xb6, noimm, f_d),
	F64Convert_s_I32(0xb7, noimm, d_i),
	F64Convert_u_I32(0xb8, noimm, d_i),
	F64Convert_s_I64(0xb9, noimm, d_l),
	F64Convert_u_I64(0xba, noimm, d_l),
	F64Promote_F32(0xbb, noimm, d_f),
	// Reinterpretations
	I32Reinterpret_F32(0xbc, noimm, i_f),
	I64Reinterpret_F64(0xbd, noimm, l_d),
	F32Reinterpret_I32(0xbe, noimm, f_i),
	F64Reinterpret_I64(0xbf, noimm, d_l),
}

component WasmOpcodes {
	def signatures = Array<FunctionSig>.new(256);
	def opcodes = Array<WasmOpcode>.new(256);
	new() {
		for (op in WasmOpcode) init(op);
	}
	def init(opcode: WasmOpcode) {
		signatures(opcode.opcode) = opcode.sig;
		opcodes(opcode.opcode) = opcode;
	}
}

type InitExpr {
	case None;
	case I32Const(val: int);
	case I64Const(val: long);
	case F32Const(val: float);
	case F64Const(val: double);
	case GlobalIndex(index: u32);
}