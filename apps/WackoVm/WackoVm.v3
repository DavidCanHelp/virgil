var flagM: bool;
var flagS: bool;
var flagI: bool;
var flagF: bool;
var flagE: bool;

def main(args: Array<string>) -> int {
	for (fileName in args) {
		if (fileName.length > 0 && fileName[0] == '-') {
			for (ch in fileName) {
				if (ch == 'm') flagM = true;
				if (ch == 's') flagS = true;
				if (ch == 'i') flagI = true;
				if (ch == 'f') flagF = true;
				if (ch == 'e') flagE = true;
				if (ch == 'v') Debug.verbose = true;
			}
			continue;
		}

		var data = System.fileLoad(fileName);
		if (data == null) System.error("FileNotFound", fileName);
		System.puts("Loading ");
		System.puts(fileName);
		System.puts("...\n");
		var decoder = ModuleDecoder.new(data);
		var module = decoder.read();
		dumpModule(module);
	}
	return 0;
}
def dumpModule(module: WasmModule) {
	resolveSignatures(module);
	dumpAll(flagM, "memories", module.memories, dumpMemory);
	dumpAll(flagS, "types", module.signatures, dumpFunctionSig);
	dumpAll(flagI, "imports", module.imports, dumpImport);
	dumpAll(flagF, "functions", module.functions, dumpFunction);
	dumpAll(flagE, "exports", module.exports, dumpExport);
}
def buf = StringBuffer.new();
def dumpAll<T>(flag: bool, name: string, list: Vector<T>, dump: (T, StringBuffer) -> StringBuffer) {
	buf.reset();
	buf.puts("  ");
	buf.puts(name);
	buf.puts(" = ");
	buf.puti(list.length);
	buf.ln();
	if (flag) {
		for (i < list.length) {
			buf.puts("    ");
			buf.puti(i);
			buf.puts(": ");
			dump(list.get(i), buf);
			buf.ln();
		}
	}
	System.puts(buf.toString());
}
def dumpMemory(memory: WasmMemory, buf: StringBuffer) -> StringBuffer {
	return buf;
}
def dumpFunctionSig(sig: FunctionSig, buf: StringBuffer) -> StringBuffer {
	if (sig == null) return buf.puts("<null>");
	if (true) {  // short version
		for (i < sig.ret.length) buf.putc(sig.ret[i].short);
		if (sig.ret.length == 0) buf.puts("v");
		buf.puts("_");
		for (i < sig.params.length) buf.putc(sig.params[i].short);
		if (sig.params.length == 0) buf.puts("v");
	} else {
		for (i < sig.params.length) {
			if (i > 0) buf.puts(", ");
			buf.puts(sig.params[i].lname);
		}
		buf.puts(" -> ");
		for (i < sig.ret.length) {
			if (i > 0) buf.puts(", ");
			buf.puts(sig.ret[i].lname);
		}
	}
	return buf;
}
def dumpImport(import: WasmImport, buf: StringBuffer) -> StringBuffer {
	buf.puts(import.module_name);
	buf.puts(".");
	buf.puts(import.func_name);
	buf.puts(": ");
	return dumpFunctionSig(import.sig, buf);
}
def dumpFunction(function: WasmFunction, buf: StringBuffer) -> StringBuffer {
	if (function.name != null) buf.puts(function.name);
	buf.puts(": ");
	dumpFunctionSig(function.sig, buf);
	buf.puts(" ");
	buf.puti(function.body_end - function.body_start);
	buf.puts(" bytes");
	return buf;
}
def dumpExport(export: WasmExport, buf: StringBuffer) -> StringBuffer {
	buf.puts("#").puti(export.export_index);
	buf.puts(" as ").puts(export.name);
	return buf;
}
def resolveSignatures(module: WasmModule) {
	for (i < module.imports.length) {
		var import = module.imports.get(i);
		if (import.sig_index < module.signatures.length) {
			import.sig = module.signatures.get(import.sig_index);
		}
	}
	for (i < module.functions.length) {
		var function = module.functions.get(i);
		if (function.sig_index < module.signatures.length) {
			function.sig = module.signatures.get(function.sig_index);
		}
	}
}