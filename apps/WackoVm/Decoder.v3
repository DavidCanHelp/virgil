def MAX_U32V_LENGTH = 5;
def MAX_U64V_LENGTH = 10;
def hexMap = "0123456789ABCDEF";

class Decoder(data: Array<byte>) {
	var pos: int;
	var ok = true;
	var error_msg: string;
	var error_pos: int;
	var error_pt: int;
	var limit = data.length;

	def consume_u8(name: string) -> u8 {
		if (!check(pos, 1, name)) return 0;
		var result: u8 = data[pos++];
		if (Debug.verbose) trace(pos - 1, name);
		return result;
	}
	def consume_u16(name: string) -> u16 {
		if (!check(pos, 2, name)) return 0;
		var b0: u32 = data[pos];
		var b1: u32 = data[pos + 1];
		pos += 2;
		var result = u16.!((b1 << 8) | b0);
		if (Debug.verbose) trace(pos - 2, name);
		return result;
	}
	def consume_u32(name: string) -> u32 {
		if (!check(pos, 4, name)) return 0;
		var b0: u32 = data[pos];
		var b1: u32 = data[pos + 1];
		var b2: u32 = data[pos + 2];
		var b3: u32 = data[pos + 3];
		pos += 4;
		var result = (b3 << 24) | (b2 << 16) | (b1 << 8) | b0;
		if (Debug.verbose) trace(pos - 4, name);
		return result;
	}
	def consume_u32v(name: string) -> (int, u32) {
		var t = read_u32v(pos);
		pos += t.0;
		if (Debug.verbose) trace(pos - t.0, name);
		return t;
	}
	def consume_u64v(name: string) -> (int, u64) {
		var t = read_u64v(pos);
		pos += t.0;
		if (Debug.verbose) trace(pos - t.0, name);
		return t;
	}
	def consume_string(name: string) -> string {
		var pt = pos;
		var t = consume_u32v(null), len = int.!(t.1);
		if (!ok) return null;
		if (len < 0 || len > data.length || len + pos > data.length) {
			error(pt, "string too long");
			return null;
		}
		var result = Arrays.range(data, pos, pos + len);
		pos += len;
		if (Debug.verbose) trace_string(pt, name, result);
		return result;
	}
	def consume_float(name: string) -> float {
		var d: float; // TODO
		var t = read_u32(pos);
		pos += 4;  // TODO: trace float bytes
		return d;
	}
	def consume_double(name: string) -> double {
		var d: double; // TODO
		var t = read_u64(pos);
		pos += 8;  // TODO: trace double bytes
		return d;
	}

	def read_u8(offset: int) -> u8 {
		if (!check(offset, 1, null)) return 0;
		return data[offset];
	}
	def read_u16(offset: int) -> u16 {
		if (!check(offset, 2, null)) return 0;
		var b0: u32 = data[offset];
		var b1: u32 = data[offset + 1];
		return u16.!((b1 << 8) | b0);
	}
	def read_u32(offset: int) -> u32 {
		if (!check(offset, 4, null)) return 0;
		var b0: u32 = data[offset];
		var b1: u32 = data[offset + 1];
		var b2: u32 = data[offset + 2];
		var b3: u32 = data[offset + 3];
		return (b3 << 24) | (b2 << 16) | (b1 << 8) | b0;
	}
	def read_u64(offset: int) -> u64 {
		if (!check(offset, 8, null)) return 0;
		var b0: u32 = data[offset];
		var b1: u32 = data[offset + 1];
		var b2: u32 = data[offset + 2];
		var b3: u32 = data[offset + 3];
		var wl = (b3 << 24) | (b2 << 16) | (b1 << 8) | b0;
		var b4: u32 = data[offset + 4];
		var b5: u32 = data[offset + 5];
		var b6: u32 = data[offset + 6];
		var b7: u32 = data[offset + 7];
		var wh = (b7 << 24) | (b6 << 16) | (b5 << 8) | b4;
		return (u64.!(wh) << 32) | wl;
	}
	def read_u32v(offset: int) -> (int, u32) {
		var max = offset + MAX_U32V_LENGTH;
		if (max > data.length) max = data.length;
		var result: u32, b: byte;
		for (i = offset; i < max; i++) {
			b = data[i];
			result |= (b & 0x7Fu) << u5.!(7 * (i - offset));
			if (b < 0x80) return (1 + (i - offset), result);
		}
		// rare case of hitting max.
		var len = max - offset;
		match (len) {
			0 => error(offset, "u32v expected, fell off end");
			1, 2, 3, 4 => if (b >= 0x80) error(offset, "u32v unterminated, fell off end");
			5 => if ((b & 0xF0) != 0) error(offset, "stray upper bits in u32v");
		}
		return (len, result);
	}
	def read_u64v(offset: int) -> (int, u64) {
		var max = offset + MAX_U64V_LENGTH;
		if (max > data.length) max = data.length;
		var result: u64, b: byte;
		for (i = offset; i < max; i++) {
			b = data[i];
			result |= (b & 0x7Fu) << u6.!(7 * (i - offset));
			if (b < 0x80) return (1 + (i - offset), result);
		}
		// rare case of hitting max.
		var len = max - offset;
		match (len) {
			0 => error(offset, "u32v expected, fell off end");
			1, 2, 3, 4, 5, 6, 7, 8, 9 => if (b >= 0x80) error(offset, "u32v unterminated, fell off end");
			10 => if ((b & 0xF0) != 0) error(offset, "stray upper bits in u32v");
		}
		return (len, result);
	}

	private def check(offset: int, len: int, name: string) -> bool {
		if (offset + len >= data.length) {
			trace_off_end(offset, name);
			return ok = false;
		}
		return true;
	}

	def error(offset: int, msg: string) -> Decoder {
		ok = false;
		limit = 0;
		if (error_msg == null) {
			error_pos = offset;
			error_msg = msg;
		}
		return this;
	}

	def error1<T>(offset: int, msg: string, v: T) -> Decoder {
		return error(offset, String.format1(msg, v));
	}

	private def trace_off_end(start: int, name: string) {
		trace_prefix(start, data.length, name);
		def b = Debug.buf;
		b.puts("<unexpected end>\n");
		Debug.flush();		
	}

	private def trace(start: int, name: string) {
		if (name == null) return;
		def b = Debug.buf;
		trace_prefix(start, pos, name);
		b.ln();
		Debug.flush();
	}

	private def trace_string(start: int, name: string, result: string) {
		trace_prefix(start, pos - result.length, name);
		def b = Debug.buf;
		b.puts(" (");
		b.puti(result.length);
		b.puts(" bytes) \"");
		var max = result.length;
		if (max > 20) max = 20;
		for (i < max) {
			var ch = result[i];
			if (ch < 32 || ch > 127) ch = '.';
			b.putc(ch);
		}
		b.puts("\"");
		b.ln();
		Debug.flush();
	}

	private def trace_prefix(start: int, limit: int, name: string) {
		def b = Debug.buf;
		b.puts(" +");
		b.puti(start);
		b.pad(' ', 9);
		b.putc(' ');
		b.puts(name);
		b.pad(' ', 35);
		for (i = start; i < limit; i++) {
			b.putc(' ');
			var d = data[i];
			b.putc(hexMap[d >> 4]);
			b.putc(hexMap[d & 0xF]);
		}
	}
}
enum Section(code: byte, id: string) {
	Unknown(0, null),
	Type(1, null),     // Function signature declarations
	Import(2, null),   // Import declarations
	Function(3, null), // Function declarations
	Table(4, null),    // Indirect function table and other tables
	Memory(5, null),   // Memory attributes
	Global(6, null),   // Global declarations
	Export(7, null),   // Exports
	Start(8, null),    // Start function declaration
	Element(9, null),  // Elements section
	Code(10, null),    // Function bodies (code)
	Data(11, null),    // Data segments
	Names(12, "name")  // Names
}
def RETURN_VOID: Array<ValueType> = [];
def MAX_GROW_SIZE = 100000;
class ModuleDecoder extends Decoder {
	new(data: Array<byte>) super(data) { }
	def module = WasmModule.new();
	def WASM_MAGIC = 0x6d736100u;
	def WASM_VERSION = 0x01u;

	def read() -> WasmModule {
		// ===== Parse the header =================================
		var magic = consume_u32("wasm magic");
		if (magic != WASM_MAGIC) {
			error(0, "invalid magic word");
			return finish();
		}

		var version = consume_u32("wasm version");
		if (version != WASM_VERSION) {
			error(4, "invalid version");
			return finish();
		}

		// ===== Parse the sections ===============================
		while (pos < data.length) {
			if (!ok) break;
			var section = consume_u8("section code");
			var length = int.!(consume_u32v("section length").1);
			var start = pos;
			var end = start + length;
			match (section) {
				0 => {
					// user section
					var name = consume_string("section name");
					if (String.equal(name, "names")) {
						readRepeated("names", "name", module.functions, readName);
					} else {
						// skip section body
						pos = end;
					}
				}
				Section.Type.code => readRepeated("types count", "type", module.signatures, readType);
				Section.Import.code => readRepeated("imports count", "import", module.imports, readImport);
				Section.Function.code => readRepeated("functions count", "function", module.functions, readFunctionSignature);
				Section.Table.code => readRepeated("tables count", "table", module.tables, readTable);
				Section.Memory.code => readRepeated("memories count", "memory", module.memories, readMemory);
				Section.Global.code => readRepeated("globals count", "global", module.globals, readGlobal);
				Section.Export.code => readRepeated("exports count" , "export", module.exports, readExport);
				Section.Start.code => readStartFunction();
				Section.Element.code => readRepeated("element init count", "element init", module.inits, readElements);
				Section.Code.code => {
					var t = consume_u32v("function body count");
					var count = t.1;
					if (count != module.functions.length) {
						error(pos - t.0, "function body count does not match function declaration count");
					} else {
						for (i < int.!(count)) readFunctionBody(i);
					}
				}
				Section.Data.code => readRepeated("data segments count", "data segment", module.data_segments, readDataSegment);
				_ => {
					error(start, "invalid section");
				}
			}
			if (pos != end) {
				if (pos > end) error(end, "section longer than expected");
				else error(end, "section shorter than expected");
			}

		}

		return finish();
	}
	def readMemory(index: int) -> WasmMemory {
		var memory = WasmMemory.new();
		var t = consume_limits("memory minimum pages", "memory max pages", 65536);
		memory.min_pages = t.0;
		memory.has_max = t.1;
		memory.max_pages = t.2;
		return memory;
	}
	def readType(index: int) -> FunctionSig {
		var pt = pos;
		var form = consume_u8("type form");
		if (form != TypeConstructors.Function.code) error(pt, "invalid type, expected function");
		var param_count = consume_u32v("param count").1;
		var ptypes = Array<ValueType>.new(int.!(param_count));
		for (j < param_count) {
			var ptype = consume_u8("param type");
			ptypes[int.!(j)] = toValueType(ptype);
		}
		var ret_count = consume_u32v("return count").1;
		var rtypes = Array<ValueType>.new(int.!(ret_count));
		for (j < ret_count) {
			var rtype = consume_u8("return type");
			rtypes[int.!(j)] = toValueType(rtype);
		}
		return FunctionSig.new(ptypes, rtypes);
	}
	def readGlobal(index: int) -> WasmGlobal {
		var global = WasmGlobal.new(index);
		var vtype = consume_u8("global type");
		global.immutable = consume_u8("mutability") == 0;
		global.vtype = toValueType(vtype);
		global.init = consume_init_expr("global initializer");
		return global;
	}
	def readDataSegment(index: int) -> WasmDataSegment {
		var data = WasmDataSegment.new(index);
		data.mem_index = int.!(consume_u32v("memory index").1);
		data.dest_addr = consume_init_expr("destination address");
		var len = consume_u32v("data length").1;
		data.data_start = pos;
		data.data_end = pos + int.!(len);
		pos += int.!(len);
		return data;
	}
	def readStartFunction() {
		module.startFunction = int.!(consume_u32v("start function").1);
	}
	def readImport(index: int) -> WasmImport {
		var module_name = consume_string("import module name");
		var field_name = consume_string("import field name");
		var kind = consume_u8("import kind");
		var imp: WasmImport;
		match (kind) {
			ExternalKind.Function.code => {
				imp = WasmImport.new(module_name, field_name, ExternalKind.Function, index);
				imp.sig_index = consume_sig_index();
				if (imp.sig_index < module.signatures.length) {
					imp.sig = module.signatures[imp.sig_index];
				}
			}
			ExternalKind.Table.code => {
				imp = WasmImport.new(module_name, field_name, ExternalKind.Table, index);
				var elem_type = consume_u8("element type");
				if (elem_type != TypeConstructors.AnyFunc.code) {
					error(pos - 1, "expected table type to be \"anyfunc\"");
				}
				var t = consume_limits("table minimum size", "table maximum size", SpecLimits.MaxTableSize);
				imp.min_size = t.0;
				imp.has_max = t.1;
				imp.max_size = t.2;
			}
			ExternalKind.Memory.code => {
				imp = WasmImport.new(module_name, field_name, ExternalKind.Memory, index);
				var t = consume_limits("memory minimum pages", "memory max pages", SpecLimits.MaxMemoryPages);
				imp.min_size = t.0;
				imp.has_max = t.1;
				imp.max_size = t.2;
			}
			ExternalKind.Global.code => {
				imp = WasmImport.new(module_name, field_name, ExternalKind.Global, index);
				var ptype = consume_u8("global type");
				var immutable = consume_u8("mutability") == 0;
				imp.global_type = toValueType(ptype);
			}
			_ => error1(pos - 1, "invalid import kind %1", int.!(kind));
		}
		return imp;
	}
	def readExport(index: int) -> WasmExport {
		var name = consume_string("export name");
		var kcode = consume_u8("export kind");
		var kind: ExternalKind;
		match (kcode) {
			ExternalKind.Function.code => kind = ExternalKind.Function;
			ExternalKind.Table.code => kind = ExternalKind.Table;
			ExternalKind.Memory.code => kind = ExternalKind.Memory;
			ExternalKind.Global.code => kind = ExternalKind.Global;
			_ => error1(pos - 1, "invalid export kind %1", int.!(kcode));
		}
		var export_index = consume_u32v("export index").1;
		var exp = WasmExport.new(kind, index);
		exp.name = name;
		exp.func_index = int.!(export_index);
		return exp;
	}
	def readFunctionSignature(index: int) -> WasmFunction {
		var func = WasmFunction.new(index);
		func.sig_index = consume_sig_index();
		return func;
	}
	def readTable(index: int) -> WasmTable {
		var table = WasmTable.new();
		var ttype = consume_u8("element type");
		if (ttype != TypeConstructors.AnyFunc.code) {
			error(pos - 1, "expected anyfunc element type");
		}
		var t = consume_limits("table minimum size", "table maximum size", SpecLimits.MaxTableSize);
		table.min_entries = t.0;
		table.has_max = t.1;
		table.max_entries = t.2;
		return table;
	}
	def readElements(index: int) -> WasmInit {
		var table_index = consume_u32v("table index").1;
		var init = WasmInit.new(int.!(table_index));
		init.base = consume_init_expr("elements base");
		var count = consume_u32v("elements count").1;
		var vec = Vector<int>.new();
		if (count < MAX_GROW_SIZE) vec.grow(int.!(count));
		for (i = 0; i < count && ok; i++) {
			vec.add(int.!(consume_u32v("element").1));
		}
		init.entries = vec.extract();
		return init;
	}
	def readFunctionBody(index: int) -> WasmFunction {
		if (index >= module.functions.length) {
			error(pos, "too many function bodies");
			return null;
		}
		var length = consume_u32v("body length").1;
		var func = module.functions[index];
		if (ok) {
			func.body_start = pos;
			pos += int.!(length);
			func.body_end = pos;
		}
		return func;
	}
	def readName(index: int) -> WasmFunction {
		var name = consume_string("function name");
		var func = module.functions[index];
		if (ok) func.name = name;
		var local_count = consume_u32v("locals count").1;
		for (i < local_count) {
			consume_string("local name");
		}
		return func;
	}

	def consume_sig_index() -> int {
		var pt = pos;
		var index = consume_u32v("signature index").1;
		if (index >= module.signatures.length) {
			error1(pt, "invalid signature index %1", int.!(index));
		}
		return int.!(index);
	}
	def consume_func_index() -> int {
		var pt = pos;
		var index = consume_u32v("function index").1;
		if (index >= module.functions.length) {
			error1(pt, "invalid function index %1", int.!(index));
		}
		return int.!(index);
	}
	def consume_limits(min_name: string, max_name: string, maximum: u32) -> (u32, bool, u32) {
		var flags = consume_u8("limits flags");
		var min = consume_u32v(min_name).1;
		var has_max = (flags & 1) != 0;
		var max = maximum;
		if (has_max) {
			var start = pos;
			max = consume_u32v(max_name).1;
			if (max > maximum) {
				error1(start, "maximum size (%1) too large", int.!(max));
			}
		}
		return (min, has_max, max);
	}
	def consume_init_expr(name: string) -> InitExpr {
		var opcode = consume_u8("init opcode");
		var r: InitExpr;
		match (opcode) {
			WasmOpcode.I32Const.opcode => r = InitExpr.I32Const(int.!(consume_u32v("value").1));
			WasmOpcode.I64Const.opcode => r = InitExpr.I64Const(long.!(consume_u64v("value").1));
			WasmOpcode.F32Const.opcode => r = InitExpr.F32Const(consume_float("value"));
			WasmOpcode.F64Const.opcode => r = InitExpr.F64Const(consume_double("value"));
			WasmOpcode.GetGlobal.opcode => r = InitExpr.GlobalIndex(consume_u32v("index").1);
			_ => {
				error(pos - 1, "invalid initializer expression");
			}
		}
		var end = consume_u8("init end");
		if (end != WasmOpcode.End.opcode) {
			error(pos - 1, "expected initializer end");
		}
		return r;
	}
	def readRepeated<T>(name_count: string, name: string, vec: Vector<T>, read: int -> T) {
		var count = consume_u32v(name_count).1;
		if (count < MAX_GROW_SIZE) vec.grow(int.!(count));
		for (index < int.!(count)) {
			if (!ok) break;
			if (Debug.verbose) {
				def b = Debug.buf;
				b.puts(name);
				b.puts("[");
				b.puti(index);
				b.puts("]\n");
				Debug.flush();
			}
			var result = read(index);
			vec.grow(index + 1);
			vec[index] = result;
			if (vec.length <= index) vec.length = index + 1;
		}
	}
	def toValueType(b: byte) -> ValueType {
		match (b) {
			ValueTypeEncoding.I32.code => return ValueType.I32;
			ValueTypeEncoding.I64.code => return ValueType.I64;
			ValueTypeEncoding.F32.code => return ValueType.F32;
			ValueTypeEncoding.F64.code => return ValueType.F64;
		}
		error(pos - 1, "invalid value type");
		return ValueType.I32;
	}
	def finish() -> WasmModule {
		if (ok) return module;
		var msg = String.format2("+%1: %2", error_pos, error_msg);
		System.error("ModuleError", msg);
		return null;
	}
}
