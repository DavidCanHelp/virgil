class ModulePrinter(module: WasmModule) {
	def buf = StringBuffer.new();
	var flagM: bool;
	var flagS: bool;
	var flagI: bool;
	var flagF: bool;
	var flagE: bool;
	def print() {
		do(flagM, "memories", module.memories, memory);
		do(flagS, "types", module.signatures, functionSig);
		do(flagI, "imports", module.imports, import);
		do(flagF, "functions", module.functions, function);
		do(flagE, "exports", module.exports, export);
	}
	def do<T>(flag: bool, name: string, list: Vector<T>, dump: T -> void) {
		buf.reset();
		buf.puts("  ");
		buf.puts(name);
		buf.puts(" = ");
		buf.puti(list.length);
		buf.ln();
		if (flag) {
			for (i < list.length) {
				buf.puts("    ");
				buf.puti(i);
				buf.puts(": ");
				dump(list[i]);
				buf.ln();
			}
		}
		System.puts(buf.toString());
	}
	def memory(memory: WasmMemory) {
		// TODO: print something relevant about a memory
	}
	def functionSig(sig: FunctionSig) {
		if (sig == null) {
			buf.puts("<null>");
		} else {
			TypePrinter.renderFunctionSigShort(sig, buf);
		}
	}
	def import(import: WasmImport) {
		buf.puts(import.module_name);
		buf.puts(".");
		buf.puts(import.func_name);
		buf.puts(": ");
		functionSig(import.sig);
	}
	def function(function: WasmFunction) {
		if (function.name != null) buf.puts(function.name);
		buf.puts(": ");
		functionSig(function.sig);
		buf.puts(" ");
		buf.puti(function.body_end - function.body_start);
		buf.puts(" bytes");
	}
	def export(export: WasmExport) {
		buf.puts("#").puti(export.export_index);
		buf.puts(" as ").puts(export.name);
	}
}
component TypePrinter {
	def renderShort(v: ValueType, buf: StringBuffer) -> StringBuffer {
		match (v) {
			I32 => buf.putc('i');
			I64 => buf.putc('l');
			F32 => buf.putc('f');
			F64 => buf.putc('d');
			AnyFunc => buf.putc('k');
			AnyRef => buf.putc('r');
			Function(sig) => renderFunctionSigShort(sig, buf);
		}
		return buf;
	}
	def renderLong(v: ValueType, buf: StringBuffer) -> StringBuffer {
		match (v) {
			I32 => buf.puts("i32");
			I64 => buf.puts("i64");
			F32 => buf.puts("f32");
			F64 => buf.puts("f64");
			AnyFunc => buf.puts("anyfunc");
			AnyRef => buf.puts("anyref");
			Function(sig) => renderFunctionSigLong(sig, buf);
		}
		return buf;
	}
	def renderFunctionSigShort(sig: FunctionSig, buf: StringBuffer) -> StringBuffer {
		for (r in sig.rets) renderShort(r, buf);
		if (sig.rets.length == 0) buf.puts("v");
		buf.puts("_");
		for (p in sig.params) renderShort(p, buf);
		if (sig.params.length == 0) buf.puts("v");
		return buf;
	}
	def renderFunctionSigLong(sig: FunctionSig, buf: StringBuffer) -> StringBuffer {
		for (i < sig.params.length) {
			if (i > 0) buf.puts(", ");
			renderLong(sig.params[i], buf);
		}
		buf.puts(" -> ");
		for (i < sig.rets.length) {
			if (i > 0) buf.puts(", ");
			renderLong(sig.rets[i], buf);
		}
		return buf;
	}
}
