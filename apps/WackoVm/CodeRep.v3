// Representation of code within the WackoVm. Code is organized into
// nested blocks, ifs, and loops.
class GlobalRef {
	var index: int;
	var global: WasmGlobal;
	new(index) { }
}
class SigRef {
	var index: int;
	var sig: FunctionSig;
	new(index) { }
}
class ImportRef {
	var index: int;
	var import: WasmImport;
	new(index) { }
}
class FuncRef {
	var index: int;
	var func: WasmFunction;
	new(index) { }
}
class ModuleEnv {
	def resolveGlobalRef(ref: GlobalRef) -> bool;
	def resolveSigRef(ref: SigRef) -> bool;
	def resolveImportRef(ref: ImportRef) -> bool;
	def resolveFuncRef(ref: FuncRef) -> bool;
}
class ModuleEnvFor(module: WasmModule) extends ModuleEnv {
	def resolveGlobalRef(ref: GlobalRef) -> bool {
		var t = lookup(ref.index, module.globals);
		ref.global = t.0;
		return t.1;
	}
	def resolveSigRef(ref: SigRef) -> bool {
		var t = lookup(ref.index, module.signatures);
		ref.sig = t.0;
		return t.1;
	}
	def resolveImportRef(ref: ImportRef) -> bool {
		var t = lookup(ref.index, module.imports);
		ref.import = t.0;
		return t.1;
	}
	def resolveFuncRef(ref: FuncRef) -> bool {
		var t = lookup(ref.index, module.functions);
		ref.func = t.0;
		return t.1;
	}

	private def lookup<T>(index: int, vec: Vector<T>) -> (T, bool) {
		if (index >= 0 && index < vec.length) return (vec[index], true);
		var d: T;
		return (d, false);
	}
}

class Instr { }
class Labeled extends Instr { }
class Label {
	var block: Labeled;
	def incoming = Vector<Branch>.new();
	def phis = Vector<SsaPhi>.new();                                  // SSA
}
class Block extends Labeled {
	var vtype: AstType;
	def end = Label.new();
	def instrs = Vector<Instr>.new();
	new(vtype) { end.block = this; }
}
class If extends Labeled {
	var vtype: AstType;
	def end = Label.new();
	def tblock = Block.new(vtype);
	def fblock = Block.new(vtype);
	new(vtype) { end.block = this; }
}
class Loop extends Labeled {
	var vtype: AstType;
	def top = Label.new();
	new(vtype) { top.block = this; }
}
class Branch extends Instr { }
class Br(label: Label) extends Branch { }
class BrIf(label: Label) extends Branch { }                               // STACK
class BrTable(labels: Array<Label>) extends Branch { }                    // STACK

type Operator {
	case Nop;
	case Return;
	case Unreachable;
	case I32Const(val: int);
	case I64Const(val: long);
	case F32Const(val: u32);
	case F64Const(val: u64);
	case GetLocal(index: int);                                        // STACK
	case SetLocal(index: int);                                        // STACK
	case Select(t: ValueType);

	case LoadGlobal(global: GlobalRef);
	case StoreGlobal(global: GlobalRef);
	case LoadMem(opcode: WasmOpcode, align: u8, offset: u32);
	case StoreMem(opcode: WasmOpcode, align: u8, offset: u32);

	case CallFunction(ref: FuncRef);
	case CallImport(ref: ImportRef);
	case CallIndirect(ref: SigRef);

	case SimpleOp(opcode: WasmOpcode);
	case Phi(t: ValueType);                                           // SSA
}
class StackInstr(op: Operator) extends Instr { }                          // STACK

class SsaInstr(op: Operator, inputs: Array<SsaInstr>) extends Instr { }   // SSA
class SsaPhi extends SsaInstr {                                           // SSA
	new(t: ValueType, inputs: Array<SsaInstr>) super(Operator.Phi(t), inputs) { }
}
class SsaBrIf(label: Label, key: SsaInstr) extends Branch { }             // SSA
class SsaBrTable(labels: Array<Label>, key: SsaInstr) extends Branch { }  // SSA
