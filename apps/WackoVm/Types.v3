type float {}  // placeholder for float type
type double {} // placeholder for double type

enum ValueTypeEncoding(code: byte, short: byte, lname: string) {
	I32(0x7f, 'i', "i32"),
	I64(0x7e, 'l', "i64"),
	F32(0x7d, 'f', "f32"),
	F64(0x7c, 'd', "f64")
}

enum TypeConstructors(code: byte) {
	AnyFunc(0x70),
	Function(0x60),
	EmptyBlock(0x40)
}

class FunctionSig(params: Array<ValueType>, rets: Array<ValueType>) {
	def prepend(t: ValueType) -> FunctionSig {
		return FunctionSig.new(Arrays.prepend(t, params), rets);
	}
        def equals(that: FunctionSig) -> bool {
        	if (this == that) return true;
           	if (that == null) return false;
                if (this.params.length != that.params.length) return false;
                if (this.rets.length != that.rets.length) return false;
                for (i < this.params.length) if (this.params[i] != that.params[i]) return false;
                for (i < this.rets.length) if (this.rets[i] != that.rets[i]) return false;
                return true;
       	}
}

type ValueType {
	case I32;
	case I64;
	case F32;
	case F64;
	case AnyRef;
	case AnyFunc;
	case Function(sig: FunctionSig);
}

component TypeUtil {
	def NO_TYPES: Array<ValueType> = [];
	def SIG_VOID_VOID = FunctionSig.new(NO_TYPES, NO_TYPES);
	def FUNC_VOID_VOID = ValueType.Function(SIG_VOID_VOID);
	def funcRet(r: ValueType) -> ValueType.Function {
		return ValueType.Function(FunctionSig.new(NO_TYPES, [r]));
	}
	def funcParamRet(r: ValueType, p: ValueType) -> ValueType.Function {
		return ValueType.Function(FunctionSig.new([p], [r]));
	}
}