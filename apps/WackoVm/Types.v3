type float {}  // placeholder for float type
type double {} // placeholder for double type

enum ValueType(code: byte, short: byte, lname: string) {
	I32(0x7f, 'i', "i32"),
	I64(0x7e, 'l', "i64"),
	F32(0x7d, 'f', "f32"),
	F64(0x7c, 'd', "f64")
}

enum TypeConstructors(code: byte) {
	AnyFunc(0x70),
	Function(0x60),
	EmptyBlock(0x40)
}

class FunctionSig(ret: Array<ValueType>, params: Array<ValueType>) {
	def prepend(t: ValueType) -> FunctionSig {
		return FunctionSig.new(ret, Arrays.prepend(t, params));
	}
	def equals(that: FunctionSig) -> bool {
		if (this == that) return true;
	   	if (that == null) return false;
		if (this.ret.length != that.ret.length) return false;
		if (this.params.length != that.params.length) return false;
		for (i < this.ret.length) if (this.ret[i] != that.ret[i]) return false;
		for (i < this.params.length) if (this.params[i] != that.params[i]) return false;
		return true;
       	}
}
