def out1 = LinuxFileStream.new(LinuxConst.STDOUT);

class Printer(str: string, out: LinuxFileStream) {
	def run() {
		for (i < 1000) {
			out.puts(str);
			for (j < 1000000) ;
		}
	}
}

var print1 = Printer.new("#1 ", out1);
var print2 = Printer.new("#2 ", out1);
var print3 = Printer.new("#3 ", out1);

def SYS_clone = 120;
def CLONE_VM = 0x00000100;
def CLONE_SIGHAND = 0x00000800;
def CLONE_PARENT = 0x00008000;
def CLONE_THREAD = 0x00010000;

var func: void -> void;

def clone(f: void -> void) {
	def stack = Array<int>.new(1024); // TODO: dangerous, stack is in heap!
	var tid_buf: Array<int> = [
		0x00000000,	// parent_tid
		0x00000000	// child_tid
	];
	func = f;
	var t = Linux.syscall(SYS_clone,
		(CLONE_VM | CLONE_SIGHAND | CLONE_PARENT | CLONE_THREAD,
		Pointer.atContents(stack) + (stack.length - 1) * 4,
		Pointer.atContents(tid_buf),
		Pointer.atContents(tid_buf) + 4,
		0));
	if (t.0 < 0) System.error("ThreadError", "Linux.syscall(SYS_clone) failed.");
	if (t.0 == 0) {
		f = func;
		func = null;
		f();
		Linux.syscall(LinuxConst.SYS_exit, 0);
	} else {
		// TODO: can only spawn one thread at a time due to global func
		while (func != null);
	}
}
def main() {
	clone(print2.run);
	clone(print3.run);
	print1.run();
}
