// Copyright 2013 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T: Vt100;
def stages = [
	"Parser",
	"Seman",
	"Interpreting",
	"Interpreting  -ra",
	"Interpreting  -ra -ma",
	"Compiling     jvm",
	"  running",
	"Compiling     wasm-js",
	"  running",
	"Compiling     x86-darwin",
	"  running",
	"Compiling     x86-linux",
	"  running",
	"Compiling     x86-64-linux"
];
def suites = [
	Suite.new("base", stages),
	Suite.new("legacy", stages),
	Suite.new("future", stages),
	Suite.new("enums", stages),
	Suite.new("variants", stages),
	Suite.new("rt", stages),
	Suite.new("ptr32", stages),
	Suite.new("stacktrace", stages),
	Suite.new("float", stages)
];
def TICKS = 10;
def UPPER_LEFT = (3, 35);

def main(args: Array<string>) {
	scroll_concept();
}

def scroll_concept() {
	for (i < 1000) {
		delay(100);
		if (i % 33 == 31) {
			T.eraseToEndOfLine();
			T.fgRed();
			T.puts("fail: ");
			T.fgNorm();
			T.puts("test/suite/test");
			T.puti(i);
			T.ln();
		}
		if (i % 13 == 0) {
			T.eraseToEndOfLine();
			T.puts("test/suite: ");
			T.fgGreen();
			T.puts("ok");
			T.fgNorm();
			T.ln();
		}
		redraw("core", 4, i);
	}
}
def redraw(suite: string, lines: int, num: int) {
	T.eraseToEndOfLine();
	T.fgCyan();
	T.puts(suite);
	T.fgNorm();
	T.ln();	
	T.eraseToEndOfLine();
	T.puts("----------------------------------------\n");
	for (i < lines) {
		T.eraseToEndOfLine();
		T.fgGreen();
		T.puts("Running");
		T.fgNorm();
		T.puts(Strings.format2(" %d: %d\n", i, num));
	}
	for (i < lines+2) T.moveCursorUp(1);// T.puts("\x1b[1A");
}

def delay(ms: int) {
	var start = System.ticksMs();
	while (System.ticksMs() - start < ms) ;
}

def matrix_concept() {
	T.eraseScreen();
	T.hideCursor();

//	animator.run();
	T.moveCursor(0, 0);
	T.fgCyan();
	T.puts("compiler=/tmp/titzer/virgil-test/bootstrap/jar/Aeneas");
	T.fgNorm();
	for (i < stages.length) {
		T.moveCursor(UPPER_LEFT.0 + i, 3);
		T.puts(stages[i]);
	}
	T.fgYellow();
	for (i < suites.length) {
		T.moveCursor(UPPER_LEFT.0 - 1, UPPER_LEFT.1 + i * (TICKS + 2));
		T.puts(suites[i].str);
	}

	var c = 0;
	var failures = 0;
	while (c < stages.length * suites.length * 10) {
		var s = Random.random(suites.length);
		if (suites[s].count >= stages.length * TICKS) continue;
		var pass = Random.random(200) != 0;
		update(s, pass);
		if (!pass) {
			failures++;
			T.moveCursor(4 + stages.length, 1);
			T.fgRed();
			T.puts("test/float/seman/foo.v3");
			T.fgNorm();
		}
		sleep(10);
		c++;
	}
	T.fgNorm();
	T.moveCursor(10 + stages.length, 1);
	if (failures > 0) {
		T.puti(failures);
		T.fgRed();
		T.puts(" failures\n");
	}
	T.fgNorm();
	T.showCursor();
}
def sleep(ms: int) {
	var start = u32.view(System.ticksMs());
	while (u32.view(System.ticksMs()) - start < ms) ;
}
def update(i: int, pass: bool) {
	var s = suites[i];
	var j = s.count / TICKS;
	var col = s.count % TICKS;
	if (col == 0) {
		T.moveCursor(UPPER_LEFT.0 + j, UPPER_LEFT.1 + i * (TICKS + 2));
		T.fgNorm();
		T.puts("..........");
	}
	T.moveCursor(UPPER_LEFT.0 + j, col + UPPER_LEFT.1 + i * (TICKS + 2));
	if (pass) {
		T.fgGreen();
		T.putc('o');
	} else {
		T.fgRed();
		T.putc('X');
	}
	s.count++;
}
def keypress(ch: int) {
}

class Suite(str: string, stages: Array<string>) {
	var count = 0;
}
