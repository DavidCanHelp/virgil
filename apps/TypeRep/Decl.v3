// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component Uid {
	var uid: u32;
}

class AddressSpace { }
class Decl {
	def uid = Uid.uid++;
	def render(buf: StringBuffer) -> StringBuffer {
		return buf.puti(int.view(uid)); // TODO
	}
}
class ClassDecl extends Decl {
	def typeParams: Array<TypeParamType>;
	def superClass: ClassType;
	def var depth: int;
	private var type0: ClassType;
	private var cache: ClassTypeCache;

	def getCachedType(typeArgs: Array<Type>) -> ClassType {
		if (typeArgs.length == 0) {
			if (type0 != null) return type0;
			var hash = TypeHash.do0(Kind.CLASS, u25.view(uid));
			return type0 = ClassType.new(hash, this, typeArgs);
		}
		if (cache == null) cache = ClassTypeCache.new(this);
		return cache.get(typeArgs);
	}
}
class ComponentDecl extends Decl { }
class VariantDecl extends Decl {
	def typeParams: Array<TypeParamType>;
	def getCachedType(typeArgs: Array<Type>) -> VariantType;
}
class EnumDecl extends Decl { }
class Signature(params: Array<Type>, results: Array<Type>) {
	def hash() -> u32;
}
class AliasDecl extends Decl {
	def typeParams: Array<TypeParamType>;
	def getCachedType(typeArgs: Array<Type>) -> AliasType;
}
