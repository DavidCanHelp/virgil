class VarExpr { def name: string; }
class VarDecl { }
class VstCaseMember { }
class VstField { }
class VstMethod { }
class Operator { }
class Val { }
class TypeArgs { }
enum Fact { X }
class VstNew { }
enum InfixOp { PLUS }
// The possible shapes that bindings can take for these expressions:
// "Type.name"
// "expr.name"
type VarBinding {
	case None;
	// read/write bindings
	case Local(decl: VarDecl);
	case ObjectField(receiver: Type, member: VstField);
	case ComponentField(member: VstField);
	// read-only bindings
	case Const(val: Val, vtype: Type);
	case Type(t: Type);
	case ObjectMethod(receiver: Type, member: VstMethod, typeArgs: TypeArgs);
	case ClassMethod(receiver: Type, member: VstMethod, typeArgs: TypeArgs);
	case ClassField(receiver: Type, member: VstField);
	case ClassNew(receiver: Type, member: VstNew, funcType: Type);
	case ComponentMethod(member: VstMethod, typeArgs: TypeArgs);
	case VariantCase(receiver: Type, member: VstCaseMember);
	case VariantField(receiver: Type, member: VstField);
	case EnumConst(member: VstCaseMember);
	case Inst(op: Operator, facts: Fact.set);		// instantiate {op}
	case Apply(op: Operator, facts: Fact.set);		// apply {op} to receiver
	case Partial(op: Operator, facts: Fact.set);		// partially apply {op} to receiver

	def none() -> bool { return this.tag == 0; }
	def ok() -> bool { return this.tag != 0; }
}

component Resolution {
	def lookupExprMember(expr: VarExpr, etype: Type, useThis: bool) -> VarBinding {
		var n = expr.name;
		match (etype) {
			x: FloatType => {
				if (String.equal("sign", n)) ;
				if (String.equal("exponent", n)) ;
				if (String.equal("fraction", n)) ;
			}
			x: ArrayType => {
				if (String.equal("length", n)) ;
			}
			x: ComponentType => ;
			x: ClassType => ;
			x: VariantType => ;
			x: VariantCaseType => ;
			x: TupleType => ;
			x: EnumType => ;
			x: EnumSetType => ;
			x: AliasType => ;
			x: PointerType => ;
			_ => return VarBinding.None;
		}
		return VarBinding.None;
	}
	def lookupTypeMember(expr: VarExpr, etype: Type, useThis: bool) -> VarBinding {
		var n = expr.name;
		match (etype) {
			x: IntType => {
				if (String.equal("max", n)) ;
				if (String.equal("min", n)) ;
			}
			x: FloatType => {
				if (String.equal("view", n)) ;
				if (String.equal("nan", n)) ;
				if (String.equal("infinity", n)) ;
				if (String.equal("roundi", n)) ;
				if (String.equal("round", n)) ;
				if (String.equal("roundd", n)) ;
				if (String.equal("abs", n)) ;
				if (String.equal("ceil", n)) ;
				if (String.equal("floor", n)) ;
				if (String.equal("sqrt", n)) ;
				// TODO: operators
			}
			x: ArrayType => ;
			x: ComponentType => ;
			x: ClassType => ;
			x: VariantType => ;
			x: VariantCaseType => ;
			x: TupleType => ;
			x: EnumType => ;
			x: EnumSetType => ;
			x: AliasType => ;
			x: PointerType => ;
			_ => return VarBinding.None;
		}
		return VarBinding.None;
	}
	def lookupInfix(op: InfixOp, left: Type, right: Type) -> Operator {
		return null;
	}
}
