// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def assertSubtype(expected: bool, src: Type, dst: Type) {
	if (expected != TypeSystem.isSubtype(src, dst)) System.error("SubTypeError", "");
}

def assertPromotable(expected: bool, src: Type, dst: Type) {
	if (expected != TypeSystem.isPromotable(src, dst)) System.error("PromotableError", "");
}

def assertAssignable(expected: bool, src: Type, dst: Type) {
	if (expected != TypeSystem.isAssignable(src, dst)) System.error("AssignableError", "");
}

def assertUnrelated(a: Type, b: Type) {
	assertSubtype(false, a, b);
	assertSubtype(false, b, a);
	assertPromotable(false, a, b);
	assertPromotable(false, b, a);
	assertAssignable(false, a, b);
	assertAssignable(false, b, a);
}

def assertUnrelatedA(at: Array<Type>) {
	for (a in at) {
		for (b in at) {
			if (a == b) continue;
			assertUnrelated(a, b);
		}
	}
}

def assertUnrelated1(a: Type, at: Array<Type>) {
	for (b in at) {
		assertUnrelated(a, b);
	}
}

def main(args: Array<string>) -> int {
	def INT = IntTypeCache.get(true, 32);
	def BYTE = IntTypeCache.get(false, 8);
	def LONG = IntTypeCache.get(true, 64);
	def BOOL = GlobalTypeCache.BOOL;
	def VOID = GlobalTypeCache.VOID;

	assertSubtype(false, INT, BYTE);
	assertSubtype(false, BYTE, INT);
	assertSubtype(false, INT, LONG);
	assertSubtype(false, LONG, INT);

	assertPromotable(false, INT, BYTE);
	assertPromotable(false, LONG, BYTE);
	assertPromotable(false, LONG, INT);
	assertPromotable(true,  BYTE, INT);
	assertPromotable(true,  BYTE, LONG);
	assertPromotable(true,  INT, LONG);

	assertAssignable(false, INT, BYTE);
	assertAssignable(false, LONG, BYTE);
	assertAssignable(false, LONG, INT);
	assertAssignable(true,  BYTE, INT);
	assertAssignable(true,  BYTE, LONG);
	assertAssignable(true,  INT, LONG);

	// Integer arrays
	assertUnrelatedA([INT, BOOL, VOID]);

	def ARRAY_INT = ArrayTypeCache.get(INT);
	def ARRAY_BYTE = ArrayTypeCache.get(BYTE);
	def ARRAY_LONG = ArrayTypeCache.get(LONG);
	def ARRAY_BOOL = ArrayTypeCache.get(BOOL);
	def ARRAY_VOID = ArrayTypeCache.get(VOID);

	assertUnrelatedA([INT, VOID, BOOL, ARRAY_INT, ARRAY_BOOL, ARRAY_VOID]);

	// Floating point relations
	def FLOAT = FloatTypeCache.FLOAT;
	def DOUBLE = FloatTypeCache.DOUBLE;

	def ARRAY_FLOAT = ArrayTypeCache.get(FLOAT);
	def ARRAY_DOUBLE = ArrayTypeCache.get(DOUBLE);

	assertPromotable(true, FLOAT, DOUBLE);
	assertPromotable(false, DOUBLE, FLOAT);
	assertPromotable(true, BYTE, FLOAT);
	assertPromotable(true, BYTE, DOUBLE);

	assertUnrelatedA([INT, FLOAT, VOID, ARRAY_FLOAT, ARRAY_DOUBLE]);

	// Null and arrays
	def NULL = NullType.new();
	assertPromotable(true, NULL, ARRAY_FLOAT);
	assertPromotable(true, NULL, ARRAY_VOID);
	assertPromotable(false, ARRAY_FLOAT, NULL);
	assertPromotable(false, ARRAY_VOID, NULL);

	assertUnrelated1(NULL, [BYTE, INT, FLOAT, VOID]);

	// Tuples
	def INT_INT = TupleTypeCache.get([INT, INT]);
	def INT_VOID = TupleTypeCache.get([INT, VOID]);
	def BYTE_BYTE = TupleTypeCache.get([BYTE, BYTE]);

	assertPromotable(true, BYTE_BYTE, INT_INT);
	assertPromotable(false, INT_INT, BYTE_BYTE);
	assertUnrelated1(INT_INT, [INT, VOID, ARRAY_INT, FLOAT, NULL, INT_VOID]);

	// oob boom
	def FLOAT_INT = TupleTypeCache.get([FLOAT, INT]);
	def FLOAT_DOUBLE = TupleTypeCache.get([FLOAT, DOUBLE]);

	return 0;
}
