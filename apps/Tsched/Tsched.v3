// Representation of tasks as a graph.
class Task(name: string) {
	var dependencies: List<Task>;
	var state: int;
	def removeDependent(t: Task) {
		dependencies = removeRec(t, dependencies);
	}
	def addDependent(t: Task) {
		dependencies = List.new(t, dependencies);
	}
	private def removeRec(t: Task, list: List<Task>) -> List<Task> {
		if (list == null) return null;
		var o = list.tail, n = removeRec(t, list);
		if (list.head == t) return n;
		if (o != n) return List.new(list.head, n);
		return list;
	}
}

class TaskParser(input: Array<byte>) {
	def map = String.newMap<Task>();
	def parseLine(input: Array<byte>, pos: int) -> Task {
		return null;
	}

	def parse() -> List<Task> {
		return null;
	}
}

def main(args: Array<string>) -> int {
	for (filename in args) {
		if (filename.length > 0 && filename(0) == '-') continue;
		var input = System.fileLoad(filename);
		if (input == null) {
			System.error("FileNotFound", filename);
			return 1;
		}
		var parser = TaskParser.new(input);
		var list = parser.parse();
	}

	testTasks();

	return 0;
}


def testTasks() {
	var A = Task.new("A");
	var B = Task.new("B");
	var C = Task.new("C");
	var D = Task.new("D");

	A.addDependent(B);
	A.addDependent(C);
	B.addDependent(D);
	C.addDependent(D);
	D.addDependent(A);

	var list = Lists.fromArray([A, B, C, D]);

	printList(RecursiveSolutionManual.new().schedule(list));	
}

def printList(list: List<Task>) {
	for (l = list; l != null; l = l.tail) {
		System.puts(l.head.name);
		System.ln();
	}
}

// --- Standard recursive solution ------------------------------------
class RecursiveSolution {
	def UNVISITED = 0;
	def ON_STACK = 1;
	def SCHEDULED = 2;
	var solution: List<Task>;
	def schedule(list: List<Task>) -> List<Task> {
		var result: List<Task>;
		solution = null;
		for (l = list; l != null; l = l.tail) recurse(l.head);
		return Lists.reverse(solution);
	}
	def recurse(t: Task) {
		if (t.state == SCHEDULED) return;
		if (t.state == ON_STACK) {
			System.error("InputError", "cycle detected");
		}
		t.state = ON_STACK;
		for (d = t.dependencies; d != null; d = d.tail) recurse(d.head);
		t.state = SCHEDULED;
		solution = List.new(t, solution);
	}
}

// --- Standard DFS, manual recursion ---------------------------------
class RecursiveSolutionManual {
	def UNVISITED = 0;
	def ON_STACK = 1;
	def SCHEDULED = 2;
	def schedule(list: List<Task>) -> List<Task> {
		var solution: List<Task>;
		var stack = Vector<(Task, List<Task>)>.new();
		stack.add(null, list);
		while (stack.length > 0) {
			var e = stack.get(stack.length - 1);
			if (e.1 == null) {
				var t = e.0;
				stack.length--;
				if (t == null) continue;
				t.state = SCHEDULED;
				solution = List.new(t, solution);
			} else {
				stack.set(stack.length - 1, (e.0, e.1.tail));
				var t = e.1.head;
				if (t.state == ON_STACK) System.error("InputError", "cycle detected");
				if (t.state == SCHEDULED) continue;
				stack.add((t, t.dependencies));
				t.state = ON_STACK;
			}
		}
		return Lists.reverse(solution);
	}
}


// --- Dependency removal solution ------------------------------------
