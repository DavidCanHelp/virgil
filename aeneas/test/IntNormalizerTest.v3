def TEST = UnitTest.new("IntNormalizer", test);

def test() {
	test_32();
	test_16();
	test_8();
	test_getNormalType();
}

def int_values = [
	0x00000000,
	0x00000011,
	0x00001100,
	0x00110000,
	0x11000000,
	0x11220000,
	0x11002200,
	0x11000022,
	0x11223344,
	0x12345678
];

def it(width: int) -> Type {
	return Int.getType(true, width);
}
def ut(width: int) -> Type {
	return Int.getType(false, width);
}
def itc(width: int) -> Int_TypeCon {
	return Int.getTypeCon(true, width);
}
def utc(width: int) -> Int_TypeCon {
	return Int.getTypeCon(false, width);
}

def testType(norm: IntNormalizer, expect: Array<Type>, t: Int_TypeCon) {
	TEST.eq(Tuple.newType(Lists.fromArray(expect)), norm.getNormalType(t));
}

def test_32() {
	def le_norm = IntNormalizer.new(32, false);
	def be_norm = IntNormalizer.new(32, true);

	def base = ut(32);
	testType(be_norm, [it(1),  base], itc(33));
	testType(be_norm, [ut(2),  base], utc(34));
	testType(be_norm, [it(13), base], itc(45));
	testType(be_norm, [ut(6),  base], utc(38));
	testType(be_norm, [it(16), base], itc(48));
	testType(be_norm, [ut(16), base], utc(48));
	testType(be_norm, [it(31), base], itc(63));
	testType(be_norm, [ut(31), base], utc(63));
	testType(be_norm, [it(32), base], itc(64));
	testType(be_norm, [ut(32), base], utc(64));

	testType(le_norm, [base, it(1)], itc(33));
	testType(le_norm, [base,  ut(2)], utc(34));
	testType(le_norm, [base, it(13)], itc(45));
	testType(le_norm, [base,  ut(6)], utc(38));
	testType(le_norm, [base, it(16)], itc(48));
	testType(le_norm, [base, ut(16)], utc(48));
	testType(le_norm, [base, it(31)], itc(63));
	testType(le_norm, [base, ut(31)], utc(63));
	testType(le_norm, [base, it(32)], itc(64));
	testType(le_norm, [base, ut(32)], utc(64));

	for (f in [itc, utc]) {
		for (width = 1; width < 33; width++) {
			var tt = f(width);
			TEST.eq(tt.create0(), le_norm.getNormalType(tt));
		}

		var array = Array<Val>.new(1);
		for (x in int_values) {
			array(0) = Bool.TRUE;
			le_norm.normalizeIntIntoArray(Int.TYPECON, x, array, 0);
			TEST.eq(x, Int.unbox(array(0)));
		}
	}
	var array = Array<Val>.new(2);
	for (f in [itc, utc]) {
		for (width in [33, 48, 64]) {
			var ul = f(width);
			for (x in int_values) {
				for (y in int_values) {
					le_norm.normalizeLongIntoArray(ul, (x, y), array, 0);
					TEST.eq(x, Int.unbox(array(1)));
					TEST.eq(y, Int.unbox(array(0)));

					be_norm.normalizeLongIntoArray(ul, (x, y), array, 0);
					TEST.eq(x, Int.unbox(array(0)));
					TEST.eq(y, Int.unbox(array(1)));
				}
			}
		}
	}
}


def test_16() {
	var be_norm = IntNormalizer.new(16, true);
	var le_norm = IntNormalizer.new(16, false);

	def base = ut(16);
	testType(be_norm, [it(16), base], itc(32));
	testType(be_norm, [ut(16), base], utc(32));
	testType(be_norm, [it(11), base], itc(27));
	testType(be_norm, [ut(11), base], utc(27));
	testType(be_norm, [it(13), base, base], itc(45));
	testType(be_norm, [ut(6),  base, base], utc(38));
	testType(be_norm, [it(16), base, base], itc(48));
	testType(be_norm, [ut(16), base, base], utc(48));
	testType(be_norm, [it(15), base, base, base], itc(63));
	testType(be_norm, [ut(15), base, base, base], utc(63));
	testType(be_norm, [it(16), base, base, base], itc(64));
	testType(be_norm, [ut(16), base, base, base], utc(64));

	testType(le_norm, [base, it(16)], itc(32));
	testType(le_norm, [base, ut(16)], utc(32));
	testType(le_norm, [base, it(11)], itc(27));
	testType(le_norm, [base, ut(11)], utc(27));
	testType(le_norm, [base, base, it(9)], itc(41));
	testType(le_norm, [base, base, ut(8)], utc(40));
	testType(le_norm, [base, base, it(16)], itc(48));
	testType(le_norm, [base, base, ut(16)], utc(48));
	testType(le_norm, [base, base, base, it(15)], itc(63));
	testType(le_norm, [base, base, base, ut(15)], utc(63));
	testType(le_norm, [base, base, base, it(16)], itc(64));
	testType(le_norm, [base, base, base, ut(16)], utc(64));

	def tests = [
		(0x00000000, (0x0000, 0x0000)),
		(0x00000011, (0x0000, 0x0011)),
		(0x00001100, (0x0000, 0x1100)),
		(0x00110000, (0x0011, 0x0000)),
		(0x11000000, (0x1100, 0x0000)),
		(0x11220000, (0x1122, 0x0000)),
		(0x11002200, (0x1100, 0x2200)),
		(0x11000022, (0x1100, 0x0022)),
		(0x11223344, (0x1122, 0x3344)),
		(0x12345678, (0x1234, 0x5678)),
		(0x87654321, (0x8765, 0x4321)),
		(0xffeeddcc, (0xffee, 0xddcc)),
		(0xfedcba98, (0xfedc, 0xba98))
	];

	var nat = utc(32);
	for (x in tests) {
		var array: Array<Val>;
		array = [Bool.TRUE, Bool.TRUE, Bool.TRUE, Bool.TRUE];
		be_norm.normalizeIntIntoArray(nat, x.0, array, 0);
		TEST.eq(x.1.0, Int.unbox(array(0)));
		TEST.eq(x.1.1, Int.unbox(array(1)));

		array = [Bool.TRUE, Bool.TRUE, Bool.TRUE, Bool.TRUE];
		le_norm.normalizeIntIntoArray(nat, x.0, array, 0);
		TEST.eq(x.1.0, Int.unbox(array(1)));
		TEST.eq(x.1.1, Int.unbox(array(0)));
	}

	def tests64 = [
		((0x00000000,0x11223344), (0x0000, 0x0000, 0x1122, 0x3344)),
		((0x00000011,0x22334455), (0x0000, 0x0011, 0x2233, 0x4455)),
		((0x00001100,0x33445566), (0x0000, 0x1100, 0x3344, 0x5566)),
		((0x00110000,0x44556677), (0x0011, 0x0000, 0x4455, 0x6677)),
		((0x11000000,0x55667788), (0x1100, 0x0000, 0x5566, 0x7788)),
		((0x11220000,0x66778899), (0x1122, 0x0000, 0x6677, 0x8899)),
		((0x11002200,0x778899aa), (0x1100, 0x2200, 0x7788, 0x99aa)),
		((0x11000022,0x8899aabb), (0x1100, 0x0022, 0x8899, 0xaabb)),
		((0x11223344,0x99aabbcc), (0x1122, 0x3344, 0x99aa, 0xbbcc)),
		((0x12345678,0xaabbccdd), (0x1234, 0x5678, 0xaabb, 0xccdd)),
		((0x87654321,0xbbccddee), (0x8765, 0x4321, 0xbbcc, 0xddee)),
		((0xffeeddcc,0xccddeeff), (0xffee, 0xddcc, 0xccdd, 0xeeff)),
		((0xfedcba98,0xddeeff00), (0xfedc, 0xba98, 0xddee, 0xff00)),
		((0xfedcba98,0xeeff0011), (0xfedc, 0xba98, 0xeeff, 0x0011))
	];

	var ul = utc(64);
	var array = Array<Val>.new(8);
	for (x in tests64) {
		be_norm.normalizeLongIntoArray(ul, x.0, array, 0);
		TEST.eq(x.1.0, Int.unbox(array(0)));
		TEST.eq(x.1.1, Int.unbox(array(1)));
		TEST.eq(x.1.2, Int.unbox(array(2)));
		TEST.eq(x.1.3, Int.unbox(array(3)));

		le_norm.normalizeLongIntoArray(ul, x.0, array, 0);
		TEST.eq(x.1.0, Int.unbox(array(3)));
		TEST.eq(x.1.1, Int.unbox(array(2)));
		TEST.eq(x.1.2, Int.unbox(array(1)));
		TEST.eq(x.1.3, Int.unbox(array(0)));
	}

	be_norm.normalizeIntIntoArray(Int.TYPECON, -9, array, 0);
	TEST.eq(-1, Int.unbox(array(0)));

	le_norm.normalizeIntIntoArray(Int.TYPECON, -11, array, 0);
	TEST.eq(-1, Int.unbox(array(1)));
}

def test_8() {
	var be_norm = IntNormalizer.new(8, true);
	var le_norm = IntNormalizer.new(8, false);

	def base = ut(8);
	testType(be_norm, [it(1), base], itc(9));
	testType(be_norm, [ut(2), base], utc(10));
	testType(be_norm, [it(7), base], itc(15));
	testType(be_norm, [ut(8), base], utc(16));
	testType(be_norm, [it(3), base, base], itc(19));
	testType(be_norm, [ut(6), base, base], utc(22));
	testType(be_norm, [it(8), base, base], itc(24));
	testType(be_norm, [ut(8), base, base], utc(24));
	testType(be_norm, [it(4), base, base, base], itc(28));
	testType(be_norm, [ut(5), base, base, base], utc(29));
	testType(be_norm, [it(6), base, base, base], itc(30));
	testType(be_norm, [ut(7), base, base, base], utc(31));
	testType(be_norm, [it(8), base, base, base], itc(32));
	testType(be_norm, [ut(8), base, base, base], utc(32));
	testType(be_norm, [ut(7), base, base, base, base], utc(39));
	testType(be_norm, [it(8), base, base, base, base], itc(40));
	testType(be_norm, [ut(8), base, base, base, base], utc(40));
	testType(be_norm, [ut(7), base, base, base, base, base, base, base], utc(63));
	testType(be_norm, [it(8), base, base, base, base, base, base, base], itc(64));
	testType(be_norm, [ut(8), base, base, base, base, base, base, base], utc(64));

	testType(le_norm, [base, it(1)], itc(9));
	testType(le_norm, [base, ut(2)], utc(10));
	testType(le_norm, [base, it(7)], itc(15));
	testType(le_norm, [base, ut(8)], utc(16));
	testType(le_norm, [base, base, it(3)], itc(19));
	testType(le_norm, [base, base, ut(6)], utc(22));
	testType(le_norm, [base, base, it(8)], itc(24));
	testType(le_norm, [base, base, ut(8)], utc(24));
	testType(le_norm, [base, base, base, it(4)], itc(28));
	testType(le_norm, [base, base, base, ut(5)], utc(29));
	testType(le_norm, [base, base, base, it(6)], itc(30));
	testType(le_norm, [base, base, base, ut(7)], utc(31));
	testType(le_norm, [base, base, base, it(8)], itc(32));
	testType(le_norm, [base, base, base, ut(8)], utc(32));
	testType(le_norm, [base, base, base, base, ut(7)], utc(39));
	testType(le_norm, [base, base, base, base, it(8)], itc(40));
	testType(le_norm, [base, base, base, base, ut(8)], utc(40));
	testType(le_norm, [base, base, base, base, base, base, base, ut(7)], utc(63));
	testType(le_norm, [base, base, base, base, base, base, base, it(8)], itc(64));
	testType(le_norm, [base, base, base, base, base, base, base, ut(8)], utc(64));

	def tests = [
		(0x00000000, (0x00, 0x00, 0x00, 0x00)),
		(0x00000011, (0x00, 0x00, 0x00, 0x11)),
		(0x00001100, (0x00, 0x00, 0x11, 0x00)),
		(0x00110000, (0x00, 0x11, 0x00, 0x00)),
		(0x11000000, (0x11, 0x00, 0x00, 0x00)),
		(0x11220000, (0x11, 0x22, 0x00, 0x00)),
		(0x11002200, (0x11, 0x00, 0x22, 0x00)),
		(0x11000022, (0x11, 0x00, 0x00, 0x22)),
		(0x11223344, (0x11, 0x22, 0x33, 0x44)),
		(0x12345678, (0x12, 0x34, 0x56, 0x78)),
		(0x87654321, (0x87, 0x65, 0x43, 0x21)),
		(0xffeeddcc, (0xff, 0xee, 0xdd, 0xcc)),
		(0xfedcba98, (0xfe, 0xdc, 0xba, 0x98))
	];

	var nat = Int.getTypeCon(false, 32);
	for (x in tests) {
		var array: Array<Val>;
		array = [Bool.TRUE, Bool.TRUE, Bool.TRUE, Bool.TRUE];
		be_norm.normalizeIntIntoArray(nat, x.0, array, 0);
		TEST.eq(x.1.0, Int.unbox(array(0)));
		TEST.eq(x.1.1, Int.unbox(array(1)));
		TEST.eq(x.1.2, Int.unbox(array(2)));
		TEST.eq(x.1.3, Int.unbox(array(3)));

		array = [Bool.TRUE, Bool.TRUE, Bool.TRUE, Bool.TRUE];
		le_norm.normalizeIntIntoArray(nat, x.0, array, 0);
		TEST.eq(x.1.0, Int.unbox(array(3)));
		TEST.eq(x.1.1, Int.unbox(array(2)));
		TEST.eq(x.1.2, Int.unbox(array(1)));
		TEST.eq(x.1.3, Int.unbox(array(0)));

	}

	def tests64 = [
		((0x00000000,0x11223344), (0x00, 0x00, 0x00, 0x00, 0x11, 0x22, 0x33, 0x44)),
		((0x00000011,0x22334455), (0x00, 0x00, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55)),
		((0x00001100,0x33445566), (0x00, 0x00, 0x11, 0x00, 0x33, 0x44, 0x55, 0x66)),
		((0x00110000,0x44556677), (0x00, 0x11, 0x00, 0x00, 0x44, 0x55, 0x66, 0x77)),
		((0x11000000,0x55667788), (0x11, 0x00, 0x00, 0x00, 0x55, 0x66, 0x77, 0x88)),
		((0x11220000,0x66778899), (0x11, 0x22, 0x00, 0x00, 0x66, 0x77, 0x88, 0x99)),
		((0x11002200,0x778899aa), (0x11, 0x00, 0x22, 0x00, 0x77, 0x88, 0x99, 0xaa)),
		((0x11000022,0x8899aabb), (0x11, 0x00, 0x00, 0x22, 0x88, 0x99, 0xaa, 0xbb)),
		((0x11223344,0x99aabbcc), (0x11, 0x22, 0x33, 0x44, 0x99, 0xaa, 0xbb, 0xcc)),
		((0x12345678,0xaabbccdd), (0x12, 0x34, 0x56, 0x78, 0xaa, 0xbb, 0xcc, 0xdd)),
		((0x87654321,0xbbccddee), (0x87, 0x65, 0x43, 0x21, 0xbb, 0xcc, 0xdd, 0xee)),
		((0xffeeddcc,0xccddeeff), (0xff, 0xee, 0xdd, 0xcc, 0xcc, 0xdd, 0xee, 0xff)),
		((0xfedcba98,0xddeeff00), (0xfe, 0xdc, 0xba, 0x98, 0xdd, 0xee, 0xff, 0x00)),
		((0xfedcba98,0xeeff0011), (0xfe, 0xdc, 0xba, 0x98, 0xee, 0xff, 0x00, 0x11))
	];

	var ul = utc(64);
	var array = Array<Val>.new(8);
	for (x in tests64) {
		be_norm.normalizeLongIntoArray(ul, x.0, array, 0);
		TEST.eq(x.1.0, Int.unbox(array(0)));
		TEST.eq(x.1.1, Int.unbox(array(1)));
		TEST.eq(x.1.2, Int.unbox(array(2)));
		TEST.eq(x.1.3, Int.unbox(array(3)));
		TEST.eq(x.1.4, Int.unbox(array(4)));
		TEST.eq(x.1.5, Int.unbox(array(5)));
		TEST.eq(x.1.6, Int.unbox(array(6)));
		TEST.eq(x.1.7, Int.unbox(array(7)));

		le_norm.normalizeLongIntoArray(ul, x.0, array, 0);
		TEST.eq(x.1.0, Int.unbox(array(7)));
		TEST.eq(x.1.1, Int.unbox(array(6)));
		TEST.eq(x.1.2, Int.unbox(array(5)));
		TEST.eq(x.1.3, Int.unbox(array(4)));
		TEST.eq(x.1.4, Int.unbox(array(3)));
		TEST.eq(x.1.5, Int.unbox(array(2)));
		TEST.eq(x.1.6, Int.unbox(array(1)));
		TEST.eq(x.1.7, Int.unbox(array(0)));
	}

	be_norm.normalizeIntIntoArray(Int.TYPECON, -9, array, 0);
	TEST.eq(-1, Int.unbox(array(0)));

	le_norm.normalizeIntIntoArray(Int.TYPECON, -11, array, 0);
	TEST.eq(-1, Int.unbox(array(3)));
}

def testRemainder(signed: bool, width: int, base: int, l: List<Type>) -> List<Type> {
	var r = width % base;
	var rt = Int.getType(signed, if(r == 0, base, r));
	TEST.eq(rt, l.head);
	return l.tail;
}

def test_getNormalType() {
	for (bigEndian in [false, true]) {
		for (base = 1; base <= Int.MAX_WIDTH; base++) {
			var norm = IntNormalizer.new(base, bigEndian);
			var bt = ut(base);
			for (t in [itc, utc]) {
				for (width = 1; width <= Int.MAX_WIDTH; width++) {
					var tt = t(width);
					var nt = norm.getNormalType(tt);
					if (width <= base) {
						TEST.eq(tt.create0(), nt);
						continue;
					}
					TEST.eq(V3Kind.TUPLE, nt.typeCon.kind);
					var types = nt.nested;
					if (bigEndian) types = testRemainder(tt.signed, width, base, types);
					for (w = width; w > base; w = w - base) {
						TEST.eq(bt, types.head);
						types = types.tail;
					}
					if (!bigEndian) types = testRemainder(tt.signed, width, base, types);
					TEST.eq(null, types);
				}
			}
		}
	}
}