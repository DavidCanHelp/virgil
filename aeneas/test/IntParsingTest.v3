def TEST = UnitTest.new("IntParsing", intTest);
def MININT: int = -2147483648;
def MAXINT: int = 2147483647;

// TODO: an adapter between NumberParser and this test.
def parseHex(str: string, offset: int) -> Parsed<int> {
	var np = NumberParser.new(str, 0);
	return Parsed.new(np.parse(), np.pos, Int.unbox(np.val));
}
// TODO: an adapter between NumberParser and this test.
def parseBin(str: string, offset: int) -> Parsed<int> {
	var np = NumberParser.new(str, 0);
	return Parsed.new(np.parse(), np.pos, Int.unbox(np.val));
}

def intTest() {
	TEST.eq(MININT, int.min);
	TEST.eq(MAXINT, int.max);

	test(0,			"0",		"0x0",		"0b0");
	test(0,			"0",		"0x000",	"0b0000");
	test(0,			"0",		"0X0",		"0B0");
	test(0,			"0",		"0X000",	"0B0000");
	test(1000000000,	"1000000000",	"0x3b9aca00",	"0b111011100110101100101000000000");
	test(1000000000,	"1000000000",	"0x3B9ACA00",	"0b111011100110101100101000000000");
	test(2000000000,	"2000000000",	"0x77359400",	"0b1110111001101011001010000000000");
	test(2000000000,	"2000000000",	"0x77359400",	"0b1110111001101011001010000000000");
	test(1,			"1",		"0x1",		"0b1");
	test(-1,		"-1",		"0xffffffff",	"0b11111111111111111111111111111111");
	test(999999999, 	"999999999",	"0x3b9ac9ff",	"0b111011100110101100100111111111");
	test(1000000001, 	"1000000001",	"0x3b9aca01",	"0b111011100110101100101000000001");
	test(1999999999, 	"1999999999",	"0x773593ff",	"0b1110111001101011001001111111111");
	test(2000000001, 	"2000000001",	"0x77359401",	"0b1110111001101011001010000000001");
	test(2,			"2",		"0x2",		"0b10");
	test(-2,		"-2",		"0xfffffffe",	"0b11111111111111111111111111111110");
	test(999999998, 	"999999998",	"0x3b9ac9fe",	"0b111011100110101100100111111110");
	test(1000000002, 	"1000000002",	"0x3b9aca02",	"0b111011100110101100101000000010");
	test(1999999998, 	"1999999998",	"0x773593fe",	"0b1110111001101011001001111111110");
	test(2000000002, 	"2000000002",	"0x77359402",	"0b1110111001101011001010000000010");
	test(3,			"3",		"0x3",		"0b11");
	test(-3,		"-3",		"0xfffffffd",	"0b11111111111111111111111111111101");
	test(999999997, 	"999999997",	"0x3b9ac9fd",	"0b111011100110101100100111111101");
	test(1000000003, 	"1000000003",	"0x3b9aca03",	"0b111011100110101100101000000011");
	test(1999999997, 	"1999999997",	"0x773593fd",	"0b1110111001101011001001111111101");
	test(2000000003, 	"2000000003",	"0x77359403",	"0b1110111001101011001010000000011");
	test(4,			"4",		"0x4",		"0b100");
	test(-4,		"-4",		"0xfffffffc",	"0b11111111111111111111111111111100");
	test(999999996, 	"999999996",	"0x3b9ac9fc",	"0b111011100110101100100111111100");
	test(1000000004, 	"1000000004",	"0x3b9aca04",	"0b111011100110101100101000000100");
	test(1999999996, 	"1999999996",	"0x773593fc",	"0b1110111001101011001001111111100");
	test(2000000004, 	"2000000004",	"0x77359404",	"0b1110111001101011001010000000100");
	test(5,			"5",		"0x5",		"0b101");
	test(-5,		"-5",		"0xfffffffb",	"0b11111111111111111111111111111011");
	test(999999995, 	"999999995",	"0x3b9ac9fb",	"0b111011100110101100100111111011");
	test(1000000005, 	"1000000005",	"0x3b9aca05",	"0b111011100110101100101000000101");
	test(1999999995, 	"1999999995",	"0x773593fb",	"0b1110111001101011001001111111011");
	test(2000000005, 	"2000000005",	"0x77359405",	"0b1110111001101011001010000000101");
	test(6,			"6",		"0x6",		"0b110");
	test(-6,		"-6",		"0xfffffffa",	"0b11111111111111111111111111111010");
	test(999999994, 	"999999994",	"0x3b9ac9fa",	"0b111011100110101100100111111010");
	test(1000000006, 	"1000000006",	"0x3b9aca06",	"0b111011100110101100101000000110");
	test(1999999994, 	"1999999994",	"0x773593fa",	"0b1110111001101011001001111111010");
	test(2000000006, 	"2000000006",	"0x77359406",	"0b1110111001101011001010000000110");
	test(7,			"7",		"0x7",		"0b111");
	test(-7,		"-7",		"0xfffffff9",	"0b11111111111111111111111111111001");
	test(999999993, 	"999999993",	"0x3b9ac9f9",	"0b111011100110101100100111111001");
	test(1000000007, 	"1000000007",	"0x3b9aca07",	"0b111011100110101100101000000111");
	test(1999999993, 	"1999999993",	"0x773593f9",	"0b1110111001101011001001111111001");
	test(2000000007, 	"2000000007",	"0x77359407",	"0b1110111001101011001010000000111");
	test(8,			"8",		"0x8",		"0b1000");
	test(-8,		"-8",		"0xfffffff8",	"0b11111111111111111111111111111000");
	test(999999992, 	"999999992",	"0x3b9ac9f8",	"0b111011100110101100100111111000");
	test(1000000008, 	"1000000008",	"0x3b9aca08",	"0b111011100110101100101000001000");
	test(1999999992, 	"1999999992",	"0x773593f8",	"0b1110111001101011001001111111000");
	test(2000000008, 	"2000000008",	"0x77359408",	"0b1110111001101011001010000001000");
	test(9,			"9",		"0x9",		"0b1001");
	test(-9,		"-9",		"0xfffffff7",	"0b11111111111111111111111111110111");
	test(999999991, 	"999999991",	"0x3b9ac9f7",	"0b111011100110101100100111110111");
	test(1000000009, 	"1000000009",	"0x3b9aca09",	"0b111011100110101100101000001001");
	test(1999999991, 	"1999999991",	"0x773593f7",	"0b1110111001101011001001111110111");
	test(2000000009, 	"2000000009",	"0x77359409",	"0b1110111001101011001010000001001");
	test(10,		"10",		"0xa",		"0b1010");
	test(-10,		"-10",		"0xfffffff6",	"0b11111111111111111111111111110110");
	test(999999990, 	"999999990",	"0x3b9ac9f6",	"0b111011100110101100100111110110");
	test(1000000010, 	"1000000010",	"0x3b9aca0a",	"0b111011100110101100101000001010");
	test(1999999990, 	"1999999990",	"0x773593f6",	"0b1110111001101011001001111110110");
	test(2000000010, 	"2000000010",	"0x7735940a",	"0b1110111001101011001010000001010");
	test(11,		"11",		"0xb",		"0b1011");
	test(-11,		"-11",		"0xfffffff5",	"0b11111111111111111111111111110101");
	test(999999989, 	"999999989",	"0x3b9ac9f5",	"0b111011100110101100100111110101");
	test(1000000011, 	"1000000011",	"0x3b9aca0b",	"0b111011100110101100101000001011");
	test(1999999989, 	"1999999989",	"0x773593f5",	"0b1110111001101011001001111110101");
	test(2000000011, 	"2000000011",	"0x7735940b",	"0b1110111001101011001010000001011");
	test(12,		"12",		"0xc",		"0b1100");
	test(-12,		"-12",		"0xfffffff4",	"0b11111111111111111111111111110100");
	test(999999988, 	"999999988",	"0x3b9ac9f4",	"0b111011100110101100100111110100");
	test(1000000012, 	"1000000012",	"0x3b9aca0c",	"0b111011100110101100101000001100");
	test(1999999988, 	"1999999988",	"0x773593f4",	"0b1110111001101011001001111110100");
	test(2000000012, 	"2000000012",	"0x7735940c",	"0b1110111001101011001010000001100");
	test(13,		"13",		"0xd",		"0b1101");
	test(-13,		"-13",		"0xfffffff3",	"0b11111111111111111111111111110011");
	test(999999987, 	"999999987",	"0x3b9ac9f3",	"0b111011100110101100100111110011");
	test(1000000013, 	"1000000013",	"0x3b9aca0d",	"0b111011100110101100101000001101");
	test(1999999987, 	"1999999987",	"0x773593f3",	"0b1110111001101011001001111110011");
	test(2000000013, 	"2000000013",	"0x7735940d",	"0b1110111001101011001010000001101");
	test(14,		"14",		"0xe",		"0b1110");
	test(-14,		"-14",		"0xfffffff2",	"0b11111111111111111111111111110010");
	test(999999986, 	"999999986",	"0x3b9ac9f2",	"0b111011100110101100100111110010");
	test(1000000014, 	"1000000014",	"0x3b9aca0e",	"0b111011100110101100101000001110");
	test(1999999986, 	"1999999986",	"0x773593f2",	"0b1110111001101011001001111110010");
	test(2000000014, 	"2000000014",	"0x7735940e",	"0b1110111001101011001010000001110");
	test(15,		"15",		"0xf",		"0b1111");
	test(-15,		"-15",		"0xfffffff1",	"0b11111111111111111111111111110001");
	test(999999985, 	"999999985",	"0x3b9ac9f1",	"0b111011100110101100100111110001");
	test(1000000015, 	"1000000015",	"0x3b9aca0f",	"0b111011100110101100101000001111");
	test(1999999985, 	"1999999985",	"0x773593f1",	"0b1110111001101011001001111110001");
	test(2000000015, 	"2000000015",	"0x7735940f",	"0b1110111001101011001010000001111");
	test(16,		"16",		"0x10",		"0b10000");
	test(-16,		"-16",		"0xfffffff0",	"0b11111111111111111111111111110000");
	test(999999984, 	"999999984",	"0x3b9ac9f0",	"0b111011100110101100100111110000");
	test(1000000016, 	"1000000016",	"0x3b9aca10",	"0b111011100110101100101000010000");
	test(1999999984, 	"1999999984",	"0x773593f0",	"0b1110111001101011001001111110000");
	test(2000000016, 	"2000000016",	"0x77359410",	"0b1110111001101011001010000010000");
	test(17,		"17",		"0x11",		"0b10001");
	test(-17,		"-17",		"0xffffffef",	"0b11111111111111111111111111101111");
	test(999999983, 	"999999983",	"0x3b9ac9ef",	"0b111011100110101100100111101111");
	test(1000000017, 	"1000000017",	"0x3b9aca11",	"0b111011100110101100101000010001");
	test(1999999983, 	"1999999983",	"0x773593ef",	"0b1110111001101011001001111101111");
	test(2000000017, 	"2000000017",	"0x77359411",	"0b1110111001101011001010000010001");
	test(18,		"18",		"0x12",		"0b10010");
	test(-18,		"-18",		"0xffffffee",	"0b11111111111111111111111111101110");
	test(999999982, 	"999999982",	"0x3b9ac9ee",	"0b111011100110101100100111101110");
	test(1000000018, 	"1000000018",	"0x3b9aca12",	"0b111011100110101100101000010010");
	test(1999999982, 	"1999999982",	"0x773593ee",	"0b1110111001101011001001111101110");
	test(2000000018, 	"2000000018",	"0x77359412",	"0b1110111001101011001010000010010");
	test(23,		"23",		"0x17",		"0b10111");
	test(-23,		"-23",		"0xffffffe9",	"0b11111111111111111111111111101001");
	test(999999977, 	"999999977",	"0x3b9ac9e9",	"0b111011100110101100100111101001");
	test(1000000023, 	"1000000023",	"0x3b9aca17",	"0b111011100110101100101000010111");
	test(1999999977, 	"1999999977",	"0x773593e9",	"0b1110111001101011001001111101001");
	test(2000000023, 	"2000000023",	"0x77359417",	"0b1110111001101011001010000010111");
	test(42,		"42",		"0x2a",		"0b101010");
	test(-42,		"-42",		"0xffffffd6",	"0b11111111111111111111111111010110");
	test(999999958, 	"999999958",	"0x3b9ac9d6",	"0b111011100110101100100111010110");
	test(1000000042, 	"1000000042",	"0x3b9aca2a",	"0b111011100110101100101000101010");
	test(1999999958, 	"1999999958",	"0x773593d6",	"0b1110111001101011001001111010110");
	test(2000000042, 	"2000000042",	"0x7735942a",	"0b1110111001101011001010000101010");
	test(56,		"56",		"0x38",		"0b111000");
	test(-56,		"-56",		"0xffffffc8",	"0b11111111111111111111111111001000");
	test(999999944, 	"999999944",	"0x3b9ac9c8",	"0b111011100110101100100111001000");
	test(1000000056, 	"1000000056",	"0x3b9aca38",	"0b111011100110101100101000111000");
	test(1999999944, 	"1999999944",	"0x773593c8",	"0b1110111001101011001001111001000");
	test(2000000056, 	"2000000056",	"0x77359438",	"0b1110111001101011001010000111000");
	test(77,		"77",		"0x4d",		"0b1001101");
	test(-77,		"-77",		"0xffffffb3",	"0b11111111111111111111111110110011");
	test(999999923, 	"999999923",	"0x3b9ac9b3",	"0b111011100110101100100110110011");
	test(1000000077, 	"1000000077",	"0x3b9aca4d",	"0b111011100110101100101001001101");
	test(1999999923, 	"1999999923",	"0x773593b3",	"0b1110111001101011001001110110011");
	test(2000000077, 	"2000000077",	"0x7735944d",	"0b1110111001101011001010001001101");
	test(101,		"101",		"0x65",		"0b1100101");
	test(-101,		"-101",		"0xffffff9b",	"0b11111111111111111111111110011011");
	test(999999899, 	"999999899",	"0x3b9ac99b",	"0b111011100110101100100110011011");
	test(1000000101, 	"1000000101",	"0x3b9aca65",	"0b111011100110101100101001100101");
	test(1999999899, 	"1999999899",	"0x7735939b",	"0b1110111001101011001001110011011");
	test(2000000101, 	"2000000101",	"0x77359465",	"0b1110111001101011001010001100101");
	test(125,		"125",		"0x7d",		"0b1111101");
	test(-125,		"-125",		"0xffffff83",	"0b11111111111111111111111110000011");
	test(999999875, 	"999999875",	"0x3b9ac983",	"0b111011100110101100100110000011");
	test(1000000125, 	"1000000125",	"0x3b9aca7d",	"0b111011100110101100101001111101");
	test(1999999875, 	"1999999875",	"0x77359383",	"0b1110111001101011001001110000011");
	test(2000000125, 	"2000000125",	"0x7735947d",	"0b1110111001101011001010001111101");
	test(1001,		"1001",		"0x3e9",	"0b1111101001");
	test(-1001,		"-1001",	"0xfffffc17",	"0b11111111111111111111110000010111");
	test(999998999, 	"999998999",	"0x3b9ac617",	"0b111011100110101100011000010111");
	test(1000001001, 	"1000001001",	"0x3b9acde9",	"0b111011100110101100110111101001");
	test(1999998999, 	"1999998999",	"0x77359017",	"0b1110111001101011001000000010111");
	test(2000001001, 	"2000001001",	"0x773597e9",	"0b1110111001101011001011111101001");
	test(1120,		"1120",		"0x460",	"0b10001100000");
	test(-1120,		"-1120",	"0xfffffba0",	"0b11111111111111111111101110100000");
	test(999998880, 	"999998880",	"0x3b9ac5a0",	"0b111011100110101100010110100000");
	test(1000001120, 	"1000001120",	"0x3b9ace60",	"0b111011100110101100111001100000");
	test(1999998880, 	"1999998880",	"0x77358fa0",	"0b1110111001101011000111110100000");
	test(2000001120, 	"2000001120",	"0x77359860",	"0b1110111001101011001100001100000");
	test(32767,		"32767",	"0x7fff",	"0b111111111111111");
	test(-32767,		"-32767",	"0xffff8001",	"0b11111111111111111000000000000001");
	test(999967233, 	"999967233",	"0x3b9a4a01",	"0b111011100110100100101000000001");
	test(1000032767, 	"1000032767",	"0x3b9b49ff",	"0b111011100110110100100111111111");
	test(1999967233, 	"1999967233",	"0x77351401",	"0b1110111001101010001010000000001");
	test(2000032767, 	"2000032767",	"0x773613ff",	"0b1110111001101100001001111111111");
	test(32768,		"32768",	"0x8000",	"0b1000000000000000");
	test(-32768,		"-32768",	"0xffff8000",	"0b11111111111111111000000000000000");
	test(999967232, 	"999967232",	"0x3b9a4a00",	"0b111011100110100100101000000000");
	test(1000032768, 	"1000032768",	"0x3b9b4a00",	"0b111011100110110100101000000000");
	test(1999967232, 	"1999967232",	"0x77351400",	"0b1110111001101010001010000000000");
	test(2000032768, 	"2000032768",	"0x77361400",	"0b1110111001101100001010000000000");
	test(32769,		"32769",	"0x8001",	"0b1000000000000001");
	test(-32769,		"-32769",	"0xffff7fff",	"0b11111111111111110111111111111111");
	test(999967231, 	"999967231",	"0x3b9a49ff",	"0b111011100110100100100111111111");
	test(1000032769, 	"1000032769",	"0x3b9b4a01",	"0b111011100110110100101000000001");
	test(1999967231, 	"1999967231",	"0x773513ff",	"0b1110111001101010001001111111111");
	test(2000032769, 	"2000032769",	"0x77361401",	"0b1110111001101100001010000000001");
	test(64000,		"64000",	"0xfa00",	"0b1111101000000000");
	test(-64000,		"-64000",	"0xffff0600",	"0b11111111111111110000011000000000");
	test(999936000, 	"999936000",	"0x3b99d000",	"0b111011100110011101000000000000");
	test(1000064000, 	"1000064000",	"0x3b9bc400",	"0b111011100110111100010000000000");
	test(1999936000, 	"1999936000",	"0x77349a00",	"0b1110111001101001001101000000000");
	test(2000064000, 	"2000064000",	"0x77368e00",	"0b1110111001101101000111000000000");
	test(65535,		"65535",	"0xffff",	"0b1111111111111111");
	test(-65535,		"-65535",	"0xffff0001",	"0b11111111111111110000000000000001");
	test(999934465, 	"999934465",	"0x3b99ca01",	"0b111011100110011100101000000001");
	test(1000065535, 	"1000065535",	"0x3b9bc9ff",	"0b111011100110111100100111111111");
	test(1999934465, 	"1999934465",	"0x77349401",	"0b1110111001101001001010000000001");
	test(2000065535, 	"2000065535",	"0x773693ff",	"0b1110111001101101001001111111111");
	test(65536,		"65536",	"0x10000",	"0b10000000000000000");
	test(-65536,		"-65536",	"0xffff0000",	"0b11111111111111110000000000000000");
	test(999934464, 	"999934464",	"0x3b99ca00",	"0b111011100110011100101000000000");
	test(1000065536, 	"1000065536",	"0x3b9bca00",	"0b111011100110111100101000000000");
	test(1999934464, 	"1999934464",	"0x77349400",	"0b1110111001101001001010000000000");
	test(2000065536, 	"2000065536",	"0x77369400",	"0b1110111001101101001010000000000");
	test(1000982,		"1000982",	"0xf4616",	"0b11110100011000010110");
	test(-1000982,		"-1000982",	"0xfff0b9ea",	"0b11111111111100001011100111101010");
	test(998999018, 	"998999018",	"0x3b8b83ea",	"0b111011100010111000001111101010");
	test(1001000982, 	"1001000982",	"0x3baa1016",	"0b111011101010100001000000010110");
	test(1998999018, 	"1998999018",	"0x77264dea",	"0b1110111001001100100110111101010");
	test(2001000982, 	"2001000982",	"0x7744da16",	"0b1110111010001001101101000010110");
	test(2147483647, 	"2147483647",	"0x7fffffff",	"0b1111111111111111111111111111111");
	test(2147483646, 	"2147483646",	"0x7ffffffe",	"0b1111111111111111111111111111110");
	test(-2147483648, 	"-2147483648",	"0x80000000",	"0b10000000000000000000000000000000");
	test(-2147483648, 	"-2147483648",	"0x80000000",	"0b10000000000000000000000000000000");
	test(2147483647, 	"2147483647",	"0x7fffffff",	"0b1111111111111111111111111111111");
	test(-2147483647, 	"-2147483647",	"0x80000001",	"0b10000000000000000000000000000001");

	test(2147483646, 	"2147483646",	"0x7fFFfffE",	"0b1111111111111111111111111111110");
	test(999934465, 	"999934465",	"0X3B99CA01",	"0B111011100110011100101000000001");
	test(1000065535, 	"1000065535",	"0X3B9BC9FF",	"0B111011100110111100100111111111");
	test(999999997, 	"999999997",	"0X3B9AC9FD",	"0B111011100110101100100111111101");
	test(-32768,		"-32768",	"0xFFFF8000",	"0b11111111111111111000000000000000");
	test(-32767,		"-32767",	"0xFFFF8001",	"0b11111111111111111000000000000001");
	test(-65536,		"-65536",	"0xFFFF0000",	"0b11111111111111110000000000000000");
	test(-65535,		"-65535",	"0xFFFF0001",	"0b11111111111111110000000000000001");
	test(32768,		"32768",	"0x8000",	"0b01000000000000000");
	test(32768,		"32768",	"0x8000",	"0b00001000000000000000");
	test(32768,		"32768",	"0x8000",	"0b00000000000000001000000000000000");

	test(3,			"3",		"0x3",		"0b0011");
	test(3,			"3",		"0x3",		"0b000011");
	test(3,			"3",		"0x3",		"0b0000011");
	test(3,			"3",		"0x3",		"0b0000000011");

	nope("--3", "0xZ", "0b3");
	nope("-A", "0x-Z", "0b-3");

	noDec("-2147483649");
	noDec("-2147483650");
	noDec("-3147483650");
	noDec("-4147483650");
	noDec("-5147483650");
	noDec("-21474836501");
	noDec("-21474836507");
	noDec("-10737418240");
	noDec("-11737418240");
	noDec("-5368709120");
	noDec("-5468709120");

	noDec("2147483648");
	noDec("2147483649");
	noDec("2147483650");
	noDec("3147483650");
	noDec("4147483650");
	noDec("5147483650");
	noDec("21474836501");
	noDec("21474836507");
	noDec("10737418240");
	noDec("11737418240");
	noDec("5368709120");
	noDec("5468709120");

	noDec("");
	noDec("A");
	noDec("-");
	noDec("-A");
	noDec("00");
	noDec("01");
	noDec("04");
	noDec("05");
	noDec("07");
	noDec("09");
	noDec("0a");
	noDec("1a");
	noDec("1-");
}

def test(val: int, dec: string, hex: string, bin: string) {
	TEST.eq(dec, StringBuilder.new().putd(val).toString());
	var box = Int.parseDecimal(dec);
	assert(box != null && box.val == val, "decimal parsed incorrectly");
	assertParsed(parseHex(hex, 0), val, hex);
	assertParsed(parseBin(bin, 0), val, bin);
	testDecimalPU(val, 1);
}

def testDecimalPU(val: int, range: int) {
	var i = val - range, max = val + range;
	while (i < max) {
		var str = StringBuilder.new().putd(i);
		var box = Int.parseDecimal(str.toString());
		if (box == null) TEST.error1("%d did not parse", i);
		if (box.val != i) TEST.error2("%d parsed as %d", i, box.val);
		i = i + 1;
	}
}

def assertParsed(p: Parsed<int>, expected: int, str: string) {
	if (!p.passed) TEST.error1("%s did not parse", str);
	if (p.length != str.length) TEST.error2("%s did not parse fully (%d)", str, p.length);
	TEST.eq(expected, p.val);
}

def assert(cond: bool, msg: string) {
	if (!cond) TEST.error(msg);
}

def nope(dec: string, hex: string, bin: string) {
	var d = Int.parseDecimal(dec);
	if (d != null) TEST.error1("%s should not parse", dec);	
	var h = parseHex(hex, 0);
	if (h.passed) TEST.error1("%s should not parse", hex);
	var b = parseBin(bin, 0);
	if (b.passed) TEST.error1("%s should not parse", bin);	
}

def noDec(dec: string) {
	var d = Int.parseDecimal(dec);
	if (d != null) TEST.error1("%s should not parse", dec);	
}
