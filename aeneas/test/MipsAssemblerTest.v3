var TEST = UnitTest.new("MipsAssembler", test);
var debug = false;

def test() {
	test_add();
}

def R0 = MipsReg.R0;
def R1 = MipsReg.R1;
def R2 = MipsReg.R2;
def R3 = MipsReg.R3;
def R4 = MipsReg.R4;
def R5 = MipsReg.R5;
def R6 = MipsReg.R6;
def R7 = MipsReg.R7;
def R8 = MipsReg.R8;
def R9 = MipsReg.R9;
def R10 = MipsReg.R10;
def R11 = MipsReg.R11;
def R12 = MipsReg.R12;
def R13 = MipsReg.R13;
def R14 = MipsReg.R14;
def R15 = MipsReg.R15;
def R16 = MipsReg.R16;
def R17 = MipsReg.R17;
def R18 = MipsReg.R18;
def R19 = MipsReg.R19;
def R20 = MipsReg.R20;
def R21 = MipsReg.R21;
def R22 = MipsReg.R22;
def R23 = MipsReg.R23;
def R24 = MipsReg.R24;
def R25 = MipsReg.R25;
def R26 = MipsReg.R26;
def R27 = MipsReg.R27;
def R28 = MipsReg.R28;
def R29 = MipsReg.R29;
def R30 = MipsReg.R30;
def R31 = MipsReg.R31;

def ALL_REGS = [
	MipsReg.R0,  MipsReg.R1,  MipsReg.R2,  MipsReg.R3,
	MipsReg.R4,  MipsReg.R5,  MipsReg.R6,  MipsReg.R7,
	MipsReg.R8,  MipsReg.R9,  MipsReg.R10, MipsReg.R11,
	MipsReg.R12, MipsReg.R13, MipsReg.R14, MipsReg.R15,
	MipsReg.R16, MipsReg.R17, MipsReg.R18, MipsReg.R19,
	MipsReg.R20, MipsReg.R21, MipsReg.R22, MipsReg.R23,
	MipsReg.R24, MipsReg.R25, MipsReg.R26, MipsReg.R27,
	MipsReg.R28, MipsReg.R29, MipsReg.R30, MipsReg.R31
];

def data = Array<byte>.new(128);
def buffer = DataWriter.new();
def asm = MipsAssembler.new(buffer);

def nameOf(reg: MipsReg) -> string {
	var r = "";
	match (reg) {
		R0 =>  r = "zero";
		R1 =>  r = "at";
		R2 =>  r = "v0";
		R3 =>  r = "v1";
		R4 =>  r = "a0";
		R5 =>  r = "a1";
		R6 =>  r = "a2";
		R7 =>  r = "a3";
		R8 =>  r = "t0";
		R9 =>  r = "t1";
		R10 => r = "t2";
		R11 => r = "t3";
		R12 => r = "t4";
		R13 => r = "t5";
		R14 => r = "t6";
		R15 => r = "t7";
		R16 => r = "s0";
		R17 => r = "s1";
		R18 => r = "s2";
		R19 => r = "s3";
		R20 => r = "s4";
		R21 => r = "s5";
		R22 => r = "s6";
		R23 => r = "s7";
		R24 => r = "t8";
		R25 => r = "t9";
		R26 => r = "k0";
		R27 => r = "k1";
		R28 => r = "gp";
		R29 => r = "sp";
		R30 => r = "fp";
		R31 => r = "ra";
	}
	return r;
}

def op3(name: string, func: (MipsReg, MipsReg, MipsReg) -> void, r0: MipsReg, r1: MipsReg, r2: MipsReg) {
	if (debug) {
		System.puts(name);
		System.puts(" $");
		System.puts(nameOf(r0));
		System.puts(", $");
		System.puts(nameOf(r1));
		System.puts(", $");
		System.puts(nameOf(r2));
		System.putc('\n');
	}
	return func(r0, r1, r2);
}

def test_add() {
	asm.buffer.at(0);
	def T = check;
	def ADD = op3("add", asm.add, _, _, _);

	T(0x00000020u, ADD(R0, R0, R0));
	T(0x00010020u, ADD(R0, R0, R1));
	T(0x00020020u, ADD(R0, R0, R2));
	T(0x00040020u, ADD(R0, R0, R4));
	T(0x00080020u, ADD(R0, R0, R8));
	T(0x00100020u, ADD(R0, R0, R16));
	T(0x001f0020u, ADD(R0, R0, R31));

	T(0x00000020u, ADD(R0, R0, R0));
	T(0x00200020u, ADD(R0, R1, R0));
	T(0x00400020u, ADD(R0, R2, R0));
	T(0x00800020u, ADD(R0, R4, R0));
	T(0x01000020u, ADD(R0, R8, R0));
	T(0x02000020u, ADD(R0, R16, R0));
	T(0x03e00020u, ADD(R0, R31, R0));

	T(0x00000020u, ADD(R0, R0, R0));
	T(0x00000820u, ADD(R1, R0, R0));
	T(0x00001020u, ADD(R2, R0, R0));
	T(0x00002020u, ADD(R4, R0, R0));
	T(0x00004020u, ADD(R8, R0, R0));
	T(0x00008020u, ADD(R16, R0, R0));
	T(0x0000f820u, ADD(R31, R0, R0));

	T(0x03fff820u, ADD(R31, R31, R31));
	T(0x03e0f820u, ADD(R31, R31, R0));
	T(0x03e1f820u, ADD(R31, R31, R1));
	T(0x03e2f820u, ADD(R31, R31, R2));
	T(0x03e4f820u, ADD(R31, R31, R4));
	T(0x03e8f820u, ADD(R31, R31, R8));
	T(0x03f0f820u, ADD(R31, R31, R16));

	T(0x001ff820u, ADD(R31, R0, R31));
	T(0x003ff820u, ADD(R31, R1, R31));
	T(0x005ff820u, ADD(R31, R2, R31));
	T(0x009ff820u, ADD(R31, R4, R31));
	T(0x011ff820u, ADD(R31, R8, R31));
	T(0x021ff820u, ADD(R31, R16, R31));

	T(0x03ff0020u, ADD(R0, R31, R31));
	T(0x03ff0820u, ADD(R1, R31, R31));
	T(0x03ff1020u, ADD(R2, R31, R31));
	T(0x03ff2020u, ADD(R4, R31, R31));
	T(0x03ff4020u, ADD(R8, R31, R31));
	T(0x03ff8020u, ADD(R16, R31, R31));
}

def check(expected: u32, v: void) {
	asm.buffer.at(0);
	var d = asm.buffer.data;
	TEST.eq(expected,
		(u32.!(d[3]) << 0) |
		(u32.!(d[2]) << 8) |
		(u32.!(d[1]) << 16) |
		(u32.!(d[0]) << 24));
}
