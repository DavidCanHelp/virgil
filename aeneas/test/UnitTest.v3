class UnitTest(name: string, run: void -> void) {
	var output = StringBuffer.new();
	new() {
		UnitTests.register(this);
	}
	def print(msg: string) {
		output.puts(msg);
		output.ln();
	}
	def eq<T>(expected: T, result: T) {
		var fail = expected != result;
		if (fail && string.?(expected)) {
			fail = !Strings.equal(string.!(expected), string.!(result));
		}
		if (fail) error2("expected %1, result = %2", expected, result);
	}
	def error(msg: string) {
		System.error(Strings.format1("%1Test error", name), msg);
	}
	def error1<T>(msg: string, param: T) {
		error(Strings.format1(msg, param));
	}
	def error2<T, U>(msg: string, param1: T, param2: U) {
		error(Strings.format2(msg, param1, param2));
	}
}
component UnitTests {
	var tests: List<UnitTest>;
	var count = 0;
	new() {
		Aeneas.startup = run;
	}
	def register(x: UnitTest) {
		tests = List.new(x, tests);
		count++;
	}
	def run() {
		var progress = ProgressPrinter.new(count, 2);
		for (l = Lists.reverse(tests); l != null; l = l.tail) {
			progress.begin(l.head.name);
			l.head.run();
			l.head.output.reset();
			progress.pass();
		}
		progress.report();
		if (progress.passed == count) System.puts("Unit tests passed.\n");
	}
}