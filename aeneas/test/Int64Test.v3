def TEST = UnitTest.new("Int64", test);

def test() {
	testShl();
	testBinop(int.&, Int64.and);
	testBinop(int.|, Int64.or);
	testBinop(int.^, Int64.xor);
	test_mulu16();
}

def testShl() {
	var shl = Int64.shl;
	var x = (0x12345678, 0xabcdef01);
	var zero = (0, 0);
	expect((0x2345678a, 0xbcdef010), shl(x, (0, 4)));
	expect((0x345678ab, 0xcdef0100), shl(x, (0, 8)));
	expect((0x45678abc, 0xdef01000), shl(x, (0, 12)));
	expect((0x5678abcd, 0xef010000), shl(x, (0, 16)));
	expect((0x678abcde, 0xf0100000), shl(x, (0, 20)));
	expect((0x78abcdef, 0x01000000), shl(x, (0, 24)));
	expect((0x8abcdef0, 0x10000000), shl(x, (0, 28)));
	expect((0xabcdef01, 0x00000000), shl(x, (0, 32)));
	expect((0xbcdef010, 0x00000000), shl(x, (0, 36)));
	expect((0xcdef0100, 0x00000000), shl(x, (0, 40)));
	expect((0xdef01000, 0x00000000), shl(x, (0, 44)));
	expect((0xef010000, 0x00000000), shl(x, (0, 48)));
	expect((0xf0100000, 0x00000000), shl(x, (0, 52)));
	expect((0x01000000, 0x00000000), shl(x, (0, 56)));
	expect((0x10000000, 0x00000000), shl(x, (0, 60)));
	expect((0x00000000, 0x00000000), shl(x, (0, 64)));
	expect((0x00000000, 0x00000000), shl(x, (0, 65)));
	expect(zero, shl(x, (0, -1)));
	expect(zero, shl(x, (1, 0)));
	expect(zero, shl(x, (-1, 0)));
	expect(zero, shl(x, (0, 100)));
}

def testBinop(iop: (int, int) -> int, lop: ((int, int), (int, int)) -> (int, int)) {
	var patterns = [-1, 0, 1, 0x99, 0x01234567, 0xfedcba99, -999999];
	var and = Int64.and;

	for (i in patterns) {
		for (j in patterns) {
			expect((iop(i, i), iop(j, j)), lop((i, j), (i, j)));
			expect((iop(i, j), iop(j, j)), lop((i, j), (j, j)));
			expect((iop(i, i), iop(i, j)), lop((i, i), (i, j)));
		}
	}

}

def test_mulu16() {
	var mul = Int64.mulu16;
	var x3 = [
		(0x00000000, 0x00000005),
		(0x00000000, 0x0000000F),
		(0x00000000, 0x0000002D),
		(0x00000000, 0x00000087),
		(0x00000000, 0x00000195),
		(0x00000000, 0x000004BF),
		(0x00000000, 0x00000E3D),
		(0x00000000, 0x00002AB7),
		(0x00000000, 0x00008025),
		(0x00000000, 0x0001806F),
		(0x00000000, 0x0004814D),
		(0x00000000, 0x000D83E7),
		(0x00000000, 0x00288BB5),
		(0x00000000, 0x0079A31F),
		(0x00000000, 0x016CE95D),
		(0x00000000, 0x0446BC17),
		(0x00000000, 0x0CD43445),
		(0x00000000, 0x267C9CCF),
		(0x00000000, 0x7375D66D),
		(0x00000001, 0x5A618347),
		(0x00000004, 0x0F2489D5),
		(0x0000000C, 0x2D6D9D7F),
		(0x00000024, 0x8848D87D),
		(0x0000006D, 0x98DA8977),
		(0x00000148, 0xCA8F9C65),
		(0x000003DA, 0x5FAED52F),
		(0x00000B8F, 0x1F0C7F8D),
		(0x000022AD, 0x5D257EA7),
		(0x00006808, 0x17707BF5),
		(0x00013818, 0x465173DF),
		(0x0003A848, 0xD2F45B9D),
		(0x000AF8DA, 0x78DD12D7),
		(0x0020EA8F, 0x6A973885),
		(0x0062BFAE, 0x3FC5A98F),
		(0x01283F0A, 0xBF50FCAD),
		(0x0378BD20, 0x3DF2F607),
		(0x0A6A3760, 0xB9D8E215),
		(0x1F3EA622, 0x2D8AA63F),
		(0x5DBBF266, 0x889FF2BD),
		(0x1933D733, 0x99DFD837),
		(0x4B9B859A, 0xCD9F88A5)
	];

	for (i < x3.length - 1) {
		expect(x3(i + 1), mul(x3(i), u16.!(3)));
	}

	var x11 = [
		(0x00000000, 0x00000002),
		(0x00000000, 0x00000016),
		(0x00000000, 0x000000F2),
		(0x00000000, 0x00000A66),
		(0x00000000, 0x00007262),
		(0x00000000, 0x0004EA36),
		(0x00000000, 0x00361052),
		(0x00000000, 0x0252B386),
		(0x00000000, 0x198DB6C2),
		(0x00000001, 0x1916DA56),
		(0x0000000C, 0x13FB61B2),
		(0x00000084, 0xDBCD32A6),
		(0x000005B5, 0x71D12D22),
		(0x00003ECB, 0xE3FCF076),
		(0x0002B2C2, 0xCBDE5512),
		(0x001DAE5E, 0xC28DA7C6),
		(0x01467E12, 0x5C163582),
		(0x0E076AC9, 0xF4F44C96),
		(0x9A5196AD, 0x867F4A72),
		(0xA1817974, 0xC77832E6),
		(0xF0903804, 0x922A2FE2)
	];

	for (i < x11.length - 1) {
		expect(x11(i + 1), mul(x11(i), u16.!(11)));
	}

	var x119 = [
		(0x00000000, 0x00000007),
		(0x00000000, 0x00000341),
		(0x00000000, 0x00018337),
		(0x00000000, 0x00B3FE91),
		(0x00000000, 0x53AB5567),
		(0x00000026, 0xE4A4B2E1),
		(0x00001214, 0x488F2697),
		(0x0008676D, 0xBA8AF031),
		(0x03E81401, 0xB695A6C7),
		(0xD0E14CCB, 0xDF908681),
		(0x18BAB2C4, 0xEC2E85F7),
		(0x7EC91989, 0xC9A045D1),
		(0xEF7ADF0C, 0xB9807427),
		(0x521DAEEA, 0x3AB5FE21),
		(0x2BCC4EE1, 0x4A992157),
		(0x5BF8AAB9, 0xAD2E7F71),
		(0xC0975C4F, 0x809D3D87),
		(0x865BE8F4, 0xC91799C1),
		(0x74B949C9, 0x79F878B7),
		(0x42214CA7, 0xB2801D11),
		(0xBD7AA1F3, 0xF98D82E7)
	];

	for (i < x119.length - 1) {
		expect(x119(i + 1), mul(x119(i), u16.!(119)));
	}

	var x257 = [
		(0x00000000, 0x0000000F),
		(0x00000000, 0x00000F0F),
		(0x00000000, 0x000F1E0F),
		(0x00000000, 0x0F2D2D0F),
		(0x0000000F, 0x3C5A3C0F),
		(0x00000F4B, 0x96964B0F),
		(0x000F5AE2, 0x2CE15A0F),
		(0x0F6A3D0F, 0x0E3B690F),
		(0x79A74C1D, 0x49A4780F),
		(0x20F36966, 0xEE1C870F),
		(0x145CD055, 0x0AA3960F)
	];

	for (i < x257.length - 1) {
		expect(x257(i + 1), mul(x257(i), u16.!(257)));
	}

	var x1023 = [
		(0x00000000, 0x00000069),
		(0x00000000, 0x0001A397),
		(0x00000000, 0x068CB869),
		(0x0000001A, 0x2C54EB97),
		(0x00006897, 0x27597069),
		(0x01A1F406, 0x3E683397),
		(0x862E24F3, 0x62662869),
		(0x3265A896, 0x363B7B97),
		(0x643CB042, 0xB7B2E069),
		(0x8E845A9C, 0x13CEC397),
		(0x82E615B3, 0x273F9869)
	];

	for (i < x1023.length - 1) {
		expect(x1023(i + 1), mul(x1023(i), u16.!(1023)));
	}

	var x33001 = [
		(0x00000000, 0x0000005B),
		(0x00000000, 0x002DD2D3),
		(0x00000017, 0x131E620B),
		(0x000B9E8F, 0x97ACBC03),
		(0xD9DB1C87, 0x6A389EBB),
		(0xD6B0AC5B, 0xFCE5F833),
		(0xBCFADE2C, 0x2968666B),
		(0x6F6A4AE5, 0xE33AB763),
		(0x8D311CD9, 0x2C22691B),
		(0x101FD7BA, 0x5FDF2993),
		(0x98D88890, 0xD6E656CB)
	];

	for (i < x33001.length - 1) {
		expect(x33001(i + 1), mul(x33001(i), u16.!(33001)));
	}

	var x65535 = [
		(0x00000000, 0x0000000D),
		(0x00000000, 0x000CFFF3),
		(0x0000000C, 0xFFE6000D),
		(0x000CFFD9, 0x0026FFF3),
		(0xFFCC004D, 0xFFCC000D),
		(0x0081FF7E, 0x0040FFF3),
		(0xFEFC00C2, 0xFFB2000D),
		(0x01C6FEEF, 0x005AFFF3),
		(0xFD28016B, 0xFF98000D),
		(0x0443FE2C, 0x0074FFF3),
		(0xF9E80248, 0xFF7E000D)
	];

	for (i < x65535.length - 1) {
		expect(x65535(i + 1), mul(x65535(i), u16.!(65535)));
	}

}

def expect(expected: (int, int), result: (int, int)) {
	if (expected != result) {
		var buf = Strings.toBuffer("expected: ");
		buf.putxl(expected);
		buf.puts(", result = ");
		buf.putxl(result);
		TEST.error(buf.toString());
	}
}
