def TEST = UnitTest.new("BigInt", test);

def test() {
	test_mulAdd32();
	test_addPow2();
	test_highestOneBit();
	test_round();

	assert_bi(reverse([0x25, 0xdd85d670, 0xd35ec9be, 0xc0000000]), BigInt.new().addDecDigit(3).mulPow10(30));
}

def assert_bi(expected: Array<u32>, bi: BigInt) {
	if (bi.digits.length < expected.length) {
		TEST.error(Strings.format2("expected %1 digits, got %2", expected.length, bi.digits.length));
	}
	for (i < expected.length) {
		if (bi.digits[i] != expected[i]) {
			TEST.error(Strings.format3("expected digits[%1] == %2, got %3",
				i, expected[i], bi.digits[i]));
		}
	}
	for (j = expected.length; j < bi.digits.length; j++) {
		if (bi.digits[j] != 0) TEST.error(Strings.format1("expected digits[%1] == 0", j));
	}
}

def l2a(v: u64) -> Array<u32> {
	return [u32.!(v), u32.!(v >> 32)];
}

// So that all test cases can be written in big-endian.
def reverse(v: Array<u32>) -> Array<u32> {
	var l = v.length, r = Array<u32>.new(l);
	for (i < l) r[i] = v[l - i - 1];
	return r;
}

def BIrev(v: Array<u32>) -> BigInt {
	var bi = BigInt.new();
	bi.digits = reverse(v);
	return bi;
}

def BI(v: Array<u32>) -> BigInt {
	var bi = BigInt.new();
	bi.digits = Arrays.dup(v);
	return bi;
}

def test_mulAdd32() {
	var bi = BigInt.new();
	assert_bi([1], bi.addDecDigit(1));
	assert_bi([12], bi.addDecDigit(2));
	assert_bi([126], bi.addDecDigit(6));
	assert_bi([126000], bi.mulPow10(3));
	assert_bi([126000000], bi.mulPow10(3));
	assert_bi([756000005], bi.mulAdd32(6, 5));

	bi.zero().addDecDigit(3);
	assert_bi([3000000000u], bi.mulPow10(9));
	assert_bi(l2a(30000000007u), bi.addDecDigit(7));
	assert_bi(l2a(300000000073u), bi.addDecDigit(3));
	assert_bi(l2a(3000000000734u), bi.addDecDigit(4));
	assert_bi(l2a(3000000000734000u), bi.mulPow10(3));
	assert_bi(l2a(30000000007340001u), bi.addDecDigit(1));
	assert_bi(l2a(300000000073400012u), bi.addDecDigit(2));
	assert_bi(l2a(3000000000734000123u), bi.addDecDigit(3));

	assert_bi(reverse([  0x1, 0xA055690F, 0x533787D2]), bi.addDecDigit(4));
	assert_bi(reverse([ 0x10, 0x43561A99, 0x402B4E39]), bi.addDecDigit(5));
	assert_bi(reverse([ 0xA2, 0xA15D09FC, 0x81B10E40]), bi.addDecDigit(6));
	assert_bi(reverse([0x65A, 0x4DA263DD, 0x10EA8E87]), bi.addDecDigit(7));

	assert_bi(reverse([0x2270, 0x35277520, 0xF3605961, 0x0CDD6382, 0x1D700000]), bi.mulPow10(20));
}

def test_addPow2() {
	var bi = BigInt.new();
	bi.digits = reverse([0x10000000u, 0x00000000, 0x00000000, 0x00000000]);

	assert_bi(reverse([0x10000000, 0x00000000, 0x00000000, 0x00000001]), bi.addPow2(0));
	assert_bi(reverse([0x10000000, 0x00000000, 0x00000000, 0x00000002]), bi.addPow2(0));
	assert_bi(reverse([0x10000000, 0x00000000, 0x00000000, 0x00000003]), bi.addPow2(0));
	assert_bi(reverse([0x10000000, 0x00000000, 0x00000000, 0x00000013]), bi.addPow2(4));

	assert_bi(reverse([0x10000000, 0x00000000, 0x00000000, 0x40000013]), bi.addPow2(30));
	assert_bi(reverse([0x10000000, 0x00000000, 0x00000000, 0xC0000013]), bi.addPow2(31));
	assert_bi(reverse([0x10000000, 0x00000000, 0x00000000, 0xE0000013]), bi.addPow2(29));
	assert_bi(reverse([0x10000000, 0x00000000, 0x00000000, 0xF0000013]), bi.addPow2(28));
	assert_bi(reverse([0x10000000, 0x00000000, 0x00000001, 0x10000013]), bi.addPow2(29));

	assert_bi(reverse([0x10000000, 0x00000000, 0x00000002, 0x10000013]), bi.addPow2(32));
	assert_bi(reverse([0x10000000, 0x00000000, 0x00000003, 0x10000013]), bi.addPow2(32));

	assert_bi(reverse([0x10000000, 0x00000010, 0x00000003, 0x10000013]), bi.addPow2(68));
	assert_bi(reverse([0x10000000, 0x00000110, 0x00000003, 0x10000013]), bi.addPow2(72));

	assert_bi(reverse([0x10000000, 0x10000110, 0x00000003, 0x10000013]), bi.addPow2(92));
	assert_bi(reverse([0x10000008, 0x10000110, 0x00000003, 0x10000013]), bi.addPow2(99));
	assert_bi(reverse([0x90000008, 0x10000110, 0x00000003, 0x10000013]), bi.addPow2(127));

	assert_bi(reverse([0x00000001, 0x10000008, 0x10000110, 0x00000003, 0x10000013]), bi.addPow2(127));
	assert_bi(reverse([0x00000001, 0x90000008, 0x10000110, 0x00000003, 0x10000013]), bi.addPow2(127));
	assert_bi(reverse([0x00000002, 0x10000008, 0x10000110, 0x00000003, 0x10000013]), bi.addPow2(127));
}

def test_highestOneBit() {
	TEST.eq(-1, BIrev([0x00000000]).highestOneBit());
	TEST.eq( 0, BIrev([0x00000001]).highestOneBit());
	TEST.eq( 1, BIrev([0x00000002]).highestOneBit());
	TEST.eq(21, BIrev([0x00300010]).highestOneBit());
	TEST.eq(30, BIrev([0x40300010]).highestOneBit());
	TEST.eq(31, BIrev([0x80000000]).highestOneBit());
	TEST.eq(31, BIrev([0x80000001]).highestOneBit());
	TEST.eq(31, BIrev([0xC0000000]).highestOneBit());
	TEST.eq(32, BIrev([0x00000001, 0x40310010]).highestOneBit());
	TEST.eq(33, BIrev([0x00000003, 0x40302010u]).highestOneBit());
	TEST.eq(40, BIrev([0x000001D3, 0x4030A010u]).highestOneBit());
	TEST.eq(56, BIrev([0x01000003, 0x40300010u]).highestOneBit());
	TEST.eq(63, BIrev([0xF0000003, 0x4F300010u]).highestOneBit());
	TEST.eq(64, BIrev([0x00000001, 0xF0000003, 0x4F300010u]).highestOneBit());
	TEST.eq(65, BIrev([0x00000002, 0xF0000003, 0x4F300010u]).highestOneBit());
}

def test_round() {
	{ // no-op case #1
		var input = reverse([0x10000000u, 0x00000000u, 0x00000000u]);
		for (width = 1; width < 100; width++) {
			assert_bi(input, BI(input).round(width));
		}
	}
	{ // no-op case #2
		var input = reverse([0xF0000000u, 0x00000000u, 0x00000000u]);
		for (width = 4; width < 100; width++) {
			assert_bi(input, BI(input).round(width));
		}
	}
	{ // no-op case #3
		var input = reverse([0xF0C23004u, 0xF0000000u, 0x00000000u]);
		for (width = 36; width < 100; width++) {
			assert_bi(input, BI(input).round(width));
		}
	}
	{ // single-word case #1
		for (width = 1; width <= 16; width++) {
			assert_bi([0x80000000], BI([0x80000001]).round(width));
			assert_bi([0x80000000], BI([0x80000010]).round(width));
			assert_bi([0x80000000], BI([0x80000100]).round(width));
			assert_bi([0x80000000], BI([0x80001000]).round(width));

			assert_bi([0x40000000], BI([0x40000001]).round(width));
			assert_bi([0x20000000], BI([0x20000001]).round(width));
			assert_bi([0x10000000], BI([0x10000001]).round(width));
			assert_bi([0x08000000], BI([0x08000001]).round(width));
			assert_bi([0x04000000], BI([0x04000001]).round(width));
			assert_bi([0x02000000], BI([0x02000001]).round(width));
			assert_bi([0x01000000], BI([0x01000001]).round(width));
			assert_bi([0x00100000], BI([0x00100001]).round(width));
			assert_bi([0x00010000], BI([0x00010001]).round(width));
			assert_bi([0x00001000], BI([0x00001000]).round(width));
		}
	}
	{ // round up / down / ties cases
		assert_bi([0x000000E0], BI([0x000000E1]).round(4));
		assert_bi([0x000000E0], BI([0x000000E2]).round(4));
		assert_bi([0x000000E0], BI([0x000000E4]).round(4));
		assert_bi([0x000000E0], BI([0x000000E8]).round(4));
		assert_bi([0x000000F0], BI([0x000000E9]).round(4));

		assert_bi([0x000000F0], BI([0x000000F1]).round(4));
		assert_bi([0x000000F0], BI([0x000000F2]).round(4));
		assert_bi([0x000000F0], BI([0x000000F4]).round(4));
		assert_bi([0x00000100], BI([0x000000F8]).round(4));
		assert_bi([0x00000100], BI([0x000000F9]).round(4));

	}
	{ // round up / down / ties cases
		assert_bi([0xFE000000], BI([0xFE100000]).round(8));
		assert_bi([0xFE000000], BI([0xFE200000]).round(8));
		assert_bi([0xFE000000], BI([0xFE400000]).round(8));
		assert_bi([0xFE000000], BI([0xFE800000]).round(8));
		assert_bi([0xFF000000], BI([0xFE900000]).round(8));
		assert_bi([0xFF000000], BI([0xFE800001]).round(8));

		assert_bi([0xFFF00000], BI([0xFFF10000]).round(12));
		assert_bi([0xFFF00000], BI([0xFFF20000]).round(12));
		assert_bi([0xFFF00000], BI([0xFFF40000]).round(12));
		assert_bi(reverse([0x00000001, 0x00000000]), BI([0xFFF80000]).round(12));
		assert_bi(reverse([0x00000001, 0x00000000]), BI([0xFFF90000]).round(12));
	}
	{ // round up / down / ties cases (cross word)
		assert_bi(reverse([0x0000000F, 0xEFE00000]), BIrev([0x0000000F, 0xEFE10000]).round(16));
		assert_bi(reverse([0x0000000F, 0xEFE00000]), BIrev([0x0000000F, 0xEFE20000]).round(16));
		assert_bi(reverse([0x0000000F, 0xEFE00000]), BIrev([0x0000000F, 0xEFE40000]).round(16));
		assert_bi(reverse([0x0000000F, 0xEFE00000]), BIrev([0x0000000F, 0xEFE80000]).round(16));
		assert_bi(reverse([0x0000000F, 0xEFF00000]), BIrev([0x0000000F, 0xEFE90000]).round(16));

		assert_bi(reverse([0x000000FF, 0xEFF00000]), BIrev([0x000000FF, 0xEFF10000]).round(20));
		assert_bi(reverse([0x000000FF, 0xEFF00000]), BIrev([0x000000FF, 0xEFF20000]).round(20));
		assert_bi(reverse([0x000000FF, 0xEFF00000]), BIrev([0x000000FF, 0xEFF40000]).round(20));
		assert_bi(reverse([0x000000FF, 0xF0000000]), BIrev([0x000000FF, 0xEFF80000]).round(20));
		assert_bi(reverse([0x000000FF, 0xF0000000]), BIrev([0x000000FF, 0xEFF90000]).round(20));
		assert_bi(reverse([0x000000FF, 0xF0000000]), BIrev([0x000000FF, 0xEFF80001]).round(20));
	}
	{ // round up / down / ties cases (cross word)
		assert_bi(reverse([0x0000000F, 0xEFE00000]), BIrev([0x0000000F, 0xEFE10000]).round(16));
		assert_bi(reverse([0x0000000F, 0xEFE00000]), BIrev([0x0000000F, 0xEFE20000]).round(16));
		assert_bi(reverse([0x0000000F, 0xEFE00000]), BIrev([0x0000000F, 0xEFE40000]).round(16));
		assert_bi(reverse([0x0000000F, 0xEFE00000]), BIrev([0x0000000F, 0xEFE80000]).round(16));
		assert_bi(reverse([0x0000000F, 0xEFF00000]), BIrev([0x0000000F, 0xEFE90000]).round(16));

		assert_bi(reverse([0x000000F1, 0xEFF00000]), BIrev([0x000000F1, 0xEFF10000]).round(20));
		assert_bi(reverse([0x000000F2, 0xEFF00000]), BIrev([0x000000F2, 0xEFF20000]).round(20));
		assert_bi(reverse([0x000000F3, 0xEFF00000]), BIrev([0x000000F3, 0xEFF40000]).round(20));
		assert_bi(reverse([0x000000F4, 0xF0000000]), BIrev([0x000000F4, 0xEFF80000]).round(20));
		assert_bi(reverse([0x000000F5, 0xF0000000]), BIrev([0x000000F5, 0xEFF90000]).round(20));
		assert_bi(reverse([0x000000F6, 0xF0000000]), BIrev([0x000000F6, 0xEFF80001]).round(20));
	}
	{ // round up / down / ties cases (cross word)
		assert_bi(reverse([0x8100000F, 0xEFE00000, 0x00000000]), BIrev([0x8100000F, 0xEFE10000, 0x00300000]).round(44));
		assert_bi(reverse([0x8200000F, 0xEFE00000, 0x00000000]), BIrev([0x8200000F, 0xEFE20000, 0x00030000]).round(44));
		assert_bi(reverse([0x8300000F, 0xEFE00000, 0x00000000]), BIrev([0x8300000F, 0xEFE40000, 0x00003000]).round(44));
		assert_bi(reverse([0x8400000F, 0xEFE00000, 0x00000000]), BIrev([0x8400000F, 0xEFE80000, 0x00000000]).round(44));
		assert_bi(reverse([0x8500000F, 0xEFF00000, 0x00000000]), BIrev([0x8500000F, 0xEFE80000, 0x00000001]).round(44));
		assert_bi(reverse([0x8600000F, 0xEFF00000, 0x00000000]), BIrev([0x8600000F, 0xEFE90000, 0x00000030]).round(44));
		assert_bi(reverse([0x8700000F, 0xEFF00000, 0x00000000]), BIrev([0x8700000F, 0xEFE90000, 0x00000003]).round(44));
		assert_bi(reverse([0x8800000F, 0xEFF00000, 0x00000000]), BIrev([0x8800000F, 0xEFE90000, 0x00000000]).round(44));

		assert_bi(reverse([0x090000FF, 0xFFF00000, 0x00000000]), BIrev([0x090000FF, 0xFFF10000, 0x00000000]).round(40));
		assert_bi(reverse([0x090000FF, 0xFFF00000, 0x00000000]), BIrev([0x090000FF, 0xFFF20000, 0x00000000]).round(40));
		assert_bi(reverse([0x090000FF, 0xFFF00000, 0x00000000]), BIrev([0x090000FF, 0xFFF40000, 0x00000000]).round(40));
		assert_bi(reverse([0x09000100, 0x00000000, 0x00000000]), BIrev([0x090000FF, 0xFFF80000, 0x00000000]).round(40));
		assert_bi(reverse([0x09000100, 0x00000000, 0x00000000]), BIrev([0x090000FF, 0xFFF80000, 0x00000001]).round(40));
		assert_bi(reverse([0x09000100, 0x00000000, 0x00000000]), BIrev([0x090000FF, 0xFFF90000, 0x00000000]).round(40));
		assert_bi(reverse([0x09000100, 0x00000000, 0x00000000]), BIrev([0x090000FF, 0xFFF80001, 0x00000000]).round(40));
	}
	{ // round up / down / ties cases (cross word)
		assert_bi(reverse([0x0100000E, 0x00000000]), BIrev([0x0100000E, 0x10000000]).round(25));
		assert_bi(reverse([0x0100000E, 0x00000000]), BIrev([0x0100000E, 0x20000000]).round(25));
		assert_bi(reverse([0x0100000E, 0x00000000]), BIrev([0x0100000E, 0x40000000]).round(25));
		assert_bi(reverse([0x0100000E, 0x00000000]), BIrev([0x0100000E, 0x80000000]).round(25));
		assert_bi(reverse([0x0100000F, 0x00000000]), BIrev([0x0100000E, 0x80000002]).round(25));
		assert_bi(reverse([0x0100000F, 0x00000000]), BIrev([0x0100000E, 0x90000000]).round(25));

		assert_bi(reverse([0x0100000E, 0, 0, 0x00000000]), BIrev([0x0100000E, 0, 0, 0x10000000]).round(89));
		assert_bi(reverse([0x0100000E, 0, 0, 0x00000000]), BIrev([0x0100000E, 0, 0, 0x20000000]).round(89));
		assert_bi(reverse([0x0100000E, 0, 0, 0x00000000]), BIrev([0x0100000E, 0, 0, 0x40000000]).round(89));
		assert_bi(reverse([0x0100000E, 0, 0, 0x00000000]), BIrev([0x0100000E, 0, 0, 0x80000000]).round(89));
		assert_bi(reverse([0x0100000E, 0, 1, 0x00000000]), BIrev([0x0100000E, 0, 0, 0x80000002]).round(89));
		assert_bi(reverse([0x0100000E, 0, 1, 0x00000000]), BIrev([0x0100000E, 0, 0, 0x90000000]).round(89));

		assert_bi(reverse([0x0100000E, 0, 0, 0x00000000]), BIrev([0x0100000E, 0, 0, 0x10000000]).round(89));
		assert_bi(reverse([0x0100000E, 0, 0, 0x00000000]), BIrev([0x0100000E, 0, 0, 0x20000000]).round(89));
		assert_bi(reverse([0x0100000E, 0, 0, 0x00000000]), BIrev([0x0100000E, 0, 0, 0x40000000]).round(89));
		assert_bi(reverse([0x0100000E, 0, 2, 0x00000000]), BIrev([0x0100000E, 0, 1, 0x80000000]).round(89));
		assert_bi(reverse([0x0100000E, 0, 2, 0x00000000]), BIrev([0x0100000E, 0, 1, 0x80000002]).round(89));
		assert_bi(reverse([0x0100000E, 0, 2, 0x00000000]), BIrev([0x0100000E, 0, 1, 0x90000000]).round(89));

	}
}
