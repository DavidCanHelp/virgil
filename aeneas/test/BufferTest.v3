var TEST = UnitTest.new("Buffer", test);
var buf: Buffer;
var data: Array<byte>;

def test() {
	testInts(1);
	testInts(2);
	testInts(3);
	testInts(4);
	testInts(5);
}

def testInts(size: int) {
	buf = Buffer.new(size, flush);
	var u = buf.getEncoder();
	x(u.i1(0),    "00");
	x(u.i1(0xFF), "FF");
	x(u.i1(0xAA), "AA");
	x(u.i1(0x09), "09");
	x(u.i1(0x13), "13");

	x(u.i2le(0x1122), "2211");
	x(u.i2be(0x1122), "1122");

	x(u.i4(0x1322), "22130000");
	x(u.i4be(0x1132), "00001132");

	x(u.i4le(0x11223344), "44332211");
	x(u.i4be(0x11223344), "11223344");

	x(u.iN("\x00\x01\x02\x03\x04\x05\xff\xCC"), "000102030405FFCC");
}

def flush(a: Array<byte>, offset: int, length: int) {
	data = Arrays.range(a, offset, offset + length);
}

def x(v: void, expect: string) {
	data = null;
	buf.flush();
	if (data == null) TEST.error("no output");
	if (data.length != expect.length / 2) error(data.length, expect);
	for (i = 0; i < data.length; i = i + 1) {
		var d = data(i);
		var hv = Char.hexValue(expect(i * 2));
		var lv = Char.hexValue(expect(i * 2 + 1));
		if ((d & 0xf) != lv) error(i, expect);
		if ((d >> 4) != hv) error(i, expect);
	}
}

def error(pos: int, expect: string) {
	var dl = data.length, el = expect.length;
	var b = StringBuffer.new().puts("x86 asm produced ");
	var j = 0;
	while (j < pos && j < dl) {
		b.appendHexByte(data(j)); // append correct data
		j = j + 1;
	}
	b.putc('[');
	while (j < dl) {
		b.appendHexByte(data(j)); // append error data
		j = j + 1;
	}
	b.puts("] != ");
		
	j = 0;
	while (j < pos*2 && j < el) {
		b.putc(expect(j));     // append correct data
		b.putc(expect(j + 1)); // append correct data
		j = j + 2;
	}
	b.putc('[');
	while (j < el) {
		b.putc(expect(j));     // append correct data
		b.putc(expect(j + 1)); // append correct data
		j = j + 2;
	}
	b.putc(']');

	TEST.error(b.toString());
}
