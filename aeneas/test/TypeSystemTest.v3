def TEST = UnitTest.new("TypeSystem", test);

def error = System.error("TestError", _);

// Some example types
def typeCache = TypeCache.new();
def BYTE = Byte.TYPE;
def I32 = Int.TYPE;
def I64 = Long.TYPE;
def BOOL = Bool.TYPE;
def NULL = Null.TYPE;
def VOID = Void.TYPE;
def STRING = V3.stringType;
def T_I32_I32 = t2(I32, I32);
def T_I64_I64 = t2(I64, I64);
def CLASS_A = cl("A", null);
def CLASS_B = cl("B", CLASS_A);
def CLASS_C = cl("C", CLASS_A);
def CLASS_X = cl("X", null);
def VARIANT_E = initVariantE();
var CASE_F: ClassType;
var CASE_G: ClassType;
def PARAM_P = tp("P");
def PARAM_Q = tp("Q");
def CLASS_Y_P = cl1("Y", PARAM_P, null);
def CLASS_Y_Q = ClassType.!(sub1(CLASS_Y_P, PARAM_Q));
def CLASS_Z_Q = cl1("Z", PARAM_Q, CLASS_Y_Q);
def CLASS_Z_P = ClassType.!(sub1(CLASS_Z_Q, PARAM_P));
def VAR_V = tv("V", PARAM_P);
def VAR_W = tv("W", PARAM_Q);
def prim = [BYTE, I32, I64, BOOL];
def ARRAY_I32 = V3Array.newType(I32);
def ARRAY_A = V3Array.newType(CLASS_A);
def some = [BYTE, I32, I64, BOOL, NULL, VOID, STRING, ARRAY_I32, ARRAY_A];
def classes = [CLASS_A, CLASS_B, CLASS_C, CLASS_X, CLASS_Y_P, CLASS_Z_Q];
// TODO: some example variant, enum types
// TODO: some example function types

def t2(a: Type, b: Type) -> Type {
	return Tuple.newType(Lists.cons2(a, b));
}
def t3(a: Type, b: Type, c: Type) -> Type {
	return Tuple.newType(Lists.cons3(a, b, c));
}
def nn(f: (Type, Type) -> Type, a: Type, b: Type) -> Type {
	return if(a != null && b != null, f(a, b));
}
def t2n = nn(t2, _, _);
def f1n = nn(f1, _, _); 
def f1(a: Type, r: Type) -> Type {
	return Function.newType(a, r);
}
def f2(a: Type, b: Type, r: Type) -> Type {
	return Function.newType(t2(a, b), r);
}
def cl(name: string, s: ClassType) -> ClassType {
	var tok = Token.new("<test>", name, 0, 0);
	var superclass = if(s != null, TypeUtil.typeRefOf(s));
	var decl = VstClass.new(tok, null, null, superclass, null, null);
	var typecon = V3Class_TypeCon.new(decl, typeCache);
	return ClassType.!(typecon.create0());
}
def cl1(name: string, typeParam: TypeParam, s: ClassType) -> ClassType {
	var tok = Token.new("<test>", name, 0, 0);
	var superclass = if(s != null, TypeUtil.typeRefOf(s));
	var typeParams = List.new(typeParam, null);
	var typeEnv = TypeEnv.new(null, typeParams, null);
	var decl = VstClass.new(tok, typeParams, null, superclass, null, null);
	decl.typeEnv = typeEnv;
	var typecon = V3Class_TypeCon.new(decl, typeCache);
	var result = ClassType.!(typecon.create1(typeParam));
	TEST.eq(s, result.getSuperType());
	return result;
}
def sub1(t: Type, typeArg: Type) -> Type {
	TEST.eq(1, t.typeCon.arity);
	return t.typeCon.create1(typeArg);
}
def tv(name: string, tp: TypeParam) -> TypeVar {
	var tok = Token.new("<test>", name, 0, 0);
	var typecon = TypeVar_TypeCon.new(tok, tp, typeCache);
	return TypeVar.!(typecon.create0());
}
def tp(name: string) -> TypeParam {
	var tok = Token.new("<test>", name, 0, 0);
	return TypeUtil.newTypeParam(tok, typeCache);
}

def renderer(t: Type) -> StringBuffer -> StringBuffer {
	return if(t == null, renderNull, t.render);
}

def renderNull(buf: StringBuffer) -> StringBuffer {
	return buf.puts("{null}");
}

def initVariantE() -> ClassType {
	var idE = VstIdent<TypeParam>.new(Token.new("<test>", "E", 0, 0), 0, null);
	var desugaring = VariantDesugaring.new(idE);

	var declF = desugaring.synthesizeVariantCaseMember(
		VstIdent.new(Token.new("<test>", "F", 0, 0), 0, null), null, null).decl;
	var declG = desugaring.synthesizeVariantCaseMember(
		VstIdent.new(Token.new("<test>", "G", 0, 0), 0, null), null, null).decl;

	var declE = desugaring.synthesizeTopLevelClass(null);
	var typeconE = V3Class_TypeCon.new(declE, typeCache);
	var variantE = ClassType.!(typeconE.create0());

	var typeconF = V3Class_TypeCon.new(declF, typeCache);
	CASE_F = ClassType.!(typeconF.create0());
	CASE_F.superType = variantE;  // TODO: internals exposed

	var typeconG = V3Class_TypeCon.new(declG, typeCache);
	CASE_G = ClassType.!(typeconG.create0());
	CASE_G.superType = variantE;  // TODO: internals exposed

	return variantE;
}

// The main testing routine
def test() {
	testImplicit();
	testSubtype();
	testUpper();
	testWiden();
	testCommonSuperClass();
	testUnify();
	testUnifyWiden();
	testNewTypeQuery();
	testNewTypeCast();
	testMaybeEqual();
}

def assertRelation(f: (Type, Type) -> bool, op: string, x: bool, a: Type, b: Type) {
	if (f(a, b) != x) {
		var format = if(x,
			"type \"%1\" should be %3 to \"%2\"",
			"type \"%1\" should not be %3 to \"%2\"");
		error(Strings.format3(format, a.render, b.render, op));
	}
}
def assertImplicit = assertRelation(TypeSystem.isImplicitlyConvertible, "implicitly convertible", _, _, _);
def assertImplicitTuple(x: bool, a: Type, b: Type) {
	assertImplicit(x, a, b);
	assertImplicit(x, t2(a, VOID), t2(b, VOID));
	assertImplicit(x, t2(VOID, a), t2(VOID, b));
	assertImplicit(x, t2(a, a), t2(b, b));
	assertImplicit(x, t2(a, I32), t2(b, I64));
}
def testImplicit() {
	def Y = assertImplicit(true, _, _);
	def N = assertImplicit(false, _, _);

	for (t in some) Y(t, t);

	Y(NULL, STRING);
	Y(NULL, CLASS_A);
	Y(NULL, CLASS_B);
	Y(CLASS_B, CLASS_A);
	Y(CLASS_C, CLASS_A);
	N(CLASS_A, CLASS_B);
	N(CLASS_X, CLASS_A);
	N(CLASS_A, CLASS_X);

	Y(CASE_F, VARIANT_E);
	Y(CASE_G, VARIANT_E);
	N(VARIANT_E, CASE_F);

	// Test implicit conversion between integer types
	for (i = 1; i < 64; i++) {
		var u1 = Int.getType(false, i), u2 = Int.getType(false, i+1);
		var s1 = Int.getType(true, i), s2 = Int.getType(true, i+1);
		Y(u1, u2);
		Y(s1, s2);
		Y(u1, s2);
		N(u2, s2);
		N(s2, u2);
		N(s1, u1);
		N(u2, u1);
		N(s2, s1);
	}
	// test implicit conversion between tuple types
	assertImplicitTuple(true, I32, I64);
	assertImplicitTuple(false, I64, I32);
	for (t in some) assertImplicitTuple(true, t, t);

	// test implicit conversion between function types
	def fA = f1(VOID, CLASS_A);
	def fB = f1(VOID, CLASS_B);
	def fX = f1(VOID, CLASS_X);
	Y(fB, fA);
	N(fA, fB);
	N(fX, fA);
	N(fA, fX);

	// Test type parameters and type variables
	var types = [PARAM_P, PARAM_Q, VAR_V, VAR_W];
	for (t in types) for (u in types) {
		assertImplicit(t == u, t, u);
	}
	// parameterized class types
	Y(CLASS_Z_P, CLASS_Y_P);
	Y(CLASS_Z_Q, CLASS_Y_Q);
	N(CLASS_Y_P, CLASS_Z_P);
	N(CLASS_Y_Q, CLASS_Z_P);
	N(CLASS_Y_P, CLASS_Z_Q);
	N(CLASS_Y_Q, CLASS_Z_Q);
	N(CLASS_Z_Q, CLASS_Y_P);
	N(CLASS_Z_P, CLASS_Y_Q);
	N(CLASS_Z_Q, CLASS_Z_P);
	N(CLASS_Z_P, CLASS_Z_Q);
	N(CLASS_Y_Q, CLASS_Y_P);
	N(CLASS_Y_P, CLASS_Y_Q);
}
def testSubtype() {
	// TODO
}

def assertUpper(x: Type, a: Type, b: Type) {
	var r1 = TypeSystem.upper(a, b);
	if (r1 != x) {
		var buf = StringBuffer.new();
		buf.puts("expected upper(")
			.put1(renderer(a))
			.puts(", ")
			.put1(renderer(b))
			.puts(") = ")
			.put1(renderer(x))
			.puts(", got ")
			.put1(renderer(r1));
		error(buf.toString());
	}
	var r2 = TypeSystem.upper(b, a);
	if (r1 != r2) {
		var buf = StringBuffer.new();
		buf.format2("upper(%1, %2) != upper(%2, %1), got ", renderer(a), renderer(b))
			.format2("%1 and %2", renderer(r1), renderer(r2));
		error(buf.toString());
	}
}
def assertUpperTuple(x: Type, a: Type, b: Type) {
	assertUpper(t2n(a, a), t2(a, a), t2(a, a));
	assertUpper(t2n(x, x), t2(a, a), t2(b, b));
	assertUpper(t2n(a, x), t2(a, a), t2(a, b));
	assertUpper(t2n(x, a), t2(a, a), t2(b, a));
	assertUpper(t2n(x, VOID), t2(a, VOID), t2(b, VOID));
	assertUpper(t2n(VOID, x), t2(VOID, a), t2(VOID, b));
}
def assertUpperFunction(x: Type, a: Type, b: Type) {
	assertUpper(f1n(a, a), f1(a, a), f1(a, a));
	assertUpper(f1n(x, x), f1(a, a), f1(b, b));
	assertUpper(f1n(a, x), f1(a, a), f1(a, b));
	assertUpper(f1n(x, a), f1(a, a), f1(b, a));
	assertUpper(f1n(x, VOID), f1(a, VOID), f1(b, VOID));
	assertUpper(f1n(VOID, x), f1(VOID, a), f1(VOID, b));
}
def testUpper() {
	def N = assertUpper(null, _, _);
	for (x in some) assertUpper(x, x, x);

	N(I32, I64);
	N(CLASS_X, CLASS_A);

	assertUpper(VOID, VOID, VOID);
	assertUpper(CLASS_A, CLASS_A, CLASS_B);
	assertUpper(CLASS_A, CLASS_A, CLASS_C);
	assertUpper(CLASS_A, CLASS_B, CLASS_C);

	assertUpper(VARIANT_E, VARIANT_E, CASE_G);
	assertUpper(VARIANT_E, CASE_F, CASE_G);

	for (c in classes) assertUpper(c, NULL, c);

	N(I32, BOOL);
	N(I32, CLASS_X);
	N(CLASS_X, PARAM_P);
	N(PARAM_P, PARAM_Q);
	N(CLASS_X, VAR_V);
	N(PARAM_P, VAR_V);

	assertUpperTuple(VOID, VOID, VOID);
	assertUpperTuple(null, I32, I64);
	assertUpperTuple(CLASS_A, CLASS_A, CLASS_B);
	assertUpperTuple(CLASS_A, CLASS_A, CLASS_C);
	assertUpperTuple(CLASS_A, CLASS_B, CLASS_C);
	assertUpperTuple(null, CLASS_X, CLASS_A);

	assertUpperFunction(VOID, VOID, VOID);
	assertUpperFunction(null, I32, I64);
	assertUpperFunction(CLASS_A, CLASS_A, CLASS_B);
	assertUpperFunction(CLASS_A, CLASS_A, CLASS_C);
	assertUpperFunction(CLASS_A, CLASS_B, CLASS_C);
	assertUpperFunction(null, CLASS_X, CLASS_A);

	// parameterized class types
	assertUpper(CLASS_Y_P, CLASS_Z_P, CLASS_Y_P);
	assertUpper(CLASS_Y_Q, CLASS_Z_Q, CLASS_Y_Q);
	N(CLASS_Y_Q, CLASS_Z_P);
	N(CLASS_Y_P, CLASS_Z_Q);
	N(CLASS_Z_Q, CLASS_Y_P);
	N(CLASS_Z_P, CLASS_Y_Q);
	N(CLASS_Z_Q, CLASS_Z_P);
	N(CLASS_Z_P, CLASS_Z_Q);
	N(CLASS_Y_Q, CLASS_Y_P);
	N(CLASS_Y_P, CLASS_Y_Q);
}
def testWiden() {
	// TODO
}
def testCommonSuperClass() {
	// TODO
}
def testUnify() {
	// TODO
}
def testUnifyWiden() {
	// TODO
}
def assertTypeQuery(castOp: byte, a: Type, b: Type) {
	var t = TypeSystem.newTypeQuery(a, b);
	if (t.approx != castOp) {
		var buf = StringBuffer.new();
		buf.format2("expected newTypeQuery(%1, %2) = ", a.render, b.render)
			.format2("%1, got %2", TypeCast.new(castOp, null).name(), t.name());
		error(buf.toString());
	}
}
def testNewTypeQuery() {
	def Y = assertTypeQuery(CastOp.TRUE, _, _);
	def N = assertTypeQuery(CastOp.FALSE, _, _);
	def M = assertTypeQuery(CastOp.UNKNOWN_QUERY, _, _);
	for (p in prim) {
		Y(p, p);
		for (q in some) {
			if (p == q) continue;
			N(p, q);
			N(q, p);
		}
	}
	for (c in classes) {
		N(c, NULL);
		N(NULL, c);
		M(PARAM_P, c);
		M(c, PARAM_Q);
		assertTypeQuery(CastOp.TRUE_X_NULL, c, c);
	}
	var A = CLASS_A, B = CLASS_B, C = CLASS_C, X = CLASS_X;
	assertTypeQuery(CastOp.CLASS_QUERY, A, B);
	assertTypeQuery(CastOp.TRUE_X_NULL, B, A);
	assertTypeQuery(CastOp.FALSE, B, C);
	assertTypeQuery(CastOp.FALSE, A, X);
	assertTypeQuery(CastOp.FALSE, X, A);

	var E = VARIANT_E, F = CASE_F, G = CASE_G;
	assertTypeQuery(CastOp.CLASS_QUERY, E, F);
	assertTypeQuery(CastOp.TRUE, F, E);
	assertTypeQuery(CastOp.FALSE, F, G);
	assertTypeQuery(CastOp.FALSE, A, F);
	assertTypeQuery(CastOp.FALSE, E, A);

	N(t2(A, A), t2(A, X));
	N(t2(A, A), t2(X, A));
	N(t2(A, X), t2(A, A));
	N(t2(X, A), t2(A, A));

	N(A, t2(A, A));
	N(t2(A, A), A);
	N(t3(A, A, A), t2(A, A));
	N(t2(A, A), t3(A, A, A));

	assertTypeQuery(CastOp.TUPLE_QUERY, t2(A, A), t2(A, B));
	assertTypeQuery(CastOp.TUPLE_QUERY, t2(A, A), t2(B, B));
	assertTypeQuery(CastOp.TUPLE_QUERY, t2(A, B), t2(B, B));

	def aOf = V3Array.newType;
	def AA = aOf(A), AB = aOf(B), AX = aOf(X);

	assertTypeQuery(CastOp.TRUE_X_NULL, AA, AA);
	N(AA, AB);
	N(AB, AA);
	N(AX, AA);
	N(NULL, AA);
	N(AA, NULL);

	// parameterized class types
	var Y_P = CLASS_Y_P, Y_Q = CLASS_Y_Q, Z_P = CLASS_Z_P, Z_Q = CLASS_Z_Q;
	assertTypeQuery(CastOp.CLASS_QUERY, Y_P, Z_P);
	assertTypeQuery(CastOp.UNKNOWN_QUERY, Y_P, Z_Q);
	assertTypeQuery(CastOp.TRUE_X_NULL, Z_P, Y_P);
	assertTypeQuery(CastOp.UNKNOWN_QUERY, Z_Q, Y_P);
	assertTypeQuery(CastOp.UNKNOWN_QUERY, Y_P, Y_Q);
	assertTypeQuery(CastOp.UNKNOWN_QUERY, Y_Q, Y_P);
	assertTypeQuery(CastOp.UNKNOWN_QUERY, Z_P, Z_Q);
	assertTypeQuery(CastOp.UNKNOWN_QUERY, Z_Q, Z_P);
	assertTypeQuery(CastOp.FALSE, Y_P, C);
	assertTypeQuery(CastOp.FALSE, Y_Q, X);
	assertTypeQuery(CastOp.FALSE, X, Y_P);

}
def assertTypeCast(castOp: byte, a: Type, b: Type) {
	var t = TypeSystem.newTypeCast(a, b);
	if (t.approx != castOp) {
		var buf = StringBuffer.new();
		buf.format2("expected newTypeCast(%1, %2) = ", a.render, b.render)
			.format2("%1, got %2", TypeCast.new(castOp, null).name(), t.name());
		error(buf.toString());
	}
}
def testNewTypeCast() {
	def Y = assertTypeCast(CastOp.TRUE, _, _);
	def N = assertTypeCast(CastOp.FALSE, _, _);
	def M = assertTypeCast(CastOp.UNKNOWN_CAST, _, _);
	def T = assertTypeCast(CastOp.TUPLE_CAST, _, _);
	for (p in prim) {
		Y(p, p);
		assertTypeCast(CastOp.VALUE, p, Void.TYPE);
	}
	var ints = [I32, I64];
	for (t in ints) {
		for (u in ints) {
			if (t == u) Y(t, u);
			else assertTypeCast(CastOp.INT_CONVERSION, t, u);
		}
	}
	for (c in classes) {
		Y(c, c);
		N(c, NULL);
		Y(NULL, c);
		M(PARAM_P, c);
		M(c, PARAM_Q);
		assertTypeCast(CastOp.VALUE, c, Void.TYPE);
	}
	var A = CLASS_A, B = CLASS_B, C = CLASS_C, X = CLASS_X;
	assertTypeCast(CastOp.CLASS_CAST, A, B);
	assertTypeCast(CastOp.TRUE, B, A);
	assertTypeCast(CastOp.FALSE_X_NULL, B, C);
	assertTypeCast(CastOp.FALSE_X_NULL, A, X);
	assertTypeCast(CastOp.FALSE_X_NULL, X, A);

	var E = VARIANT_E, F = CASE_F, G = CASE_G;
	assertTypeCast(CastOp.CLASS_CAST, E, F);
	assertTypeCast(CastOp.TRUE, F, E);
	assertTypeCast(CastOp.FALSE, F, G);
	assertTypeCast(CastOp.FALSE, A, F);
	assertTypeCast(CastOp.FALSE, E, A);

	T(t2(A, A), t2(A, X));
	T(t2(A, A), t2(X, A));
	T(t2(A, X), t2(A, A));
	T(t2(X, A), t2(A, A));

	N(A, t2(A, A));
	N(t2(A, A), A);
	N(t3(A, A, A), t2(A, A));
	N(t2(A, A), t3(A, A, A));

	assertTypeCast(CastOp.TUPLE_CAST, t2(A, A), t2(A, B));
	assertTypeCast(CastOp.TUPLE_CAST, t2(A, A), t2(B, B));
	assertTypeCast(CastOp.TUPLE_CAST, t2(A, B), t2(B, B));

	def aOf = V3Array.newType;
	def AA = aOf(A), AB = aOf(B), AX = aOf(X);

	Y(AA, AA);
	Y(NULL, AA);
	N(A, AB);
	N(B, AA);
	N(X, AA);
	N(A, NULL);

	// parameterized class types
	var Y_P = CLASS_Y_P, Y_Q = CLASS_Y_Q, Z_P = CLASS_Z_P, Z_Q = CLASS_Z_Q;
	assertTypeCast(CastOp.CLASS_CAST, Y_P, Z_P);
	assertTypeCast(CastOp.UNKNOWN_CAST, Y_P, Z_Q);
	assertTypeCast(CastOp.TRUE, Z_P, Y_P);
	assertTypeCast(CastOp.UNKNOWN_CAST, Z_Q, Y_P);
	assertTypeCast(CastOp.UNKNOWN_CAST, Y_P, Y_Q);
	assertTypeCast(CastOp.UNKNOWN_CAST, Y_Q, Y_P);
	assertTypeCast(CastOp.UNKNOWN_CAST, Z_P, Z_Q);
	assertTypeCast(CastOp.UNKNOWN_CAST, Z_Q, Z_P);
	assertTypeCast(CastOp.FALSE_X_NULL, Y_P, C);
	assertTypeCast(CastOp.FALSE_X_NULL, Y_Q, X);
	assertTypeCast(CastOp.FALSE_X_NULL, X, Y_P);
}
def assertMaybeEqual = assertRelation(TypeSystem.maybeEqual, "maybe equal", _, _, _);
def testMaybeEqual() {
	def Y = assertMaybeEqual(true, _, _);
	def N = assertMaybeEqual(false, _, _);
	for (p in some) {
		Y(p, p);
		Y(PARAM_P, p);
		Y(VAR_V, p);
		for (q in some) {
			if (p == q) continue;
			N(p, q);
			N(q, p);
		}
	}
	for (c in classes) {
		Y(c, c);
		Y(PARAM_P, c);
		Y(c, PARAM_Q);
		Y(VAR_V, c);
		Y(c, VAR_W);
	}
	var A = CLASS_A, fAV = f1(A, VOID), fVA = f1(VOID, A);
	Y(fAV, fAV);
	N(fVA, fAV);
	var B = CLASS_B, fBV = f1(B, VOID), fVB = f1(VOID, B);
	N(fAV, fBV);
	N(fVA, fBV);

	for (t in some) {
		for (u in some) {
			assertMaybeEqual(t == u, t2(t, u), t2(t, t));
			Y(t2(t, u), t2(t, VAR_V));
			Y(t2(u, t), t2(VAR_V, t));
		}
	}

	// parameterized class types
	var ys = [CLASS_Y_P, CLASS_Y_Q], zs = [CLASS_Z_P, CLASS_Z_Q];
	for (y1 in ys) {
		for (y2 in ys) Y(y1, y2);
		N(CLASS_Z_P, y1);
		N(y1, CLASS_Z_P);
	}
	for (z1 in zs) {
		for (z2 in zs) Y(z1, z2);
		N(CLASS_Y_P, z1);
		N(z1, CLASS_Y_P);
	}
}
