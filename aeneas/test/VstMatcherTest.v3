def TEST = UnitTest.new("VstMatcher", runMatchTest);

def runMatchTest() {
	matchQuestion();
	matchString();
	matchStar();
	matchPrefix();
	matchSuffix();
	matchPrefixSuffix();
	matchMixed();
}

def empty = "";
def lower = "abcdefghijklmnopqrstuvwxyz";
def upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
def digits = "0123456789";
def chars = "`~!@#$%^&()-_=+[{]}\\|;:\'\",<.>/";

def matchQuestion() {
	var strings = [
		empty, "THEre", "was", lower, upper, digits, chars
	];
	for (x in strings) {
		for (i < x.length) {
			var pat = Arrays.dup(x);
			pat[i] = '?';
			expectMatch(pat, x);
		}
	}
}

def matchString() {
	var strings = [
		empty, "ab", "abc", lower, upper, digits, chars
	];
	for (x in strings) {
		for (y in strings) {
			var check = if(Arrays.equal(x, y), expectMatch, expectFail);
			check(x, y);
			check(y, x);
		}
	}
}

def matchStar() {
	for (pat in ["*", "**", "***"]) {
		var check = expectMatch(pat, _);
		check("");
		check("*");
		check("?");
		check("a");
		check("ab");
		check("abcdef");
		check("abcdef*");
		check("*jakdji&^!*@#$&^");
		check("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
		check("abcdefghijklmnopqrstuvwxyz");
		check("0123456789");
		check("`~!@#$%^&*()-_=+[{]}\\|;:\'\",<.>/?");
	}
}

def matchPrefix() {
	var pat = "Pre*", Y = expectMatch(pat, _), N = expectFail(pat, _);
	Y("Pre");
	Y("Pref");
	Y("Prefi");
	Y("Prefix");
	Y("Pre.");
	Y("Pre?");
	Y("Pre*");

	N("Pr");
	N("Prf");
	N("Prfi");
	N("Prfix");
	N("Pe");
	N("Pe?");
	N("re");

	N("xPre");
	N("xPref");
	N("xPrefi");
	N("xPrefix");
	N("xPre.");
	N("xPre?");
	N("xPre*");
}

def matchSuffix() {
	var pat = "*Suffix", Y = expectMatch(pat, _), N = expectFail(pat, _);
	Y("Suffix");
	Y("ASuffix");
	Y(".Suffix");
	Y("NoSuffix");
	Y("TheSuffix");
	Y("xxxSuffix");

	N("uffix");
	N("ASffix");
	N(".Sufix");
	N("NoSufix");
	N("TheSuffx");
	N("xxxSuffi");
}

def matchPrefixSuffix() {
	var pat = "Pre*Suffix", Y = expectMatch(pat, _), N = expectFail(pat, _);
	Y("PreSuffix");
	Y("Pre.Suffix");
	Y("PreASuffix");
	Y("PreBSuffix");
	Y("Pre*&#$Suffix");

	N("PrSuffix");
	N("PeASuffix");
	N("PreSffix");
	N("PreNoSufix");
	N("Preuffix");
	N("Prefix");

	N("PreSuffi");
	N("ASuffix");
	N(".Suffix");
	N("NoSuffix");
	N("TheSuffix");
	N("xxxSuffix");

	N("uffix");
	N("ASffix");
	N(".Sufix");
	N("NoSufix");
	N("TheSuffx");
	N("xxxSuffi");
}

def matchMixed() {
	var pat = "P?e*Suff?x", Y = expectMatch(pat, _), N = expectFail(pat, _);
	Y("PreSuffix");
	Y("PteSuffix");
	Y("PreSuffax");
	Y("PreSuffTx");
	Y("PreAASuffix");
	Y("P.e..Suff.x");

	N("P.e..Suff.");
	N("PrtSuffix");
	N("PreSuftix");
	N("PreSuffixx");
	N("xPreSuffix");
}

def expectMatch(pat: string, input: string) {
	for (f in [StringMatchers.make(pat), GlobMatcher.new(pat).matches]) {
		if (!f(input)) {
			System.error("VstMatcherTestError", Strings.format2("\"%1\" should match \"%2\"", pat, input));
		}
	}
}

def expectFail(pat: string, input: string) {
	for (f in [StringMatchers.make(pat), GlobMatcher.new(pat).matches]) {
		if (f(input)) {
			System.error("VstMatcherTestError", Strings.format2("\"%1\" should not match \"%2\"", pat, input));
		}
	}
}
