def TEST = UnitTest.new("MachStackifierTest", test);
def test() {
	testAplusB();
}

// Opcodes for instructions used in this test
def ARCH_ADD = 1;
def ARCH_SUB = 2;
def ARCH_LOAD = 3;
def ARCH_STORE = 4;
def ARCH_POP = 5;
def ARCH_CONST = 6;

def prog = Program.new();
def global_context = SsaContext.new(null, prog);

class Generator extends ArchCodeGen {
	def p0 = SsaParam.new(0, Int.TYPE);
	def p1 = SsaParam.new(1, Int.TYPE);
	new() super(global_context, null, null, null) {
		var graph = SsaGraph.new([p0, p1], Int.TYPE);
		reset(graph, null, null);
		cursor = ArchInstr.new(ArchInstrs.ARCH_END, ArchInstrs.NO_OPERANDS);
		context.block = SsaBlock.new();
		context.block.mark = 0;
		context.graph = graph;
		for (p in [p0, p1]) getVreg(p);
	}
	def newSsa() -> SsaInstr {
		var p = SsaApplyOp.new(null, V3Op.opBoolEq, Ssa.NO_INSTRS);
		getVreg(p);
		return p;
	}
	def stackify() {
		var first = cursor, last = cursor;
		while (first.prev != null) first = first.prev;
		def s = MachStackifier.new(TestStackInstrGen.new());
		s.stackify(first, last, false);
		while (first.prev != null) first = first.prev;
		cursor = first;
	}
}

class TestStackInstrGen extends StackInstrGen {
	def insertLoadLocal(v: VReg, next: ArchInstr) {
		insertBefore(ArchInstr.new(ARCH_LOAD, [Operand.Use(v.ssa, v, 0)]), next);
	}
	def insertStoreLocal(v: VReg, pop: bool, next: ArchInstr) {
		insertBefore(ArchInstr.new(ARCH_STORE, [Operand.Def(v.ssa, v, 0)]), next);
	}
	def insertPop(v: VReg, next: ArchInstr) {
		insertBefore(ArchInstr.new(ARCH_POP, [Operand.Use(v.ssa, v, 0)]), next);
	}
	def insertLoadConst(t: Type, val: Val, next: ArchInstr) { }
}

def testAplusB() {
	def g = Generator.new(), x = g.newSsa(), y = g.newSsa(), z = g.newSsa();
	g.emit3(ARCH_ADD, g.dfn(x), g.use(g.p0), g.use(g.p1));
	g.emit3(ARCH_ADD, g.dfn(y), g.use(g.p0), g.use(x));
	g.emit3(ARCH_ADD, g.dfn(z), g.use(g.p0), g.use(x));
	g.stackify();
	g.print();
}
