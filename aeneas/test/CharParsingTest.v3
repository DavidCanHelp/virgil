def TEST = UnitTest.new("CharParsing", runCharTest);

def runCharTest() {
	var test: string;
	for (ch in "abcdefghijklmnopqrstuvwxyz") testBasic(ch);
	for (ch in "ABCDEFGHIJKLMNOPQRSTUVWXYZ") testBasic(ch);
	for (ch in "0123456789") testBasic(ch);
	for (ch in "!@#$%^&*(){[}]|;:,<.>/? -_=+") testBasic(ch);

	testEscape('\t', 't',  "09"); 
	testEscape('\r', 'r',  "0d"); 
	testEscape('\n', 'n',  "0a"); 
	testEscape('\\', '\\', "5c"); 
	testEscape('\'', '\'', "27");
	testEscape('\"', '\"', "22");

	testByte("", false, 0);
	testByte("\'\'", false, 0);
	testByte("\'a\'", true, 3);
	testByte("\'\\x00\'", true, 6);
	testByte("\'\\r\'", true, 4);
	testByte("\'\\", false, 0);
	testByte("\'\\\'", false, 0);

	testByte("\'\x00\'", false, 0);
	testByte("\'\x1f\'", false, 0);
	testByte("\'\x80\'", false, 0);
	testByte("\'\xFF\'", false, 0);

	testString("\"a\"", true, 3);
	testString("\"This is a test string\"", true, 23);
	testString("\"0123456789\"", true, 12);
	testString("\"0123456789", false, 0);
	testString("\"\"", true, 2);
	testString("\"\n\"", false, 0);
	testString("\"", false, 0);
}

def testByte(a: Array<byte>, passed: bool, length: int) {
	testAtMultiplePositions(Byte.parseByte, a, passed, length);
}

def testString(a: Array<byte>, passed: bool, length: int) {
	testAtMultiplePositions(Byte.parseString, a, passed, length);
}

def testBasic(a: byte) {
	var buf0: string;
	buf0 = "\'x\'";
	buf0(1) = a;
	var p = Byte.parseByte(buf0, 0);
	TEST.eq(true, p.passed);
	TEST.eq(3, p.length);
	TEST.eq(a, p.val);

	buf0 = "\"x\"";
	buf0(1) = a;
	var q = Byte.parseString(buf0, 0);
	TEST.eq(true, q.passed);
	TEST.eq(3, q.length);
	TEST.eq(1, q.val.length);
	TEST.eq(a, q.val(0));
}

def testEscape(a: byte, x: byte, hex: string) {
	var buf0: string;
	buf0 = "\'\\x\'";
	buf0(2) = x;
	var p = Byte.parseByte(buf0, 0);
	TEST.eq(true, p.passed);
	TEST.eq(4, p.length);
	TEST.eq(a, p.val);

	buf0 = "\'\\x00\'";
	buf0(3) = hex(0);
	buf0(4) = hex(1);
	var q = Byte.parseByte(buf0, 0);
	TEST.eq(true, q.passed);
	TEST.eq(6, q.length);
	TEST.eq(a, q.val);
}

def testAtMultiplePositions<T>(f: (Array<byte>, int) -> Parsed<T>, a: Array<byte>, passed: bool, length: int) {
	// test with up to 3 bytes before and after
	for (i = 0; i < 4; i = i + 1) {
		for (j = 0; j < 4; j = j + 1) {
			var x = Array<byte>.new(i + j + a.length);
			for (k = 0; k < a.length; k = k + 1) {
				x(k + i) = a(k);
			}
			expect(f(x, i), passed, length);
		}
	}
}
def expect<T>(p: Parsed<T>, passed: bool, length: int) {
	TEST.eq(passed, p.passed);
	if (passed) TEST.eq(length, p.length);
}

