// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Representation of a JVM class file.
class JvmClassfile(className: string, superName: string) {
	// XXX: make some of these jvm class sequences lazy?
	def cpes    = Sequence<JvmCpe>.new();
	def intfs   = Sequence<int>.new(); // XXX: remove JvmClassfile interfaces?
	def fields  = Sequence<JvmField>.new();
	def methods = Sequence<JvmMethod>.new();
	def attrs   = Sequence<JvmAttribute>.new(); // XXX: only code attr?

	var file: int;
	var out: DataEncoder;
	var access_flags: int;
	var this_class: int;
	var super_class: int;

	def addCpe(cpe: JvmCpe) -> int {
		cpes.add(cpe);
		return cpe.cp_index = cpes.length; // CPE #'s start at 1
	}
	def setFlag(val: bool, flag: int) {
		if (val) access_flags = int.!(access_flags | flag);
		else access_flags = int.!(access_flags & (65535 ^ flag));
	}
	def getFlag(flag: int) -> bool {
		return (access_flags & flag) != 0;
	}
	def emit(out: DataEncoder) {
		this.out = out;
		out.bigEndian = true;
		// Java classfile format (Section 4.1, pg. 94)
		out.i4be(0xCAFEBABE);		// magic = 0xCAFEBABE
		out.i2be(0);			// minor_version
		out.i2be(49);			// major_version
		out.i2be(cpes.length + 1);	// constant_pool_count
		cpes.apply(emit_item);		// constant_pool
		out.i2be(access_flags);		// access_flags
		out.i2be(this_class);		// this_class
		out.i2be(super_class);		// super_class
		out.i2be(intfs.length);		// interfaces_count
		intfs.apply(out.i2be);		// interfaces
		out.i2be(fields.length);	// fields_count
		fields.apply(emit_item);	// fields
		out.i2be(methods.length);	// methods_count
		methods.apply(emit_item);	// methods
		out.i2be(attrs.length);		// attributes_count
		attrs.apply(emit_item);		// attributes
	}
	def emit_item(item: JvmClassItem) {
		item.emit(this.out);
	}
}
// unused: float, long, and double constant pool entries
class JvmClassItem {
	def emit(out: DataEncoder);
}
class JvmCpe extends JvmClassItem {
	var cp_index: int;
}
class JvmCpe_Class(name_index: int) extends JvmCpe {
	def emit(out: DataEncoder) {
		out.i1(7);
		out.i2be(name_index);
	}
}
class JvmCpe_Fieldref(class_index: int, name_and_type_index: int) extends JvmCpe {
	def emit(out: DataEncoder) {
		out.i1(9);
		out.i2be(class_index);
		out.i2be(name_and_type_index);
	}
}
class JvmCpe_Methodref(class_index: int, name_and_type_index: int) extends JvmCpe {
	def emit(out: DataEncoder) {
		out.i1(10);
		out.i2be(class_index);
		out.i2be(name_and_type_index);
	}
}
class JvmCpe_InterfaceMethodref(class_index: int, name_and_type_index: int) extends JvmCpe {
	def emit(out: DataEncoder) {
		out.i1(11);
		out.i2be(class_index);
		out.i2be(name_and_type_index);
	}
}
class JvmCpe_String(string_index: int) extends JvmCpe {
	def emit(out: DataEncoder) {
		out.i1(8);
		out.i2be(string_index);
	}
}
class JvmCpe_Integer(bytes: int) extends JvmCpe {
	def emit(out: DataEncoder) {
		out.i1(3);
		out.i4be(bytes);
	}
}
class JvmCpe_NameAndType(name_index: int, descriptor_index: int) extends JvmCpe {
	def emit(out: DataEncoder) {
		out.i1(12);
		out.i2be(name_index);
		out.i2be(descriptor_index);
	}
}
class JvmCpe_Utf8 extends JvmCpe {
	var bytes: Array<byte>;
	var classCpe: JvmCpe_Class; // for performance, the class that uses this UTF8
	var stringCpe: JvmCpe_String;  // for performance, the string that uses this UTF8
	def emit(out: DataEncoder) {
		out.i1(1);
		out.i2be(bytes.length);
		out.iN(bytes);
	}
}
class JvmMember(name_index: int, descriptor_index: int) extends JvmClassItem {
	def attributes: Sequence<JvmAttribute> = Sequence<JvmAttribute>.new();
	var access_flags: int;

	def emit(out: DataEncoder) {
		out.i2be(access_flags);
		out.i2be(name_index);
		out.i2be(descriptor_index);
		var len = attributes.length;
		out.i2be(len);
		for (i < len) {
			attributes.get(i).emit(out);
		}
	}
	def setFlag(val: bool, flag: int) {
		if (val) access_flags = access_flags | flag;
		else access_flags = access_flags & (65535 ^ flag);
	}
	def getFlag(flag: int) -> bool {
		return (access_flags & flag) != 0;
	}
}
class JvmMethod extends JvmMember {
	new(name_index: int, descriptor_index: int) super(name_index, descriptor_index) { }
}
class JvmField extends JvmMember {
	new(name_index: int, descriptor_index: int) super(name_index, descriptor_index) { }
}
class JvmAttribute extends JvmClassItem {
	var attribute_name_index: int;
	var info: Array<byte>;

	def emit(out: DataEncoder) {
		out.i2be(attribute_name_index);
		out.i4be(Arrays.length(info));
		out.iN(info);
	}
	def length() -> int { return Arrays.length(info); }
}
class JvmCodeAttribute extends JvmAttribute {
	var max_stack: int;
	var max_locals: int;
	var code: Array<byte>;
	var exception_table_length: int;
	var attributes: Array<JvmAttribute>;

	def emit(out: DataEncoder) {
		var i = 0, codelen = Arrays.length(code);
		out.i2be(attribute_name_index);
		out.i4be(length());
		out.i2be(max_stack);
		out.i2be(max_locals);
		out.i4be(codelen);
		out.iN(code);
		out.i2be(exception_table_length);
		var attrlen = Arrays.length(attributes);
		out.i2be(attrlen);
		for (i < attrlen) {
			attributes(i).emit(out);
		}
	}
	def length() -> int { return 12 + Arrays.length(code) + exception_table_length * 8; }
}
component JvmConstant {
	def ACC_PUBLIC 		= 0x0001;
	def ACC_PRIVATE 	= 0x0002;
	def ACC_PROTECTED 	= 0x0004;
	def ACC_STATIC		= 0x0008;
	def ACC_FINAL		= 0x0010;
	def ACC_SYNCHRONIZED	= 0x0020;
	def ACC_NATIVE		= 0x0100;
	def ACC_ABSTRACT	= 0x0400;
	def ACC_STRICT		= 0x0800;
	def ACC_VOLATILE	= 0x0040;
	def ACC_TRANSIENT	= 0x0080;
	def ACC_INTERFACE	= 0x0200;
	def ACC_SUPER		= 0x0020;
}
component JvmBytecode {
	def NOP		= '\x00'; // 0
	def ACONST_NULL	= '\x01'; // 1
	def ICONST_M1	= '\x02'; // 2
	def ICONST_0	= '\x03'; // 3
	def ICONST_1	= '\x04'; // 4
	def ICONST_2	= '\x05'; // 5
	def ICONST_3	= '\x06'; // 6
	def ICONST_4	= '\x07'; // 7
	def ICONST_5	= '\x08'; // 8
	def LCONST_0	= '\x09'; // 9
	def LCONST_1	= '\x0a'; // 10
	def FCONST_0	= '\x0b'; // 11
	def FCONST_1	= '\x0c'; // 12
	def FCONST_2	= '\x0d'; // 13
	def DCONST_0	= '\x0e'; // 14
	def DCONST_1	= '\x0f'; // 15
	def BIPUSH	= '\x10'; // 16
	def SIPUSH	= '\x11'; // 17
	def LDC		= '\x12'; // 18	
	def LDC_W	= '\x13'; // 19
	def LDC2_W	= '\x14'; // 20
	def ILOAD	= '\x15'; // 21
	def LLOAD	= '\x16'; // 22
	def FLOAD	= '\x17'; // 23
	def DLOAD	= '\x18'; // 24
	def ALOAD	= '\x19'; // 25
	def ILOAD_0	= '\x1a'; // 26
	def ILOAD_1	= '\x1b'; // 27
	def ILOAD_2	= '\x1c'; // 28
	def ILOAD_3	= '\x1d'; // 29
	def LLOAD_0	= '\x1e'; // 30
	def LLOAD_1	= '\x1f'; // 31
	def LLOAD_2	= '\x20'; // 32
	def LLOAD_3	= '\x21'; // 33
	def FLOAD_0	= '\x22'; // 34
	def FLOAD_1	= '\x23'; // 35
	def FLOAD_2	= '\x24'; // 36
	def FLOAD_3	= '\x25'; // 37
	def DLOAD_0	= '\x26'; // 38
	def DLOAD_1	= '\x27'; // 39
	def DLOAD_2	= '\x28'; // 40
	def DLOAD_3	= '\x29'; // 41
	def ALOAD_0	= '\x2a'; // 42
	def ALOAD_1	= '\x2b'; // 43
	def ALOAD_2	= '\x2c'; // 44
	def ALOAD_3	= '\x2d'; // 45
	def IALOAD	= '\x2e'; // 46
	def LALOAD	= '\x2f'; // 47
	def FALOAD	= '\x30'; // 48
	def DALOAD	= '\x31'; // 49
	def AALOAD	= '\x32'; // 50
	def BALOAD	= '\x33'; // 51
	def CALOAD	= '\x34'; // 52
	def SALOAD	= '\x35'; // 53
	def ISTORE	= '\x36'; // 54
	def LSTORE	= '\x37'; // 55
	def FSTORE	= '\x38'; // 56
	def DSTORE	= '\x39'; // 57
	def ASTORE	= '\x3a'; // 58
	def ISTORE_0	= '\x3b'; // 59
	def ISTORE_1	= '\x3c'; // 60
	def ISTORE_2	= '\x3d'; // 61
	def ISTORE_3	= '\x3e'; // 62
	def LSTORE_0	= '\x3f'; // 63
	def LSTORE_1	= '\x40'; // 64
	def LSTORE_2	= '\x41'; // 65
	def LSTORE_3	= '\x42'; // 66
	def FSTORE_0	= '\x43'; // 67
	def FSTORE_1	= '\x44'; // 68
	def FSTORE_2	= '\x45'; // 69
	def FSTORE_3	= '\x46'; // 70
	def DSTORE_0	= '\x47'; // 71
	def DSTORE_1	= '\x48'; // 72
	def DSTORE_2	= '\x49'; // 73
	def DSTORE_3	= '\x4a'; // 74
	def ASTORE_0	= '\x4b'; // 75
	def ASTORE_1	= '\x4c'; // 76
	def ASTORE_2	= '\x4d'; // 77
	def ASTORE_3	= '\x4e'; // 78
	def IASTORE	= '\x4f'; // 79
	def LASTORE	= '\x50'; // 80
	def FASTORE	= '\x51'; // 81
	def DASTORE	= '\x52'; // 82
	def AASTORE	= '\x53'; // 83
	def BASTORE	= '\x54'; // 84
	def CASTORE	= '\x55'; // 85
	def SASTORE	= '\x56'; // 86
	def POP		= '\x57'; // 87
	def POP2	= '\x58'; // 88
	def DUP		= '\x59'; // 89
	def DUP_X1	= '\x5a'; // 90
	def DUP_X2	= '\x5b'; // 91
	def DUP2	= '\x5c'; // 92
	def DUP2_X1	= '\x5d'; // 93
	def DUP2_X2	= '\x5e'; // 94
	def SWAP	= '\x5f'; // 95
	def IADD	= '\x60'; // 96
	def LADD	= '\x61'; // 97
	def FADD	= '\x62'; // 98
	def DADD	= '\x63'; // 99
	def ISUB	= '\x64'; // 100
	def LSUB	= '\x65'; // 101
	def FSUB	= '\x66'; // 102
	def DSUB	= '\x67'; // 103
	def IMUL	= '\x68'; // 104
	def LMUL	= '\x69'; // 105
	def FMUL	= '\x6a'; // 106
	def DMUL	= '\x6b'; // 107
	def IDIV	= '\x6c'; // 108
	def LDIV	= '\x6d'; // 109
	def FDIV	= '\x6e'; // 110
	def DDIV	= '\x6f'; // 111
	def IREM	= '\x70'; // 112
	def LREM	= '\x71'; // 113
	def FREM	= '\x72'; // 114
	def DREM	= '\x73'; // 115
	def INEG	= '\x74'; // 116
	def LNEG	= '\x75'; // 117
	def FNEG	= '\x76'; // 118
	def DNEG	= '\x77'; // 119
	def ISHL	= '\x78'; // 120
	def LSHL	= '\x79'; // 121
	def ISHR	= '\x7a'; // 122
	def LSHR	= '\x7b'; // 123
	def IUSHR	= '\x7c'; // 124
	def LUSHR	= '\x7d'; // 125
	def IAND	= '\x7e'; // 126
	def LAND	= '\x7f'; // 127
	def IOR		= '\x80'; // 128
	def LOR		= '\x81'; // 129
	def IXOR	= '\x82'; // 130
	def LXOR	= '\x83'; // 131
	def IINC	= '\x84'; // 132
	def I2L		= '\x85'; // 133
	def I2F		= '\x86'; // 134
	def I2D		= '\x87'; // 135
	def L2I		= '\x88'; // 136
	def L2F		= '\x89'; // 137
	def L2D		= '\x8a'; // 138
	def F2I		= '\x8b'; // 139
	def F2L		= '\x8c'; // 140
	def F2D		= '\x8d'; // 141
	def D2I		= '\x8e'; // 142
	def D2L		= '\x8f'; // 143
	def D2F		= '\x90'; // 144
	def I2B		= '\x91'; // 145
	def I2C		= '\x92'; // 146
	def I2S		= '\x93'; // 147
	def LCMP	= '\x94'; // 148
	def FCMPL	= '\x95'; // 149
	def FCMPG	= '\x96'; // 150
	def DCMPL	= '\x97'; // 151
	def DCMPG	= '\x98'; // 152
	def IFEQ	= '\x99'; // 153
	def IFNE	= '\x9a'; // 154
	def IFLT	= '\x9b'; // 155
	def IFGE	= '\x9c'; // 156
	def IFGT	= '\x9d'; // 157
	def IFLE	= '\x9e'; // 158
	def IF_ICMPEQ	= '\x9f'; // 159
	def IF_ICMPNE	= '\xa0'; // 160
	def IF_ICMPLT	= '\xa1'; // 161
	def IF_ICMPGE	= '\xa2'; // 162
	def IF_ICMPGT	= '\xa3'; // 163
	def IF_ICMPLE	= '\xa4'; // 164
	def IF_ACMPEQ	= '\xa5'; // 165
	def IF_ACMPNE	= '\xa6'; // 166
	def GOTO	= '\xa7'; // 167
	def JSR		= '\xa8'; // 168
	def RET		= '\xa9'; // 169
	def TABLESWITCH		= '\xaa'; // 170
	def LOOKUPSWITCH	= '\xab'; // 171
	def IRETURN		= '\xac'; // 172
	def LRETURN		= '\xad'; // 173
	def FRETURN		= '\xae'; // 174
	def DRETURN		= '\xaf'; // 175
	def ARETURN		= '\xb0'; // 176
	def RETURN		= '\xb1'; // 177
	def GETSTATIC		= '\xb2'; // 178
	def PUTSTATIC		= '\xb3'; // 179
	def GETFIELD		= '\xb4'; // 180
	def PUTFIELD		= '\xb5'; // 181
	def INVOKEVIRTUAL	= '\xb6'; // 182
	def INVOKESPECIAL	= '\xb7'; // 183
	def INVOKESTATIC	= '\xb8'; // 184
	def INVOKEINTERFACE	= '\xb9'; // 185
	// --- 186 is unused ---------------------
	def NEW			= '\xbb'; // 187
	def NEWARRAY		= '\xbc'; // 188
	def ANEWARRAY		= '\xbd'; // 189
	def ARRAYLENGTH		= '\xbe'; // 190
	def ATHROW		= '\xbf'; // 191
	def CHECKCAST		= '\xc0'; // 192
	def INSTANCEOF		= '\xc1'; // 193
	def MONITORENTER	= '\xc2'; // 194
	def MONITOREXIT		= '\xc3'; // 195
	def WIDE		= '\xc4'; // 196
	def MULTIANEWARRAY	= '\xc5'; // 197
	def IFNULL		= '\xc6'; // 198
	def IFNONNULL		= '\xc7'; // 199
	def GOTO_W		= '\xc8'; // 200
	def JSR_W		= '\xc9'; // 201
}
