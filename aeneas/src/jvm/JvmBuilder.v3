// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility for constructing JVM class files.
class JvmClassfileBuilder(jprog: JvmProgram, jclass: JvmClass) {
	// XXX: more efficient maps for JvmClassfile builder?
	def utf8Map: PartialMap<string, JvmCpe_Utf8> = Strings.newMap<JvmCpe_Utf8>();
	def ntMap = Int.newMap<int>();
	def mrMap = Int.newMap<int>();

	var file: JvmClassfile;

	new() {
		file = JvmClassfile.new(jclass.name, jclass.superName);
		file.this_class = newClassref(jclass.name);
		file.super_class = newClassref(jclass.superName);
	}
	def emitValue(code: JvmCodeBuilder, etype: Type, val: Val) -> int {
		match (etype.typeCon.kind) {
			V3Kind.BOOL:		code.iconst(Bool.toInt(Bool.unbox(val)));
			V3Kind.INT: {
				match (V3.asInt(etype).byteSize()) {
					1, 2, 4: code.iconst(Int.unbox(val));
					8: code.lconst(Int64.unbox(val));
				}
			}
			V3Kind.ARRAY,
			V3Kind.VARIANT,
			V3Kind.CLASS:		jprog.jheap.emitRecordValue(code, Record.!(val));
			V3Kind.TUPLE:		jprog.context.fail("normalization should remove all tuple values");
			V3Kind.FUNCREF:		jprog.jheap.emitFunctionValue(code, etype, FuncVal.!(val));
			V3Kind.VOID,
			V3Kind.COMPONENT:	; // emit nothing
		} else {
			unknownValue(etype, val);
		}
		return 1;
	}
	private def unknownValue(etype: Type, val: Val) {
		var buffer = Strings.toBuffer("Jvm Compiler error: ");
		buffer.puts(jclass.name).puts(": unknown value type \"");
		etype.render(buffer);
		buffer.putc('\"');
		jprog.context.fail(buffer.toString());
	}
	def newField(name: string, desc: string) -> JvmField {
		var fld = JvmField.new(newUtf8(name), newUtf8(desc));
		file.fields.add(fld);
		return fld;
	}
	def newMethod(name: string, desc: string) -> JvmMethod {
		var meth = JvmMethod.new(newUtf8(name), newUtf8(desc));
		file.methods.add(meth);
		return meth;
	}
	def newStaticMethod(name: string, desc: string) -> JvmMethod {
		var meth = newMethod(name, desc);
		meth.setFlag(true, JvmConstant.ACC_STATIC);
		return meth;
	}
	def newUtf8(bytes: string) -> int {
		return getUtf8(bytes).cp_index;
	}
	def newClassref(name: string) -> int {
		var u = getUtf8(name), cpe = u.classCpe;
		if (cpe == null) {
			cpe = JvmCpe_Class.new(u.cp_index);
			file.addCpe(cpe);
			u.classCpe = cpe;
		}
		return cpe.cp_index;
	}
	def newString(bytes: string) -> int {
		var u = getUtf8(bytes), cpe = u.stringCpe;
		if (cpe == null) {
			cpe = JvmCpe_String.new(u.cp_index);
			file.addCpe(cpe);
			u.stringCpe = cpe;
		}
		return cpe.cp_index;
	}
	def newFieldref(clname: string, fname: string, desc: string) -> int {
		return getMemberRef(clname, fname, desc, false);
	}
	def newMethodref(clname: string, fname: string, desc: string) -> int {
		return getMemberRef(clname, fname, desc, true);
	}
	private def getUtf8(bytes: string) -> JvmCpe_Utf8 {
		var cpe = utf8Map.get(bytes);
		if (cpe == null) {
			cpe = JvmCpe_Utf8.new();
			cpe.bytes = Arrays.copy(bytes, Array<byte>.new(bytes.length));
			utf8Map.set(cpe.bytes, cpe);
			file.addCpe(cpe);
		}
		return cpe;
	}
	private def getMemberRef(clname: string, fname: string, desc: string, isMethod: bool) -> int {
		var nameIndex = newUtf8(fname);
		var typeIndex = newUtf8(desc);
		var ntId = (nameIndex * 65537) + typeIndex;
		var ntIndex = ntMap.get(ntId);
		if (ntIndex == 0) {
			var nt = JvmCpe_NameAndType.new(nameIndex, typeIndex);
			ntMap.set(ntId, ntIndex = file.addCpe(nt));
		}
		var classIndex = newClassref(clname);
		var mrId = (classIndex * 65537) + ntIndex;
		var mrIndex = mrMap.get(mrId);
		if (mrIndex == 0) {
			var m = if(isMethod, JvmCpe_Methodref.new(classIndex, ntIndex),
						JvmCpe_Fieldref.new(classIndex, ntIndex));
			mrMap.set(mrId, mrIndex = file.addCpe(m));
		}
		return mrIndex;
	}
	def emitLoadArguments(code: JvmCodeBuilder, exactType: Type, implicitType: Type, base: int) {
		var elist = Function.getParamTypeList(exactType), i = 0;

		if (exactType == implicitType) {
			// fast path: no type conversions necessary
			for (l = elist; l != null; l = l.tail) {
				var jtype = jprog.jvmType(l.head);
				code.load(jtype.kind, i + base);
				i = i + jtype.kind.width;
			}
		} else {
			// type conversions may be necessary
			var ilist = Function.getParamTypeList(implicitType);
			for (l = elist; l != null; l = l.tail) {
				var jtype = jprog.jvmType(l.head);
				code.load(jtype.kind, i + base);
				jprog.jheap.emitJvmTypeConversion(code, l.head, ilist.head);
				i = i + jtype.kind.width;
				ilist = ilist.tail;
			}
		}
	}
	def newCodeBuilder() -> JvmCodeBuilder {
		return JvmCodeBuilder.new(this);
	}
}

class JvmCodeBuilder(builder: JvmClassfileBuilder) {
	var code = Array<byte>.new(20); // TUNABLE: initial size of JvmCodeBuilder buffer
	var cur_pos: int;
	var cur_stack: int;
	var max_stack: int;
	var max_locals: int;
	var flowend: bool;

	def goto_fw() -> int {
		var offset = cur_pos;
		op2(JvmBytecode.GOTO, 0);
		flowend = true;
		return offset;
	}
	def goto_bw(pos: int) {
		op2(JvmBytecode.GOTO, pos - cur_pos);
		flowend = true;
	}
	def branch_fw(opcode: byte) -> int {
		var offset = cur_pos;
		op2(opcode, 0);
		popBranchOperands(opcode);
		return offset;
	}
	def branch_bw(opcode: byte, pos: int) {
		op2(opcode, pos - cur_pos);
		popBranchOperands(opcode);
	}
	def popBranchOperands(opcode: byte) {
		match (opcode) {
			JvmBytecode.IFEQ,
			JvmBytecode.IFNE,
			JvmBytecode.IFLT,
			JvmBytecode.IFGE,
			JvmBytecode.IFGT,
			JvmBytecode.IFLE,
			JvmBytecode.IFNULL,
			JvmBytecode.IFNONNULL: popN(1);
			JvmBytecode.GOTO: ;
		} else {
			popN(2);
		}
	}
	def lcmp() {
		op(JvmBytecode.LCMP);
		popN(3);
	}
	def patchBranch(index: int) {
		if (index >= 0) {
			flowend = false;
			var offset = cur_pos - index;
			code(index + 1) = byte.!(offset #>> 8);
			code(index + 2) = byte.!(offset);
		}
	}
	def op(opcode: byte) {
		var p = grow(1);
		code(p) = opcode;
		flowend = false;
	}
	def op1(opcode: byte, operand: int) {
		var p = grow(2);
		code(p) = opcode;
		code(p + 1) = byte.!(operand);
		flowend = false;
	}
	def op2(opcode: byte, operand: int) {
		var p = grow(3);
		code(p) = opcode;
		code(p + 1) = byte.!(operand #>> 8);
		code(p + 2) = byte.!(operand);
		flowend = false;
	}
	def u4(p: int, val: int) {
		code(p) = byte.!(val #>> 24);
		code(p + 1) = byte.!(val #>> 16);
		code(p + 2) = byte.!(val #>> 8);
		code(p + 3) = byte.!(val);
	}
	def grow(delta: int) -> int {
		var p = cur_pos, np = cur_pos = p + delta;
		if (np > code.length) code = Arrays.grow(code, np * 3);
		return p;
	}
	def attach(jmeth: JvmMethod) {
		var attribute = JvmCodeAttribute.new();
		attribute.attribute_name_index = builder.newUtf8("Code");
		attribute.max_stack = max_stack;
		attribute.max_locals = max_locals;
		attribute.code = Arrays.copy(code, Array<byte>.new(cur_pos));
		jmeth.attributes.add(attribute);
	}
	def pushN(size: int) {
		cur_stack = cur_stack + size;
		if (cur_stack > max_stack) max_stack = cur_stack;
		if (cur_stack < 0) builder.jprog.context.fail("JvmCompiler error: negative stack height");
	}
	def popN(size: int) {
		cur_stack = cur_stack - size;
		if (cur_stack < 0) builder.jprog.context.fail("JvmCompiler error: negative stack height");
	}
	def locals(size: int) {
		if (size > max_locals) max_locals = size;
	}
	def iinc(index: int, val: int) {
		locals(index + 1);
		var p = grow(3);
		code(p) = JvmBytecode.IINC;
		code(p + 1) = byte.!(index);
		code(p + 2) = byte.!(val);
	}
	def load(kind: JvmKind, index: int) {
		load_store(kind.LOAD_0, kind.LOAD, index);
		pushN(kind.width);
		locals(index + kind.width);
	}
	def store(kind: JvmKind, index: int) {
		load_store(kind.STORE_0, kind.STORE, index);
		popN(kind.width);
		locals(index + kind.width);
	}
	def load_store(op0: byte, opK: byte, index: int) {
		if (index <= 3) {
			op(byte.!(int.!(op0) + index));
		} else if (index <= 255) {
			op1(opK, byte.!(index));
		} else {
			op(JvmBytecode.WIDE);
			op2(opK, index);
		}
	}
	def aload(kind: JvmKind) {
		op(kind.ALOAD);
		popN(2);
		pushN(kind.width);
	}
	def astore(kind: JvmKind) {
		op(kind.ASTORE);
		popN(2 + kind.width);
	}
	def ret(kind: JvmKind) {
		op(kind.RETURN);
		popN(kind.width);
		flowend = true;
	}
	def retvoid() {
		op(JvmBytecode.RETURN);
		flowend = true;
	}
	def newobject(jclass: JvmClass) {
		op2(JvmBytecode.NEW, builder.newClassref(jclass.name));
		pushN(1);
	}
	def newempty(jclass: JvmClass) {
		op2(JvmBytecode.NEW, builder.newClassref(jclass.name));
		pushN(1);
		dup();
		invokespecial(jclass.name, "<init>", JvmTypes.SIG_VOID);
	}
	def newarray(elementType: JvmType) {
		if (elementType.kind.NEWARRAY != '\x00') {
			op(JvmBytecode.NEWARRAY);
			op(elementType.kind.NEWARRAY);
		} else {
			if (JvmArray_Type.?(elementType)) {
				op2(JvmBytecode.ANEWARRAY, builder.newClassref(elementType.descriptor()));
			} else {
				op2(JvmBytecode.ANEWARRAY, builder.newClassref(elementType.name));
			}
		}
	}
	def arraylength() {
		op(JvmBytecode.ARRAYLENGTH);
	}
	def invokestatic(clname: string, mname: string, sig: JvmSig) {
		var cp_index = builder.newMethodref(clname, mname, sig.descriptor());
		op2(JvmBytecode.INVOKESTATIC, cp_index);
		pushN(sig.stackDelta(false));
	}
	def invokespecial(clname: string, mname: string, sig: JvmSig) {
		var cp_index = builder.newMethodref(clname, mname, sig.descriptor());
		op2(JvmBytecode.INVOKESPECIAL, cp_index);
		pushN(sig.stackDelta(true));
	}
	def invokevirtual(clname: string, mname: string, sig: JvmSig) {
		var cp_index = builder.newMethodref(clname, mname, sig.descriptor());
		op2(JvmBytecode.INVOKEVIRTUAL, cp_index);
		pushN(sig.stackDelta(true));
	}
	def getstatic(jclass: JvmClass, fname: string, jtype: JvmType) {
		op2(JvmBytecode.GETSTATIC, builder.newFieldref(jclass.name, fname, jtype.descriptor()));
		pushN(jtype.kind.width);
	}
	def putstatic(jclass: JvmClass, fname: string, jtype: JvmType) {
		op2(JvmBytecode.PUTSTATIC, builder.newFieldref(jclass.name, fname, jtype.descriptor()));
		popN(jtype.kind.width);
	}
	def getfield(jclass: JvmClass, fname: string, jtype: JvmType) {
		op2(JvmBytecode.GETFIELD, builder.newFieldref(jclass.name, fname, jtype.descriptor()));
		popN(1);
		pushN(jtype.kind.width);
	}
	def putfield(jclass: JvmClass, fname: string, jtype: JvmType) {
		op2(JvmBytecode.PUTFIELD, builder.newFieldref(jclass.name, fname, jtype.descriptor()));
		popN(1 + jtype.kind.width);
	}
	def instanceof(jtype: JvmType) {
		var name = jtype.name;
		if (JvmArray_Type.?(jtype)) name = jtype.descriptor();
		op2(JvmBytecode.INSTANCEOF, builder.newClassref(name));
	}
	def checkcast(jtype: JvmType) {
		var name = jtype.name;
		if (JvmArray_Type.?(jtype)) name = jtype.descriptor();
		op2(JvmBytecode.CHECKCAST, builder.newClassref(name));
	}
	def tableswitch(min: int, max: int) -> int {
		var s = cur_pos;
		op(JvmBytecode.TABLESWITCH);
		while (cur_pos % 4 != 0) grow(1); // emit alignment
		grow(4); // skip default offset
		u4(grow(4), min);
		u4(grow(4), max);
		grow(4 * (max - min + 1)); // allocate space for jump table
		popN(1);
		return s;
	}
	def patch_tableswitch(s: int, default: int, off: Array<int>) {
		var p = s + 1;
		while (p % 4 != 0) p = p + 1; // skip alignment
		u4(p, default - s);
		p = p + 12;
		for (i < off.length) {
			u4(p + i * 4, off(i) - s);
		}
	}
	def lookupswitch(npairs: int) -> int {
		var s = cur_pos;
		op(JvmBytecode.LOOKUPSWITCH);
		while (cur_pos % 4 != 0) grow(1); // emit alignment
		grow(4); // skip default offset
		u4(grow(4), npairs);
		grow(8 * npairs); // allocate space for jump table pairs
		popN(1);
		return s;
	}
	def patch_lookupswitch(s: int, default: int, pairs: Array<(int, int)>) {
		var p = s + 1;
		while (p % 4 != 0) p = p + 1; // skip alignment
		u4(p, default - s);
		p = p + 8;
		for (i < pairs.length) {
			u4(p + i * 8, pairs(i).0);
			u4(p + i * 8 + 4, pairs(i).1 - s);
		}
	}
	def binop(opcode: byte) {
		op(opcode);
		popN(1);
	}
	def lbinop(opcode: byte) {
		op(opcode);
		popN(2);
	}
	def dup() {
		op(JvmBytecode.DUP);
		pushN(1);
	}
	def dup2() {
		op(JvmBytecode.DUP2);
		pushN(2);
	}
	def dupK(kind: JvmKind) {
		if (kind.width == 1) dup();
		else if (kind.width == 2) dup2();
	}
	def pop() {
		op(JvmBytecode.POP);
		popN(1);
	}
	def pop2() {
		op(JvmBytecode.POP2);
		popN(2);
	}
	def popK(kind: JvmKind) {
		if (kind.width == 1) pop();
		else if (kind.width == 2) pop2();
	}
	def swap() {
		op(JvmBytecode.SWAP);
	}
	def dup_x1() {
		op(JvmBytecode.DUP_X1);
		pushN(1);
	}
	def dup_x2() {
		op(JvmBytecode.DUP_X2);
		pushN(1);
	}
	def ldc(cp_index: int) {
		if (cp_index < 256) op1(JvmBytecode.LDC, cp_index);
		else op2(JvmBytecode.LDC_W, cp_index);
		pushN(1);
	}
	def ldc2_w(cp_index: int) {
		op2(JvmBytecode.LDC2_W, cp_index);
		pushN(2);
	}
	def iconst(val: int) {
		match (val) {
			-1: op(JvmBytecode.ICONST_M1);
			 0: op(JvmBytecode.ICONST_0);
			 1: op(JvmBytecode.ICONST_1);
			 2: op(JvmBytecode.ICONST_2);
			 3: op(JvmBytecode.ICONST_3);
			 4: op(JvmBytecode.ICONST_4);
			 5: op(JvmBytecode.ICONST_5);
		} else {
			if (val < 128 && val > -129) op1(JvmBytecode.BIPUSH, val);
			else if (val <= 32767 && val >= -32768) op2(JvmBytecode.SIPUSH, val);
			else {
				var cpe = JvmCpe_Integer.new(val);
				return ldc(builder.file.addCpe(cpe));
			}
		}
		pushN(1);
	}
	def lconst(val: (int, int)) {
		var h = val.0, l = val.1;
		if (h == 0 && l >= 0) {
			iconst(l);
			return i2l();
		} else if (h == -1 && l < 0) {
			iconst(l);
			return i2l();
		}
		var cpe_index = builder.file.addCpe(JvmCpe_Long.new(val));
		builder.file.addCpe(JvmCpe_Empty.new());
		ldc2_w(cpe_index);
	}
	def iconst_0() {
		op(JvmBytecode.ICONST_0);
		pushN(1);
	}
	def iconst_1() {
		op(JvmBytecode.ICONST_1);
		pushN(1);
	}
	def aconst_null() {
		op(JvmBytecode.ACONST_NULL);
		pushN(1);
	}
	def aload_0() {
		op(JvmBytecode.ALOAD_0);
		locals(1);
		pushN(1);
	}
	def aload_1() {
		op(JvmBytecode.ALOAD_1);
		locals(2);
		pushN(1);
	}
	def athrow() {
		op(JvmBytecode.ATHROW);
		popN(1);
		flowend = true;
	}
	def i2b() {
		op(JvmBytecode.I2B);
	}
	def i2l() {
		op(JvmBytecode.I2L);
		pushN(1);
	}
	def l2i() {
		op(JvmBytecode.L2I);
		popN(1);
	}
}
