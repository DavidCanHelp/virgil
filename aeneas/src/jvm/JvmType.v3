// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A JVM type, including its name, its kind, and its type descriptor
class JvmType(name: string, kind: JvmKind) {
	var desc: string; // lazily created

	def descriptor() -> string {
		if (desc == null) desc = buildDescriptor();
		return desc;
	}
	def buildDescriptor() -> string;
}
// A Jvm primitive type
class JvmPrimitive extends JvmType {
	new(name: string, desc: string, kind: JvmKind) : super(name, kind) {
		this.desc = desc;
	}
}
// A Jvm array type
class JvmArray_Type extends JvmType {
	def elementType: JvmType;

	new(elementType) : super(StringBuffer.new()
				.puts(elementType.name)
				.puts("[]").toString(), 
			JvmTypes.KIND_OBJECT) {
	}
	def buildDescriptor() -> string {
		return StringBuffer.new().putc('[').puts(elementType.descriptor()).toString();
	}
}
// A Jvm class type
class JvmClass extends JvmType {
	def superName: string;
	new(name: string, superName) : super(name, JvmTypes.KIND_OBJECT) { }
	def buildDescriptor() -> string {
		var buffer = StringBuffer.new().putc('L');
		for (i = 0; i < name.length; i++) {
			if (name(i) == '.') buffer.putc('/');
			else buffer.putc(name(i));
		}
		return buffer.putc(';').toString();
	}
}
// A Java bytecode "kind" knows the opcodes for various operations and their stack widths
class JvmKind(
	LOAD: byte,
	LOAD_0: byte,
	STORE: byte,
	STORE_0: byte,
	ALOAD: byte,
	ASTORE: byte,
	RETURN: byte,
	NEWARRAY: byte,
	width: int) {
}
def paramsSizeOf(paramTypes: Array<JvmType>) -> int {
	var paramsSize = 0;
	for (t in paramTypes) {
		paramsSize = paramsSize + t.kind.width;
	}
	return paramsSize;
}
// A representation of a Jvm method signature
class JvmSig(paramTypes: Array<JvmType>, returnType: JvmType) {
	def paramsSize = paramsSizeOf(paramTypes);
	var desc: string;

	def stackDelta(instance: bool) -> int {
		if (instance) return returnType.kind.width - 1 - paramsSize;
		return returnType.kind.width - paramsSize;
	}
	def localsSize(instance: bool) -> int {
		if (instance) return 1 + paramsSize;
		return paramsSize;
	}
	def descriptor() -> string {
		if (desc == null) {
			var buffer = Strings.toBuffer("(");
			for (t in paramTypes) {
				buffer.puts(t.descriptor());
			}
			buffer.puts(")");
			buffer.puts(returnType.descriptor());
			desc = buffer.toString();
		}
		return desc;
	}
}
// Important Jvm types and kinds.
component JvmTypes {
	def none = '\x00';
	def KIND_VOID	= JvmKind.new(none, none, none, none, none, none, JvmBytecode.RETURN, none, 0);
	def KIND_BOOLEAN= JvmKind.new(JvmBytecode.ILOAD, JvmBytecode.ILOAD_0, 
				      JvmBytecode.ISTORE, JvmBytecode.ISTORE_0, 
				      JvmBytecode.BALOAD, JvmBytecode.BASTORE, 
				      JvmBytecode.IRETURN, byte.!(4), 1);
	def KIND_BYTE	= JvmKind.new(JvmBytecode.ILOAD, JvmBytecode.ILOAD_0, 
				      JvmBytecode.ISTORE, JvmBytecode.ISTORE_0, 
				      JvmBytecode.BALOAD, JvmBytecode.BASTORE, 
				      JvmBytecode.IRETURN, byte.!(8), 1);
	def KIND_CHAR	= JvmKind.new(JvmBytecode.ILOAD, JvmBytecode.ILOAD_0,
				      JvmBytecode.ISTORE, JvmBytecode.ISTORE_0,
				      JvmBytecode.CALOAD, JvmBytecode.CASTORE, 
				      JvmBytecode.IRETURN, byte.!(5), 1);
	def KIND_SHORT	= JvmKind.new(JvmBytecode.ILOAD, JvmBytecode.ILOAD_0, 
				      JvmBytecode.ISTORE, JvmBytecode.ISTORE_0, 
				      JvmBytecode.SALOAD, JvmBytecode.SASTORE, 
				      JvmBytecode.IRETURN, byte.!(9), 1);
	def KIND_INT	= JvmKind.new(JvmBytecode.ILOAD, JvmBytecode.ILOAD_0, 
				      JvmBytecode.ISTORE, JvmBytecode.ISTORE_0, 
				      JvmBytecode.IALOAD, JvmBytecode.IASTORE, 
				      JvmBytecode.IRETURN, byte.!(10), 1);
	def KIND_LONG	= JvmKind.new(JvmBytecode.LLOAD, JvmBytecode.LLOAD_0, 
				      JvmBytecode.LSTORE, JvmBytecode.LSTORE_0, 
				      JvmBytecode.LALOAD, JvmBytecode.LASTORE, 
				      JvmBytecode.LRETURN, byte.!(11), 2);
	def KIND_FLOAT	= JvmKind.new(JvmBytecode.FLOAD, JvmBytecode.FLOAD_0, 
				      JvmBytecode.FSTORE, JvmBytecode.FSTORE_0, 
				      JvmBytecode.FALOAD, JvmBytecode.FASTORE, 
				      JvmBytecode.FRETURN, byte.!(6), 1);
	def KIND_DOUBLE	= JvmKind.new(JvmBytecode.DLOAD, JvmBytecode.DLOAD_0, 
				      JvmBytecode.DSTORE, JvmBytecode.DSTORE_0, 
				      JvmBytecode.DALOAD, JvmBytecode.DASTORE, 
				      JvmBytecode.DRETURN, byte.!(7), 2);
	def KIND_OBJECT	= JvmKind.new(JvmBytecode.ALOAD, JvmBytecode.ALOAD_0, 
				      JvmBytecode.ASTORE, JvmBytecode.ASTORE_0, 
				      JvmBytecode.AALOAD, JvmBytecode.AASTORE, 
				      JvmBytecode.ARETURN, none, 1);

	def BOOLEAN = JvmPrimitive.new("boolean", "Z", KIND_BOOLEAN);
	def BYTE    = JvmPrimitive.new("byte", "B", KIND_BYTE);
	def CHAR    = JvmPrimitive.new("byte", "C", KIND_CHAR);
	def SHORT   = JvmPrimitive.new("short", "S", KIND_SHORT);
	def INT     = JvmPrimitive.new("int", "I", KIND_INT);
	def LONG    = JvmPrimitive.new("long", "J", KIND_LONG);
	def FLOAT   = JvmPrimitive.new("float", "F", KIND_FLOAT);
	def DOUBLE  = JvmPrimitive.new("double", "D", KIND_DOUBLE);
	def VOID    = JvmPrimitive.new("void", "V", KIND_VOID);

	def arrayTypeCache = HashMap<JvmType, JvmArray_Type>.new(hash, JvmType.==);

	def hash(jvmType: JvmType) -> int { return Strings.hash(jvmType.name); }

	def newJvmArrayType(jtype: JvmType) -> JvmArray_Type {
		var arrayType = arrayTypeCache.get(jtype);
		if (arrayType == null) {
			arrayType = JvmArray_Type.new(jtype);
			arrayTypeCache.set(jtype, arrayType);
		}
		return arrayType;
	}

	def jlo = "java/lang/Object";
	def systemClassName = "V3S_System";

	def java_lang_Object				= JvmClass.new(jlo, null);
	def java_lang_Integer				= JvmClass.new("java/lang/Integer", jlo);
	def java_lang_String				= JvmClass.new("java/lang/String", jlo);
	def java_lang_System				= JvmClass.new("java/lang/System", jlo);
	def java_lang_AbstractMethodError		= JvmClass.new("java/lang/AbstractMethodError", jlo);
	def java_lang_ClassCastException		= JvmClass.new("java/lang/ClassCastException", jlo);
	def java_lang_ArrayIndexOutOfBoundsException	= JvmClass.new("java/lang/ArrayIndexOutOfBoundsException", jlo);
	def java_lang_NegativeArraySizeException	= JvmClass.new("java/lang/NegativeArraySizeException", jlo);
	def java_lang_ArithmeticException		= JvmClass.new("java/lang/ArithmeticException", jlo);
	def java_lang_Exception				= JvmClass.new("java/lang/Exception", jlo);
	def systemClass					= JvmClass.new(systemClassName, jlo);

	def BYTE_ARRAY: JvmArray_Type   = newJvmArrayType(BYTE);
	def STRING_ARRAY: JvmArray_Type = newJvmArrayType(JvmTypes.java_lang_String);

	def SIG_VOID            = JvmSig.new([], VOID);
	def SIG_VOID_INT        = JvmSig.new([], INT);
	def SIG_EQUALS          = JvmSig.new([java_lang_Object, java_lang_Object], BOOLEAN);
	def SIG_EQUALV          = JvmSig.new([java_lang_Object], BOOLEAN);
	def SIG_INT_VOID        = JvmSig.new([INT], VOID);
	def SIG_INT_INT_INT     = JvmSig.new([INT, INT], INT);
	def SIG_INT_INTEGER     = JvmSig.new([INT], java_lang_Integer);
	def SIG_STRING_VOID     = JvmSig.new([java_lang_String], VOID);
	def SIG_JAVA_MAIN       = JvmSig.new([STRING_ARRAY], JvmTypes.VOID);
	def SIG_VOID_BYTE_ARRAY = JvmSig.new([], JvmTypes.BYTE_ARRAY);
}
