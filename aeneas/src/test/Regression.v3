// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility for regression testing.
component Regression {
	var testList: List<TestCase>;
	var skipList: List<string>;
	var progress: ProgressPrinter;

	def PASS = 0;
	def FAIL = 1;
	def SKIP = 2;

	var expectMap: Map<string, int> = Strings.newMap();

	def run(options: Options, args: Array<string>) -> bool {
		var progressLevel = Aeneas.VERBOSE.get();

		if (progressLevel > 2) progressLevel = 2;
		if (Aeneas.EXPECT.get() != null) parseExpectFile(Aeneas.EXPECT.get());

		for (a in args) {
			if (a.length > 0) {
				var testCase = parseTest(a);
				if (testCase != null) { testList = List.new(testCase, testList); }
				else skipList = List.new(a, skipList);
			}
		}
		testList = Lists.reverse(testList);
		progress = ProgressPrinter.new(Lists.length(testList), progressLevel);
		Lists.apply(testList, runTest);

		if (skipList != null) {
			var len = Lists.length(skipList);
			if (len == 1) Terminal.put("1 file skipped\n");
			else Terminal.put(Strings.format1("%1 files skipped\n", len));
		}

		progress.report();
		for (slist = skipList; slist != null; slist = slist.tail) {
			Terminal.put(slist.head);
			Terminal.put(" - skipped\n");
		}

		return progress.failed > 0;
	}
	def runTest(testCase: TestCase) {
		var expect = expectMap.get(testCase.fileName);
		if (expect != SKIP) {
			progress.begin(testCase.fileName);
			var result = testCase.run();
			if (result && expect == PASS) progress.pass();
			if (result && expect == FAIL) progress.unexpectedPass();
			if (!result && expect == PASS) progress.fail(testCase.report());
			if (!result && expect == FAIL) progress.expectedFail(testCase.report());
		}
	}
	def parseExpectFile(fileName: string) -> bool {
		var file = System.fileLoad(fileName);
		if (file == null) {
			Terminal.put("Expect file not found: ");
			Terminal.put(fileName);
			Terminal.ln();
			return false;
		}
		var i = 0;
		while (i < file.length) {
			if (file(i) == '#') {
				var s = i + 1;
				expectMap.set(Arrays.range(file, s, i - 1), SKIP);
				i = nextLine(file, i);
			}
			var s = i;
			i = nextLine(file, i);
			expectMap.set(Arrays.range(file, s, i - 1), FAIL);
		}
		return true;
	}
	def nextLine(arr: Array<byte>, i: int) -> int {
		while (i < arr.length && arr(i) != '\n') i++;
		return i + 1;
	}
	def parseTest(fileName: string) -> TestCase {
		var input = System.fileLoad(fileName);
		if (input != null) {
			var p = ParserState.new(fileName, input, ErrorGen.new(1), SpecParser.skipSpaces, null);
			if (p.optN("//") >= 0 && p.opt1('@') >= 0) return newTestCase(fileName, p);
		}
		return null;
	}
	def newTestCase(fileName: string, p: ParserState) -> TestCase {
		if (p.optN("seman") >= 0) return SemanTestCase.new(fileName, p, true);
		if (p.optN("parse") >= 0) return SemanTestCase.new(fileName, p, false);
		if (p.optN("execute") >= 0) return ExecuteTestCase.new(fileName, p);
		return null;
	}
	def loadProgram(testCase: TestCase, verify: bool, init: bool) -> Compiler {
		var prog = V3.newProgram();
		var error = ErrorGen.new(1);
		var compiler = Compiler.new(null, prog, error, null);
		compiler.setInput(testCase.fileName, testCase.input);
		compiler.skipVerify = !verify;
		compiler.skipInit = !init;
		compiler.compile();
		return compiler;
	}
}

class TestCase {
	def fileName: string;
	def input: Array<byte>;

	new(fileName, input) { }
	def run() -> bool;
	def report() -> string;
}

class SemanTestCase extends TestCase {
	var expected: string;
	var actual: string;
	var malformed: bool;
	var verify: bool;

	new(fileName: string, p: ParserState, verify: bool) : super(fileName, p.input) {
		this.verify = verify;
		if (p.opt1('=') >= 0) {
			var ex = SpecParser.parseException(p);
			if (ex != null) expected = ex.error;
			malformed = p.ERROR.numErrors > 0;
		}
	}
	def run() -> bool {
		if (malformed) return false;
		var compiler = Regression.loadProgram(this, verify, false);
		var error = compiler.ERROR;
		if (error.numErrors > 0) {
			actual = error.errors.head.toString();
			if (expected != null) {
				for (l = error.errors; l != null; l = l.tail) {
					if (matches(l.head)) {
						actual = expected;
						return true;
					}
				}
			}
			return false;
		}
		return expected == null;
	}
	def report() -> string {
		if (malformed) return "Semantic test is malformed";
		if (expected != actual) {
			var e = "pass";
			var a = "pass";

			if (expected != null) e = expected;
			if (actual != null) a = actual;

			return Strings.format2("expected %1, result: %2", e, a);
		}
		return "unknown error";
	}
	def matches(e1: Error) -> bool {
		if (e1 != null) return Strings.equal(e1.error, expected);
		return false;
	}
}

class ExecuteTestCase extends TestCase {
	var runs: List<ExecuteRun>;
	var malformed: bool;
	var errstring: string;

	new(fileName: string, p: ParserState) : super(fileName, p.input) {
		runs = SpecParser.parseRuns(p);
		malformed = p.ERROR.numErrors > 0;
		if (malformed) errstring = p.ERROR.errors.head.toString();
	}
	def run() -> bool {
		if (malformed) return false;
		var compiler = Regression.loadProgram(this, true, true);
		var error = compiler.ERROR;
		if (error.numErrors > 0) {
			errstring = error.errors.head.toString();
			return false;
		}
		var main = compiler.getMain();
		if (main == null) {
			errstring = "Could not find main method";
			return false;
		}
		var delegate = Delegate.new(Values.BOTTOM, main);
		var rlist = runs;
		while (rlist != null) {
			var run = rlist.head;
			var invoker = compiler.getInterpreter();
			run.result = invoker(delegate, Lists.toArray(run.input));
			if (!run.check()) { errstring = run.errstring; return false; }
			rlist = rlist.tail;
		}
		return true;
	}
	def report() -> string {
		return errstring; 
	}
}

class ExecuteRun {
	def input: List<Val>;
	def expected: Result;
	var result: Result;
	var errstring: string;

	new(input, expected) { }

	def check() -> bool {
		var success = false;
		if (expected == result) {
			success = true;
		} else if (Val.?(expected)) {
			if (result == null || Val.?(result)) success = Values.equal(Val.!(expected), Val.!(result));
			else success = false;
		} else if (Exception.?(expected)) {
			if (Exception.?(result)) success = Strings.equal((Exception.!(expected)).error, (Exception.!(result)).error);
			else success = false;
		}
		if (!success) {
			var buffer = Strings.toBuffer("(");
			var l = input;
			while (l != null) {
				V3.renderResult(l.head, buffer);
				if (l.tail != null) buffer.puts(", ");
				l = l.tail;
			}
			buffer.puts(")=");
			V3.renderResult(result, buffer);
			buffer.puts(", expected: ");
			V3.renderResult(expected, buffer);
			errstring = buffer.toString();
		}
		return success;
	}
}

component SpecParser {
	def parseRuns(p: ParserState) -> List<ExecuteRun> {
		if (p.curByte == '=') { // one run, no input
			p.advance(1);
			var result: Result;
			if (p.opt1('!') >= 0) result = parseException(p);
			else result = parseVal(p);
			return List.new(ExecuteRun.new(null, result), null);
		}
		return parseList(p, ';', '\n', parseRun);
	}
	def parseRun(p: ParserState) -> ExecuteRun {
		var vals: List<Val>;
		if (p.opt1('(') >= 0) vals = parseList(p, ',', ')', parseVal);
		else vals = List.new(parseVal(p), null);
		p.req1('=');
		var result: Result;
		if (p.opt1('!') >= 0) result = parseException(p);
		else result = parseVal(p);
		return ExecuteRun.new(vals, result);
	}
	def parseVal(p: ParserState) -> Val {
		match (p.curByte) {
			'-':  return parseF(p, "negative integer", Int.parseNegDecimal);
			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9': return parseF(p, "positive integer", Int.parsePosDecimal);
			'\'': return parseF(p, "character literal", Byte.parseByte);
			't':  if (p.optN("true") >= 0) return Bool.TRUE;
			'f':  if (p.optN("false") >= 0) return Bool.FALSE;
		}
		p.error("invalid value");
		return null;
	}
	def parseException(p: ParserState) -> Exception {
		var end = p.plus(0, isAlpha);
		if (end >= 0) return Exception.new(p.token(end - p.curPos).image, null, null);
		return null;
	}
	def parseF<T>(p: ParserState, msg: string, lex: (Array<byte>, int) -> Parsed<T>) -> Val {
		var parsed = lex(p.input, p.curPos);
		if (parsed.passed) {
			p.advance(parsed.length);
			return Box.new(parsed.val);
		}
		p.error(msg);
		p.advance(parsed.length);
		return null;
	}
	def isAlpha(ch: byte) -> bool {
		return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');
	}
	def parseList<T>(p: ParserState, sep: byte, end: byte, parse: ParserState -> T) -> List<T> {
		var vals: List<T>;
		while (p.curPos < p.input.length) {
			vals = List.new(parse(p), vals);
			if (p.opt1(end) >= 0) break;
			if (p.opt1(sep) < 0) {
				p.error("invalid start of value"); // TODO: better error message
				break;
			}
		}
		return Lists.reverse(vals);
	}
	def skipSpaces(p: ParserState) {
		var curPos = p.curPos, curCol = p.curCol;
		var input = p.input, max = input.length;
		while (curPos < max) {
			match (input(curPos)) {
				'\t': { curCol = 1 + ((curCol + 8) / 8) * 8; }
				' ' : { curCol++; }
			} else break;
			curPos++;
		}
		p.setPos(curPos, p.curLine, curCol);
	}
}
