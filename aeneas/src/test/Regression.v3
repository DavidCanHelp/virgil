// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility for regression testing.
class Regression {
	def PASS = 0;
	def FAIL = 1;
	def SKIP = 2;
	var testList: List<TestCase>;
	var skipList: List<string>;
	var progress: ProgressPrinter;
	var expectMap: Map<string, int> = Strings.newMap();
	var parseCompiler = Compiler.new(null);
	var semanCompiler = Compiler.new(null);
	var executeCompiler = Compiler.new(null);

	new() {
		parseCompiler.VstVerify = false;
		parseCompiler.VstInit = false;
		semanCompiler.VstInit = false;
	}

	def run(args: Array<string>) -> bool {
		var progressLevel = Aeneas.VERBOSE.get(), gcFile = -1;

		if (progressLevel > 2) progressLevel = 2;
		if (Aeneas.EXPECT.get() != null) parseExpectFile(Aeneas.EXPECT.get());

		if (Aeneas.TEST_GC.get().length > 0) {
			gcFile = System.fileOpen(Aeneas.TEST_GC.get(), false);
			if (gcFile < 0) {
				Terminal.put1("could not create gc output file %1", Aeneas.TEST_GC.get());
				return false;
			}
		}

		for (a in args) {
			if (a.length > 0) {
				var testCase = parseTest(a);
				if (testCase != null) {
					testList = List.new(testCase, testList);
					testCase.gcFile = gcFile;
				}
				else skipList = List.new(a, skipList);
			}
		}
		testList = Lists.reverse(testList);
		progress = ProgressPrinter.new(Lists.length(testList), progressLevel);
		Lists.apply(testList, runTest);
		if (gcFile > 0) System.fileClose(gcFile);

		if (skipList != null) {
			var len = Lists.length(skipList);
			if (len == 1) Terminal.put("1 file skipped\n");
			else Terminal.put1("%1 files skipped\n", len);
		}

		progress.report();
		for (slist = skipList; slist != null; slist = slist.tail) {
			Terminal.put(slist.head);
			Terminal.put(" - skipped\n");
		}

		return progress.failed > 0;
	}
	def runTest(testCase: TestCase) {
		var expect = expectMap[testCase.fileName];
		if (expect != SKIP) {
			progress.begin(testCase.fileName);
			if (testCase.run()) {
				if (expect == PASS) progress.pass();
				if (expect == FAIL) progress.unexpectedPass();
			} else {
				if (expect == PASS) progress.fail(testCase.report());
				if (expect == FAIL) progress.expectedFail(testCase.report());
			}
		}
	}
	def parseExpectFile(fileName: string) -> bool {
		var file = System.fileLoad(fileName);
		if (file == null) {
			Terminal.put("Expect file not found: ");
			Terminal.put(fileName);
			Terminal.ln();
			return false;
		}
		var i = 0;
		while (i < file.length) {
			if (file[i] == '#') {
				var s = i + 1;
				expectMap[Arrays.range(file, s, i - 1)] = SKIP;
				i = nextLine(file, i);
			}
			var s = i;
			i = nextLine(file, i);
			expectMap[Arrays.range(file, s, i - 1)] = FAIL;
		}
		return true;
	}
	def nextLine(arr: Array<byte>, i: int) -> int {
		while (i < arr.length && arr[i] != '\n') i++;
		return i + 1;
	}
	def parseTest(fileName: string) -> TestCase {
		var input = System.fileLoad(fileName);
		if (input != null) {
			var f = ParsedFile.new(fileName, input);
			var p = ParserState.new(f, ErrorGen.new(1), SpecParser.skipSpaces, null);
			if (p.optN("//") >= 0 && p.opt1('@') >= 0) return newTestCase(fileName, p);
		}
		return null;
	}
	def newTestCase(fileName: string, p: ParserState) -> TestCase {
		if (p.optN("seman") >= 0) return SemanTestCase.new(fileName, p, semanCompiler);
		if (p.optN("parse") >= 0) return SemanTestCase.new(fileName, p, parseCompiler);
		if (p.optN("execute") >= 0) return ExecuteTestCase.new(fileName, p, executeCompiler);
		return null;
	}
}

class TestCase(fileName: string, input: Array<byte>, compiler: Compiler) {
	var gcFile: int;

	def run() -> bool;
	def report() -> string;
	def compile() -> Program {
		var prog = Program.new();
		prog.setInput(fileName, input);
		compiler.compile(prog);
		return prog;
	}
}

class SemanTestCase extends TestCase {
	var expected: string;
	var actual: string;
	var malformed: bool;

	new(fileName: string, p: ParserState, compiler: Compiler) super(fileName, p.input, compiler) {
		if (p.opt1('=') >= 0) {
			var ex = SpecParser.parseException(p);
			if (ex != null) expected = ex.error;
			malformed = p.ERROR.numErrors > 0;
		}
	}
	def run() -> bool {
		if (malformed) return false;
		var prog = compile(), error = prog.ERROR;

		if (error.numErrors > 0) {
			if (expected != null) {
				for (l = error.errors; l != null; l = l.tail) {
					if (matches(l.head)) {
						actual = expected;
						return true;
					}
				}
			}
			actual = error.errors.head.toString();
			return false;
		}
		return expected == null;
	}
	def report() -> string {
		if (malformed) return "Semantic test is malformed";
		if (expected != actual) {
			def pass = "pass";
			var e = if (expected != null, expected, pass);
			var a = if (actual != null, actual, pass);
			return Strings.format2("expected %1, result: %2", e, a);
		}
		return "unknown error";
	}
	def matches(e1: Error) -> bool {
		if (e1 != null) return Strings.equal(e1.error, expected);
		return false;
	}
}

def DEFAULT_HEAP_SIZE = 1024;
class ExecuteTestCase extends TestCase {
	var runs: List<ExecuteRun>;
	var heapSize = if(Aeneas.HEAP_SIZE.get() > DEFAULT_HEAP_SIZE, Aeneas.HEAP_SIZE.get(), DEFAULT_HEAP_SIZE);
	var malformed: bool;
	var exception: bool;
	var errstring: string;

	new(fileName: string, p: ParserState, compiler: Compiler) super(fileName, p.input, compiler) {
		SpecParser.parseTestCase(this, p.reset());
		malformed = p.ERROR.numErrors > 0;
		if (malformed) errstring = p.ERROR.errors.head.toString();
	}
	def run() -> bool {
		if (malformed) return false;
		var prog = compile(), error = prog.ERROR;

		if (error.numErrors > 0) {
			errstring = error.errors.head.toString();
			return false;
		}
		var main = prog.getMain();
		if (main == null) {
			errstring = "Could not find main method";
			return false;
		}
		var closure = Closure.new(Values.BOTTOM, main);
		var invoker = compiler.getInterpreter(prog);
		var before = prog.recordCount; // count number of records allocated
		for (l = runs; l != null; l = l.tail) {
			var run = l.head;
			run.result = invoker(closure, Lists.toArray(run.input));
			exception = bool.||(exception, Exception.?(run.result));
			if (!run.check(prog)) { errstring = run.errstring; return false; }
		}
		if (gcFile >= 0 && prog.recordCount > (before + 1)) {
			// if more than one record was allocated, consider this a GC test
			System.fileWriteK(gcFile, fileName, 0, fileName.length);
			System.fileWriteK(gcFile, "\n", 0, 1);
		}
		return if(Aeneas.TEST_ST.get() && exception, reportStacktraces(compiler, prog), true);
	}
	def report() -> string {
		return errstring; 
	}
	def reportStacktraces(compiler: Compiler, prog: Program) -> bool {
		// test throws an expected exception, record stacktraces to a file
		var out = compiler.getOutputFileName(Strings.baseName(fileName), "st");
		var fd = System.fileOpen(out, false), buf = StringBuffer.new();
		if (fd >= 0) {
			var mainType = prog.getMain().getReturnType();
			for (l = runs; l != null; l = l.tail) {
				buf.reset();
				var run = l.head;
				buf.puts("//@stacktrace");
				buf.putc(if(Exception.?(run.result), '\n', '='));
				V3.renderResult(run.result, mainType, buf);
				buf.putc('\n');
				System.fileWriteK(fd, buf.buffer, 0, buf.length);
			}
			System.fileClose(fd);
			return true;
		} else {
			errstring = Strings.format1("could not create stacktrace file %1", out);
			return false;
		}
	}
}

class ExecuteRun(input: List<Val>, expected: Result) {
	var result: Result;
	var errstring: string;

	def check(prog: Program) -> bool {
		var success = false;
		if (expected == result) {
			success = true;
		} else if (Val.?(expected)) {
			if (result == null || Val.?(result)) success = Values.equal(Val.!(expected), Val.!(result));
			else success = false;
		} else if (Exception.?(expected)) {
			if (Exception.?(result)) success = Strings.equal((Exception.!(expected)).error, (Exception.!(result)).error);
			else success = false;
		}
		if (!success) {
			var buffer = Strings.toBuffer("(");
			for (l = input; l != null; l = l.tail) {
				V3.renderResult(l.head, null, buffer);
				if (l.tail != null) buffer.puts(", ");
			}
			buffer.puts(")=");
			V3.renderResult(result, null, buffer);
			buffer.puts(", expected: ");
			V3.renderResult(expected, null, buffer);
			errstring = buffer.toString();
		}
		return success;
	}
}

component SpecParser {
	def parseFile(error: ErrorGen, fileName: string, input: Array<byte>) -> ExecuteTestCase {
		var f = ParsedFile.new(fileName, input);
		var p = ParserState.new(f, error, skipSpaces, null);
		return ExecuteTestCase.new(fileName, p, null);
	}
	def parseTestCase(e: ExecuteTestCase, p: ParserState) {
		if (p.optN("//@execute") < 0) {
			return p.error("Could not parse execute test case");
		}
		e.runs = parseRuns(p);
		p.opt1('\n');
		if (p.optN("//@heap-size=") > 0) {
			var size = Int.parsePosDecimal(p.input, p.curPos);
			if (size.passed) e.heapSize = size.val;
			else p.error("Could not parse heap size in test case");
		}
	}
	def parseRuns(p: ParserState) -> List<ExecuteRun> {
		if (p.curByte == '=') { // one run, no input
			p.advance1();
			var result: Result;
			if (p.opt1('!') >= 0) result = parseException(p);
			else result = parseVal(p);
			return List.new(ExecuteRun.new(null, result), null);
		}
		return parseList(p, ';', '\n', parseRun);
	}
	def parseRun(p: ParserState) -> ExecuteRun {
		var vals: List<Val>;
		if (p.opt1('(') >= 0) vals = parseList(p, ',', ')', parseVal);
		else vals = List.new(parseVal(p), null);
		p.req1('=');
		var result: Result;
		if (p.opt1('!') >= 0) result = parseException(p);
		else result = parseVal(p);
		return ExecuteRun.new(vals, result);
	}
	def parseVal(p: ParserState) -> Val {
		match (p.curByte) {
			'-' =>  return parseF(p, "negative integer", Int.parseNegDecimal);
			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9' => return parseF(p, "positive integer", Int.parsePosDecimal);
			'\'' => return parseF(p, "character literal", Byte.parseByte);
			't' =>  if (p.optN("true") >= 0) return Bool.TRUE;
			'f' =>  if (p.optN("false") >= 0) return Bool.FALSE;
		}
		p.error("invalid value");
		return null;
	}
	def parseException(p: ParserState) -> Exception {
		var end = p.plus(0, isAlpha);
		if (end >= 0) return Exception.new(p.token(end - p.curPos).image, null, null);
		return null;
	}
	def parseF<T>(p: ParserState, msg: string, lex: (Array<byte>, int) -> Parsed<T>) -> Val {
		var parsed = lex(p.input, p.curPos);
		if (parsed.passed) {
			p.advance(parsed.length);
			return Box<int>.new(int.!(parsed.val));
		}
		p.error(msg);
		p.advance(parsed.length);
		return null;
	}
	def isAlpha(ch: byte) -> bool {
		return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');
	}
	def parseList<T>(p: ParserState, sep: byte, end: byte, parse: ParserState -> T) -> List<T> {
		var vals: List<T>;
		while (p.curPos < p.input.length) {
			vals = List.new(parse(p), vals);
			if (p.opt1(end) >= 0) break;
			if (p.opt1(sep) < 0) {
				p.error("invalid start of value"); // TODO: better error message
				break;
			}
		}
		return Lists.reverse(vals);
	}
	def skipSpaces(p: ParserState) {
		var curPos = p.curPos, curCol = p.curCol;
		var input = p.input, max = input.length;
		while (curPos < max) {
			match (input[curPos]) {
				'\t' => { curCol = 1 + ((curCol + 8) / 8) * 8; }
				' ' => { curCol++; }
			} else break;
			curPos++;
		}
		p.setPos(curPos, p.curLine, curCol);
	}
}
