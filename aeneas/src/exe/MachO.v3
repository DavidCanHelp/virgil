// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Constants for the MachO binary format.
component MachO {
	def MH_MAGIC_32 = 0xFEEDFACE;
	def MH_MAGIC_64 = 0xFEEDFACF;

	// filetype field of mach header
	def MH_OBJECT		= 0x1; // relocatable object file 
	def MH_EXECUTE		= 0x2; // demand paged executable file 
	def MH_FVMLIB		= 0x3; // fixed VM shared library file 
	def MH_CORE		= 0x4; // core file 
	def MH_PRELOAD		= 0x5; // preloaded executable file 
	def MH_DYLIB		= 0x6; // dynamically bound shared library 
	def MH_DYLINKER		= 0x7; // dynamic link editor 
	def MH_BUNDLE		= 0x8; // dynamically bound bundle file 
	def MH_DYLIB_STUB	= 0x9; // shared library stub for static 
	// linking only, no section contents 
	def MH_DSYM		= 0xa; // companion file with only debug 
	// sections 
	def MH_KEXT_BUNDLE	= 0xb; // x86_64 kexts 

	// CPU types
	def CPU_TYPE_X86	= 0x00000007; // 7
	def CPU_TYPE_X86_64	= 0x01000007;
	def CPU_TYPE_ARM	= 0x0000000C; // 12
	def CPU_TYPE_POWERPC	= 0x00000012; // 18
	def CPU_TYPE_POWERPC_64	= 0x01000012;

	// TODO: Mach-O CPU subtypes

	// constants for protections
	def VM_PROT_READ    = 0x01;
	def VM_PROT_WRITE   = 0x02;
	def VM_PROT_EXECUTE = 0x04;
	def VM_PROT_RW      = 0x03;
	def VM_PROT_RX      = 0x05;
	def VM_PROT_RWX     = 0x07;
}
// represents the header of a MachO binary.
class MachO_Header(is64: bool) {
	def cmds = Vector<MachO_LoadCmd>.new();
	var cputype: int;
	var cpusubtype: int;
	var totalsize: int = 28;
	var cmdsize: int;
	var filetype: int;
	var flags: int;

	// encodes the header (only) of a MachO binary
	def encode(u: DataEncoder) {
		if (is64) u.i4(MachO.MH_MAGIC_64);
		else u.i4(MachO.MH_MAGIC_32);
		u.i4(cputype);
		u.i4(cpusubtype);
		u.i4(filetype);
		u.i4(cmds.length);
		u.i4(cmdsize);
		u.i4(flags);
	}
	// encodes the commands into a MachO binary
	def encodeCmds(u: DataEncoder) {
		// XXX: cmds.apply(MachO_LoadCmd.encode(_, is64, u));
		for (i < cmds.length) cmds.get(i).encode(is64, u);
	}
	// add a command to this header
	def addCmd(cmd: MachO_LoadCmd) {
		cmd.cmdoffset = totalsize;
		cmds.add(cmd);
		var s = cmd.size(is64);
		cmdsize = cmdsize + s;
		totalsize = totalsize + s;
	}
}
// base of all load commands.
class MachO_LoadCmd {
	var cmdoffset: int;
	def encode(is64: bool, u: DataEncoder);
	def size(is64: bool) -> int;
}
// A load segment command
class MachO_SegmentLoad(segname: string) extends MachO_LoadCmd {
	var cmdsize: int = 56; // default size
	var vmaddr: int;
	var vmsize: int;
	var fileoff: int;
	var filesize: int;
	var maxprot: int;
	var initprot: int;
	var nsects: int;
	var flags: int;
	var sectList: List<MachO_Section>;

	def encode(is64: bool, u: DataEncoder) {
		if (is64) u.i4(0x19);
		else u.i4(0x1);
		u.i4(cmdsize);
		out16(u, segname);
		u.i4(vmaddr);
		u.i4(vmsize);
		u.i4(fileoff);
		u.i4(filesize);
		u.i4(maxprot);
		u.i4(initprot);
		u.i4(nsects);
		u.i4(flags);
		for (l = sectList; l != null; l = l.tail) {
			l.head.encode(is64, u, this);
		}
	}
	def size(is64: bool) -> int {
		return cmdsize;
	}
	def addSect(sect: MachO_Section) {
		cmdsize = cmdsize + 68;
		nsects++;
		sectList = List.new(sect, sectList);
	}
	def out16(u: DataEncoder, str: string) {
		if (str.length > 16) {
			u.iK(str, 0, 16);
		} else {
			u.iN(str);
			u.zeroN(16 - str.length);
		}
	}
}
// A section within a segment
class MachO_Section(sectname: string, segname: string) {
	var addr: int;
	var size: int;
	var offset: int;
	var align: int;
	var reloff: int;
	var nreloc: int;
	var flags: int;
	var reserved1: int;
	var reserved2: int;

	def encode(is64: bool, u: DataEncoder, seg: MachO_SegmentLoad) {
		seg.out16(u, sectname);
		seg.out16(u, segname);
		u.i4(addr);
		u.i4(size);
		u.i4(offset);
		u.i4(align);
		u.i4(reloff);
		u.i4(nreloc);
		u.i4(flags);
		u.i4(reserved1);
		u.i4(reserved2);
	}
}

