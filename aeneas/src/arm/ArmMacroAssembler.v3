// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// An extended ArmAssembler that has additional machine-level utilities, such as
// recording patch locations and translating between regset locations and arm
// registers/memory.
class ArmMacroAssembler extends ArmAssembler {
	def mach: MachProgram;		  // machine program
	def machEncoder: MachDataEncoder; // machine-level encoder
	def codeStartOffset: int;

	new(mach, machEncoder, codeStartOffset) super(machEncoder) { }
	def codeOffset() -> int {
		return encoder.pos - codeStartOffset;
	}
	// call an absolute address and record the patch location
	def call_addr(addr: Addr) {
		// TODO: call(ArmAddrs.REL_CONST);
		// TODO: machEncoder.recordPatch(addr, machEncoder.pos - 4);
	}
	// jump (conditionally) to an absolute address and record the patch location
	def jmpx_addr(cond: ArmCond, addr: Addr) {
		// TODO: jmpx(cond, ArmAddrs.REL_CONST);
		// TODO: machEncoder.recordPatch(addr, machEncoder.pos - 4);
	}
	// convert a location into an arm register
	def loc_r(frame: MachFrame, loc: int) -> ArmReg {
		match (loc) {
			ArmMachRegs.R0 => return ArmReg.R0;
			ArmMachRegs.R1 => return ArmReg.R1;
			ArmMachRegs.R2 => return ArmReg.R2;
			ArmMachRegs.R3 => return ArmReg.R3;
			ArmMachRegs.R4 => return ArmReg.R4;
			ArmMachRegs.R5 => return ArmReg.R5;
			ArmMachRegs.R6 => return ArmReg.R6;
			ArmMachRegs.R7 => return ArmReg.R7;
			ArmMachRegs.R8 => return ArmReg.R8;
			ArmMachRegs.R9 => return ArmReg.R9;
			ArmMachRegs.R10 => return ArmReg.R10;
			ArmMachRegs.R11 => return ArmReg.R11;
			ArmMachRegs.R12 => return ArmReg.R12;
		}
		return failLocation("required arm register", loc, frame.conv.regSet);
	}
	def failLocation(msg: string, loc: int, regSet: MachRegSet) -> ArmReg {
		mach.fail(Strings.format2("%1: %2", msg, regSet.identify(loc)));
		return ArmReg.R0;
	}
	def jmpl_near(cond: ArmCond, label: Label) {
		// TODO: 
	}
	def bind(label: Label) {
		label.pos = pos();
		for (l = label.near_uses; l != null; l = l.tail) {
			// TODO: encoder.at(l.head - 1).i1(byte.!(label.pos) - l.head);
		}
		encoder.atEnd();
	}
}
