// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Base class for runtime systems on arm, such as arm-darwin, arm-linux, etc
class ArmRuntime extends MachRuntime {
	def context: SsaContext;
	def test: bool;

	def PAGE_SIZE = 4096;
	def debugMach = Aeneas.PRINT_MACH.get();
	var allocator: ArmAllocator;
	var header: MachO_Header;
	new(context, test, mach: MachProgram) super(mach) {
		allocator = ArmAllocator.new(mach, Aeneas.RT_GC.get(), Aeneas.RT_TEST_GC.get());
	}

	def emit();
	def pageAlign(v: int) -> int {
		return (v + PAGE_SIZE - 1) & (-1 ^ (PAGE_SIZE - 1));
	}
	def genArmCode(irm: IrMethod, asm: ArmMacroAssembler) {
		var gen = ArmCodeGen.new(mach, context.enterMethod(irm));
		if (debugMach) IrPrinter.new(context.prog).printMethodName(irm, null);
		var methodStart = asm.machEncoder.endAddr();
		gen.genCode(asm);
		if (Aeneas.PRINT_BIN.get()) {
			printBin(irm, methodStart, asm);
		} else if (Aeneas.PRINT_SIZE.get()) {
			var size = asm.machEncoder.endAddr() - methodStart;
			Terminal.put2("%1: %2\n", irm.renderLong, size);
		}
		if (Aeneas.PRINT_CFG.get()) {
			var buf = StringBuffer.new();
			irm.renderLong(buf);
			buf.puts(": ").puti(gen.blocks.order.length);
			Terminal.putbln(buf);
			gen.blocks.print();
		}
	}
	def printBin(irm: IrMethod, methodStart: int, asm: ArmMacroAssembler) {
		var size = asm.machEncoder.endAddr() - methodStart;
		var buf = StringBuffer.new();
		irm.renderLong(buf).puts(": ").puti(size).ln();
		var line = 16;
		for (i = 0; i < size; i = i + line) {
			buf.puts("  0x").putx(methodStart + i);
			buf.puts(": ");
			var a = asm.machEncoder.array;
			var start = asm.machEncoder.max - size + i;
			var end = start + line;
			if (end > asm.machEncoder.max) end = asm.machEncoder.max;
			for (i = start; i < end; i++) {
				buf.appendHexByte(a(i));
				buf.sp();
			}
			buf.ln();
		}
		Terminal.putbln(buf);
	}
	def genTestInputs(main: IrMethod, asm: ArmMacroAssembler, frame: MachFrame) {
		// TODO: "argc" is on the top of the stack on arm-linux ?
		// TODO: asm.movd_r_rm(ArmRegs.EBX, ArmRegs.ESP.indirect()); // load "argc"
		var params = main.ssa.params, conv = frame.conv;
		var vals = parseTestInputs(params.length - 1), u = MachDataEncoder.!(asm.encoder);
		if (conv.overflow > 0) {
			// allocate space for overflow arguments
			// TODO: asm.sub.rm_i(ArmRegs.ESP, conv.overflow * mach.data.addressSize);
		}
		for (i < conv.paramLocs.length) {
			// TODO: load argument values
		}
	}
	def parseTestInputs(expected: int) -> Array<Array<Val>> {
		// XXX: factor this route out into the regression harness
		var prog = context.prog;
		var f = ParsedFile.new(prog.files(0), prog.inputs(0));
		var p = ParserState.new(f, context.ERROR, SpecParser.skipSpaces, null);
		if (p.optN("//@execute") < 0) {
			p.error("Could not parse execute test case");
			return [];
		}
		var runs = Lists.toArray(SpecParser.parseRuns(p));
		var result = Array<Array<Val>>.new(runs.length);
		for (i < runs.length) {
			result(i) = Lists.toArray(runs(i).input);
		}
		p.opt1('\n');
		if (p.optN("//@heap-size=") > 0) {
			var size = Int.parsePosDecimal(p.input, p.curPos);
			if (size.passed) heapSize = size.val;
			else p.error("Could not parse heap size in test case");
		} else {
			heapSize = 1024; // by default, give each test at least 1k heap
		}
		return result;
	}
	def genSigInstalls(asm: ArmAssembler) {
		genSigHandlerInstall(asm, 8, getFatalAddress(V3Exception.DivideByZero));
		genSigHandlerInstall(asm, 10, getFatalAddress(V3Exception.NullCheck));
		genSigHandlerInstall(asm, 11, getFatalAddress(V3Exception.NullCheck));
	}
	def genMainInit(asm: ArmMacroAssembler, frame: MachFrame) {
		// call RiRuntime.init() if it exists
		if (ri_init != null) return genRiInit(asm, frame);
		// if this is a test, install custom signal handlers
		if (test) return genSigInstalls(asm);
		// TODO: remove compiler-generated initialization of args
		if (frame.conv.paramTypes.length <= 1) return; // don't bother, main doesn't use it

		// ======================================================================
		// TODO: initialize arg array from OS-supplied argv and envp
		// ======================================================================
	
	}
	def genRiInit(asm: ArmMacroAssembler, frame: MachFrame) {
		// generate a call to the RiRuntime.init() method
		var init_meth = ri_init.spec.asMethod();
		var addr = mach.layout.addrOfMethod(init_meth);
		var frame = getFrame(init_meth.ssa), conv = frame.conv;

		// ======================================================================
		// TODO: call runtime initialization function from entry stub
		// ======================================================================

	}
	def asmArrayAlloc(asm: ArmAssembler, arrayType: Type, dest: ArmReg, len: ArmReg) {
		// ======================================================================
		// TODO: inline assembly for allocating arrays
		// ======================================================================
	}
	def asmAlloc(asm: ArmAssembler, reg: ArmReg) {
		// ======================================================================
		// TODO: inline assembly for allocating
		// ======================================================================
	}
	def recordPatch(asm: ArmAssembler, addr: Addr) {
		MachDataEncoder.!(asm.encoder).recordPatch(addr, asm.pos() - 4);
	}
	def getExceptionDest(off: int, ex: string, source: Source) -> Addr {
		if (src != null) {
			// allocate a unique, unmapped address
//			if (debug) src.debugPoint("throw", ex, off, source, src.frameSlots());
			return src.newExceptionDest(ex, source);
		}
		return getFatalAddress(ex);
	}
	def addRoots(add: IrSpec -> RaRoot) {
		var typeCon = context.prog.typeEnv.lookup("RiRuntime");
		if (V3Component_TypeCon.?(typeCon)) {
			// some RiRuntime methods are called by compiled code
			var ctype = V3Component_TypeCon.!(typeCon).componentDecl.getDeclaredType();
			var ic = context.prog.ir.getIrClass(ctype);
			for (meth in ic.methods) {
				if (meth == null) continue;
				var name = meth.source.name();
				if (Aeneas.RT_GC.get() && Strings.equal(name, "gc")) ri_gc = addRoot(add, ctype, meth);
				else if (Strings.equal(name, "init")) ri_init = addRoot(add, ctype, meth);
				else if (Strings.equal(name, "signal")) ri_signal = addRoot(add, ctype, meth);
			}
		}
	}
	private def addRoot(add: IrSpec -> RaRoot, ctype: Type, meth: IrMethod) -> RaRoot {
		return add(IrSpec.new(ctype, [ctype], meth));
	}
	def genMainStub(asm: ArmMacroAssembler) {
		var main = context.prog.ir.mainMethod.asMethod();
		var frame = getFrame(main.ssa);
		// initialize runtime if necessary
		genMainInit(asm, frame);
		if (test) genTestInputs(main, asm, frame);
		// call main
		// TODO: asm.call_addr(mach.layout.addrOfMethod(main));
		// write return value to stdout if this is a test
		if (test) genTestOutput(asm, frame);
		// exit with the return value of main
		if (main.returnType == Void.TYPE) return asm_exit_code(asm, 0);
		asm_exit_r(asm, asm.loc_r(frame, frame.conv.callerRet(0)));
	}
	def getFrame(ssa: SsaGraph) -> MachFrame {
		var frame = MachFrame.new(ArmVirgilCallConv.getForGraph(ssa));
		frame.frameSize = mach.data.addressSize;
		return frame;
	}
	def patchCodeAddr(u: DataEncoder, a: Addr, posAddr: int, pos: int) {
		var abs = mach.layout.absolute(a);
		if (debugMach) {
			var buf = Strings.toBuffer("patch-code @ ").putx(posAddr).puts(" <- ");
			context.prog.renderResult(a, null, buf);
			buf.puts(" = ").putx(abs);
			Terminal.putbln(buf);
		}
		if (u.array(pos) == 0x05) {
			// encode a RIP-relative address
			abs = abs - (posAddr + 4);
		}
		u.at(pos).i4le(abs);
	}

	// abstract methods
	def genSigHandlerInstall(asm: ArmAssembler, signo: int, handler: Addr);
	def asm_exit_code(asm: ArmAssembler, code: int);
	def asm_exit_r(asm: ArmAssembler, loc: ArmReg);
	def genTestOutput(asm: ArmMacroAssembler, frame: MachFrame);
}
// Handles assembly-level details of allocating memory on arm.
class ArmAllocator {
	def mach: MachProgram;
	def stub: bool;
	def alwaysGc: bool;
	var objLoc: int;
	var sizeLoc: int;
	var allocStubAddr: Addr;
	var frame: MachFrame;
	var gcmeth: IrMethod;

	new(mach, stub, alwaysGc) { }
	def init(getFrame: SsaGraph -> MachFrame) {
		if (!stub) return;
		// initialize locations based on calling convention to RiRuntime.gc()
		allocStubAddr = Address.new(mach.layout.codeRegion, "alloc_stub");
		var ri_gc = mach.runtime.ri_gc;
		if (ri_gc != null) {
			// call the RiRuntime.gc() method
			gcmeth = ri_gc.spec.asMethod();
			frame = getFrame(gcmeth.ssa);
			objLoc = frame.conv.calleeRet(0);
			sizeLoc = frame.conv.calleeParam(1); // param 0 = "this"
		} else {
			// there is no appropriate RiRuntime.gc() method
			// TODO: objLoc = ArmMachRegs.R0;
			// TODO: sizeLoc = ArmMachRegs.R0;
		}
	}
	def gen_alloc(g: MachCodeGen, i: SsaApplyOp, mv: MachVar) {
		var gen = ArmCodeGen.!(g);
		var size = i.input0();
		if (stub) {
			// generate a call to the allocation stub
			gen.dfnAt(mv, objLoc);
			var lp = if(mach.runtime.gc != null, gen.livePoint());
			gen.kill(ArmMachRegs.ALL);
			gen.useAt(gen.makeVar(size), sizeLoc);
			gen.gen("alloc", asm_alloc_rt, (gen, lp, i.source));
		} else {
			// generate inlined (test) allocation
			gen.hint(size, mv);
			gen.gen("alloc", asm_alloc_test, (gen, gen.dfngpr(mv), gen.gpr(size), i.source));
		}
	}
	def asm_alloc_test(gen: ArmCodeGen, dest: int, sz: int, source: Source) {
		// TODO: exchange-add [CiRuntime.heapCurLoc] with size
	}
	def asm_alloc_rt(gen: ArmCodeGen, lp: int, source: Source) {
		// TODO: call a shared allocation stub routine
		var off = gen.asm.codeOffset();
		if (gen.rtgc != null) gen.rtgc.recordStackRefMap(off, source, gen.buildStackMap(off, null, lp));
		if (gen.rtsrc != null) gen.rtsrc.recordReturnSource(off, source);
	}
	def genAllocStub(asm: ArmMacroAssembler) {
		if (!stub) return;
		// generate the shared allocation routine
		allocStubAddr.absolute = asm.machEncoder.endAddr();
		var sizeReg = asm.loc_r(frame, sizeLoc);
	}
}
