// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def SPACE = AddressSpace.new("mem", false, 32, 4,
	Alignment.new(4096), Alignment.new(4));
def KERNEL_CALL_RETURN = Tuple.newType(Lists.cons2(Int.TYPE, Int.TYPE));
def LOWERING = MachLoweringConfig.new();
def ARM_LINUX_TARGET = register(
		LinuxTarget.new("arm-linux", SPACE, IntNormalizers.I32LE, LOWERING,
			ArmLinuxBackend.new(_, _, _, _, _, false), ElfConst.EM_ARM, KERNEL_CALL_RETURN));
def ARM_LINUX_TEST_TARGET = register(
		LinuxTarget.new("arm-linux-test", SPACE, IntNormalizers.I32LE, LOWERING,
			ArmLinuxBackend.new(_, _, _, _, _, true), ElfConst.EM_ARM, KERNEL_CALL_RETURN));

def register(t: Target) -> Target {
	if (false) Aeneas.registerTarget(t); // TODO: enable arm targets
	return t;
}

// Provides the arm-specific logic for generating a Linux binary.
class ArmLinuxBackend extends ArmBackend {
	new(compiler: Compiler, prog: Program, mach: MachProgram, w: MachDataWriter, d: Dwarf,
		test: bool) super(compiler, prog, mach, w, test) { }
}
