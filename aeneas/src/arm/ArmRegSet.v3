// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Register sets for Arm, used in register allocation.
component ArmMachRegs {
	def ALL = 1;
	def GPR = 1;
	def SP = ArmReg.R13;
	var regs: MachRegSet;

	new() {
		// TODO
		var rarray = Array<Array<byte>>.new(ALL + 1);
		rarray(0) = [];
		rarray(ALL) = [];
	}
}
// Defines the standard parameter and return registers for Arm calls between Virgil methods.
component ArmVirgilCallConv {
	private def compute(paramTypes: Array<Type>, returnTypes: Array<Type>) -> MachCallConv;
	def getForGraph(graph: SsaGraph) -> MachCallConv {
		// XXX: cache calling conventions by type for SSA graph
		return compute(Arrays.map(graph.params, SsaParam.vtype), Tuple.toTypeArray(graph.returnType));
	}
	def getForFunc(funcRep: Mach_FuncRep) -> MachCallConv {
		if (funcRep.callConv != null) return funcRep.callConv;
		return funcRep.callConv = compute(funcRep.paramTypes, funcRep.returnTypes);
	}
}
