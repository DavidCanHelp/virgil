// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.
component ArmComponent {
	new() {
//		Aeneas.registerTarget(ArmTarget.new("arm-linux-test", true, ArmLinux.new, LinuxModule.install));
//		Aeneas.registerTarget(ArmTarget.new("arm-linux", false, ArmLinux.new, LinuxModule.install));
	}
}
// common code for Arm targets
class ArmTarget extends Target {
	def test: bool;
	def makeRuntime: (SsaContext, bool, MachProgram) -> ArmRuntime;
	def installModule: Program -> void;

	new(name: string, test, makeRuntime, installModule) super(name) { }
	def emit(compiler: Compiler, prog: Program) {
		var rt = getRuntime(prog);
		rt.mach.build(compiler, MachLoweringConfig.new());
		rt.emit();
	}
	def configure(compiler: Compiler, prog: Program) {
		def space = AddressSpaces.MEM32LE;
		def intNorm = IntNormalizers.I32LE;
		var mach = MachProgram.new(prog, space, space, intNorm);
		var rt = makeRuntime(SsaContext.new(compiler, prog), test, mach);
		mach.runtime = rt;
		compiler.Reachability = true;
		MachModule.install(prog);
		installModule(prog);
		prog.typeEnv.add(rt.typeCon);
	}
	def computeFieldOffsets(prog: Program, b: Vector<IrField>, start: int) {
		getRuntime(prog).mach.computeFieldOffsets(prog, b, start);
	}
	def addRoots(compiler: Compiler, prog: Program, add: IrSpec -> RaRoot) {
		getRuntime(prog).addRoots(prog, add);
	}
	private def getRuntime(prog: Program) -> ArmRuntime {
		return ArmRuntime.!(CiRuntime_TypeCon.!(prog.typeEnv.lookup(CiRuntimeModule.NAME)).runtime);
	}
}
