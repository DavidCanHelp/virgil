// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Contains logic to generate a Linux executable (ELF) file.
class LinuxTarget extends Target {
	def space: AddressSpace;
	def intNorm: IntNormalizer;
	def newBackend: (Compiler, Program, MachProgram, MachDataWriter) -> MachBackend;
	def elf_machine: int;

	new(name: string, space, intNorm, newBackend, elf_machine) super(name) { }

	def configure(compiler: Compiler, prog: Program) {
		var mach = MachProgram.new(prog, space, space, intNorm);
		var rt = MachRuntime.new(mach);
		mach.runtime = rt;
		compiler.Reachability = true;
		MachModule.install(prog); // installs "Pointer" typecon
		LinuxModule.install(prog); // installs "Linux" component
		prog.typeEnv.add(rt.typeCon); // installs "CiRuntime" component (for RiRuntime code)
	}
	def computeFieldOffsets(prog: Program, b: Vector<IrField>, start: int) {
		getRuntime(prog).mach.computeFieldOffsets(prog, b, start);
	}
	def addRoots(compiler: Compiler, prog: Program) {
		getRuntime(prog).addRoots();
	}
	private def getRuntime(prog: Program) -> MachRuntime {
		return CiRuntime_TypeCon.!(prog.typeEnv.lookup(CiRuntimeModule.NAME)).runtime;
	}
	def emit(compiler: Compiler, prog: Program) {
		var rt = getRuntime(prog), mach = rt.mach;
		mach.build(compiler, MachLoweringConfig.new());

		// make an ELF file
		var elf = ElfHeader.new();
		elf.e_machine = elf_machine;
		var pageAlign = rt.codeRegion.space.pageAlign;

		// fill out the code section
		var code = elf.addProgramHeader();
		code.p_type = ElfConst.PT_LOAD;
		code.p_offset = 0;
		code.p_vaddr = LinuxModule.VADDR_START;
		code.p_filesz = pageAlign.size;
		code.p_memsz = pageAlign.size;
		code.p_flags = ElfConst.PF_RX;

		// ex segment for trapping explicit checks
		var ex = if(rt.src != null, elf.addProgramHeader());

		// fill out the data section
		var data = elf.addProgramHeader();
		data.p_type = ElfConst.PT_LOAD;
		data.p_filesz = pageAlign.size;
		data.p_memsz = pageAlign.size;
		data.p_flags = ElfConst.PF_RW;

		var w = MachDataWriter.new(rt.codeRegion.space.pageAlign,
			LinuxModule.VADDR_START, 300);

		w.skipN(int.!(elf.size()));
		elf.e_entry = w.posAddr();

		// emit code
		var backend = newBackend(compiler, prog, mach, w);
		elf.e_entry = w.endAddr();
		code.p_vaddr = w.endPageAddr();
		rt.recordCodeStart(int.!(elf.e_entry));
		backend.genAllCode();
		rt.recordCodeEnd(w.endAddr());
		mach.layoutMeta(w);
		mach.layoutRuntime(w);
		code.p_filesz = w.end();
		code.p_memsz = pageAlign.alignUp64(code.p_filesz);
		code.p_offset = 0;

		// generate the unmapped "ex" region for trapping explicit checks
		if (ex != null) {
			w.skipPage();
			var exStart = w.endPageAddr();
			var exSize = pageAlign.alignUp(rt.src.layoutExRegion(exStart));
			w.startAddr = w.startAddr + exSize;
			ex.p_vaddr = exStart;
			ex.p_memsz = exSize;
			ex.p_filesz = 0;
			ex.p_offset = 0;
		}

		// emit data
		w.skipPage();
		w.atEnd().align(mach.data.addressSize);
		data.p_vaddr = w.endPageAddr();
		data.p_offset = data.p_vaddr - w.startAddr;
		rt.recordDataStart(w.endAddr());
		mach.layoutData(w);
		rt.recordDataEnd(w.endAddr());
		rt.addHeapPointers(w);
		data.p_filesz = w.end() - data.p_offset;
		data.p_memsz = pageAlign.alignUp64(data.p_filesz + int.view(rt.heapSize));

		// patch all addresses in the binary
		w.patch(backend.patchCodeAddr);

		// encode ELF header section
		elf.encode32(w.at(0));

		var file = compiler.getOutputFileName(prog.name(), null);
		var fd = System.fileOpen(file, false);
		if (fd < 0) return prog.ERROR.OutputError(file);
		// write the entire file from the buffer array
		System.fileWriteK(fd, w.data, 0, w.end());
		System.fileClose(fd);
		// change permissions to make binary executable
		compiler.makeExecutable(file);
	}
}
