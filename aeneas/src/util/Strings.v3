// Copyright 2010 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A component that contains a number of utility methods for manipulating
// strings, including hashing, comparing, etc.
component Strings {
	def hash(str: string) -> int {
		var hashval = str.length;
		for (c in str) hashval = hashval * 31 + c;
		return hashval;
	}
	def equal(arr1: string, arr2: string) -> bool {
		if (arr1 == arr2) return true;
		if (arr1.length != arr2.length) return false;
		for (i < arr1.length) {
			if (arr1[i] != arr2[i]) return false;
		}
		return true;
	}
	def strCmp(arr1: string, arr2: string) -> int {
		var idx = 0;
		var c1: int = '\x00', c2: int = '\x00';
		while (c1 == c2) {
			c1 = if (idx < arr1.length, arr1[idx], '\x00');
			c2 = if (idx < arr2.length, arr2[idx++], '\x00');
			if (c1 == '\x00') return c1 - c2;
		}

		return c1 - c2;
	}
	def newMap<V>() -> HashMap<string, V> {
		return HashMap.new(hash, equal);
	}
	// render an integer value as decimal into an array at the given position.
	// (there must be sufficient space at the end of the array)
	def renderDecimal(buf: Array<byte>, pos: int, val: int) -> int {
		if (val < 0) {
			// handle negative integers
			if (val == -2147483648) {
				// special case
				Arrays.copyInto("-2147483648", buf, pos);
				return pos + 11;
			}
			buf[pos++] = '-';
			val = 0 - val;
		}
		if (val < 10) {
			// most common case: small one-byte integer
			buf[pos] = Chars.hexMap_u[val];
			return pos + 1;
		} else if (val < 100) {
			// second most common case: two-byte integer
			buf[pos + 1] = Chars.hexMap_u[val % 10];
			buf[pos] = Chars.hexMap_u[val / 10];
			return pos + 2;
		} else {
			// convert decimal integer
			var nonZero = false;
			for (radix = 1000000000; radix > 0; radix = radix / 10) {
				var digit = val / radix;
				val = val % radix;
				if (digit != 0) nonZero = true;
				if (nonZero) buf[pos++] = Chars.hexMap_u[digit];
			}
			return pos;
		}
	}
	// render an integer as hexadecimal into the specified array
	def renderHex8(buf: Array<byte>, pos: int, val: int) -> int {
		var end = pos + 7;
		for (i < 8) {
			buf[end - i] = Chars.hexMap_u[val & 0xf];
			val = val >> 4;
		}
		return end + 1;
	}
	def render(render: StringBuilder -> StringBuilder) -> string {
		return render(StringBuilder.new()).toString();
	}
	def nop(buf: StringBuilder) -> StringBuilder {
		return buf;
	}
	def toBuffer(str: string) -> StringBuilder {
		return StringBuilder.new().puts(str);
	}
	def writeBuffer(fd: int, buf: StringBuilder) {
		System.fileWriteK(fd, buf.buf, 0, buf.length);
	}
	def format1<A>(fmt: string, a: A) -> string {
		return StringBuilder.new().put1(fmt, a).toString();
	}
	def format2<A, B>(fmt: string, a: A, b: B) -> string {
		return StringBuilder.new().put2(fmt, a, b).toString();
	}
	def format3<A, B, C>(fmt: string, a: A, b: B, c: C) -> string {
		return StringBuilder.new().put3(fmt, a, b, c).toString();
	}
	def makeFileName(dir: string, fileName: string, ext: string) -> string {
		var buf = StringBuilder.new();
		if (dir != null) {
			buf.puts(dir);
			if (dir[dir.length - 1] != '/') buf.putc('/');
		}
		buf.puts(fileName);
		if (ext != null) buf.putc('.').puts(ext);
		return buf.toString();
	}
	def baseName(fileName: string) -> string {
		var start = 0, end = fileName.length;
		// skip any path separators
		for (i < end) {
			if (fileName[i] == '/') start = i + 1; // TODO: UNIX specific path parsing
		}
		// skip file extension
		for (j = end - 1; j >= start; j--) {
			if (fileName[j] == '.') { end = j; break; }
		}
		return Arrays.range(fileName, start, end);
	}
	// Parse a double-quoted string constant in {a} at {pos},
	// returning a pair of status (# success characters if > 0) and the value.
	def parseLiteral(a: Array<byte>, pos: int) -> (int, string) {
		var max = a.length;
		if (pos >= max) return (0, null);
		if (a[pos] != '\"') return (0, null);
		var i = pos + 1, buf = StringBuilder.new();
		while (i < max) {
			var ch = a[i];
			if (ch < ' ' || ch > 127) return (pos - i, null);
			if (ch == '\'') return (pos - i, null);
			if (ch == '\"') return (1 + i - pos, buf.toString());
			var end = i + 2;
			if (ch == '\\') {
				var p = Chars.parseEscape(a, i + 1);
				if (p.0 <= 0) return (pos - i + p.0, null);
				else buf.putc(p.1);
				i = i + p.0;
			} else {
				buf.putc(ch);
			}
			i++;
		}
		return (pos - i, null);
	}
}
