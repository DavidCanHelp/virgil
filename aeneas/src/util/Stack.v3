// A mutable stack.
class Stack<T> {
	// push {val} onto the top of the stack
	def push(val: T);
	// peek at the top element of the stack
	def peek() -> T;
	// pop the top element off the stack
	def pop() -> T;
	// check if this stack is empty
	def empty() -> bool;
}
// Stack implementation using a list.
class ListStack<T> extends Stack<T> {
	def var top: List<T>;

	// push {val} onto the top of the stack
	def push(val: T) {
		top = List.new(val, top);
	}
	// peek at the top element of the stack
	def peek() -> T {
		return top.head;
	}
	// pop the top element off the stack
	def pop() -> T {
		var result = top.head;
		top = top.tail;
		return result;
	}
	// check if this stack is empty
	def empty() -> bool {
		return top == null;
	}
}
