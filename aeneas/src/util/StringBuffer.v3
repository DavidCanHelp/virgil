// Copyright 2020 Ben L. Titzer. All rights reserved.
// Copyright 2010 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A StringBuffer is a utility for building strings. It contains a number
// of methods for appending characters, integers, strings, or renderable
// functions (i.e. functions of type StringBuffer -> StringBuffer). It uses
// parameterized methods to allow calling formatX() methods with any type
// of arguments.
class StringBuffer {
	var buffer = Array<byte>.new(20); // TUNABLE: initial size of string buffer
	var length: int;

	// append a hexadecimal byte
	def putxb(ch: byte) -> this {
		acquire(2);
		var l = length;
		buffer[l] = Strings.hexMap[ch >> 4];
		buffer[l + 1] = Strings.hexMap[ch & 0xF];
		length = l + 2;
	}
	// append a boolean
	def putz(val: bool) -> this {
		var x = if(val, puts("true"),  puts("false"));
	}
	// append a char, escaping special characters
	def putesc(ch: byte) -> this {
		match (ch) {
			'\'' => puts("\\\'");
			'\"' => puts("\\\"");
			'\t' => puts("\\t");
			'\r' => puts("\\r");
			'\n' => puts("\\n");
			'\\' => puts("\\\\");
		} else if (ch <= '~' && ch >= ' ') {
			putc(ch);
		} else {
			// append a hex representation
			putc('\\');
			putc('x');
			putc(Strings.hexMap[ch >>> 4]);
			putc(Strings.hexMap[ch & 0xf]);
		}
	}
	// append a byte
	def putc(ch: byte) -> this {
		acquire(1);
		buffer[length++] = ch;
	}
	// append a string
	def puts(str: string) -> this {
		var max = str.length;
		acquire(max);
		var pos = length;
		for (i < max) buffer[pos + i] = str[i];
		length = pos + max;
	}
	// append an integer in decimal
	def puti(val: int) -> this {
		// check for common case of small, one-byte integer
		if (val >= 0 && val <= 9) {
			putc(Strings.hexMap[val]);
		} else {
			acquire(11);
			length = Strings.renderDecimal(buffer, length, val);
		}
	}
	// append an integer in 0x00000000 format
	def putx(val: int) -> this {
		acquire(10);
		buffer[length] = '0';
		buffer[length + 1] = 'x';
		Strings.renderHex8(buffer, length + 2, val);
		length = length + 10;
	}
	// append an integer in 00000000 format
	def putxn(val: int) -> this {
		acquire(8);
		Strings.renderHex8(buffer, length, val);
		length = length + 8;
	}
	// append a long in 0x0000000000000000 format
	// TODO: print longs in decimal format
	def putl(val: long) -> this {
		acquire(18);
		buffer[length] = '0';
		buffer[length + 1] = 'x';
		Strings.renderHex8(buffer, length + 2, int.!(val >> 32));
		Strings.renderHex8(buffer, length + 10, int.!(val));
		length = length + 18;
	}
	// append a comma-separated list
	def putlist<T>(list: List<T>, append: (T, StringBuffer) -> StringBuffer) -> this {
		if (list == null) return;
		append(list.head, this);
		for (l = list.tail; l != null; l = l.tail) {
			append(l.head, csp());
		}
	}
	// append a comma-separated list of array elements
	def puta<T>(array: Array<T>) -> this {
		for (i < array.length) {
			if (i > 0) csp();
			put(array[i]);
		}
	}
	// append a single item of type string|int|byte|bool|(StringBuffer -> StringBuffer)
	def put<A>(a: A) -> this {
		if (string.?(a)) puts(string.!(a));
		else if (int.?(a)) puti(int.!(a));
		else if (byte.?(a)) putc(byte.!(a));
		else if (bool.?(a)) putz(bool.!(a));
		else if (Poly.is<A, StringBuffer -> StringBuffer>(a)) {
			Poly.as<A, StringBuffer -> StringBuffer>(a)(this);
		} else if (u32.?(a)) putx(int.!(a));
		else if (long.?(a)) putl(long.!(a));
	}
	def format1<A>(fmt: string, a: A) -> this {
		format3(fmt, a, (), ());
	}
	def format2<A, B>(fmt: string, a: A, b: B) -> this {
		format3(fmt, a, b, ());
	}
	def format3<A, B, C>(fmt: string, a: A, b: B, c: C) -> this {
		var i = 0, max = fmt.length - 1, start = 0;
		while (i < max) {
			if (fmt[i] == '%') {
				putk(fmt, start, i);
				start = i + 2;
				var nc = fmt[i + 1];
				if (nc == '1') { put(a); i = start; continue; }
				if (nc == '2') { put(b); i = start; continue; }
				if (nc == '3') { put(c); i = start; continue; }
				if (nc == '%') { start--; continue; }
			}
			i++;
		}
		putk(fmt, start, fmt.length);
	}
	def putk(str: string, start: int, end: int) {
		acquire(end - start);
		var pos = length;
		for (i = start; i < end; i++) buffer[pos++] = str[i];
		length = pos;
	}
	def end() -> this {
	}
	// append a line terminator
	def ln() -> this {
		putc('\n');
	}
	// append a space
	def sp() -> this {
		putc(' ');
	}
	// append ", "
	def csp() -> this {
		puts(", ");
	}
	// append a tab
	def tab() -> this {
		putc('\t');
	}
	// reset the size of this buffer, reusing internal storage
	def reset() -> this {
		length = 0;
	}
	// pad the buffer to the specified size with the pad character
	def pad(ch: byte, nlen: int) -> this {
		var diff = nlen - length;
		if (diff <= 0) return;
		acquire(diff);
		for (i = length; i < nlen; i++) buffer[i] = ch;
		length = nlen;
	}
	// convert this buffer to a string
	def toString() -> string {
		return Arrays.range(buffer, 0, length);
	}
	// acquire at least n bytes of internal storage at the end of the array
	private def acquire(n: int) {
		var nlen = length + n, olen = buffer.length;
		if (nlen > olen) buffer = Arrays.copy(buffer, Array<byte>.new(nlen + olen));
	}
}
