// Copyright 2017 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility class for encoding integers and data into a byte stream
class DataBuffer {
	var bigEndian: bool;
	var array: Array<byte>;
	var pos: int;
	var max: int;
	var refill: (DataBuffer, int) -> void; // XXX: make DataBuffer.refill a value

	new(bigEndian, array, pos, refill) {
		if (refill == null) this.refill = grow;
	}
	def i1(data: int) {
		acquire(1)[pos++] = byte.!(data);
	}
	def i2(data: int) {
		if (bigEndian) i2be(data);
		else i2le(data);
	}
	def i4(data: int) {
		if (bigEndian) i4be(data);
		else i4le(data);
	}
	def i8(data: long) {
		var h = int.!(data >> 32), l = int.!(data);
		if (bigEndian) {
			i4be(h);
			i4be(l);
		} else {
			i4le(l);
			i4le(h);
		}
	}
	def i2be(data: int) {
		var a = acquire(2), p = pos;
		a[p + 0] = byte.!(data >> 8);
		a[p + 1] = byte.!(data);
		pos = p + 2;
	}
	def i2le(data: int) {
		var a = acquire(2), p = pos;
		a[p + 0] = byte.!(data);
		a[p + 1] = byte.!(data >> 8);
		pos = p + 2;
	}
	def i4be(data: int) {
		var a = acquire(4), p = pos;
		a[p + 0] = byte.!(data >> 24);
		a[p + 1] = byte.!(data >> 16);
		a[p + 2] = byte.!(data >> 8);
		a[p + 3] = byte.!(data);
		pos = p + 4;
	}
	def i4le(data: int) {
		var a = acquire(4), p = pos;
		a[p + 0] = byte.!(data);
		a[p + 1] = byte.!(data >> 8);
		a[p + 2] = byte.!(data >> 16);
		a[p + 3] = byte.!(data >> 24);
		pos = p + 4;
	}
	def i8be(data: long) {
		i4be(int.!(data >> 32));
		i4be(int.!(data));
	}
	private def acquire(size: int) -> Array<byte> {
		if (pos + size > array.length) refill(this, size);
		return array;
	}
	def iN(data: Array<byte>) {
		if (data == null) return;
		var len = data.length;
		var a = acquire(len), p = pos;
		for (i < len) a[p + i] = data[i];
		pos = p + len;
	}
	def iK(data: Array<byte>, off: int, len: int) {
		if (data == null) return;
		var a = acquire(len), p = pos;
		for (i < len) a[p + i] = data[off + i];
		pos = p + len;
	}
	def zeroN(len: int) {
		var a = acquire(len), end = pos + len;
		for (p = pos; p < end; p++) a[p] = '\x00';
		pos = end;
	}
	def skipN(len: int) {
		acquire(len);
		pos = pos + len;
	}
	def at(npos: int) -> this {
		if (pos > max) max = pos; // remember the maximum pos
		pos = npos;
	}
	def align(size: int) {
		var rem = pos & (size - 1);
		if (rem > 0) {
			acquire(size - rem);
			pos = pos + size - rem;
		}
	}
	def bb(b0: int, b1: int) {
		var a = acquire(2), p = pos;
		a[p + 0] = byte.!(b0);
		a[p + 1] = byte.!(b1);
		pos = p + 2;
	}
	def bbb(b0: int, b1: int, b2: int) {
		var a = acquire(3), p = pos;
		a[p + 0] = byte.!(b0);
		a[p + 1] = byte.!(b1);
		a[p + 2] = byte.!(b2);
		pos = p + 3;
	}
	def end() -> int {
		if (pos > max) max = pos;
		return max;
	}
	def atEnd() -> this {
		if (pos > max) max = pos;
		else pos = max;
	}
	def clear() -> this {
		pos = max = 0;
	}
	private def grow(buffer: DataBuffer, size: int) {
		var d = buffer.array;
		buffer.array = Arrays.grow(d, d.length * 4 + size);
	}
	def render(baseAddr: int, startPos: int, size: int, buf: StringBuffer) {
		var line = 16;
		for (i = 0; i < size; i = i + line) {
			buf.puts("  ").putx(baseAddr + i);
			buf.puts(": ");
			var start = startPos + i;
			var end = start + line;
			if (end > max) end = max;
			for (i = start; i < end; i++) {
				buf.appendHexByte(array[i]);
				buf.sp();
			}
			buf.ln();
		}
	}
}
