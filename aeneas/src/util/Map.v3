// Copyright 2010 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Basic map interface that offers get() and destructive set() operations.
class Map<K, V> {
	def [key: K] -> V;
	def [key: K] = val: V;
}

// An extended map interface that also has methods to query whether a value
// exists for a particular element and to iterate over all key/value pairs.
class PartialMap<K, V> extends Map<K, V> {
	def has(key: K) -> bool;
	def apply(func: (K, V) -> void);
}

// Internal data structure needed by HashMap to represent chained buckets.
// XXX: Can be class Bucket<K, V>(key: K, var val: V, var next: Bucket<K, V>) { }
class Bucket<K, V> {
	def key: K;
	var val: V;
	var next: Bucket<K, V>;

	new(key, val: V, next: Bucket<K,V>) {
		this.next = next;
		this.val = val;
	}
}

// A general-purpose HashMap implementation that provides the PartialMap interface.
// For maximum reusability, this implementation accepts the hash and equality functions
// as closures, and thus can map any key type to any value type.
class HashMap<K, V> extends PartialMap<K, V> {
	def hash: K -> int;		// user-supplied hash function
	def equals: (K, K) -> bool;	// user-supplied equality method
	var table: Array<Bucket<K, V>>;	// lazily allocated hashtable
	var cache: Bucket<K, V>;	// cache for last entry get/set

	new(hash, equals) { }

	def [key: K] -> V {
		var c = cache;
		if (c == null) { var none: V; return none; }
		// cache is valid, must be at least one entry
		if (c.key == key) return c.val;
		// if table is null, there is only one key/value pair
		if (table == null) {
			if (equals(c.key, key)) return c.val; // a slow hit in the cache
			var none: V; 
			return none;
		}
		// cache did not match, hash and do bucket search
		for (bucket = table[dohash(key)]; bucket != null; bucket = bucket.next) {
			if (bucket.key == key || equals(bucket.key, key)) {
				cache = bucket;
				return bucket.val;
			}
		}
		var none: V;
		return none;
	}
	def [key: K] = val: V {
		var c = cache;
		if (c == null) {
			// no entries yet, simply add it as the cache
			cache = Bucket<K, V>.new(key, val, null);
			return;
		}
		if (c.key == key) {
			// ==, a fast hit in the cache
			c.val = val;
			return;
		}
		if (table == null) {
			if (equals(c.key, key)) {
				// equals(), a slow hit in the cache
				c.val = val;
				return;
			}
			// missed the cache, table not yet allocated, insert both
			table = Array.new(16); // TUNABLE: initial HashMap table size
			insert(c);
			insert(cache = Bucket.new(key, val, null));
			return;
		}
		// missed the cache, hash and search the table
		var hashval = dohash(key);
		var i = 0;
		for (bucket = table[hashval]; bucket != null; bucket = bucket.next) {
			if (equals(bucket.key, key)) {
				bucket.val = val;
				cache = bucket;
				return;
			}
			i++;
		}
		// insert into table and cache
		table[hashval] = cache = Bucket.new(key, val, table[hashval]);
		if (i > 4 && table.length < 1001) balance();
	}
	def has(key: K) -> bool {
		var c = cache;
		if (c == null) return false; // no entries
		if (c.key == key) return true; // hit cache
		if (table == null) return equals(c.key, key); // no table, slow hit cache?
		for (bucket = table[dohash(key)]; bucket != null; bucket = bucket.next) {
			if (bucket.key == key || equals(bucket.key, key)) return true;
		}
		return false;
	}
	def apply(func: (K, V) -> void) {
		if (table == null) {
			// zero or one entry
			if (cache != null) func(cache.key, cache.val);
			return;
		}
		// two or more entries
		for (b in table) {
			for (bucket = b; bucket != null; bucket = bucket.next) {
				func(bucket.key, bucket.val);
			}
		}
	}
	private def insert(bucket: Bucket<K, V>) {
		var hashval = dohash(bucket.key);
		bucket.next = table[hashval];
		table[hashval] = bucket;
	}
	private def dohash(key: K) -> int {
		return hash(key) & (table.length - 1);
	}
	private def balance() {
		var old = table, olen = old.length;
		table = Array.new(olen * 4);
		for (i < olen) {
			for (b = old[i]; b != null; b = b.next) {
				var hashval = dohash(b.key);
				table[hashval] = Bucket.new(b.key, b.val, table[hashval]);
			}
		}
	}
}

// Utility methods associated with maps.
component Maps {
	def keyList<K, V>(map: PartialMap<K, V>) -> List<K> {
		if (map == null) return null;
		var k = MapKeyListGatherer<K, V>.new();
		map.apply(k.add);
		return k.list;
	}
	def valueList<K, V>(map: PartialMap<K, V>) -> List<V> {
		if (map == null) return null;
		var v = MapValueListGatherer<K, V>.new();
		map.apply(v.add);
		return v.list;
	}
}

// Utility class that is used in Maps to create a list of keys from a partial map.
class MapKeyListGatherer<K, V> {
	var list: List<K>;
	def add(key: K, val: V) { list = List.new(key, list); }
}

// Utility class that is used in Maps to create a list of values from a partial map.
class MapValueListGatherer<K, V> {
	var list: List<V>;
	def add(key: K, val: V) { list = List.new(val, list); }
}

// Utility class to implement a lazily-allocated map
class LazyMap<K, V> extends PartialMap<K, V> {
	def hash: K -> int;
	def equals: (K, K) -> bool;
	def create: K -> V;
	var map: HashMap<K, V>;
	
	new(hash, equals, create) { }
	// get the value for the specified key, creating it if necessary
	def [key: K] -> V {
		if (map == null) map = HashMap.new(hash, equals);
		var v = map[key], none: V;
		if (v == none) {
			v = create(key);
			map[key] = v;
		}
		return v;
	}
	// set the value associated with the key
	def [key: K] = val: V {
		if (map == null) map = HashMap.new(hash, equals);
		map[key] = val;
	}
	// check if there is a value for the specified key
	def has(key: K) -> bool {
		return map != null && map.has(key);
	}
	// apply the function to every key/value pair
	def apply(f: (K, V) -> void) {
		if (map != null) map.apply(f);
	}
}
