// Copyright 2010 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility to print progress indicators for tests (e.g. oXoooXXooo ...)
class ProgressPrinter {
	def total: int;
	def verbose: int;
	var passed: int;
	var current: string;
	var failed: int;
	var expectedFailed: int;
	var failures: List<(string, string)>;

	new(total, verbose) { }

	def begin(testCase: string) {
		current = testCase;
		if (verbose == 2) {
			Terminal.print(testCase);
			Terminal.print("...");
		}
	}
	def pass() {
		passed++;
		if (verbose > 0) {
			output(Terminal.CTRL_GREEN, 'o', "ok");
		}
	}
	def expectedFail(report: string) {
		passed++;
		expectedFailed++;
		if (verbose == 1) {
			output(Terminal.CTRL_YELLOW, 'E', "expected");
		} else if (verbose == 2) {
			output(Terminal.CTRL_YELLOW, 'E', "expected");
			Terminal.print(" -> ");
			Terminal.println(report);
		}
	}
	def unexpectedPass() {
		failed++;
		if (verbose == 1) {
			output(Terminal.CTRL_RED, 'P', "passed");
			failures = List.new((current, "unexpected pass"), failures);
		} else if (verbose == 2) {
			output(Terminal.CTRL_RED, 'P', "passed");
			Terminal.print(" -> unexpected pass");
		}
	}
	def fail(report: string) {
		failed++;
		if (verbose == 1) {
			output(Terminal.CTRL_RED, 'X', "failed");
			failures = List.new((current, report), failures);
		} else if (verbose == 2) {
			output(Terminal.CTRL_RED, 'X', "failed");
			Terminal.print(" -> ");
			Terminal.println(report);
		}
	}
	def space() {
		var done = passed + failed;
		if (done % 10 == 0 || done == total) {
			Terminal.putc(' ');
		}
		if (done % 50 == 0 || done == total) {
			Terminal.puts(Terminal.CTRL_DEFAULT);
			Terminal.puti(done);
			Terminal.puts(" of ");
			Terminal.puti(total);
			Terminal.ln();
		}
	}
	def output(ctrl: string, ch: byte, str: string) {
		if (verbose == 1) {
			Terminal.puts(ctrl);
			Terminal.putc(ch);
			space();
		} else if (verbose == 2) {
			Terminal.print(ctrl);
			Terminal.print(str);
			Terminal.print(Terminal.CTRL_DEFAULT);
			Terminal.ln();
		}
	}
	def report() {
		Terminal.print2("%1 of %2 passed", passed, total);
		if (expectedFailed > 0) Terminal.print1(" (%1 expected failures)", expectedFailed);
		Terminal.ln();
		if (verbose == 1) Lists.apply(failures, printFailure);
	}
	def printFailure(a: string, b: string) {
		Terminal.print(Terminal.CTRL_RED);
		Terminal.print(a);
		Terminal.print(Terminal.CTRL_DEFAULT);
		Terminal.print(": ");
		Terminal.println(b);
	}
}
