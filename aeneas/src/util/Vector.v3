// Copyright 2010 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility class which represents an efficient, growable, appendable array
class Vector<T> {
	var array: Array<T>;
	var length: int;
	
	// add an item to the end of this vector
	def add(item: T) {
		var s = length;
		if (s == 0) array = Array<T>.new(10);
		else if (s == array.length) array = Arrays.grow(array, s + s);
		array[s] = item;
		length = s + 1;
	}
	// add all of the elements from the array to the end of this vector
	def addV(a: Vector<T>) {
		addK(a.array, a.length);
	}
	def addN(a: Array<T>) {
		if (a != null) addK(a, a.length);
	}
	private def addK(a: Array<T>, max: int) {
		var s = length;
		if (array == null) array = Array<T>.new(max);
		else if (s + max >= array.length) grow(s + s + max);
			
		var v = array;
		for (i < max) v[i + s] = a[i];
		length = s + max;
	}
	// get the item at the specified index
	def [index: int] -> T {
		return array[index];
	}
	// update the item at the specified index
	def [index: int] = item: T {
		array[index] = item;
	}
	// apply the specified function to each item in the vector
	def apply(f: T -> void) {
		var a = array;
		if (a != null) {
			var max = length, len = a.length;
			for (i < len) {
				if (i >= max) return;
				f(a[i]);
			}
		}
	}
	// grow the internal storage of this vector to the new length
	def grow(nlength: int) -> this {
		if (array == null) array = Array<T>.new(nlength);
		else if (nlength > array.length) array = Arrays.grow(array, nlength);
	}
	// copy this vector into a new, appropriately-sized array
	def copy() -> Array<T> {
		if (array == null) return [];
		return Arrays.copy(array, Array<T>.new(length));
	}
	// removes the first occurrence of an item from this vector
	def remove(item: T) -> bool {
		if (array == null) return false;
		for (i < length) {
			if (array[i] == item) {
				// found the item, remove it
				Arrays.removeIndex(array, i);
				length--;
				return true;
			}
		}
		return false;
	}
	// removes the element at the given index
	def removeAt(index: int) {
		Arrays.removeIndex(array, index);
		length--;
	}
	// extracts all elements from this vector, leaving it empty
	// (more efficient than copy() if the array is sized exactly)
	def extract() -> Array<T> {
		if (array == null) return [];
		var result = array;
		if (length != result.length) result = Arrays.copy(result, Array<T>.new(length));
		array = null;
		length = 0;
		return result;
	}
	// Clear all elements to default value and set length to 0.
	def clear() -> this {
		length = 0;
		if (array == null) return;
		var x = array, d: T;
		for (i < x.length) x[i] = d;
	}
}

// Utility methods for vectors
component Vectors {
	// efficient construction of a single-element vector
	def of1<T>(e: T) -> Vector<T> {
		var vec = Vector<T>.new();
		vec.array = [e];
		vec.length = 1;
		return vec;
	}
	// efficient construction of a N-element vector that shares the same storage
	def ofN<T>(a: Array<T>) -> Vector<T> {
		var vec = Vector<T>.new();
		vec.array = a;
		vec.length = a.length;
		return vec;
	}
	// Use a vector as a queue and drain all items, applying {f} to each item,
	// which may add more items to the vector
	def drain<T>(vec: Vector<T>, pos: int, f: T -> void) -> int {
		while (pos < vec.length) f(vec.array[pos++]);
		return pos;
	}
	def overwrite<T>(vec: Vector<T>, array: Array<T>) -> Vector<T> {
		vec.length = array.length;
		vec.array = array;
		return vec;
	}
	// Grow a vector's length to include {index}, set all new items to be {d},
	// and set {vec[index]} to {val}.
	def growAndSet<T>(vec: Vector<T>, d: T, index: int, val: T) -> Vector<T> {
		if (index >= vec.length) {
			vec.grow(index + 1);
			for (i = vec.length; i < index; i++) vec.array[i] = d;
		}
		vec.array[index] = val;
		vec.length = index + 1;
		return vec;
	}
}
