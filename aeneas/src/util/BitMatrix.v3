// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// An efficient data structure for a matrix of boolean values.
class BitMatrix {
	def numcols: int;			// number of columns
	def width: int = (numcols + 31) / 32;	// width (in integers) of each row
	var bits: Array<int>;			// array that stores the data
	new(numrows: int, numcols: int) {
		bits = Array.new(numrows * width);
	}
	// get the value of the bit at the specified position
	def get(row: int, col: int) -> bool {
		var i = row * width + (col #>> 5), mask = 1 #<< (col & 0b11111);
		return (bits(i) & mask) != 0;
	}
	// set the bit at the specified position, returning its previous value
	def set(row: int, col: int) -> bool {
		var i = row * width + (col #>> 5), mask = 1 #<< (col & 0b11111);
		var val = bits(i);
		if ((val & mask) == 0) {
			bits(i) = val | mask;
			return false;
		}
		return true;
	}
	// clear the bit at the specified position, returning its previous value
	def clear(row: int, col: int) -> bool {
		var i = row * width + (col #>> 5), mask = 1 #<< (col & 0b11111);
		var val = bits(i);
		if ((val & mask) != 0) {
			bits(i) = val & (-1 ^ mask);
			return true;
		}
		return false;
	}
	// or rows A and B together, storing the result in row A
	def or(a: int, b: int) {
		var da = a * width, db = b * width;
		for (i = 0; i < width; i++) {
			bits(da + i) = bits(da + i) | bits(db + i);
		}
	}
	// extract a range of rows into a new BitMatrix
	def range(minRow: int, maxRow: int) -> BitMatrix {
		var numrows = maxRow - minRow; // don't include maxRow
		var result = BitMatrix.new(numrows, numcols);
		var start = minRow * width, end = maxRow * width;
		for (i = start; i < end; i++) {
			result.bits(i - start) = this.bits(i);
		}
		return result;
	}
	// grow this bit table to the specified number of rows
	def grow(nrows: int) {
		bits = Arrays.grow(bits, nrows * width);
	}
}
