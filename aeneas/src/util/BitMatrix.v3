// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// An efficient data structure for a matrix of boolean values.
class BitMatrix {
	var numcols: int;			// number of columns
	var width: int = (numcols + 31) >>> 5;	// width (in integers) of each row
	var bits: Array<int>;			// array that stores the data
	new(numrows: int, numcols: int) {
		bits = Array.new(numrows * width);
	}
	// get the value of the bit at the specified position
	def get(row: int, col: int) -> bool {
		var i = row * width + (col >> 5), mask = 1 << u5.!(col);
		return (bits[i] & mask) != 0;
	}
	// set the bit at the specified position, returning its previous value
	def set(row: int, col: int) -> bool {
		var i = row * width + (col >> 5), mask = 1 << u5.!(col);
		var val = bits[i];
		if ((val & mask) == 0) {
			bits[i] = val | mask;
			return false;
		}
		return true;
	}
	// clear the bit at the specified position, returning its previous value
	def clear(row: int, col: int) -> bool {
		var i = row * width + (col >> 5), mask = 1 << u5.!(col);
		var val = bits[i];
		if ((val & mask) != 0) {
			bits[i] = val & (-1 ^ mask);
			return true;
		}
		return false;
	}
	// or rows {a} and {b} together, storing the result in row {a}
	def or(a: int, b: int) {
		var da = a * width, db = b * width;
		for (i < width) {
			bits[da + i] = bits[da + i] | bits[db + i];
		}
	}
	// extract a range of rows into a new BitMatrix
	def range(minRow: int, maxRow: int) -> BitMatrix {
		var numrows = maxRow - minRow; // don't include maxRow
		var result = BitMatrix.new(numrows, numcols);
		var start = minRow * width, end = maxRow * width;
		for (i = start; i < end; i++) {
			result.bits[i - start] = this.bits[i];
		}
		return result;
	}
	// grow this bit table to the specified number of rows
	def grow(nrows: int) {
		bits = Arrays.grow(bits, nrows * width);
	}
	// grow this bit matrix to the specified number of columns
	def widen(ncols: int) {
		if (ncols <= numcols) return;
		var nwidth = (ncols + 31) >>> 5;
		if (nwidth <= width) {
			numcols = ncols;
			return;
		}
		var numrows = bits.length / width;
		var nbits = Array<int>.new(numrows * nwidth);
		for (i < numrows) {
			for (j < width) {
				nbits[i * nwidth + j] = bits[i * width + j];
			}
		}
		numcols = ncols;
		width = nwidth;
		bits = nbits;
	}
	def count(col: int) -> int {
		var result = 0, max = (col + 1) * width;
		for (i = col * width; i < max; i++) {
			var val = bits[i];
			while (val != 0) {
				if ((val & 1) != 0) result++;
				val >>>= 1;
			}
		}
		return result;
	}
}
