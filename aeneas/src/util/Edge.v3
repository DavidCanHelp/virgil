// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// represents a bi-directional edge between a source and a destination.
class Edge<T> {
	def src: T;		// the source of this edge
	var dest: T;		// the destination of this edge
	var prev: Edge<T>;	// the backward link for the use list
	var next: Edge<T>;	// the forward link for the use list

	new(src, dest) {
		var none: T;
		if (dest != none) insert(dest);
	}
	// update this edge to point to a new destination and remove from old
	def update(newDest: T) {
		var none: T;
		if (dest != none) remove(dest);
		dest = newDest;
		if (dest != none) insert(dest);
	}
	// insert this edge into the destination's use list
	private def insert(dest: T) {
		var prev = getListHead(dest);
		next = prev;
		if (prev != null) prev.prev = this;
		setListHead(dest, this);
	}
	// remove this edge from the destination's use list
	private def remove(dest: T) {
		var p = prev, n = next;
		if (getListHead(dest) == this) {
			setListHead(dest, n); // at the head of the list
		}
		if (p != null) prev.next = n;
		if (n != null) next.prev = p;
		prev = null;
		next = null;
	}
	def getListHead(dest: T) -> Edge<T>;
	def setListHead(dest: T, e: Edge<T>);
}
