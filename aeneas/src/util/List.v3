// Copyright 2010 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A basic immutable list utility class.
class List<T>(head: T, tail: List<T>) { }
// Common operations on lists.
component Lists {
	def reverse<T>(rev: List<T>) -> List<T> {
		if (rev == null || rev.tail == null) return rev;
		var list: List<T> = null;
		while (rev != null) {
			list = List.new(rev.head, list);
			rev = rev.tail; 
		}
		return list;
	}
	def cons1<T>(elem1: T) -> List<T> {
		return List.new(elem1, null);
	}
	def cons2<T>(elem1: T, elem2: T) -> List<T> {
		return List.new(elem1, List.new(elem2, null));
	}
	def cons3<T>(elem1: T, elem2: T, elem3: T) -> List<T> {
		return List.new(elem1, List.new(elem2, List<T>.new(elem3, null)));
	}
	def fromArray<T>(array: Array<T>) -> List<T> {
		var list: List<T> = null;
		for (i = array.length - 1; i >= 0; i--) {
			list = List.new(array(i), list);
		}
		return list;
	}
	def toArray<T>(list: List<T>) -> Array<T> {
		var length = length(list), array = Array<T>.new(length);
		for (i < length) {
			array(i) = list.head;
			list = list.tail;
		}
		return array;
	}
	def length<T>(list: List<T>) -> int {
		var length = 0;
		for (l = list; l != null; l = l.tail) length++;
		return length;
	}
	def map<A, B>(list: List<A>, func: A -> B) -> List<B> {
		if (list == null) return null;
		return List.new(func(list.head), map(list.tail, func));
	}
	def apply<T>(list: List<T>, func: T -> void) {
		while (list != null) {
			func(list.head);
			list = list.tail;
		}
	}
	def reduce<A, B, C>(a: List<A>, b: List<B>, func: (A, B) -> C) -> List<C> {
		if (a == null || b == null) return null;
		return List.new(func(a.head, b.head), reduce(a.tail, b.tail, func));
	}
	def reduceV<A, B>(a: List<A>, b: List<B>, func: (A, B) -> void) {
		while (a != null && b != null) {
			func(a.head, b.head);
			a = a.tail;
			b = b.tail;
		}
	}
	def get<T>(list: List<T>, index: int) -> T {
		while (index-- > 0) list = list.tail;
		return list.head;
	}
	def pad<T>(list: List<T>, item: T, length: int) -> List<T> {
		var n: List<T> = null;
		while (length-- > 0) {
			if (list == null) {
				n = List.new(item, n);
			} else {
				n = List.new(list.head, n);
				list = list.tail;
			}
		}
		return Lists.reverse(n);
	}
}
// A mutable stack data structure.
class Stack<T> {
	var top: List<T>;

	def push(val: T) {
		top = List.new(val, top);
	}
	def peek() -> T {
		return top.head;
	}
	def pop() -> T {
		var result = top.head;
		top = top.tail;
		return result;
	}
	def empty() -> bool {
		return top == null;
	}
}
