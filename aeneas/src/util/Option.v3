// Copyright 2010 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Base class of Option that hides the type variable in order to allow
// options to be put in collections.
class Opt(name: string) {
	def parse(val: string);
}
// An option that is tunable, e.g. from the command line.
class Option<T> extends Opt {
	def init: T;
	def parseFun: string -> T;
	var val: T;

	new(name: string, init, parseFun) super(name) { val = init; }

	// TODO: Use Parsed<T> in Option framework
	def parse(val: string) { this.val = parseFun(val); }
	def get() -> T { return val; }
}
// The Options class represents a collection of options, each with a name and a value.
// Any option that has been set to a value other than its default is also remembered.
class Options(prefix: string) {
	def map   = Strings.newMap<Opt>();
	var names = Sequence<string>.new();
	var vals  = Sequence<string>.new();

	def add<T>(option: Option<T>) -> Option<T> {
		var name = option.name;
		if (prefix != null) {
			name = Strings.toBuffer(prefix).putc('.').puts(name).toString();
		}
		map.set(name, option);
		return option;
	}
	def load(from: Options) {
		var max = from.names.length;
		for (i < max) {
			setOption(from.names.get(i), from.vals.get(i));
		}
	}
	def parse(args: Array<string>) -> Array<string> {
		if (args == null) return [];
		for (i < args.length) {
			var arg = args(i);
			if (arg.length == 0) continue;
			if (arg(0) != '-') return Arrays.range(args, i, args.length);
			parseOption(arg);
		}
		return [];
	}
	def parseOption(arg: string) {
		var name: string, val: string;
		for (i = 1; true; i++) {
			if (i == arg.length) {
				name = Arrays.range(arg, 1, arg.length);
				break;
			}
			if (arg(i) == '=') {
				name = Arrays.range(arg, 1, i);
				val = Arrays.range(arg, i + 1, arg.length);
				break;
			}
		}
		setOption(name, val);
	}
	def setOption(name: string, val: string) {
		var option = map.get(name);
		if (option != null) option.parse(val);
		names.add(name);
		vals.add(val);
	}
}
// BasicOptions adds a set of utility methods for adding and parsing options
// of type bool, int, and string.
class BasicOptions extends Options {
	new(prefix: string) super(prefix) { }

	def newIntOption(name: string, val: int) -> Option<int> {
		return add(Option.new(name, val, parseInt));
	}
	def newSizeOption(name: string, val: int) -> Option<int> {
		return add(Option.new(name, val, parseSize));
	}
	def newBoolOption(name: string, val: bool) -> Option<bool> {
		return add(Option.new(name, val, parseBool));
	}
	def newStringOption(name: string, val: string) -> Option<string> {
		return add(Option.new(name, val, parseString));
	}
	def newOption<T>(name: string, val: T, parseFun: string -> T) -> Option<T> {
		return add(Option.new(name, val, parseFun));
	}
	def parseBool(str: string) -> bool {
		return str == null || Strings.equal(str, "true");
	}
	def parseInt(str: string) -> int {
		// REFACTOR: move parsing of ints to util to remove dependence on compiler base
		var box = Int.parseDecimal(str);
		if (box != null) return box.val;
		return 0;
	}
	def parseSize(str: string) -> int {
		// XXX: move this method to Int component
		var len = str.length;
		var last = str(len - 1), scale = 1, max = Int.MAX_VALUE;
		match(last) {
			'k', 'K': { scale = 1024; max = 2 * 1024 * 1024; len--; }
			'm', 'M': { scale = 1024 * 1024; max = 2 * 1024; len--; }
			'g', 'G': { scale = 1024 * 1024 * 1024; max = 2; len--; }
		}
		var p = Int.parsePosDecimal(str, 0);
		if (p.passed && p.length == len) {
			if (p.val > max) return Int.MAX_VALUE;
			return p.val * scale;
		}
		return 0;
	}
	def parseString(str: string) -> string {
		return if(str == null, "", str);
	}
}
