// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class Stream {
	def outK(data: Array<byte>, start: int, len: int);
}

class FileStream extends Stream {
	def file: int;
	new(file) { }
	def outK(data: Array<byte>, offset: int, length: int) {
		System.fileWriteK(file, data, offset, length);
	}
	def close() {
		System.fileClose(file);
	}
}

// A utility to buffer writes of bytes to a flushing function, with the assumption
// that the flushing function is more efficient with larger writes.
class Buffer {
	private def ffunc: (Array<byte>, int, int) -> void;
	private var w: DataWriter;
	private var total: int;

	// create a new buffer with the given buffer size which flushes to the given function
	new(bufSize: int, ffunc) {
		w = DataWriter.new().grow(bufSize);
		w.refill = refill;
	}
	// refill the buffer with the specified amount of space
	def refill(w: DataWriter, nlength: int) -> DataWriter {
		var size = nlength - w.pos;
		flush();  // write existing data
		if (size > w.data.length) w.reset(Array<byte>.new(size), 0, 0);
		return w;
	}
	// flush any remaining data to the flush function.
	def flush() {
		if (w.pos > 0) {
			total = total + w.pos;
			ffunc(w.data, 0, w.pos);
			w.at(0);
		}
	}
	// get the buffer which can output to this buffer
	def getBuffer() -> DataWriter { return w; }
	// get the total number of bytes output to this buffer
	def getTotal() -> int { return total + w.pos; }
}
