// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility class for encoding integers and data into a byte stream
class DataEncoder {
	var bigEndian: bool;
	var array: Array<byte>;
	var pos: int;
	var max: int;
	var refill: (DataEncoder, int) -> void; // XXX: make DataEncoder.refill a value

	new(bigEndian, array, pos, refill) {
		if (refill == null) this.refill = grow;
	}
	def i1(data: int) {
		acquire(1)(pos++) = byte.!(data);
	}
	def i2(data: int) {
		if (bigEndian) i2be(data);
		else i2le(data);
	}
	def i4(data: int) {
		if (bigEndian) i4be(data);
		else i4le(data);
	}
	def i2be(data: int) {
		var a = acquire(2), p = pos;
		a(p + 0) = byte.!(data #>> 8);
		a(p + 1) = byte.!(data);
		pos = p + 2;
	}
	def i2le(data: int) {
		var a = acquire(2), p = pos;
		a(p + 0) = byte.!(data);
		a(p + 1) = byte.!(data #>> 8);
		pos = p + 2;
	}
	def i4be(data: int) {
		var a = acquire(4), p = pos;
		a(p + 0) = byte.!(data #>> 24);
		a(p + 1) = byte.!(data #>> 16);
		a(p + 2) = byte.!(data #>> 8);
		a(p + 3) = byte.!(data);
		pos = p + 4;
	}
	def i4le(data: int) {
		var a = acquire(4), p = pos;
		a(p + 0) = byte.!(data);
		a(p + 1) = byte.!(data #>> 8);
		a(p + 2) = byte.!(data #>> 16);
		a(p + 3) = byte.!(data #>> 24);
		pos = p + 4;
	}
	private def acquire(size: int) -> Array<byte> {
		if (pos + size > array.length) refill(this, size);
		return array;
	}
	def iN(data: Array<byte>) {
		if (data == null) return;
		var len = data.length;
		var a = acquire(len), p = pos;
		for (i = 0; i < len; i++) a(p + i) = data(i);
		pos = p + len;
	}
	def iK(data: Array<byte>, off: int, len: int) {
		if (data == null) return;
		var a = acquire(len), p = pos;
		for (i = 0; i < len; i++) a(p + i) = data(off + i);
		pos = p + len;
	}
	def zeroN(len: int) {
		var a = acquire(len), p = pos;
		for (i = 0; i < len; i++) a(p + i) = '\x00';
		pos = p + len;
	}
	def skipN(len: int) {
		acquire(len);
		pos = pos + len;
	}
	def at(npos: int) -> DataEncoder {
		if (pos > max) max = pos; // remember the maximum pos
		pos = npos;
		return this;
	}
	def align(size: int) {
		var rem = pos & (size - 1);
		if (rem > 0) {
			acquire(size - rem);
			pos = pos + size - rem;
		}
	}
	def end() -> int {
		if (pos > max) max = pos;
		return max;
	}
	def atEnd() -> DataEncoder {
		if (pos > max) max = pos;
		else pos = max;
		return this;
	}
	private def grow(encoder: DataEncoder, size: int) {
		var d = encoder.array;
		encoder.array = Arrays.grow(d, d.length * 4 + size);
	}
}

class Stream {
	def outK(data: Array<byte>, start: int, len: int);
}

class FileStream extends Stream {
	def file: int;
	new(file) { }
	def outK(data: Array<byte>, offset: int, length: int) {
		System.fileWriteK(file, data, offset, length);
	}
	def close() {
		System.fileClose(file);
	}
}

// A utility to buffer writes of bytes to a flushing function, with the assumption
// that the flushing function is more efficient with larger writes.
class Buffer {
	private def bufSize: int;
	private def ffunc: (Array<byte>, int, int) -> void;
	private var encoder: DataEncoder;
	private var total: int;

	// create a new buffer with the given buffer size which flushes to the given function
	new(bufSize, ffunc) {
		var array = Array<byte>.new(bufSize);
		encoder = DataEncoder.new(false, array, 0, refill);
	}
	// refill the encoder with the specified amount of space
	def refill(encoder: DataEncoder, size: int) {
		if (size > encoder.array.length) {
			// a larger buffer is necessary
			encoder.array = Arrays.grow(encoder.array, size + encoder.array.length);
		} else {
			// current buffer will suffice, but need to flush it
			flush();
		}
	}
	// flush any remaining data to the flush function.
	def flush() {
		if (encoder.pos > 0) {
			total = total + encoder.pos;
			ffunc(encoder.array, 0, encoder.pos);
			encoder.pos = 0;
		}
	}
	// get the encoder which can output to this buffer
	def getEncoder() -> DataEncoder { return encoder; }
	// get the total number of bytes output to this buffer
	def getTotal() -> int { return total + encoder.pos; }
}
