// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class Stream {
	def outK(data: Array<byte>, start: int, len: int);
}

class FileStream extends Stream {
	def file: int;
	new(file) { }
	def outK(data: Array<byte>, offset: int, length: int) {
		System.fileWriteK(file, data, offset, length);
	}
	def close() {
		System.fileClose(file);
	}
}

// A utility to buffer writes of bytes to a flushing function, with the assumption
// that the flushing function is more efficient with larger writes.
class Buffer {
	private def ffunc: (Array<byte>, int, int) -> void;
	private var buffer: DataBuffer;
	private var total: int;

	// create a new buffer with the given buffer size which flushes to the given function
	new(bufSize: int, ffunc) {
		var array = Array<byte>.new(bufSize);
		buffer = DataBuffer.new(false, array, 0, refill);
	}
	// refill the buffer with the specified amount of space
	def refill(buffer: DataBuffer, size: int) {
		if (size > buffer.array.length) {
			// a larger buffer is necessary
			buffer.array = Arrays.grow(buffer.array, size + buffer.array.length);
		} else {
			// current buffer will suffice, but need to flush it
			flush();
		}
	}
	// flush any remaining data to the flush function.
	def flush() {
		if (buffer.pos > 0) {
			total = total + buffer.pos;
			ffunc(buffer.array, 0, buffer.pos);
			buffer.pos = 0;
		}
	}
	// get the buffer which can output to this buffer
	def getBuffer() -> DataBuffer { return buffer; }
	// get the total number of bytes output to this buffer
	def getTotal() -> int { return total + buffer.pos; }
}
