// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility class to print out information about an IcMethod and its code
class IcPrinter(prog: Program, interp: IcInterpreter) {
	var indent: int;
	var successors: bool = true;
	var buf = StringBuffer.new();

	def printCode(iccode: Array<IcInstr>) {
		for (i < iccode.length) {
			print(i, iccode(i));
		}
	}
	def render(b: StringBuffer, ip: int, i: IcInstr) -> StringBuffer {
		doIndent(b);
		b.puti(ip);
		b.puts(": ");
		if (ip < 100) b.putc(' ');
		if (ip < 10) b.putc(' ');
		if (IcMove.?(i)) { // dst = src
			var j = IcMove.!(i);
			b.format2("move  #%1 = %2", j.dst, renderReg(j.src));
		} else if (IcValue.?(i)) { // dst = value
			var j = IcValue.!(i);
			b.format2("value #%1 = %2", j.dst, prog.render(j.val));
		} else if (IcApply.?(i)) { // dst = op(arg1, arg2, ...)
			var j = IcApply.!(i);
			b.format2("apply #%1 = %2(", j.dst, V3Op.renderOp(j.op));
			renderList(b, j.args);
			b.putc(')');
		} else if (IcFastOp.?(i)) { // dst = op(arg1, arg2, ...)
			var j = IcFastOp.!(i);
			// XXX: shorten the rendering of fast operations to simply #D = op #A #B
			b.format2("fast  #%1 = %2(", j.dst, V3Op.renderOp(j.op));
			renderList(b, [j.x, j.y]);
			b.putc(')');
		} else if (IcCall.?(i)) { // dst = call(m, arg1, arg2, ...)
			var j = IcCall.!(i);
			b.format2("call  #%1 = %2(", j.dst, renderReg(j.func));
			renderList(b, j.args);
			b.putc(')');
		} else if (IcMatch.?(i)) { // match(arg)
			var j = IcMatch.!(i), jv = j.vals;
			b.format1("match %1", renderReg(j.arg));
			if (successors) {
				b.ln();
				for (k = 0; k < jv.length; k = k + 1) {
					doIndent(b).format2("        %1 -> @%2\n", prog.render(jv(k)), j.targets(k));
				}
				doIndent(b).format1("        def -> @%1", j.targets(jv.length));
			}
		} else if (IcBranch.?(i)) { // if(cond, arg)
			var j = IcBranch.!(i);
			if (j.always) b.format1("jump  @%1", j.target);
			else if (j.bval) b.format2("bt    %1 @%2", renderReg(j.arg), j.target);
			else b.format2("bf    %1 @%2", renderReg(j.arg), j.target);
		} else if (IcRet.?(i)) { // return(arg)
			var j = IcRet.!(i);
			b.format1("ret   %1", renderReg(j.arg));
		} else if (IcThrow.?(i)) { // throw(exception)
			var j = IcThrow.!(i);
			b.format1("throw %1", j.exception);
		} else if (IcProbe.?(i)) { // a probed instruction
			var j = IcProbe.!(i);
			b.puts("[probe] ");
			render(b, ip, j.orig);
			return b;
		}
		return b.ln();
	}
	def print(ip: int, i: IcInstr) {
		Terminal.putb(render(buf.reset(), ip, i));
	}
	def doIndent(b: StringBuffer) -> StringBuffer {
		return b.pad(' ', b.length + indent * 2);
	}
	def renderList(b: StringBuffer, a: Array<int>) {
		for (i < a.length) {
			if (i > 0) b.puts(", ");
			b.puts(renderReg(a(i)));
		}
	}
	def renderReg(reg: int) -> string {
		var b = StringBuffer.new();
		if (interp != null) {
			var index = interp.rp + reg;
			if (index < 0 || index > interp.regs.length) b.format1("#%1=!!", reg);
			else b.format2("#%1=%2", reg, prog.render(interp.regs(index)));
		}
		else b.putc('#').puti(reg);
		return b.toString();
	}
}

// Tracer. Use as a last resort, usually to debug the IcInterpreter
class IcTracer(prog: Program, i: IcInterpreter) {
	var p: IcPrinter;
	var lastFrame: IcFrame;
	var depth: int;

	new() {
		p = IcPrinter.new(prog, i);
		i.addProbeBefore(before);
		i.addProbeAfter(after);
	}
	def before(i: IcInterpreter, probeIp: int) {
		lastFrame = i.topFrame;
		p.indent = depth;
		p.print(i.ip, i.code(i.ip));
	}
	def after(i: IcInterpreter, probeIp: int) {
		var top = i.topFrame;
		if (top != lastFrame) {
			// a call or return must have occurred
			if (top != null) {
				if (top.next == lastFrame) { depth = depth + 1;}
				else { depth = depth - 1; }
			}
		}
	}
}
