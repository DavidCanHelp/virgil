// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class IcProfiler(compiler: Compiler, prog: Program) {
	var total: int;

	def report();
	def printUs(v: int) {
		Terminal.puti(v / 1000000);
		Terminal.putc('.');
		putDigit(v, 100000, true);
		putDigit(v, 10000, true);
		putDigit(v, 1000, true);
		putDigit(v, 100, true);
		putDigit(v, 10, true);
		putDigit(v, 1, true);
	}
	def printPct(v: int) {
		var t = total;
		if (v >= t) {
			Terminal.put("100.000");
			return;
		}
		divDigit(v, 10, false);
		divDigit(v, 100, true);
		Terminal.putc('.');
		divDigit(v, 1000, true);
		divDigit(v, 10000, true);
		divDigit(v, 100000, true);
	}
	def divDigit(v: int, mod: int, z: bool) {
		var t = total;
		while (mod > 1 && v < (2000000000 / mod)) {
			v = v * 10;
			mod = mod / 10;
		}
		while (mod > 1 && t > 0) {
			t = t / 10;
			mod = mod / 10;
		}
		if (t <= 0) Terminal.putc('0');
		else putDigit(v, t, z);
	}
	def puti4(v: int) {
		if (v < 10)      Terminal.put("   ");
		else if (v < 100) Terminal.put("  ");
		else if (v < 1000) Terminal.put(" ");
		Terminal.puti(v);
	}
	def puti7(v: int) {
		if (v < 10)      Terminal.put("      ");
		else if (v < 100) Terminal.put("     ");
		else if (v < 1000) Terminal.put("    ");
		else if (v < 10000) Terminal.put("   ");
		else if (v < 100000) Terminal.put("  ");
		else if (v < 1000000) Terminal.put(" ");
		Terminal.puti(v);
	}
	def putDigit(v: int, mod: int, z: bool) {
		var digit = (v / mod) % 10;
		if (digit == 0 && !z) Terminal.putc(' ');
		else Terminal.putc(byte.!('0' + digit));
	}
	def isBlockEnd(i: IcInstr) -> bool {
		if (IcProbe.?(i)) return isBlockEnd(IcProbe.!(i).orig);
		if (IcBranch.?(i)) return true;
		if (IcSwitch.?(i)) return true;
		if (IcThrow.?(i)) return true;
		if (IcRet.?(i)) return true;
		return false;
	}
}

// This class provides profiling infrastructure for Ic code,
// include per-method profiling.
class IcTreeProfiler extends IcProfiler {
	var rootNode: CctNode;		// calling context tree root
	var curNode: CctNode;		// current node in cct
	var curFrame: IcFrame;		// current frame

	new(compiler: Compiler, prog: Program) super(compiler, prog) {
		curNode = rootNode = CctNode.new(null, null);
		compiler.icMon = onGen;
	}
	// instrument the entry instruction and each return instruction
	def onGen(memberRef: IrSpec, icm: IcMethod) {
		// do per-method CCT profiling
		for (i < icm.iccode.length) {
			var j = icm.iccode(i);
			if (IcRet.?(j)) icm.addProbeBefore(i, pmOnRet);
		}
		icm.addProbeBefore(0, pmOnEntry);
	}
	// create a new node in the profiling tree if necessary and start an interval
	def pmOnEntry(i: IcInterpreter, probeIp: int) {
		var time = System.ticksUs();
		var topFrame = i.topFrame;
		if (topFrame != curNode.frame) {
			// this method has just been entered (i.e. not a loop back to start)
			curNode = curNode.findChild(topFrame.icm);
			curNode.nested = time;
			curNode.count++;
			curNode.frame = topFrame;
		}
	}
	// record the elapsed time for the method and move to parent node
	def pmOnRet(i: IcInterpreter, probeIp: int) {
		var time = System.ticksUs();
		curNode.total = curNode.total + (time - curNode.nested);
		curNode = curNode.parent;
	}
	// report the results of profiling
	def report() {
		for (l = rootNode.children; l != null; l = l.tail) {
			total = total + l.head.total;
		}
		rootNode.total = total;
		reportNode(rootNode, 0);
		reportSum();
	}
	def reportNode(n: CctNode, depth: int) {
		var max = Aeneas.PROFILE_DEPTH.get();
		if (max > 0 && depth >= max) return;
		for (i < depth) { Terminal.put("  "); }
		if (n == rootNode) {
			Terminal.put("total: ");
			Terminal.put(Terminal.CTRL_CYAN);
			printUs(total);
			Terminal.put(Terminal.CTRL_DEFAULT);
			Terminal.put(" seconds\n");
		} else if (n.icm != null) {
			// compute time inside by subtracting nested time
			var name = n.name();
			Terminal.green("%1", name);
			for (i = depth * 2 + name.length; i < 70; i++) {
				Terminal.putc(' ');
			}
			Terminal.put(" x ");
			puti4(n.count);
			Terminal.put(" ");
			printPair(n.total);
			Terminal.put(" (");
			printPair(n.inside());
			Terminal.put(")\n");
		}
		Lists.apply(n.children, reportNode(_, depth + 1));
	}
	private def printPair(v: int) {
		Terminal.put(Terminal.CTRL_CYAN);
		printUs(v);
		Terminal.put(Terminal.CTRL_DEFAULT);
		Terminal.put(" s / ");
		Terminal.put(Terminal.CTRL_CYAN);
		printPct(v);
		Terminal.put(Terminal.CTRL_DEFAULT);
		Terminal.put(" %");
	}
	private def reportSum() {
		// add up all the inside times for all nodes
		var map = HashMap<IrMethod, (int, int)>.new(IrMethod.uid, IrMethod.==);
		var l = List.new(rootNode, null);
		while (l != null) {
			var n = l.head;
			l = l.tail;
			for (c = n.children; c != null; c = c.tail) {
				l = List.new(c.head, l);
			}
			var m = n.meth();
			if (m != null) {
				var s = map.get(m);
				map.set(m, (s.0 + n.count, s.1 + n.inside()));
			}
		}
		var seq = Vector<(IrMethod, (int, int))>.new();
		map.apply(seq.add);
		var array = seq.extract();
		array = Arrays.sort(array, 0, array.length, byTime);
		for (e in array) printTotal(e);
	}
	def byTime(a: (IrMethod, (int, int)), b: (IrMethod, (int, int))) -> bool {
		return b.1.1 < a.1.1;
	}
	def printTotal(meth: IrMethod, p: (int, int)) {
		var name = Strings.render(meth.renderLong);
		Terminal.green("%1", name);
		for (i = name.length; i < 50; i++) {
			Terminal.putc(' ');
		}
		Terminal.put(" x ");
		puti7(p.0);
		Terminal.put(" ");
		printPair(p.1);
		Terminal.ln();
	}
}

// a node in the profiling tree
class CctNode(icm: IcMethod, parent: CctNode) {
	var children: List<CctNode>;	// children of this node
	var count: int;			// number of invocations
	var total: int;			// cumulative time
	var nested: int;		// nested time, last entry time
	var frame: IcFrame;		// for detecting recursion vs. looping

	// look for a child node of this node in the tree, creating it if necessary
	def findChild(c: IcMethod) -> CctNode {
		for (m = children; m != null; m = m.tail) {
			if (m.head.icm == c) return m.head;
		}
		var n = CctNode.new(c, this);
		children = List.new(n, children);
		return n;
	}
	def inside() -> int {
		var t = total;
		for (l = children; l != null; l = l.tail) {
			t = t - l.head.total;
		}
		return t;
	}
	def name() -> string {
		if (icm == null) return "root";
		var meth = icm.memberRef.asMethod();
		if (meth.source != null) return Strings.render(meth.source.render);
		else return Strings.render(icm.memberRef.render);
	}
	def meth() -> IrMethod {
		if (icm == null) return null;
		return icm.memberRef.asMethod();
	}
}

// Instruction profiler for Ic code.
class IcInstrProfiler extends IcProfiler {
	def profMap = HashMap<IcMethod, IcMethodProf>.new(IcMethod.uid, IcMethod.==);
	def profSeq = Vector<IcMethodProf>.new();
	var curProf: IcMethodProf;		// current profiling information
	var curFrame: IcFrame;			// current frame
	var printer: IcPrinter;

	new(compiler: Compiler, prog: Program) super(compiler, prog) {
		compiler.icMon = onGen;
	}
	def onGen(memberRef: IrSpec, icm: IcMethod) {
		// do per-instruction profiling
		var len = icm.iccode.length, pm = IcMethodProf.new(icm);
		profMap.set(icm, pm);
		profSeq.add(pm);
		for (i < len) {
			var ic = icm.iccode(i);
			if (IcRet.?(ic)) icm.addProbeAfter(i, afterReturn);
			else if (IcBranch.?(ic)) icm.addProbeAfter(i, afterBranch);
			else if (IcSwitch.?(ic)) icm.addProbeAfter(i, afterBranch);
		}
		if (len > 0) icm.addProbeBefore(0, beforeEntry);
	}
	// check whether the apply resulted in a call to a new method
	def beforeEntry(i: IcInterpreter, probeIp: int) {
		if (i.topFrame != curFrame) {
			if (curProf != null) curProf.recordCall(i.topFrame.retIp, i.topFrame.icm);
			curFrame = i.topFrame;
			curProf = profMap.get(curFrame.icm);
			curProf.icount(0)++;
			curProf.calls++;
		}
	}
	def afterBranch(i: IcInterpreter, probeIp: int) {
		// record branch target count and increment block count
		var targetIp = i.ip;
		curProf.icount(targetIp)++;
		curProf.recordBranch(probeIp, targetIp);
	}
	def afterReturn(i: IcInterpreter, probeIp: int) {
		// pop the current frame
		curFrame = i.topFrame;
		if (curFrame == null) curProf = null;
		else curProf = profMap.get(curFrame.icm);
	}
	def report() {
		printer = IcPrinter.new(prog, null);
		printer.successors = false;
		profSeq.apply(computeInstrTotal);
		var r = Arrays.sort(profSeq.array, 0, profSeq.length, IcMethodProf.byTotal);
		for (e in r) reportInstrCount(e);
	}
	def computeInstrTotal(pm: IcMethodProf) {
		foreachBlock(pm, addTotal);
	}
	def addTotal(pm: IcMethodProf, range: (int, int), count: int) {
		pm.total = pm.total + count * (range.1 - range.0);
	}
	def reportInstrCount(pm: IcMethodProf) {
		Terminal.green("%1", Strings.render(pm.icm.memberRef.render));
		var count = pm.icount, total = pm.total;
		var first = count(0), same = true;
		for (c in count) if (c != first) same = false;
		Terminal.put2(": %1 invocations, %2 instructions\n", pm.calls, total);
		foreachBlock(pm, printBlock);
	}
	def printBlock(pm: IcMethodProf, range: (int, int), count: int) {
		var buf = StringBuffer.new();
		if (count == 0) buf.puts(Terminal.CTRL_RED);
		for (i = range.0; i < range.1; i++) {
			if (i == range.0) buf.puts(" x ").puti(count).pad(' ', 12);
			else buf.puts("            ");
			var ic = pm.icm.iccode(i);
			if (IcProbe.?(ic)) ic = IcProbe.!(ic).orig;
			printer.render(buf, i, ic);
			if (pm.bcount != null && pm.bcount(i) != null) {
				// print branch->target information
				var bcount = pm.bcount(i);
				for (j = 0; j < bcount.length; j = j + 2) {
					buf.puts("                 x ").puti(bcount(j+1));
					buf.puts(" -> @").puti(bcount(j));
					buf.ln();
				}
			}
		}
		if (count == 0) buf.puts(Terminal.CTRL_DEFAULT);
		Terminal.putb(buf);
	}
	def foreachBlock(pm: IcMethodProf, f: (IcMethodProf, (int, int), int) -> void) {
		var i = 0, iccode = pm.icm.iccode, max = iccode.length;
		while (i < max) {
			var start = i;
			while (i++ < max) {
				if (isBlockEnd(iccode(i - 1)) || i == max) {
					f(pm, (start, i), pm.icount(start));
					break;
				}
			}
		}
	}
}
// per-method information for instruction profiler
class IcMethodProf(icm: IcMethod) {
	var calls: int;			// invocation count
	var total: int;			// total instruction count
	var icount: Array<int>;		// per-instruction count
	var bcount: Array<Array<int>>;	// per-branch, per-target count
	new() {
		icount = Array.new(icm.iccode.length);
	}
	def recordBranch(branchLoc: int, target: int) {
		if (bcount == null) bcount = Array.new(icm.iccode.length);
		var bc = bcount(branchLoc);
		if (bc == null) {
			// first time this branch was executed
			bc = bcount(branchLoc) = Array.new(2);
			bc(0) = target;
			bc(1) = 1;
			return;
		}
		for (i = 0; i < bc.length; i = i + 2) {
			if (bc(i) == target) {
				// found an entry for this target
				bc(i + 1)++;
				return;
			}
		}
		// allocate a new entry at the end
		bc = bcount(branchLoc) = Arrays.grow(bc, bc.length + 2);
		bc(bc.length - 2) = target;
		bc(bc.length - 1) = 1;
	}
	def recordCall(callLoc: int, target: IcMethod) {
		// do nothing for now
	}
	def byTotal(that: IcMethodProf) -> bool {
		return this.total < that.total;
	}
	def byCalls(that: IcMethodProf) -> bool {
		return this.calls < that.calls;
	}
}

