// Copyright 2016 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def WASM_PAGE_SIZE = 65536;
def WASM_MAGIC = 0x6d736100;
def WASM_VERSION = 0x1;

component WasmSection {
	def UNKNOWN: byte = 0;   // code for unknown sections
	def TYPE: byte = 1;      // Function signature declarations
	def IMPORT: byte = 2;    // Import declarations
	def FUNCTION: byte = 3;  // Function declarations
	def TABLE: byte = 4;     // Indirect function table and other tables
	def MEMORY: byte = 5;    // Memory attributes
	def GLOBAL: byte = 6;    // Global declarations
	def EXPORT: byte = 7;    // Exports
	def START: byte = 8;     // Start function declaration
	def ELEMENT: byte = 9;   // Elements section
	def CODE: byte = 10;     // Function code
	def DATA: byte = 11;     // Data segments
	def NAME: byte = 12;     // Name section (encoded as a string)
}

component WasmExternal {
	def FUNCTION: byte = 0;
	def TABLE: byte = 1;
	def MEMORY: byte = 2;
	def GLOBAL: byte = 3;
}

// Install targets into registry for the compiler
component WasmComponent {
	new() {
		Aeneas.registerTarget(WasmTarget.new("wasm-js-test", true));
//		Aeneas.registerTarget(WasmTarget.new("wasm-js", false));
//		Aeneas.registerTarget(WasmTarget.new("wasm", false));
	}
}
// Common code for all WASM targets
class WasmTarget extends Target {
	def test: bool;

	new(name: string, test) super(name) { }

	def configure(compiler: Compiler, prog: Program) {
		def space = AddressSpaces.MEM32LE;
		def intNorm = IntNormalizers.I32LE; // TODO
		var mach = MachProgram.new(prog, space, space, intNorm);
		compiler.Reachability = true;
		MachModule.install(prog);
		var cirt = CiRuntime_TypeCon.new(MachModule.PTR_32.create0(), MachRuntime.new(mach));
		prog.typeEnv.add(cirt);
	}
	def emit(compiler: Compiler, prog: Program) {
		if (emitWasmModule(compiler, prog)) {
			if (test) emitJsTestWrapper(compiler, prog);
		}
	}
	def emitWasmModule(compiler: Compiler, prog: Program) -> bool {
		var rt = getRuntime(prog);
		// Lower to machine level from V3 level
		var config = SsaMachGenConfig.new();
		config.Int0LoadAsNullcheck = false;
		config.ImplicitNullChecks = false;
		rt.mach.build(compiler, config);
		def buffer = MachDataBuffer.new(WASM_PAGE_SIZE, 0, false, 300);

		// (1) Encode the WASM header
		//--------------------------------------------------------------------------------
		buffer.i4(WASM_MAGIC);
		buffer.i4(WASM_VERSION);

		var sizepos: int, start: int;

		// Add all the method signatures to the signatures vector
		def wasm = WasmProgram.new(rt.mach);
		def methods = prog.ir.methods;
		for (i < methods.length) {
			var m = methods[i];
			wasm.addSig(m);
			m.machIndex = i;
		}

		// (2) Emit signatures (types)
		//--------------------------------------------------------------------------------
		sizepos = emitSection(buffer, WasmSection.TYPE);
		start = buffer.pos;
		buffer.u4leb(u32.!(wasm.signatures.length));
		for (i < wasm.signatures.length) {
			var sig = wasm.signatures[i];
			buffer.u4leb(0x60u); // function type form
			var params = sig.0;
			buffer.u4leb(u32.!(params.length));
			for (p in params) buffer.i1(p);
			var rets = sig.1;
			buffer.u4leb(u32.!(rets.length));
			for (p in rets) buffer.i1(p);
		}
		patchSectionSize(buffer, sizepos, buffer.pos - start);

		// (3) Emit imports
		//--------------------------------------------------------------------------------
		var main = IrMethod.!(prog.getMain().member), main_index = -1;

		// (4) Emit function signature declarations
		//--------------------------------------------------------------------------------
		sizepos = emitSection(buffer, WasmSection.FUNCTION);
		start = buffer.pos;
		buffer.u4leb(u32.!(methods.length));
		for (i < methods.length) {
			var m = methods[i];
	                if (m == main) main_index = i;
			buffer.u4leb(wasm.getSigIndex(m));
		}
		patchSectionSize(buffer, sizepos, buffer.pos - start);

		// (5) Emit indirect function table
		//--------------------------------------------------------------------------------

		// (6) Emit memory section
		//--------------------------------------------------------------------------------
		sizepos = emitSection(buffer, WasmSection.MEMORY);
		start = buffer.pos;
	        buffer.i1(1);        // 1 memory
		// TODO: add the size of initialized memory and runtime to the heap size
		var pages = 2u + u32.!((rt.heapSize + (WASM_PAGE_SIZE - 1)) / WASM_PAGE_SIZE);
                buffer.i1(1);        // flags = contains maximum
		buffer.u4leb(pages); // initial memory size
		buffer.u4leb(pages); // maximum memory size
		patchSectionSize(buffer, sizepos, buffer.pos - start);

		// (7) Emit the export section
		//--------------------------------------------------------------------------------
		if (main_index >= 0) {
                	sizepos = emitSection(buffer, WasmSection.EXPORT);
                        start = buffer.pos;
                        buffer.i1(1);                  // 1 export: main
//                        var str = main.source.renderLong(StringBuffer.new()).toString();
                        buffer.i1(4);
                        buffer.iN("main");
                        buffer.i1(WasmExternal.FUNCTION);  // export function
			buffer.u4leb(u32.!(main_index));
			patchSectionSize(buffer, sizepos, buffer.pos - start);
                }

		// (8) Emit the function bodies
		//--------------------------------------------------------------------------------
		sizepos = emitSection(buffer, WasmSection.CODE);
		start = buffer.pos;
		buffer.u4leb(u32.!(methods.length));
		var context = SsaContext.new(compiler, prog);
		var codegen = WasmCodeGen.new(context, wasm, rt, buffer);
		for (i < methods.length) {
			codegen.generateWasm(methods[i]);
		}
		patchSectionSize(buffer, sizepos, buffer.pos - start);

		// (9) Emit the data section
		//--------------------------------------------------------------------------------
		sizepos = emitSection(buffer, WasmSection.DATA);
		start = buffer.pos;
		buffer.i1(1); // 1 data entry
		buffer.i1(0); // linear memory #0
		buffer.i1(WasmOp.I32_CONST.opcode);
		buffer.i4leb(WASM_PAGE_SIZE);  // linear memory offset
		buffer.i1(WasmOp.END.opcode);
		var data_sizepos = buffer.skip_u4leb(); // data size
		var data_start = buffer.pos;
		buffer.startAddr = WASM_PAGE_SIZE;
		// Encode meta region
		var m = wasm.mach;
		m.metaRegion.setStartAddr(buffer.endAddr());
		m.encodeRegion(m.metaRegion, buffer);
		// Encode data region
		m.dataRegion.setStartAddr(buffer.endAddr());
		m.layoutAllRecords();
		m.encodeRegion(m.dataRegion, buffer);

		patchSectionSize(buffer, data_sizepos, buffer.pos - data_start);
		patchSectionSize(buffer, sizepos, buffer.pos - start);

		buffer.patch(patchAddress(wasm.mach, _, _, _, _));

		// (10) Emit the name section
		//--------------------------------------------------------------------------------
		if (false) { // TODO: names
		sizepos = emitSection(buffer, WasmSection.UNKNOWN);
		buffer.u4leb(4);
		buffer.iN("name");
		start = buffer.pos;
		buffer.u4leb(u32.!(methods.length));
		var namebuf = StringBuffer.new();
		for (i < methods.length) {
			var m = methods[i];
			emitMethodName(buffer, m, namebuf);
			buffer.i1(0);  // locals count
		}
		patchSectionSize(buffer, sizepos, buffer.pos - start);
		}

		// Dump the bytes to the file
		var fileName = compiler.getOutputFileName(prog.name(), "wasm");
		var fd = System.fileOpen(fileName, false);
		if (fd < 0) {
			prog.ERROR.OutputError(fileName);
			return false;
		}
		System.fileWriteK(fd, buffer.array, 0, buffer.end());
		System.fileClose(fd);
		return true;
	}
	def patchAddress(mach: MachProgram, u: MachDataBuffer, a: Addr, posAddr: int, pos: int) {
		var abs = mach.absolute(a);
		if (Aeneas.PRINT_MACH.get()) {
			var buf = Strings.toBuffer("patch-address @+").puti(pos).puts(" <- ");
			V3.renderResult(a, null, buf);
			buf.puts(" = ").putx(abs);
			Terminal.putbln(buf);
		}
		u.overwrite_u4leb(pos, abs);
	}
	def emitJsTestWrapper(compiler: Compiler, prog: Program) -> bool {
		var fileName = compiler.getOutputFileName(prog.name(), "expect.js");
		var fd = System.fileOpen(fileName, false);
		if (fd < 0) {
			prog.ERROR.OutputError(fileName);
			return false;
		}
		var buf = StringBuffer.new();
		buf.format1("// %1\n", prog.name());

		buf.puts("var globalTestRuns = [\n");

		var runs = SpecParser.parseFile(prog.ERROR, prog.files[0], prog.inputs[0]);

		for (r = runs; r != null; r = r.tail) {
			var run = r.head;
			buf.puts("\t[");
			putJsValue(buf, run.expected);
			buf.puts(", [");
			for (i = run.input; i != null; i = i.tail) {
				putJsValue(buf, i.head);
				if (i.tail != null) buf.puts(", ");
			}
			buf.puts("]],\n");
		}

		buf.puts("];\n");

		Strings.writeBuffer(fd, buf);
		System.fileClose(fd);
		return true;
	}
	def putJsValue(buf: StringBuffer, r: Result) -> StringBuffer {
		if (r == null) return buf.puts("0");
		if (Box<int>.?(r)) return buf.puti(Int.unbox(Val.!(r)));
		if (Box<bool>.?(r)) return buf.puti(if(Bool.unbox(Val.!(r)), 1, 0));
		// TODO(fsi64 values)
		return buf;
	}
	def computeFieldOffsets(prog: Program, b: Vector<IrField>, start: int) {
		getRuntime(prog).mach.computeFieldOffsets(prog, b, start);
	}
	def addRoots(compiler: Compiler, prog: Program, add: IrSpec -> RaRoot) {
		getRuntime(prog).addRoots(prog, add);
	}
	def getRuntime(prog: Program) -> MachRuntime {
		return CiRuntime_TypeCon.!(prog.typeEnv.lookup(CiRuntimeModule.NAME)).runtime;
	}
	def emitSection(buffer: MachDataBuffer, code: int) -> int {
                buffer.i1(code);
		return buffer.skip_u4leb();
	}
	def patchSectionSize(buffer: MachDataBuffer, offset: int, size: int) {
		buffer.overwrite_u4leb(offset, size);
		buffer.atEnd();
	}
	def emitMethodName(buffer: MachDataBuffer, m: IrMethod, namebuf: StringBuffer) {
		namebuf.reset();
		m.renderLong(namebuf);
		buffer.u4leb(u32.!(namebuf.length));
		buffer.iN(namebuf.buffer);
	}
}
class WasmProgram(mach: MachProgram) {
	def map = HashMap<(Array<Type>, Type), int>.new(hashSig, equalSig);
	def signatures = Vector<(Array<byte>, Array<byte>)>.new();

	def addSig(m: IrMethod) {
		var index = map[(m.paramTypes, m.returnType)];
		if (index > 0) return;
		var params = Arrays.map(m.paramTypes, toWasmType);
		var rets = Arrays.map(Tuple.toTypeArray(m.returnType), toWasmType);
		signatures.add(params, rets);
		map[(m.paramTypes, m.returnType)] = signatures.length;
	}
	def getSigIndex(m: IrMethod) -> u32 {
		return getSigIndexByType(m.paramTypes, m.returnType);
	}
	def getSigIndexByType(paramTypes: Array<Type>, returnType: Type) -> u32 {
		var index = map[(paramTypes, returnType)];
		if (index == 0) return V3.fail("method signature not found");
		return u32.!(index - 1);
	}
}

component WasmType {
	def Void: byte = 0x40;
	def I32: byte = 0x7f;
	def I64: byte = 0x7e;
	def F32: byte = 0x7d;
	def F64: byte = 0x7c;

	def name(b: byte) -> string {
		match (b) {
			Void => return "void";
			I32 => return "i32";
			I64 => return "i64";
			F32 => return "f32";
			F64 => return "f64";
			_ => return "<unknown>";
		}
	}
}
def toWasmType(t: Type) -> byte {
	match (t.typeCon.kind) {
		V3Kind.INT => return toWasmIntType(IntType.!(t));
		V3Kind.ENUM => return toWasmIntType(V3.getVariantTagType(t));
		V3Kind.ENUM_SET => return toWasmIntType(V3.getEnumSetType(t));
		_ => return WasmType.I32;
	}
}
def toWasmIntType(t: IntType) -> byte {
	return if(t.width <= 32, WasmType.I32, WasmType.I64);
}
def hashSig(p: (Array<Type>, Type)) -> int {
	var h0 = p.1.hash;
	for (t in p.0) h0 = h0 * 33 + t.hash;
	return h0;
}
def equalSig(a: (Array<Type>, Type), b: (Array<Type>, Type)) -> bool {
	return a.1 == b.1 && Arrays.equal(a.0, b.0);
}
