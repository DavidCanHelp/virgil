// Copyright 2017 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class WasmCodeGen(prog: Program, wasm: WasmProgram) {
	def vars = Vector<MachVar>.new();
	var curBlockStart = 0;
	def code = Vector<byte>.new();
	var markingGen: int;
	def generate(m: IrMethod, buffer: DataBuffer) {
		if (false) {
			// Simply emit unreachable.
			buffer.i1(3);
			buffer.i1(0);
			buffer.i1(WasmOp.UNREACHABLE);
			buffer.i1(WasmOp.END);
			return;
		}
		markingGen = m.ssa.markGen;
		def blocks = SsaBlockOrder.new(m.ssa).computeOrder();
		for (i < blocks.length) {
			genBlock(i, blocks[i]);
		}
	}
	def genBlock(index: int, block: SsaBlockInfo) {
		// generate code for each instruction in a block
		curBlockStart = code.length;
		var next = block.block.next;
		while (SsaPhi.?(next)) next = next.next;  // skip phis
		for (i = next; SsaInstr.?(i); i = i.next) {
			var mv = makeVar(SsaInstr.!(i));
			mv.start = code.length;
			if (SsaApplyOp.?(i)) genApply(SsaApplyOp.!(i), mv);
			else if (SsaReturn.?(i)) genReturn(SsaReturn.!(i));
			else if (SsaIf.?(i)) genIf(SsaIf.!(i));
			else if (SsaGoto.?(i)) genGoto(SsaGoto.!(i).target());
			else if (SsaSwitch.?(i)) genSwitch(SsaSwitch.!(i));
			else if (SsaThrow.?(i)) genThrow(SsaThrow.!(i));
			mv.end = code.length;
			if (mv.varSize > 0) {
				for (i = mv.varNum; i < mv.varNum + mv.varSize; i++) {
					var ov = vars[i];
					ov.start = mv.start;
					ov.end = mv.end;
				}
			}
		}
	}
	def genApply(i: SsaApplyOp, mv: MachVar) {
	}
	def genReturn(i: SsaReturn) {
	}
	def genIf(i: SsaIf) {
	}
	def genGoto(i: SsaBlock) {
	}
	def genSwitch(i: SsaSwitch) {
	}
	def genThrow(i: SsaThrow) {
	}
	def makeVar(i: SsaInstr) -> MachVar {
		var max = markingGen;
		if (i.mark >= max) return vars[i.mark - max]; // already has a variable
		var isConst = SsaValue.?(i);
		var num = numVars(i), machVar = MachVar.new(i, vars.length, num, isConst);
		vars.add(machVar);
		while (--num > 0) vars.add(MachVar.new(i, vars.length, 1, isConst));
		i.mark = machVar.varNum + max; // maps instruction to var
		return machVar;
	}
	def numVars(i: SsaInstr) -> int {
		return 1; // TODO
	}
}

// Constants for wasm opcodes.
component WasmOp {
	def UNREACHABLE: byte 	= 0x00;
	def NOP: byte 		= 0x01;
	def BLOCK: byte 	= 0x02;
	def LOOP: byte 		= 0x03;
	def IF: byte 		= 0x04;
	def ELSE: byte 		= 0x05;
	def END: byte 		= 0x0b;
	def BR: byte 		= 0x0c;
	def BR_IF: byte 	= 0x0d;
	def BR_TABLE: byte 	= 0x0e;
	def RETURN: byte 	= 0x0f;
	def CALL: byte 		= 0x10;
	def CALL_INDIRECT: byte = 0x11;
	def DROP: byte 		= 0x1a;
	def SELECT: byte 	= 0x1b;
	def GET_LOCAL: byte 	= 0x20;
	def SET_LOCAL: byte 	= 0x21;
	def TEE_LOCAL: byte 	= 0x22;
	def GET_GLOBAL: byte 	= 0x23;
	def SET_GLOBAL: byte 	= 0x24;
	def I32_LOAD: byte 	= 0x28;
	def I64_LOAD: byte 	= 0x29;
	def F32_LOAD: byte 	= 0x2a;
	def F64_LOAD: byte 	= 0x2b;
	def I32_LOAD8_S: byte 	= 0x2c;
	def I32_LOAD8_U: byte 	= 0x2d;
	def I32_LOAD16_S: byte 	= 0x2e;
	def I32_LOAD16_U: byte 	= 0x2f;
	def I64_LOAD8_S: byte 	= 0x30;
	def I64_LOAD8_U: byte 	= 0x31;
	def I64_LOAD16_S: byte 	= 0x32;
	def I64_LOAD16_U: byte 	= 0x33;
	def I64_LOAD32_S: byte 	= 0x34;
	def I64_LOAD32_U: byte 	= 0x35;
	def I32_STORE: byte 	= 0x36;
	def I64_STORE: byte 	= 0x37;
	def F32_STORE: byte 	= 0x38;
	def F64_STORE: byte 	= 0x39;
	def I32_STORE8: byte 	= 0x3a;
	def I32_STORE16: byte 	= 0x3b;
	def I64_STORE8: byte 	= 0x3c;
	def I64_STORE16: byte 	= 0x3d;
	def I64_STORE32: byte 	= 0x3e;
	def CURRENT_MEMORY: byte = 0x3f;
	def GROW_MEMORY: byte 	= 0x40;
	def I32_CONST: byte 	= 0x41;
	def I64_CONST: byte 	= 0x42;
	def F32_CONST: byte 	= 0x43;
	def F64_CONST: byte 	= 0x44;
	def I32_EQZ: byte	= 0x45;
	def I32_EQ: byte	= 0x46;
	def I32_NE: byte	= 0x47;
	def I32_LT_S: byte	= 0x48;
	def I32_LT_U: byte	= 0x49;
	def I32_GT_S: byte	= 0x4a;
	def I32_GT_U: byte	= 0x4b;
	def I32_LE_S: byte	= 0x4c;
	def I32_LE_U: byte	= 0x4d;
	def I32_GE_S: byte	= 0x4e;
	def I32_GE_U: byte	= 0x4f;
	def I64_EQZ: byte	= 0x50;
	def I64_EQ: byte	= 0x51;
	def I64_NE: byte	= 0x52;
	def I64_LT_S: byte	= 0x53;
	def I64_LT_U: byte	= 0x54;
	def I64_GT_S: byte	= 0x55;
	def I64_GT_U: byte	= 0x56;
	def I64_LE_S: byte	= 0x57;
	def I64_LE_U: byte	= 0x58;
	def I64_GE_S: byte	= 0x59;
	def I64_GE_U: byte	= 0x5a;
	def F32_EQ: byte	= 0x5b;
	def F32_NE: byte	= 0x5c;
	def F32_LT: byte	= 0x5d;
	def F32_GT: byte	= 0x5e;
	def F32_LE: byte	= 0x5f;
	def F32_GE: byte	= 0x60;
	def F64_EQ: byte	= 0x61;
	def F64_NE: byte	= 0x62;
	def F64_LT: byte	= 0x63;
	def F64_GT: byte	= 0x64;
	def F64_LE: byte	= 0x65;
	def F64_GE: byte	= 0x66;
	def I32_CLZ: byte	= 0x67;
	def I32_CTZ: byte	= 0x68;
	def I32_POPCNT: byte	= 0x69;
	def I32_ADD: byte	= 0x6a;
	def I32_SUB: byte	= 0x6b;
	def I32_MUL: byte	= 0x6c;
	def I32_DIV_S: byte	= 0x6d;
	def I32_DIV_U: byte	= 0x6e;
	def I32_REM_S: byte	= 0x6f;
	def I32_REM_U: byte	= 0x70;
	def I32_AND: byte	= 0x71;
	def I32_OR: byte	= 0x72;
	def I32_XOR: byte	= 0x73;
	def I32_SHL: byte	= 0x74;
	def I32_SHR_S: byte	= 0x75;
	def I32_SHR_U: byte	= 0x76;
	def I32_ROTL: byte	= 0x77;
	def I32_ROTR: byte	= 0x78;
	def I64_CLZ: byte	= 0x79;
	def I64_CTZ: byte	= 0x7a;
	def I64_POPCNT: byte	= 0x7b;
	def I64_ADD: byte	= 0x7c;
	def I64_SUB: byte	= 0x7d;
	def I64_MUL: byte	= 0x7e;
	def I64_DIV_S: byte	= 0x7f;
	def I64_DIV_U: byte	= 0x80;
	def I64_REM_S: byte	= 0x81;
	def I64_REM_U: byte	= 0x82;
	def I64_AND: byte	= 0x83;
	def I64_OR: byte	= 0x84;
	def I64_XOR: byte	= 0x85;
	def I64_SHL: byte	= 0x86;
	def I64_SHR_S: byte	= 0x87;
	def I64_SHR_U: byte	= 0x88;
	def I64_ROTL: byte	= 0x89;
	def I64_ROTR: byte	= 0x8a;
	def F32_ABS: byte	= 0x8b;
	def F32_NEG: byte	= 0x8c;
	def F32_CEIL: byte	= 0x8d;
	def F32_FLOOR: byte	= 0x8e;
	def F32_TRUNC: byte	= 0x8f;
	def F32_NEAREST: byte	= 0x90;
	def F32_SQRT: byte	= 0x91;
	def F32_ADD: byte	= 0x92;
	def F32_SUB: byte	= 0x93;
	def F32_MUL: byte	= 0x94;
	def F32_DIV: byte	= 0x95;
	def F32_MIN: byte	= 0x96;
	def F32_MAX: byte	= 0x97;
	def F32_COPYSIGN: byte	= 0x98;
	def F64_ABS: byte	= 0x99;
	def F64_NEG: byte	= 0x9a;
	def F64_CEIL: byte	= 0x9b;
	def F64_FLOOR: byte	= 0x9c;
	def F64_TRUNC: byte	= 0x9d;
	def F64_NEAREST: byte	= 0x9e;
	def F64_SQRT: byte	= 0x9f;
	def F64_ADD: byte	= 0xa0;
	def F64_SUB: byte	= 0xa1;
	def F64_MUL: byte	= 0xa2;
	def F64_DIV: byte	= 0xa3;
	def F64_MIN: byte	= 0xa4;
	def F64_MAX: byte	= 0xa5;
	def F64_COPYSIGN: byte	= 0xa6;
	def I32_WRAP_I64: byte	= 0xa7;
	def I32_TRUNC_S_F32: byte	= 0xa8;
	def I32_TRUNC_U_F32: byte	= 0xa9;
	def I32_TRUNC_S_F64: byte	= 0xaa;
	def I32_TRUNC_U_F64: byte	= 0xab;
	def I64_EXTEND_S_I32: byte	= 0xac;
	def I64_EXTEND_U_I32: byte	= 0xad;
	def I64_TRUNC_S_F32: byte	= 0xae;
	def I64_TRUNC_U_F32: byte	= 0xaf;
	def I64_TRUNC_S_F64: byte	= 0xb0;
	def I64_TRUNC_U_F64: byte	= 0xb1;
	def F32_CONVERT_S_I32: byte	= 0xb2;
	def F32_CONVERT_U_I32: byte	= 0xb3;
	def F32_CONVERT_S_I64: byte	= 0xb4;
	def F32_CONVERT_U_I64: byte	= 0xb5;
	def F32_DEMOTE_F64: byte	= 0xb6;
	def F64_CONVERT_S_I32: byte	= 0xb7;
	def F64_CONVERT_U_I32: byte	= 0xb8;
	def F64_CONVERT_S_I64: byte	= 0xb9;
	def F64_CONVERT_U_I64: byte	= 0xba;
	def F64_PROMOTE_F32: byte	= 0xbb;
	def I32_REINTERPRET_F32: byte	= 0xbc;
	def I64_REINTERPRET_F64: byte	= 0xbd;
	def F32_REINTERPRET_I32: byte	= 0xbe;
	def F64_REINTERPRET_I64: byte	= 0xbf;
}
