// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A Result represents the result of evaluating an expression, which can either
// be a Val or an Exception.
class Result { }
// A Val represents a runtime value, such as integer, object reference, tuple, etc.
class Val extends Result {
	def equals(val: Val) -> bool { return this == val; }
}
// An Exception represents an exceptional result (i.e. not a value), for example a
// safety violation such as !NullCheckException or !DivideByZeroException.
class Exception(error: string, msg: string, trace: List<Source>) extends Result { }
// The Box class provides a utility to simplify using first-order values 
// (e.g. the integer 0) as meta-level values (e.g. the Constant #0).
class Box<T>(val: T) extends Val {
	def equals(other: Val) -> bool {
		if (other == this) return true;
		if (other == Values.BOTTOM) {
			var none: T;
			return this.val == none;
		}
		return Box<T>.?(other) && this.val == Box<T>.!(other).val;
	}
}
// The source position in a method, such as for an exception stacktrace.
class Source(mdecl: VstMethod, line: int, column: int, tail: Source) {
	def render(buffer: StringBuffer) -> StringBuffer {
		mdecl.render(buffer.puts("in "));
		if (line >= 0) buffer.format3(" [%1 @ %2:%3]", mdecl.token.fileName, line, column);
		return buffer;
	}
}
// Utility methods for values.
component Values {
	var BOTTOM: Val = null;
	var NONE: Array<Val> = [];
	def equal(val1: Val, val2: Val) -> bool {
		if (val1 == val2) return true;
		if (val1 == null) return val2.equals(val1);
		return val1.equals(val2);
	}
}
