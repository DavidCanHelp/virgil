// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class Member_TypeCon extends TypeCon {
	new(name: string, kind: int, arity: int, typeCache: TypeCache) 
		super(name, kind, arity, typeCache) { }
	def lookupMember(t: Type, name: string, receiver: bool) -> Member { return null; }
	def lookupInfix(infix: byte, rtype: Type) -> Operator { return null; }
}
// Member of a type.
class Member(writable: bool, memberType: Type, typeParams: List<TypeParam>) {
	def bindTypeArgs(t: List<Type>) -> Member { return this; }
	def genRead<E>(gen: Gen<E>, receiver: E) -> E;
	def genWrite<E>(gen: Gen<E>, receiver: E, val: E) -> E;
	def genApply<E>(gen: Gen<E>, receiver: E, args: Array<E>) -> E {
		return gen.genCall(Arrays.prepend(genRead(gen, receiver), args));
	}
}
// A generator of expressions keeps the core Operator framework from depending
// on any one particular representation of expressions (e.g. SSA)
class Gen<E> {
	def getCompiler() -> Compiler;
	def getProgram() -> Program;
	def genVal(t: Type, v: Val) -> E;
	def genApplyOp(op: Operator, args: Array<E>) -> E;
	def genInstOp(op: Operator, args: Array<E>, indexMap: Array<int>) -> E;
	def genCall(args: Array<E>) -> E;
	def genOp(op: Operator) -> E;
	def subst(op: Operator) -> Operator;
	def expectReceiver(r: E) -> E;
	def expectNoReceiver(r: E);
	def setFact(e: E, facts: int);
}
// Member of a type that represents an operator that is either
// OP: a naked operator, APPLY: applied to a receiver, CLOSURE: closed over a receiver
class OpMember extends Member {
	def op: Operator;
	def mode: int;
	new(mode, op, memberType: Type, typeParams: List<TypeParam>) super(false, memberType, typeParams) { }
	def genRead<E>(gen: Gen<E>, receiver: E) -> E {
		var op = gen.subst(this.op);
		var none: E;
		if (mode == Members.OP) {
			gen.expectNoReceiver(receiver);
			return gen.genOp(op);
		} else if (mode == Members.APPLY) {
			if (receiver != none) return gen.genApplyOp(op, [receiver]);
			else return gen.genOp(op);
		} else {
			if (receiver != none) return gen.genInstOp(op, [receiver], Members.INDEX_0);
			else return gen.genOp(op);
		}
	}
	def genApply<E>(gen: Gen<E>, receiver: E, args: Array<E>) -> E {
		var op = gen.subst(this.op);
		if (mode == Members.OP) {
			gen.expectNoReceiver(receiver);
			return gen.genApplyOp(op, args);
		} else if (mode == Members.APPLY) {
			return gen.genCall(Arrays.prepend(gen.genApplyOp(op, [gen.expectReceiver(receiver)]), args));
		} else {
			return gen.genApplyOp(op, Arrays.prepend(gen.expectReceiver(receiver), args));
		}
	}
	def bindTypeArgs(t: List<Type>) -> Member {
		if (typeParams == null) return this;
		var typeArgs = TypeArgs.new(TypeEnv.new(null, typeParams, null), Lists.toArray(t));
		return OpMember.new(mode, op.subst(typeArgs.substitute), memberType.substitute(typeArgs), null);
	}
}
// A member that represents a statically-known value
class ValueMember extends Member {
	def val: Val;
	new(t: Type, val) super(false, t, null) { }
	def genRead<E>(gen: Gen<E>, receiver: E) -> E {
		gen.expectNoReceiver(receiver);
		return gen.genVal(memberType, val);
	}
}
// Utilities for constructing operator members in different modes
component Members {
	def CLOSURE	= 1;	// closes over receiver if supplied
	def APPLY	= 2;	// applied to receiver if supplied
	def OP		= 3;	// should not have a receiver
	def INDEX_0	= [0];	// commonly used index map

	def closureMember(op: Operator, typeParams: List<TypeParam>) -> Member {
		return OpMember.new(CLOSURE, op, op.getResidualType(INDEX_0), typeParams);
	}
	def applyMember(op: Operator, typeParams: List<TypeParam>) -> Member {
		return OpMember.new(APPLY, op, op.resultType, typeParams);
	}
	def opMember(op: Operator, typeParams: List<TypeParam>) -> Member {
		return OpMember.new(OP, op, op.getFunctionType(), typeParams);
	}
	def valMember(t: Type, v: Val, nullCheck: bool) -> Member {
		return ValueMember.new(t, v);
	}
}
// A utility class for types that only expose calls of the form Type.method<T>()
class Syscall_TypeCon extends Member_TypeCon {
	def syscalls = Strings.newMap<(Operator, List<TypeParam>)>();
	new(name: string) super(name, V3Kind.VOID, 0, TypeUtil.globalCache) { }
	def lookupMember(t: Type, name: string, receiver: bool) -> Member {
		if (!receiver) {
			var t = syscalls.get(name);
			if (t.0 != null) return Members.opMember(t);
		}
		return null;
	}
	def add(name: string, eval: (string, Arguments) -> Result, paramTypes: Array<Type>, returnType: Type) {
		syscalls.set(name, (OperatorOf.new(Opcode.SystemOp, TypeUtil.NO_TYPES, paramTypes, returnType, name, eval), null));
	}
}
