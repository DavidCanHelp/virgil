// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// constants for openness
type Open { case UNKNOWN; case OPEN; case CLOSED; }

// Represents the value arguments, type arguments, and dynamic environment
// that is passed to an operator for it to evaluate itself.
class Arguments {
	def numArgs() -> int;
	def getArg(i: int) -> Val;
	def getType(i: int) -> Type;
	def getTypes() -> Array<Type>;
	def getProgram() -> Program;
	def fwCall(spec: IrSpec, recvr: Val, startArg: int, endArg: int) -> Result;
	def throw(ex: string, msg: string) -> Exception;
}
class Computation(typeArgs: Array<Type>, paramTypes: Array<Type>, resultType: Type) {
	var openness: Open;			// lazily computed open / closed
	var funcType: Type;			// lazily computed function type
	def subst(f: Type -> Type) -> Computation;
	def getFunctionType() -> Type {
		if (funcType == null) funcType = Function.newType(Tuple.newType(Lists.fromArray(paramTypes)), resultType);
		return funcType;
	}
	def checkOpenness() -> Open {
		// openness is not known. check all type args and operator type
		if (openness != Open.UNKNOWN) return openness;
		var hash = resultType.hash;
		for (t in typeArgs) hash = hash | t.hash;
		for (t in paramTypes) hash = hash | t.hash;
		return openness = if((hash & TypeConst.OPEN_MASK) != 0, Open.OPEN, Open.CLOSED);
	}
	def isPolymorphic() -> bool {
		return checkOpenness() == Open.OPEN;
	}
	// get the type of this operator when the given parameter indices are bound
	def getResidualType(indexMap: Array<int>) -> Type {
		if (indexMap.length == 0) return getFunctionType();
		return Function.newType(getResidualParamType(indexMap), resultType);
	}
	// get the list of residual types
	def getResidualParamTypeList(indexMap: Array<int>) -> List<Type> {
		if (indexMap.length == 0) return null;
		var rl: List<Type>;
		var p = paramTypes, iv = indexMap.length - 1;
		for (i = p.length - 1; i >= 0; i--) {
			var pt = p(i);
			if (iv < 0 || i != indexMap(iv)) rl = List.new(pt, rl);
			else iv--;
		}
		return rl;
	}
	def getResidualParamType(indexMap: Array<int>) -> Type {
		return Tuple.TYPECON.create(getResidualParamTypeList(indexMap));
	}
}
// An operator that represents a single step of computation as a function
// from arguments (both type arguments and value arguments) to a result,
// either a value or an exception.
// XXX: Use TypeArgs instead of Array<Type> to represent type arguments
class Operator extends Computation {
	def opcode: Opcode;
	new(opcode, typeArgs: Array<Type>, paramTypes: Array<Type>, resultType: Type)
		super(typeArgs, paramTypes, resultType) { }

	def evaluate(args: Arguments) -> Result;
	def subst(f: Type -> Type) -> Operator;
	def attr<T>() -> T {
		return OperatorOf<T>.!(this).attribute;
	}
	def equals(that: Operator) -> bool {
		if (this == that) return true;
		return this.opcode == that.opcode && Arrays.equal(this.typeArgs, that.typeArgs);
	}
}
// The actual implementation of operator, with an attribute of hidden type <T>
class OperatorOf<T> extends Operator {
	def attribute: T;
	def eval: (T, Arguments) -> Result;
	new(opcode: Opcode, typeArgs: Array<Type>, paramTypes: Array<Type>, resultType: Type, attribute, eval)
		super(opcode, typeArgs, paramTypes, resultType) { }
	def evaluate(args: Arguments) -> Result {
		return eval(attribute, args);
	}
	def subst(f: Type -> Type) -> Operator {
		if (openness == Open.CLOSED) return this;
		if (checkOpenness() == Open.OPEN) {
			return OperatorOf.new(opcode, Arrays.map(typeArgs, f), 
				Arrays.map(paramTypes, f), f(resultType), attribute, eval);
		}
		return this;
	}	
	def equals(op: Operator) -> bool {
		if (this.opcode != op.opcode) return false;
		if (this == op) return true;
		if (OperatorOf<T>.?(op)) {
			var that = OperatorOf<T>.!(op);
			return this.attribute == that.attribute &&
			       Arrays.equal(this.typeArgs, that.typeArgs);
		}
		return false;
	}
}
