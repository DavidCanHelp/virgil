// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Represents the value arguments, type arguments, and dynamic environment
// that is passed to an operator for it to evaluate itself.
class Arguments {
	def numArgs() -> int;
	def getArg(i: int) -> Val;
	def getType(i: int) -> Type;
	def getTypes() -> Array<Type>;
	def getDynamicPortion() -> DynamicPortion;
	def fwCall(spec: IrSpec, recvr: Val, startArg: int, endArg: int) -> Result;
	def throw(ex: string, msg: string) -> Exception;
}
// An operator that represents a single step of computation as a function
// from arguments (both type arguments and value arguments) to a result,
// either a value or an exception.
class Operator {
	def OPEN = 1;
	def CLOSED = 2;
	def opcode: int;			// XXX: use byte for global opcode number
	def typeArgs: Array<Type>;		// type arguments
	def paramTypes: Array<Type>;		// parameters
	def resultType: Type;			// result type
	def numParams = paramTypes.length;	// cache of number of parameters
	// XXX: use a byte to encode the openness
	var openness: int;				// lazily computed open / closed
	var funcType: Type;				// lazily computed function type

	new(opcode, typeArgs, paramTypes, resultType) {}

	def evaluate(args: Arguments) -> Result;
	def equals(e: Operator) -> bool;
	def subst(f: Type -> Type) -> Operator;
	def copy(typeArgs: Array<Type>) -> Operator;
	def attr<T>() -> T {
		return OperatorOf<T>.!(this).attribute;
	}
	def getFunctionType() -> Type {
		if (funcType == null) funcType = Function.newType(Tuple.newType(Lists.fromArray(paramTypes)), resultType);
		return funcType;
	}
	def checkOpenness() -> int {
		// openness is not known. check all type args and operator type
		if (openness != 0) return openness;
		var hash = resultType.hash;
		for (t in typeArgs) hash = hash | t.hash;
		for (t in paramTypes) hash = hash | t.hash;
		return openness = if((hash & TypeConst.OPEN_MASK) != 0, OPEN, CLOSED);
	}
	def isPolymorphic() -> bool {
		return checkOpenness() == OPEN;
	}
	// get the type of this operator when the given parameter indices are bound
	def getResidualType(indexMap: Array<int>) -> Type {
		if (indexMap.length == 0) return getFunctionType();
		var rl = getResidualParamTypeList(indexMap);
		return Function.newType(Tuple.TYPECON.create(rl), resultType);
	}
	// get the list of residual types
	def getResidualParamTypeList(indexMap: Array<int>) -> List<Type> {
		if (indexMap.length == 0) return null;
		var rl: List<Type>;
		var p = paramTypes, iv = indexMap.length - 1;
		for (i = p.length - 1; i >= 0; i--) {
			var pt = p(i);
			if (iv < 0 || i != indexMap(iv)) rl = List.new(pt, rl);
			else iv--;
		}
		return rl;
	}
}
// The actual implementation of operator, with an attribute of hidden type <T>
class OperatorOf<T> extends Operator {
	def attribute: T;
	def eval: (T, Arguments) -> Result;
	new(opcode: int, typeArgs: Array<Type>, paramTypes: Array<Type>, resultType: Type, attribute, eval) 
		: super(opcode, typeArgs, paramTypes, resultType) { }
	def evaluate(args: Arguments) -> Result {
		return eval(attribute, args);
	}
	def equals(e: Operator) -> bool {
		if (e == this) return true;
		if (OperatorOf<T>.?(e)) {
			var o = OperatorOf<T>.!(e);
			return o.attribute == this.attribute 
				&& o.eval == this.eval && Arrays.equal(o.typeArgs, typeArgs);
		}
		return false;
	}
	def subst(f: Type -> Type) -> Operator {
		if (openness == CLOSED) return this;
		if (checkOpenness() == OPEN) {
			return OperatorOf.new(opcode, Arrays.map(typeArgs, f), 
				Arrays.map(paramTypes, f), f(resultType), attribute, eval);
		}
		return this;
	}
	def copy(typeArgs: Array<Type>) -> Operator {
		if (typeArgs.length == 0) return this;
		return OperatorOf<T>.new(opcode, typeArgs, paramTypes, resultType, attribute, eval);
	}
}
// a value that wraps an operator and zero or more bound values
// so that it may be used as a first-class function
class OpClosure extends Val {
	def op: Operator;		// the operator
	def vals: Array<Val>;		// bound values
	def indexMap: Array<int>;	// (sorted) index of each value
	new(op, vals, indexMap) {}
	// closures are equal iff operators are equal and all indexes and bound values are equal
	def equals(val: Val) -> bool {
		if (val == this) return true;
		if (!OpClosure.?(val)) return false;
		var that = OpClosure.!(val);
		if (!this.op.equals(that.op)) return false;
		if (this.vals.length != that.vals.length) return false;
		for (i = 0; i < vals.length; i++) {
			if (this.indexMap(i) != that.indexMap(i)) return false;
			if (!Values.equal(this.vals(i), that.vals(i))) return false;
		}
		return true;
	}
	def complex() -> bool {
		return vals.length > 0;
	}
}
