// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.
type Opcode {
	case Equal;
	case NotEqual;
	case IntAdd;	// (width: byte, signed: bool);
	case IntSub;	// (width: byte, signed: bool);
	case IntMul;	// (width: byte, signed: bool);
	case IntDiv;	// (width: byte, signed: bool);
	case IntMod;	// (width: byte, signed: bool);
	case IntAnd;	// (width: byte, signed: bool);
	case IntOr;	// (width: byte, signed: bool);
	case IntXor;	// (width: byte, signed: bool);
	case IntShl;	// (width: byte, signed: bool);
	case IntSar;	// (width: byte, signed: bool);
	case IntShr;	// (width: byte, signed: bool);
	case IntLt;	// (width: byte, signed: bool);
	case IntGt;	// (width: byte, signed: bool);
	case IntLteq;	// (width: byte, signed: bool);
	case IntGteq;	// (width: byte, signed: bool);
	case IntWide;	// (op: Operator);
	case IntConvert;
	case IntMixedSignCmp;
	case BoolAnd;
	case BoolOr;
	case BoolNot;
	case NullCheck;
	case BoundsCheck;
	case TypeSubsume;
	case TypeCast;	// (cast: TypeCast);
	case TypeQuery;	// (query: TypeCast);
	case ArrayAlloc;
	case ArrayInit;	// (length: int);
	case ArrayGetElem;
	case ArraySetElem;
	case ArrayGetLength;
	case ClassAlloc;	// (method: IrMethod);
	case ClassGetField;	// (field: IrField);
	case ClassInitField;	// (field: IrField);
	case ClassSetField;	// (field: IrField);
	case ClassGetMethod;	// (method: IrMethod);
	case ClassGetVirtual;	// (method: IrMethod);
	case ClassGetVirtFunc;	// (method: IrMethod);
	case ComponentInit;	// (method: IrMethod);
	case ComponentGetField;	// (field: IrField);
	case ComponentSetField;	// (field: IrField);
	case ComponentGetMethod;	// (method: IrField);
	case TupleCreate;
	case TupleGetElem;	// (index: int);
	case CallMethod;	// (method: IrMethod);
	case CallClassVirtual;	// (method: IrMethod);
	case CallClosure;
	case CallFunction;
	case CreateClosure;	// (method: IrMethod);
	case SystemOp;
	case VariantGetTag;
	case ConditionalThrow;	// (exception: string);

	case PtrLoad;
	case PtrStore;
	case PtrCmpSwp;
	case PtrAdd;
	case PtrSub;
	case Alloc;
	case UnsignedLt;
	case UnsignedLteq;
	case UnsignedGt;
	case UnsignedGteq;
	case CallAddress;
	case CallerIp;
	case CallerSp;
	case MachSpecial;
	case MachSystemOp;
}
component Operators {
	def table = Array<int>.new(80);
	new() {
		// shorthand for SSA optimization facts
		var F = Facts.O_FOLDABLE;
		var P = Facts.O_PURE | Facts.O_FOLDABLE; // pure => foldable
		var C = Facts.O_COMMUTATIVE;
		var A = Facts.O_ASSOCIATIVE;
		var NZ   = Facts.V_NON_ZERO;
		var NNEG = Facts.V_NON_NEGATIVE;
		var NNC = Facts.O_NO_NULL_CHECK;

		// register all operators and their optimization facts
		op0(Opcode.Equal,			P  |C);
		op0(Opcode.NotEqual, 			P  |C);
		op1(Opcode.IntAdd, 			P|A|C);
		op1(Opcode.IntSub, 			P    );
		op1(Opcode.IntMul, 			P|A|C);
		op1(Opcode.IntDiv, 			F    );
		op1(Opcode.IntMod, 			F    );
		op1(Opcode.IntAnd, 			P|A|C);
		op1(Opcode.IntOr, 			P|A|C);
		op1(Opcode.IntXor, 			P|A|C);
		op1(Opcode.IntShl, 			P    );
		op1(Opcode.IntSar, 			P    );
		op1(Opcode.IntShr, 			P    );
		op1(Opcode.IntLt, 			P    );
		op1(Opcode.IntGt, 			P    );
		op1(Opcode.IntLteq, 			P    );
		op1(Opcode.IntGteq, 			P    );
		op1(Opcode.IntWide, 			P    );
		op0(Opcode.IntMixedSignCmp,		0    );
		op0(Opcode.IntConvert, 			P    );
		op0(Opcode.BoolAnd, 			P|A|C);
		op0(Opcode.BoolOr, 			P|A|C);
		op0(Opcode.BoolNot, 			P    );
		op1(Opcode.TypeCast, 			F    );
		op1(Opcode.TypeQuery, 			P);
		op0(Opcode.TypeSubsume, 		P);
		op0(Opcode.ArrayAlloc, 			NZ);
		op1(Opcode.ArrayInit, 			NZ);
		op0(Opcode.ArrayGetElem, 		0);
		op0(Opcode.ArraySetElem, 		0);
		op0(Opcode.ArrayGetLength, 		F|NNEG);
		op1(Opcode.ClassAlloc, 			NZ);
		op1(Opcode.ClassGetField, 		0);
		op1(Opcode.ClassSetField, 		0);
		op1(Opcode.ClassInitField, 		0);
		op1(Opcode.ClassGetMethod, 		NZ|F);
		op1(Opcode.ClassGetVirtual, 		NZ|F);
		op1(Opcode.ClassGetVirtFunc, 		NZ|F);
		op1(Opcode.ComponentInit, 		0);
		op1(Opcode.ComponentGetField, 		NNC);
		op1(Opcode.ComponentSetField, 		NNC);
		op1(Opcode.ComponentGetMethod, 		NZ|P|NNC);
		op0(Opcode.TupleCreate, 		P);
		op1(Opcode.TupleGetElem, 		P);
		op0(Opcode.NullCheck, 			F|NZ);
		op0(Opcode.BoundsCheck, 		F);
		op1(Opcode.CallMethod, 			0);
		op1(Opcode.CallClassVirtual, 		0);
		op0(Opcode.CallClosure, 		0);
		op0(Opcode.CallFunction, 		0);
		op1(Opcode.CreateClosure, 		NZ);
		op0(Opcode.SystemOp, 			0);
		op0(Opcode.VariantGetTag,		P|NNEG);
		op1(Opcode.ConditionalThrow, 		F);

		op0(Opcode.PtrLoad,		0);
		op0(Opcode.PtrStore,		0);
		op0(Opcode.PtrAdd,		P); // XXX: could be foldable with offset
		op0(Opcode.PtrSub,		P);
		op0(Opcode.Alloc,		0);
		op0(Opcode.UnsignedLt,		P);
		op0(Opcode.UnsignedLteq,	P);
		op0(Opcode.UnsignedGt,		P);
		op0(Opcode.UnsignedGteq,	P);
		op0(Opcode.CallAddress,		0);
		op0(Opcode.CallerIp,		P);
		op0(Opcode.CallerSp,		P);
		op0(Opcode.MachSpecial,		0);
		op0(Opcode.MachSystemOp,	0);
	}

	def op0(opcode: Opcode, f: int) { table(opcode.tag) = f; }
	def op1(opcode: Opcode, f: int) { table(opcode.tag) = f; }
	def facts(opcode: Opcode) -> int { return table(opcode.tag); }
}

