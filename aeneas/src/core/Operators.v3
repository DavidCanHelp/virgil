// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.
type Opcode {
	case OverloadedEq;
	case TypeCast;
	case TypeQuery;
	case FutureIntTypeCast;
	case FutureIntTypeQuery;

	case IntEq;
	case IntAdd;	// (width: byte, signed: bool);
	case IntSub;	// (width: byte, signed: bool);
	case IntMul;	// (width: byte, signed: bool);
	case IntDiv;	// (width: byte, signed: bool);
	case IntMod;	// (width: byte, signed: bool);
	case IntAnd;	// (width: byte, signed: bool);
	case IntOr;	// (width: byte, signed: bool);
	case IntXor;	// (width: byte, signed: bool);
	case IntShl;	// (width: byte, signed: bool);
	case IntSar;	// (width: byte, signed: bool);
	case IntShr;	// (width: byte, signed: bool);
	case IntLt;	// (width: byte, signed: bool);
	case IntLteq;	// (width: byte, signed: bool);
	case IntWide;	// (op: Operator);
	case IntConvert;

	case IntCastI;
	case IntCastF;
	case IntQueryI;
	case IntQueryF;
	case IntPromoteI;
	case IntViewI;
	case IntViewF;
	case IntRoundF;

	case FloatCastI;
	case FloatCastD;
	case FloatQueryI;
	case FloatQueryD;
	case FloatPromoteI;
	case FloatPromoteF;
	case FloatViewI;
	case FloatRoundI;
	case FloatRoundD;

	case BoolEq;
	case BoolAnd;
	case BoolOr;
	case BoolNot;

	case FloatSign;		// (width: byte)
	case FloatExponent;	// (width: byte)
	case FloatFraction;	// (width: byte)
	case FloatAdd;		// (width: byte)
	case FloatSub;		// (width: byte)
	case FloatMul;		// (width: byte)
	case FloatDiv;		// (width: byte)
	case FloatMod;		// (width: byte)
	case FloatEq;		// (width: byte)
	case FloatNe;		// (width: byte)
	case FloatLt;		// (width: byte)
	case FloatLteq;		// (width: byte)
	case FloatAbs;		// (width: byte)
	case FloatCeil;		// (width: byte)
	case FloatFloor;	// (width: byte)
	case FloatSqrt;		// (width: byte)
	case FloatPow;		// (width: byte)
	case FloatLog;		// (width: byte)
	case FloatExp;		// (width: byte)

	case RefEq;
	case NullCheck;
	case BoundsCheck;
	case TypeSubsume;
	case ArrayAlloc;
	case ArrayInit;			// (length: int);
	case ArrayGetElem;
	case ArraySetElem;
	case ArrayGetLength;
	case ClassAlloc;		// (method: IrMethod);
	case ClassGetField;		// (field: IrField);
	case ClassInitField;		// (field: IrField);
	case ClassSetField;		// (field: IrField);
	case ClassGetMethod;		// (method: IrMethod);
	case ClassGetVirtual;		// (method: IrMethod);
	case ClassGetVirtFunc;		// (method: IrMethod);

	case VariantEq;
	case VariantGetTag;
	case VariantGetField;		// (field: IrField);
//	case VariantGetVirtual;		// (method: IrMethod);
//	case VariantGetVirtFunc;	// (method: IrMethod);

	case Init;	// (method: IrMethod);

	case ComponentGetField;	// (field: IrField);
	case ComponentSetField;	// (field: IrField);
	case TupleCreate;
	case TupleGetElem;	// (index: int);
	case CallMethod;	// (method: IrMethod);
	case CallClassVirtual;	// (method: IrMethod);
	case CallClosure;
	case CallFunction;
	case CreateClosure;	// (method: IrMethod);
	case SystemOp;
	case ConditionalThrow;	// (exception: string);

	case PtrLoad;
	case PtrStore;
	case PtrCmpSwp;
	case PtrAdd;
	case PtrSub;
	case PtrAtContents;
	case Alloc;
	case UnsignedLt;
	case UnsignedLteq;
	case UnsignedGt;
	case UnsignedGteq;
	case CallAddress;
	case CallerIp;
	case CallerSp;
	case MachSystemOp;

	case VstSugar;  // (op: VstOperator)
}
component Operators {
	def table = Array<Fact.set>.new(120);
	new() {
		// shorthand for SSA optimization facts
		var F = Fact.O_FOLDABLE;
		var P = Fact.O_PURE | Fact.O_FOLDABLE; // pure => foldable
		var C = Fact.O_COMMUTATIVE;
		var A = Fact.O_ASSOCIATIVE;
		var NZ   = Fact.V_NON_ZERO;
		var NNEG = Fact.V_NON_NEGATIVE;
		var NNC = Fact.O_NO_NULL_CHECK;
                var NONE = Facts.NONE;

		// register all operators and their optimization facts
		op0(Opcode.OverloadedEq,		P  |C);

		op0(Opcode.IntEq,			P  |C);
		op1(Opcode.IntAdd, 			P|A|C);
		op1(Opcode.IntSub, 			P    );
		op1(Opcode.IntMul, 			P|A|C);
		op1(Opcode.IntDiv, 			F    );
		op1(Opcode.IntMod, 			F    );
		op1(Opcode.IntAnd, 			P|A|C);
		op1(Opcode.IntOr, 			P|A|C);
		op1(Opcode.IntXor, 			P|A|C);
		op1(Opcode.IntShl, 			P    );
		op1(Opcode.IntSar, 			P    );
		op1(Opcode.IntShr, 			P    );
		op1(Opcode.IntLt, 			P    );
		op1(Opcode.IntLteq, 			P    );
		op1(Opcode.IntWide, 			P    );
		op0(Opcode.IntConvert, 			P    );

		op0(Opcode.IntCastI,			F    );
		op0(Opcode.IntCastF,			F    );
		op0(Opcode.IntQueryI,			P    );
		op0(Opcode.IntQueryF,			P    );
		op0(Opcode.IntPromoteI,			P    );
		op0(Opcode.IntViewI,			P    );
		op0(Opcode.IntViewF,			P    );
		op0(Opcode.IntRoundF,			P    );

		op0(Opcode.FloatCastI,			F    );
		op0(Opcode.FloatCastD,			F    );
		op0(Opcode.FloatQueryI,			P    );
		op0(Opcode.FloatQueryD,			P    );
		op0(Opcode.FloatPromoteI,		P    );
		op0(Opcode.FloatPromoteF,		P    );
		op0(Opcode.FloatViewI,			P    );
		op0(Opcode.FloatRoundI,			P    );
		op0(Opcode.FloatRoundD,			P    );

		op0(Opcode.BoolEq,			P  |C);
		op0(Opcode.BoolAnd, 			P|A|C);
		op0(Opcode.BoolOr, 			P|A|C);
		op0(Opcode.BoolNot, 			P    );
		op0(Opcode.FloatViewI,			P    );
		op0(Opcode.IntViewF,			P    );
		op0(Opcode.FloatSign,			P    );
		op0(Opcode.FloatExponent,		P    );
		op0(Opcode.FloatFraction,		P    );
		op0(Opcode.FloatRoundI,			P    );
		op0(Opcode.FloatRoundD,			P    );
		op1(Opcode.FloatAdd,			P|A|C);
		op1(Opcode.FloatSub,			P    );
		op1(Opcode.FloatMul,			P|A|C);
		op1(Opcode.FloatDiv,			P    );
		op1(Opcode.FloatMod,			P    );
		op1(Opcode.FloatEq,			P  |C);
		op1(Opcode.FloatNe,			P  |C);
		op1(Opcode.FloatLt,			P    );
		op1(Opcode.FloatLteq,			P    );
		op0(Opcode.FloatAbs,			P    );
		op0(Opcode.FloatCeil,			P    );
		op0(Opcode.FloatFloor,			P    );
		op0(Opcode.FloatSqrt,			P    );
		op1(Opcode.FloatPow,			P    );
		op0(Opcode.FloatLog,			P    );
		op0(Opcode.FloatExp,			P    );
		op0(Opcode.RefEq,			P  |C);
		op1(Opcode.TypeCast, 			F    );
		op1(Opcode.TypeQuery, 			P    );
		op0(Opcode.FutureIntTypeQuery, 		P    );
		op0(Opcode.TypeSubsume, 		P    );
		op0(Opcode.ArrayAlloc, 			NZ);
		op1(Opcode.ArrayInit, 			NZ);
		op0(Opcode.ArrayGetElem, 		NONE);
		op0(Opcode.ArraySetElem, 		NONE);
		op0(Opcode.ArrayGetLength, 		F|NNEG);
		op1(Opcode.ClassAlloc, 			NZ);
		op1(Opcode.ClassGetField, 		NONE);
		op1(Opcode.ClassSetField, 		NONE);
		op1(Opcode.ClassInitField, 		Fact.O_NO_NULL_CHECK);
		op1(Opcode.ClassGetMethod, 		NZ|F);
		op1(Opcode.ClassGetVirtual, 		NZ|F);
		op1(Opcode.ClassGetVirtFunc, 		NZ|F);
		op1(Opcode.Init, 			NONE);
		op1(Opcode.ComponentGetField, 		NNC);
		op1(Opcode.ComponentSetField, 		NNC);
		op0(Opcode.TupleCreate, 		P);
		op1(Opcode.TupleGetElem, 		P);
		op0(Opcode.NullCheck, 			F|NZ);
		op0(Opcode.BoundsCheck, 		F);
		op1(Opcode.CallMethod, 			NONE);
		op1(Opcode.CallClassVirtual, 		NONE);
		op0(Opcode.CallClosure, 		NONE);
		op0(Opcode.CallFunction, 		NONE);
		op1(Opcode.CreateClosure, 		NZ|P|NNC);
		op0(Opcode.SystemOp, 			NONE);
		op0(Opcode.VariantEq,			P  |C);
		op0(Opcode.VariantGetTag,		P|NNEG);
		op1(Opcode.VariantGetField, 		P);
		op1(Opcode.ConditionalThrow, 		F);

		op0(Opcode.PtrLoad,		NONE);
		op0(Opcode.PtrStore,		NONE);
		op0(Opcode.PtrAdd,		P); // XXX: could be foldable with offset
		op0(Opcode.PtrSub,		P);
		op0(Opcode.PtrAtContents,	NONE);
		op0(Opcode.Alloc,		NONE);
		op0(Opcode.UnsignedLt,		P);
		op0(Opcode.UnsignedLteq,	P);
		op0(Opcode.UnsignedGt,		P);
		op0(Opcode.UnsignedGteq,	P);
		op0(Opcode.CallAddress,		NONE);
		op0(Opcode.CallerIp,		P);
		op0(Opcode.CallerSp,		P);
		op0(Opcode.MachSystemOp,	NONE);
	}

	def op0(opcode: Opcode, f: Fact.set) { table[opcode.tag] = f; }
	def op1(opcode: Opcode, f: Fact.set) { table[opcode.tag] = f; }
	def facts(opcode: Opcode) -> Fact.set { return table[opcode.tag]; }
}
