// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Facts and flags for classes, fields, methods, values, and operators
component Facts {
	// facts for fields
	def F_VALUE		= 0x00000001; // field is read-only
	def F_NORM		= 0x00000002; // the field is an element of a normalized field
	def F_CONST		= 0x00000004; // field is constant
	// facts for methods
	def M_OVERRIDDEN	= 0x00000008; // method has been overridden in a subclass
	def M_OVERRIDE		= 0x00000010; // method overrides a superclass method
	def M_OPERATOR		= 0x00000020; // method wraps an operator
	def M_NEW		= 0x00000040; // the method is a constructor
	def M_ABSTRACT		= 0x00000080; // the method is abstract
	def M_INLINE		= 0x00000100; // method should be inlined whenever possible
	// facts for classes
	def C_ALLOCATED		= 0x00000200; // the class is allocated dynamically
	def C_HEAP		= 0x00000400; // exists live in the heap
	def C_NONEQ		= 0x00000800; // objects of this class are never ==
	def C_VALUE		= 0x00001000; // objects of this class have no identity
	// facts for values
	def V_ZERO		= 0x00002000; // == 0 (or null)
	def V_NON_ZERO		= 0x00004000; // != 0 (or null)
	def V_ABOVE_ZERO	= 0x00008000; // > 0
	def V_BELOW_ZERO	= 0x00010000; // < 0
	def V_NON_NEGATIVE	= 0x00020000; // >= 0
	// facts for operators
	def O_PURE		= 0x00040000; // no side-effects + deterministic
	def O_FOLDABLE		= 0x00080000;
	def O_COMMUTATIVE	= 0x00100000; // f(x, y) == f(y, x)
	def O_FLIPPABLE		= 0x00200000; // f(x, y) == g(y, x)
	def O_ASSOCIATIVE	= 0x00400000; // f(f(x, y), z) == f(x, f(y, z))
	def O_NO_SHIFT_CHECK	= 0x00800000;
	def O_NO_NULL_CHECK	= 0x01000000;
	def O_NO_BOUNDS_CHECK	= 0x02000000;
	def O_NO_ZERO_CHECK	= 0x04000000;
	def O_NO_LENGTH_CHECK	= 0x08000000;
	def O_NO_DIV_CHECK	= 0x10000000; // x != Int.MIN || y != -1
	// combinations of facts
	def O_SAFE_BOUNDS	= O_NO_NULL_CHECK | O_NO_BOUNDS_CHECK;

	def isLive(ic: IrClass) -> bool {
		return (ic.facts & (C_ALLOCATED | C_HEAP)) != 0;
	}
	def renderFacts(buf: StringBuffer, facts: int) -> StringBuffer {
		var first = true;
		for (mask = 1; mask != 0; mask = mask #<< 1) {
			var m = facts & mask;
			if (m != 0) {
				if (!first) buf.putc(' ');
				first = false;
			}
			match (facts & mask) {
				F_VALUE:		buf.puts("F_VALUE");
				F_NORM:			buf.puts("F_NORM");
				F_CONST:		buf.puts("F_CONST");
				M_OVERRIDDEN:		buf.puts("M_OVERRIDDEN");
				M_OVERRIDE:		buf.puts("M_OVERRIDE");
				M_OPERATOR:		buf.puts("M_OPERATOR");
				M_NEW:			buf.puts("M_NEW");
				M_ABSTRACT:		buf.puts("M_ABSTRACT");
				M_INLINE:		buf.puts("M_INLINE");
				C_ALLOCATED:		buf.puts("C_ALLOCATED");
				C_HEAP:			buf.puts("C_HEAP");
				C_NONEQ:		buf.puts("C_NONEQ");
				C_VALUE:		buf.puts("C_VALUE");
				V_ZERO:			buf.puts("V_ZERO");
				V_NON_ZERO:		buf.puts("V_NON_ZERO");
				V_ABOVE_ZERO:		buf.puts("V_ABOVE_ZERO");
				V_BELOW_ZERO:		buf.puts("V_BELOW_ZERO");
				V_NON_NEGATIVE:		buf.puts("V_NON_NEGATIVE");
				O_PURE:			buf.puts("O_PURE");
				O_FOLDABLE:		buf.puts("O_FOLDABLE");
				O_COMMUTATIVE:		buf.puts("O_COMMUTATIVE");
				O_FLIPPABLE:		buf.puts("O_FLIPPABLE");
				O_ASSOCIATIVE:		buf.puts("O_ASSOCIATIVE");
				O_NO_SHIFT_CHECK:	buf.puts("O_NO_SHIFT_CHECK");
				O_NO_NULL_CHECK:	buf.puts("O_NO_NULL_CHECK");
				O_NO_BOUNDS_CHECK:	buf.puts("O_NO_BOUNDS_CHECK");
				O_NO_ZERO_CHECK:	buf.puts("O_NO_ZERO_CHECK");
				O_NO_LENGTH_CHECK:	buf.puts("O_NO_LENGTH_CHECK");
			}
		}
		return buf;
	}
}
