// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class IrPrinter {
	def prog: Program;
	def buf = TerminalBuffer.new();
	var printIc: bool;
	var printSsa: bool;
	new(prog) { }	
	def print() {
		prog.ir.classes.apply(printIrClass);
	}
	def printIrClass(ic: IrClass) {
		buf.putc('#');
		buf.cyan().puti(ic.uid).end();
		if (V3.isClass(ic.ctype)) buf.puts(" class ");
		if (V3.isArray(ic.ctype)) buf.puts(" array ");
		if (V3.isComponent(ic.ctype)) buf.puts(" component ");
		buf.green().put1(ic.ctype.render).end().sp();
		var superType = V3.getSuperType(ic.ctype);
		if (superType != null) {
			buf.puts("extends ");
			buf.cyan().put1(superType.render).end().sp();
		}
		printFacts(ic.facts);
		buf.puts(" {\n");
		for (f in ic.fields) printField(f, ic);
		for (m in ic.methods) printMethod(m, ic);
		buf.puts("}\n");
	}
	def printField(f: IrField, ic: IrClass) {
		if (f == null) return;
		printOverride(f, ic);
		// XXX: "%cyan{$f.index}#${f.uid}: field %green{$f.render}: ${f.fieldType.render} "
		buf.cyan().puti(f.index).putc('#').puti(f.uid).end();
		buf.puts(": field  ");
		buf.green().put1(f.render).end().sp();
		buf.puts(": ");
		buf.cyan().put1(f.fieldType.render).end().sp();
		printFacts(f.facts);
		ln();
	}
	def printMethod(m: IrMethod, ic: IrClass) {
		if (m == null) return;
		printMethodName(m, ic, false);
		if (printSsa && m.ssa != null) doSsa(m.ssa);
		if (printIc && m.ic != null) doIc(m.ic);
	}
	def printMethodName(m: IrMethod, ic: IrClass, qualified: bool) {
		printOverride(m, ic);
		var funcType = Function.newType(Tuple.newType(Lists.fromArray(m.paramTypes)), m.returnType);
		buf.cyan().puti(m.index).putc('#').puti(m.uid).end();
		buf.puts(": method ");
		buf.green();
		if (qualified) buf.put1(m.container.ctype.render).putc('.');
		buf.put1(m.render).end();
		buf.puts(": ");
		buf.cyan().put1(funcType.render).end().sp();
		printFacts(m.facts);
		ln();
	}
	def ln() {
		buf.ln();
		Terminal.putb(buf);
		buf.reset();
	}
	def doIc(icm: IcMethod) {
		IcPrinter.new(prog, null).printCode(icm.iccode);
	}
	def doSsa(ssa: SsaRegion) {
		SsaPrinter.new(prog).printRegion(ssa);
	}
	def printOverride(m: IrMember, ic: IrClass) {
		if (m.container != ic) buf.puts("   ");
		else buf.yellow().puts("  *").end();
	}
	def printFacts(facts: int) {
		if (facts != 0) {
			buf.putc('[');
			buf.yellow();
			Facts.renderFacts(buf, facts);
			buf.end().putc(']');
		}
	}
}
