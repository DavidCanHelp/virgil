// Copyright 2013 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Builds IR classes and variants from VST classes and variants.
class IrBuilder(ctype: Type, parent: IrClass) {
	def fields = Sequence<IrField>.new();
	def methods = Sequence<IrMethod>.new();

	new() {
		if (parent == null) {
			methods.add(null); // reserve index 0 for constructor
		} else {
			fields.addN(parent.fields);
			methods.addN(parent.methods);
			methods.set(0, null); // overwrite super constructor
		}
	}
	def buildClass(decl: VstCompound) -> IrClass {
		fields.grow(decl.numFields);
		methods.grow(decl.numMethods + 1);
		for (list = decl.members; list != null; list = list.tail) {
			var m = list.head;
			if (VstField.?(m)) addVstField(VstField.!(m));
			else if (VstNew.?(m)) addVstNew(VstNew.!(m));
			else if (VstMethod.?(m)) addVstMethod(VstMethod.!(m));
		}
		return build();
	}
	def buildVariant(decl: VstVariant) -> IrVariant {
		var typeArgs: TypeArgs;
		if (decl.typeParams != null) typeArgs = TypeArgs.new(decl.typeEnv, null);
		var cases = Lists.toArray(Lists.map(decl.cases, newIrVariantCase));
		var methods = Array<Array<IrMethod>>.new(decl.numMethods);
		// add case-specific methods to the dispatch table
		for (cl = decl.cases; cl != null; cl = cl.tail) {
			for (l = cl.head.members; l != null; l = l.tail) {
				if (!VstMethod.?(l.head)) continue;
				var m = VstMethod.!(l.head), ir = newIrMethod(m);
				ir.index = m.index;
				var prev = methods(ir.index);
				if (prev == null) prev = methods(ir.index) = Array.new(cases.length + 1);
				prev(cl.head.tag + 1) = ir;
			}
		}
		// Add default methods to the table
		for (l = decl.members; l != null; l = l.tail) {
			if (!VstMethod.?(l.head)) continue;
			var m = VstMethod.!(l.head), ir = newIrMethod(m);
			ir.index = m.index;
			var prev = methods(ir.index);
			if (prev != null) {
				ir.setFact(Facts.M_OVERRIDDEN);
				for (i = 0; i < prev.length; i++) {
					if (prev(i) == null) prev(i) = ir;
				}
			} else {
				methods(ir.index) = [ir];
			}
		}
		return IrVariant.new(ctype, typeArgs, methods, cases);
	}
	def newIrVariantCase(vc: VstVariantCase) -> IrVariantCase {
		var fields = IrUtil.NO_FIELDS;
		if (vc.params != null) {
			var pa = vc.params.asArray();
			fields = Array<IrField>.new(pa.length);
			for (i = 0; i < pa.length; i++) {
				fields(i) = newIrVariantField(pa(i), i);
			}
		}
		var ir = IrVariantCase.new(vc.tag, fields);
		ir.source = vc;
		return ir;
	}
	def newIrVariantField(p: ParamDecl, index: int) -> IrField {
		var ir = IrField.new(ctype, p.vtype);
		ir.source = p;
		ir.setFact(Facts.F_VALUE);
		ir.index = index;
		return ir;
	}
	def addVstField(f: VstField) {
		var ir = IrField.new(ctype, f.getType());
		ir.source = f;
		if (f.isReadOnly) ir.setFact(Facts.F_VALUE);
		addIrField(ir);
		f.index = ir.index;
	}
	def addVstNew(m: VstNew) {
		// constructors always occupy slot 0
		m.index = 0;
		if (m.nontrivial) {
			// only generate an IrMethod if the constructor is nontrivial
			var receiverType = m.container.getDeclaredType();
			var ir = IrMethod.new(ctype, null, getParamTypes(m), receiverType);
			ir.source = m;
			ir.setFact(Facts.M_NEW);
			setIrMethod(0, ir);
		}
	}
	def addVstMethod(m: VstMethod) {
		var ir = newIrMethod(m);
		var r = m.root;
		if (r == m) {
			// this is the root method of a method family
			addIrMethod(ir);
		} else {
			// this is an override
			parent.methods(r.index).setFact(Facts.M_OVERRIDDEN);
			ir.setFact(Facts.M_OVERRIDE);
			setIrMethod(r.index, ir);
		}
		m.index = ir.index;
	}
	def newIrMethod(m: VstMethod) -> IrMethod {
		var returnType = Function.getReturnType(m.getType());
		var typeArgs: TypeArgs;
		if (m.typeParams != null) typeArgs = TypeArgs.new(m.typeEnv, null);
		var ir = IrMethod.new(ctype, typeArgs, getParamTypes(m), returnType);
		ir.source = m;
		if (EmptyStmt.?(m.body)) ir.setFact(Facts.M_EMPTY);
		return ir;
	}
	def getParamTypes(m: VstMethod) -> Array<Type> {
		var seq = Sequence<Type>.new();
		for (l = m.params.list; l != null; l = l.tail) {
			seq.add(l.head.vtype);
		}
		return seq.extract();
	}
	def build() -> IrClass {
		var typeArgs: TypeArgs;
		if (V3.isPolymorphicClass(ctype)) {
			var decl = V3.asClass(ctype).classDecl;
			typeArgs = TypeArgs.new(decl.typeEnv, null);
		}
		return IrClass.new(ctype, typeArgs, parent, fields.extract(), methods.extract());
	}
	def addIrField(f: IrField) {
		setIndex(fields.length, f);
		fields.add(f);
	}
	def addIrMethod(m: IrMethod) {
		if (m.checkFact(Facts.M_NEW)) {
			methods.set(0, m);
			setIndex(0, m);
		} else {
			setIndex(methods.length, m);
			methods.add(m);
		}
	}
	def setIrMethod(index: int, m: IrMethod) {
		var p = methods.get(index);
		if (p != null && p != m) {
			p.setFact(Facts.M_OVERRIDDEN);
			m.setFact(Facts.M_OVERRIDE);
		}
		methods.set(index, m);
		setIndex(index, m);
	}
	def setIndex(index: int, m: IrMember) {
		if (m.index >= 0) {
			if (m.index != index) return V3.fail(Strings.format2("member %1 at wrong index %2", m.render, index));
		} else {
			m.index = index;
		}
	}
}
