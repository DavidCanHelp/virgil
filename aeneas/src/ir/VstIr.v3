// Copyright 2013 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Builds IR classes and variants from VST classes and variants.
class IrBuilder(ctype: Type, parent: IrClass) {
	def fields = Sequence<IrField>.new();
	def methods = Sequence<IrMethod>.new();

	new() {
		if (parent == null) {
			methods.add(null); // reserve index 0 for constructor
			methods.add(null); // reserve index 1 for variant equals method
		} else {
			fields.addN(parent.fields);
			methods.addN(parent.methods);
			methods.set(0, null); // overwrite super constructor
		}
	}
	def buildClass(decl: VstCompound) -> IrClass {
		fields.grow(decl.numFields);
		methods.grow(decl.numMethods + 1);
		for (list = decl.members; list != null; list = list.tail) {
			var m = list.head;
			if (VstField.?(m)) addVstField(VstField.!(m));
			else if (VstNew.?(m)) addVstNew(VstNew.!(m));
			else if (VstMethod.?(m)) addVstMethod(VstMethod.!(m));
		}
		if (VstVariant.?(decl)) {
			var variant = VstVariant.!(decl);
			if (fields.length > 0) buildVariantConstructor(variant);
			// set special facts for variant fields and methods
			for (i = 0; i < fields.length; i++) {
				fields.get(i).setFact(Facts.F_VALUE | Facts.O_PURE | Facts.O_FOLDABLE);
			}
		}
		return build();
	}
	def buildVariantConstructor(decl: VstVariant) {
		var paramTypes = Array<Type>.new(fields.length);
		for (i = 0; i < fields.length; i++) paramTypes(i) = fields.get(i).fieldType;
		var meth = IrMethod.new(ctype, null, paramTypes, ctype);
		meth.setFact(Facts.M_NEW);
		meth.setFact(Facts.O_PURE);
		meth.setFact(Facts.M_INLINE);
		meth.setFact(Facts.V_NON_ZERO);
		setIrMethod(0, meth);

		// build the SSA that initializes the fields.
		var params = Array<SsaParam>.new(meth.paramTypes.length + 1);
		params(0) = SsaParam.new(0, ctype);
		params(0).setFact(Facts.V_NON_ZERO);
		for (i = 1; i < params.length; i++) {
			params(i) = SsaParam.new(i, meth.paramTypes(i - 1));
		}
		meth.ssa = SsaRegion.new(params, meth.returnType);
		var b = SsaBuilder.new(meth.ssa.startBlock);
		var receiver: SsaInstr = params(0);
		for (i = 0; i < fields.length; i++) {
			var spec = IrSpec.new(ctype, [ctype], fields.get(i));
			b.addApply(null, V3Op.newClassInitField(spec), [receiver, params(i + 1)]);
		}
		b.addReturn([receiver]);
	}
	def addVstField(f: VstField) {
		var ir = IrField.new(ctype, f.getType());
		ir.source = f;
		if (f.isReadOnly) ir.setFact(Facts.F_VALUE | Facts.O_FOLDABLE);
		addIrField(ir);
		f.index = ir.index;
	}
	def addVstNew(m: VstNew) {
		// constructors always occupy slot 0
		m.index = 0;
		if (m.nontrivial) {
			// only generate an IrMethod if the constructor is nontrivial
			var receiverType = m.container.getDeclaredType();
			var ir = IrMethod.new(ctype, null, getParamTypes(m), receiverType);
			ir.source = m;
			ir.setFact(Facts.M_NEW);
			setIrMethod(0, ir);
		}
	}
	def addVstMethod(m: VstMethod) {
		var ir = newIrMethod(m);
		var r = m.root;
		if (r == m) {
			// this is the root method of a method family
			addIrMethod(ir);
		} else {
			// this is an override
			parent.methods(r.index).setFact(Facts.M_OVERRIDDEN);
			ir.setFact(Facts.M_OVERRIDE);
			setIrMethod(r.index, ir);
		}
		m.index = ir.index;
	}
	def newIrMethod(m: VstMethod) -> IrMethod {
		var returnType = Function.getReturnType(m.getType());
		var typeArgs: TypeArgs;
		if (m.typeParams != null) typeArgs = TypeArgs.new(m.typeEnv, null);
		var ir = IrMethod.new(ctype, typeArgs, getParamTypes(m), returnType);
		ir.source = m;
		if (EmptyStmt.?(m.body)) ir.setFact(Facts.M_EMPTY);
		return ir;
	}
	def getParamTypes(m: VstMethod) -> Array<Type> {
		var seq = Sequence<Type>.new();
		for (l = m.params.list; l != null; l = l.tail) {
			seq.add(l.head.vtype);
		}
		return seq.extract();
	}
	def build() -> IrClass {
		var typeArgs: TypeArgs;
		if (V3.isPolymorphicClass(ctype)) {
			var decl = V3.asClass(ctype).classDecl;
			typeArgs = TypeArgs.new(decl.typeEnv, null);
		}
		return IrClass.new(ctype, typeArgs, parent, fields.extract(), methods.extract());
	}
	def addIrField(f: IrField) {
		setIndex(fields.length, f);
		fields.add(f);
	}
	def addIrMethod(m: IrMethod) {
		if (m.checkFact(Facts.M_NEW)) {
			methods.set(0, m);
			setIndex(0, m);
		} else {
			setIndex(methods.length, m);
			methods.add(m);
		}
	}
	def setIrMethod(index: int, m: IrMethod) {
		var p = methods.get(index);
		if (p != null && p != m) {
			p.setFact(Facts.M_OVERRIDDEN);
			m.setFact(Facts.M_OVERRIDE);
		}
		methods.set(index, m);
		setIndex(index, m);
	}
	def setIndex(index: int, m: IrMember) {
		if (m.index >= 0) {
			if (m.index != index) return V3.fail(Strings.format2("member %1 at wrong index %2", m.render, index));
		} else {
			m.index = index;
		}
	}
}
