// Copyright 2013 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Builds IR classes and variants from VST classes and variants.
class IrBuilder(ctype: Type, parent: IrClass) {
	def fields = Vector<IrField>.new();
	def methods = Vector<IrMethod>.new();

	new() {
		if (parent == null) {
			methods.add(null); // reserve index 0 for constructor
			methods.add(null); // reserve index 1 for variant equals method
		} else {
			fields.addN(parent.fields);
			methods.addN(parent.methods);
			methods.set(0, null); // overwrite super constructor
		}
	}
	def buildClass(decl: VstCompound) -> IrClass {
		fields.grow(decl.numFields);
		methods.grow(decl.numMethods + 1);
		var isVariant = VstClass.?(decl) && VstClass.!(decl).isVariant();
		for (list = decl.members; list != null; list = list.tail) {
			var m = list.head;
			if (VstField.?(m)) addVstField(VstField.!(m), isVariant);
			else if (VstNew.?(m)) addVstNew(VstNew.!(m), isVariant);
			else if (VstMethod.?(m)) addVstMethod(VstMethod.!(m));
		}
		return build();
	}
	def addVstField(f: VstField, isVariant: bool) {
		var ir = IrField.new(ctype, f.getType());
		ir.source = f;
		if (f.isReadOnly) ir.setFact(Fact.F_VALUE | Fact.O_FOLDABLE);
		if (isVariant) ir.setFact(Fact.F_VALUE | Fact.O_FOLDABLE | Fact.O_PURE);
		addIrField(ir);
		f.index = ir.index;
	}
	def addVstNew(m: VstNew, isVariant: bool) {
		// constructors always occupy slot 0
		m.index = 0;
		if (m.nontrivial()) {
			// only generate an IrMethod if the constructor is nontrivial
			var receiverType = m.container.getDeclaredType();
			var ir = IrMethod.new(ctype, null, getParamTypes(m), receiverType);
			ir.source = m;
			ir.setFact(Fact.M_NEW);
			if (isVariant) ir.setFact(Fact.O_PURE | Fact.M_INLINE | Fact.V_NON_ZERO);
			setIrMethod(0, ir);
		}
	}
	def addVstMethod(m: VstMethod) {
		var ir = newIrMethod(m);
		var r = m.root;
		if (r == m) {
			// this is the root method of a method family
			addIrMethod(ir);
		} else {
			// this is an override
			parent.methods(r.index).setFact(Fact.M_OVERRIDDEN);
			ir.setFact(Fact.M_OVERRIDE);
			setIrMethod(r.index, ir);
		}
		m.index = ir.index;
	}
	def newIrMethod(m: VstMethod) -> IrMethod {
		var returnType = Function.getReturnType(m.getType());
		var typeArgs: TypeArgs;
		if (m.typeParams != null) typeArgs = TypeArgs.new(m.typeEnv, null);
		var ir = IrMethod.new(ctype, typeArgs, getParamTypes(m), returnType);
		ir.source = m;
		if (EmptyStmt.?(m.body)) ir.setFact(Fact.M_EMPTY);
		return ir;
	}
	def getParamTypes(m: VstMethod) -> Array<Type> {
		var vec = Vector<Type>.new();
		for (l = m.params.list; l != null; l = l.tail) {
			vec.add(l.head.vtype);
		}
		return vec.extract();
	}
	def build() -> IrClass {
		var typeArgs: TypeArgs;
		if (V3.isPolymorphicClass(ctype)) {
			var decl = V3.classDecl(ctype);
			typeArgs = TypeArgs.new(decl.typeEnv, null);
		}
		return IrClass.new(ctype, typeArgs, parent, fields.extract(), methods.extract());
	}
	def addIrField(f: IrField) {
		setIndex(fields.length, f);
		fields.add(f);
	}
	def addIrMethod(m: IrMethod) {
		if (m.checkFact(Fact.M_NEW)) {
			methods.set(0, m);
			setIndex(0, m);
		} else {
			setIndex(methods.length, m);
			methods.add(m);
		}
	}
	def setIrMethod(index: int, m: IrMethod) {
		var p = methods.get(index);
		if (p != null && p != m) {
			p.setFact(Fact.M_OVERRIDDEN);
			m.setFact(Fact.M_OVERRIDE);
		}
		methods.set(index, m);
		setIndex(index, m);
	}
	def setIndex(index: int, m: IrMember) {
		if (m.index >= 0) {
			if (m.index != index) return V3.fail(Strings.format2("member %1 at wrong index %2", m.render, index));
		} else {
			m.index = index;
		}
	}
}
