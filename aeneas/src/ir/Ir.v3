// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Base class for all IR classes, methods, and fields.
class IrItem {
	def uid: int = UID.next++;
	var facts: int;
	def setFact(i: int) { facts = facts | i; }
	def checkFact(i: int) -> bool { return (facts & i) != 0; }
}

// intermediate representation of classes, components, and arrays
class IrClass extends IrItem {
	def ctype: Type;			// type corresponding to this class
	def typeArgs: TypeArgs;			// type arguments
	def parent: IrClass;			// parent class if any
	def fields: Array<IrField>;		// fields, including super fields
	def methods: Array<IrMethod>;		// method dispatch table, #0 = constructor
	var children: List<IrClass>;		// list of child classes

	new(ctype, typeArgs, parent, fields, methods) {
		if (parent != null) {
			// XXX: use reachability analysis for children instead
			parent.children = List.new(this, parent.children);
		}
	}
	def inherits(m: IrMember) -> bool {
		var p = parent;
		if (p == null) return false;
		if (m.index < 0) return false;
		if (IrMethod.?(m)) return p.methods.length > m.index && m == p.methods(m.index);
		else return p.fields.length > m.index; // assume it's a field
	}
}
// represents a member of a class or a component
class IrMember(container: Type) extends IrItem {
	var index = -1;		// index into the appropriate members list

	def render(buffer: StringBuffer) -> StringBuffer;
	def renderLong(buffer: StringBuffer) -> StringBuffer {
		if (container != null) container.render(buffer).putc('.');
		return render(buffer);
	}
}
// represents a field of a class or component, or the elements of an array
class IrField extends IrMember {
	def fieldType: Type;	// the type of the field
	var source: VstField;	// declaration that produced the field, if any
	var machOffset: int;	// machine-level offset
	var raField: RaField;   // information for reachability analysis

	new(container: Type, fieldType) : super(container) { }
	def render(buffer: StringBuffer) -> StringBuffer {
		if (source == null) return buffer.putc('f').puti(index);
		else buffer.puts(source.name());
		if (checkFact(Facts.F_NORM)) {
			buffer.putc('.').puti(index);
		}
		return buffer;
	}
}
// represents a method of a class or component
class IrMethod extends IrMember {
	def typeArgs: TypeArgs;		// type arguments to this method (bound or unbound)
	def paramTypes: Array<Type>;	// parameter types of method
	def returnType: Type;		// return type
	var source: VstMethod;		// declaration that produced the method, if any
	var ic: IcMethod;		// interpreter code of method
	var ssa: SsaRegion;		// SSA code for method
	var raMethod: RaMethod;		// information for reachability analysis

	new(container: Type, typeArgs, paramTypes, returnType) : super(container) { }
	def render(buffer: StringBuffer) -> StringBuffer {
		if (source == null) buffer.putc('m').puti(uid);
		else buffer.puts(source.name());
		if (typeArgs != null) typeArgs.render(buffer);
		return buffer;
	}
	def getMethodType() -> Type {
		var ptype = Tuple.newType(Lists.fromArray(paramTypes));
		return Function.newType(ptype, returnType);
	}
}
// a virtual method selector consisting of a method and a vtable index
// (the vtable index may differ from the method's in the case of partial specialization)
class IrSelector extends IrMember {
	def method: IrMethod;
	def mtable: IrMtable;
	new(container: Type, method, mtable, index: int) : super(container) {
		this.index = index;
	}
	def render(buffer: StringBuffer) -> StringBuffer {
		return method.render(buffer);
	}
}
// A method table is essentially a transposed virtual table. It is a table of methods
// indexed by class ID, where class IDs are assigned during Reachability analysis.
class IrMtable(root: IrMethod, rootId: int, table: Array<IrMethod>) extends IrItem {
	def render(buf: StringBuffer) -> StringBuffer {
		buf.puts("[");
		for (i = 0; i < table.length; i++) {
			buf.puti(rootId + i).puts("=");
			table(i).render(buf);
			if (i < table.length - 1) buf.puts(", ");
		}
		return buf.puts("]");
	}
}
// Lazily-allocated internal class used to store the types associated with an IrSpec
class IrSpecTypes(typeArgsList: List<TypeArgs>, methodTypeArgs: TypeArgs) {
	var boundType: Type;
	var unboundType: Type;

	def instantiateType(t: Type) -> Type {
		if (t.open()) for (l = typeArgsList; l != null; l = l.tail) t = t.substitute(l.head);
		return t;
	}
}
// Represents the specialization of an IrMember, including the container type and
// any type arguments
class IrSpec(container: Type, typeArgs: Array<Type>, member: IrMember) {
	var types: IrSpecTypes;
	var hashval: int;

	def render(buffer: StringBuffer) -> StringBuffer {
		container.render(buffer);
		buffer.putc('.');
		member.render(buffer);
		var tp = getTypes();
		if (tp.methodTypeArgs != null) tp.methodTypeArgs.render(buffer);
		return buffer;
	}
	def hash() -> int {
		if (hashval != 0) return hashval;
		var h = member.uid;
		for (t in typeArgs) h = h * 33 + t.hash;
		return hashval = h;
	}
	def equals(other: IrSpec) -> bool {
		if (this == other) return true;
		if (other == null || this.member != other.member) return false;
		for (i = 0; i < typeArgs.length; i++) {
			if (typeArgs(i) != other.typeArgs(i)) return false;
		}
		return true;
	}
	def instantiateType(t: Type) -> Type {
		if (t.open()) return getTypes().instantiateType(t);
		return t;
	}
	def instantiateTypes(t: Array<Type>) -> Array<Type> {
		if (t.length == 0) return t;
		var tp = getTypes();
		if (tp.typeArgsList == null) return t;
		var nt = Array<Type>.new(t.length);
		for (i = 0; i < t.length; i++) {
			nt(i) = tp.instantiateType(t(i));
		}
		return nt;
	}
	def instantiateIrSpec(spec: IrSpec) -> IrSpec {
		return IrSpec.new(instantiateType(spec.container), instantiateTypes(spec.typeArgs), spec.member);
	}
	def getBoundType() -> Type {
		var tp = getTypes();
		if (tp.boundType != null) return tp.boundType;
		if (IrField.?(member)) {
			// type of this member is just the field's type
			return tp.boundType = tp.instantiateType(IrField.!(member).fieldType);
		} else {
			// get the type of the method
			var m = asMethod(), paramType = Tuple.newType(Lists.fromArray(m.paramTypes));
			return tp.boundType = tp.instantiateType(Function.newType(paramType, m.returnType));
		}
	}
	def getUnboundType() -> Type {
		var tp = getTypes();
		if (tp.unboundType != null) return tp.unboundType;
		if (IrField.?(member)) {
			// container -> fieldType
			return tp.unboundType = tp.instantiateType(Function.newType(container, IrField.!(member).fieldType));
		} else {
			// (container, params) -> returnType
			return tp.unboundType = Function.prependParamType(instantiateType(container), getBoundType());
		}
	}

	def isNew() -> bool { return IrMethod.?(member) && member.checkFact(Facts.M_NEW); }
	def isMethod() -> bool { return IrMethod.?(member); }
	def asMethod() -> IrMethod {
		if (IrMethod.?(member)) return IrMethod.!(member);
		if (IrSelector.?(member)) return IrSelector.!(member).method;
		return V3.fail1("not a method: %1", member.render);
	}
	def asField() -> IrField { return IrField.!(member); }
	def getFieldType() -> Type { return instantiateType(IrField.!(member).fieldType); }
	def getReturnType() -> Type { return instantiateType(asMethod().returnType); }
	def getParamTypes() -> Array<Type> { return instantiateTypes(asMethod().paramTypes); }
	def getMethodType() -> Type { return getBoundType(); }
	def getFuncType() -> Type { return Function.funcRefType(getBoundType()); }
	def getTypes() -> IrSpecTypes {
		if (types != null) return types;
		var t = container, typeArgsList: List<TypeArgs>, methodTypeArgs: TypeArgs;
		if (V3.isClass(container)) {
			var classTypeArgs = V3Class_TypeCon.!(t.typeCon).getTypeArgs(t);
			if (classTypeArgs != null) typeArgsList = List.new(classTypeArgs, null);
		}
		if (typeArgs.length > 1) {
			var mta = asMethod().typeArgs;
			methodTypeArgs = mta.copy(Arrays.range(typeArgs, 1, typeArgs.length));
			typeArgsList = List.new(methodTypeArgs, typeArgsList);
		}
		return types = IrSpecTypes.new(typeArgsList, methodTypeArgs);
	}
	def isPolymorphic() -> bool {
		return getTypes().typeArgsList != null;
	}
}
// Utility methods for dealing with Ir classes, methods, and fields
component IrUtil {
	def NO_FIELDS: Array<IrField> = [];
	def NO_METHODS: Array<IrMethod> = [];

	def newIrSpecMap<T>() -> HashMap<IrSpec, T> {
		return HashMap.new(IrSpec.hash, IrSpec.equals);
	}
	def newIrMethodMap<T>() -> HashMap<IrMethod, T> {
		return HashMap<IrMethod, T>.new(IrMethod.uid, IrMethod.==);
	}
	def newIrFieldMap<T>() -> HashMap<IrField, T> {
		return HashMap<IrField, T>.new(IrField.uid, IrField.==);
	}
}

// builds polymorphic IR classes from VST declarations
class IrPortion(prog: Program) {
	def classMap = TypeUtil.newTypeMap<IrClass>();
	def typeVarElim = TypeVarEliminator.new(null);
	def classes = Sequence<IrClass>.new();
	var methods = Sequence<IrMethod>.new();
	var mainMethod: IrSpec;

	def elimTypeVars(t: Type) -> Type {
		if (t == null) return t;
		if (0 == (t.hash & TypeConst.TYPEVAR_MASK)) return t;
		return t.substitute(typeVarElim);
	}
	def fromIrMemberAndTypes(typeArgs: Array<Type>, member: IrMember) -> IrSpec {
		return IrSpec.new(typeArgs(0), typeArgs, member);
	}
	def fromVstMemberAndType(container: Type, member: VstMember) -> IrSpec {
		return fromIrMemberAndTypes([container], makeIrMember(member));
	}
	def fromVstMember(member: VstMember) -> IrSpec {
		var m = makeIrMember(member), c = member.container.getDeclaredType();
		return fromIrMemberAndTypes([c], m);
	}
	private def makeIrMember(m: VstMember) -> IrMember {
		var ic = makeIrClass(m.container.getDeclaredType());
		if (VstMethod.?(m)) return ic.methods(m.index);
		else return ic.fields(m.index);
	}
	def resolveSuperMethod(irSpec: IrSpec) -> IrSpec {
		var superType = V3.getSuperType(irSpec.container);
		if (superType != null) return resolveMethodImpl(superType, irSpec);
		return irSpec;
	}
	def resolveMethodImpl(classType: Type, irSpec: IrSpec) -> IrSpec {
		var ic = makeIrClass(classType);
		var m = ic.methods(irSpec.member.index);
		if (m == irSpec.member) return irSpec;
		while (ic.inherits(m)) {
			classType = V3.getSuperType(classType);
			ic = ic.parent;
		}
		var nt = Arrays.dup(irSpec.typeArgs);
		nt(0) = classType;
		return IrSpec.new(classType, nt, m);
	}
	def setIrClass(ctype: Type, ic: IrClass) {
		classMap.set(ctype, ic);
		classes.add(ic);
	}
	def getIrClass(ctype: Type) -> IrClass {
		return classMap.get(ctype);
	}
	def numFields(ctype: Type) -> int {
		return makeIrClass(ctype).fields.length;
	}
	def makeIrClass(ctype: Type) -> IrClass {
		if (ctype == null) return null;
		var ic = classMap.get(ctype);
		if (ic == null) {
			if (V3.isClass(ctype)) {
				// create the IrClass from the class's members
				var ptype = V3.asClass(ctype).classDecl.getDeclaredType();
				if (ptype == ctype) {
					// create a new IR class
					var sc = makeIrClass(V3.getSuperType(ctype));
					ic = newIrClass(ctype, sc, V3.asClass(ctype).classDecl);
				} else {
					// get the IR class of the polymorphic type
					ic = makeIrClass(ptype);
				}
				classMap.set(ctype, ic);
			} else if (V3.isComponent(ctype)) {
				// create the ir class from the component's members
				ic = newIrClass(ctype, null, V3.asComponent(ctype).componentDecl);
				classMap.set(ctype, ic);
			}
		}
		return ic;
	}
	def newIrClass(ctype: Type, superClass: IrClass, decl: VstCompound) -> IrClass {
		var builder = IrClassBuilder.new(ctype, superClass);
		builder.grow(decl.numFields, decl.numMethods + 1);
		for (list = decl.members; list != null; list = list.tail) {
			var m = list.head;
			if (VstField.?(m)) builder.addVstField(VstField.!(m));
			else if (VstNew.?(m)) builder.addVstNew(VstNew.!(m));
			else if (VstMethod.?(m)) builder.addVstMethod(VstMethod.!(m));
		}
		var ic = builder.build();
		classes.add(ic);
		return ic;
	}
}

class IrClassBuilder(ctype: Type, parent: IrClass) {
	def fields = Sequence<IrField>.new();
	def methods = Sequence<IrMethod>.new();

	new() {
		if (parent == null) {
			methods.add(null); // reserve index 0 for constructor
		} else {
			fields.addN(parent.fields);
			methods.addN(parent.methods);
			methods.set(0, null); // overwrite super constructor
		}
	}
	def grow(numFields: int, numMethods: int) {
		fields.grow(numFields);
		methods.grow(numMethods);
	}
	def addVstField(f: VstField) {
		var ir = IrField.new(ctype, f.getType());
		ir.source = f;
		if (f.isReadOnly) ir.setFact(Facts.F_VALUE);
		addIrField(ir);
		f.index = ir.index;
	}
	def addVstNew(m: VstNew) {
		// constructors always occupy slot 0
		m.index = 0;
		if (m.nontrivial) {
			// only generate an IrMethod if the constructor is nontrivial
			var receiverType = m.container.getDeclaredType();
			var ir = IrMethod.new(ctype, null, getParamTypes(m), receiverType);
			ir.source = m;
			ir.setFact(Facts.M_NEW);
			setIrMethod(0, ir);
		}
	}
	def addVstMethod(m: VstMethod) {
		var returnType = Function.getReturnType(m.getType());
		var typeArgs: TypeArgs;
		if (m.typeParams != null) typeArgs = m.typeEnv.getDefaultTypeArgs();
		var ir = IrMethod.new(ctype, typeArgs, getParamTypes(m), returnType);
		ir.source = m;
		if (EmptyStmt.?(m.body)) ir.setFact(Facts.M_EMPTY);
		var r = m.root;
		if (r == m) {
			// this is the root method of a method family
			addIrMethod(ir);
		} else {
			// this is an override
			parent.methods(r.index).setFact(Facts.M_OVERRIDDEN);
			ir.setFact(Facts.M_OVERRIDE);
			setIrMethod(r.index, ir);
		}
		m.index = ir.index;
	}
	def getParamTypes(m: VstMethod) -> Array<Type> {
		var seq = Sequence<Type>.new();
		for (l = m.params; l != null; l = l.tail) {
			seq.add(l.head.vtype);
		}
		return seq.extract();
	}
	def build() -> IrClass {
		var typeArgs: TypeArgs;
		if (V3.isPolymorphicClass(ctype)) {
			var decl = V3.asClass(ctype).classDecl;
			typeArgs = decl.typeEnv.getDefaultTypeArgs();
		}
		return IrClass.new(ctype, typeArgs, parent, fields.extract(), methods.extract());
	}
	def addIrField(f: IrField) {
		setIndex(fields.length, f);
		fields.add(f);
	}
	def addIrMethod(m: IrMethod) {
		if (m.checkFact(Facts.M_NEW)) {
			methods.set(0, m);
			setIndex(0, m);
		} else {
			setIndex(methods.length, m);
			methods.add(m);
		}
	}
	def setIrMethod(index: int, m: IrMethod) {
		var p = methods.get(index);
		if (p != null && p != m) {
			p.setFact(Facts.M_OVERRIDDEN);
			m.setFact(Facts.M_OVERRIDE);
		}
		methods.set(index, m);
		setIndex(index, m);
	}
	def setIndex(index: int, m: IrMember) {
		if (m.index >= 0) {
			if (m.index != index) return V3.fail(Strings.format2("member %1 at wrong index %2", m.render, index));
		} else {
			m.index = index;
		}
	}
}
