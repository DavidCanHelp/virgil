// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility for printing results from RMA.
component RMPrinter {
	def print(rma: RMAnalyzer) {
		rma.typeMap.apply(RMPrinter.printRmaType);
		Terminal.puts("methods {\n");
		Lists.apply(rma.liveMethods, RMPrinter.printLiveMethod);
		Terminal.puts("}\n");
	}
	def printRmaType(utype: Type, typeInfo: RmaType) {
		if (V3.isClass(utype)) Terminal.puts("class ");
		else if (V3.isComponent(utype)) Terminal.puts("component ");
		else Terminal.puts("type ");
		Terminal.putb(typeInfo.origType.render(StringBuffer.new()));
		if (typeInfo.instances != null) Terminal.puts(" [heap]");
		if (typeInfo.isAllocated) Terminal.puts(" [alloc]");
		Terminal.puts(" {\n");
		if (typeInfo.subInfos != null) typeInfo.subInfos.apply(printRmaTypeRef);
		typeInfo.applyFields(printUsedRmaMember, typeInfo);
		typeInfo.applyMethods(printUsedRmaMember, typeInfo);
		if (typeInfo.instances != null) typeInfo.instances.apply(printRecord);
		Terminal.puts("}\n");
	}
	def printDeclaredRmaMember(typeInfo: RmaType, memberInfo: RmaMember) {
		Terminal.puts("    - ");
		printRmaMember(typeInfo, memberInfo);
	}
	def printUsedRmaMember(typeInfo: RmaType, memberInfo: RmaMember) {
		Terminal.puts("    + ");
		printRmaMember(typeInfo, memberInfo);
	}
	def printRmaMember(typeInfo: RmaType, memberInfo: RmaMember) {
		var memberRef = memberInfo.origMember;
		if (memberRef.isField()) {
			if (memberRef.member.checkFact(Facts.F_VALUE)) Terminal.puts("value  {");
			else Terminal.puts("field  {");
		} else if (memberRef.isNew()) Terminal.puts("new    {");
		else Terminal.puts("method {");
		Terminal.puts(Strings.render(memberRef.render));
		if (memberInfo.isRead) Terminal.puts(" [read]");
		if (RmaField.?(memberInfo)) {
			var fieldInfo = RmaField.!(memberInfo);
			if (fieldInfo.isWritten) Terminal.puts(" [written]");
			if (fieldInfo.isInit) Terminal.puts(" [init]");
		}
		if (RmaMethod.?(memberInfo)) {
			var methodInfo = RmaMethod.!(memberInfo);
			if (methodInfo.isLive) Terminal.puts(" [impl]");
		}
		Terminal.puts("}\n");
	}
	def printRmaTypeRef(utype: Type, typeInfo: RmaType) {
		Terminal.puts("    subt: {");
		Terminal.putb(utype.render(StringBuffer.new()));
		Terminal.puts("}\n");
	}
	def printRecord(record: Record, r: Record) {
		Terminal.puts("    record {");
		Terminal.puti(record.id);
		Terminal.puts(": ");
		Terminal.putb(record.rtype.render(StringBuffer.new()));
		Terminal.puts("}\n");
	}
	def printTypeArgs(typeArgs: List<TypeArgs>) {
		while (typeArgs != null) {
			Terminal.putb(typeArgs.head.render(StringBuffer.new()));
			typeArgs = typeArgs.tail;
		}
	}
	def printLiveMethod(memberInfo: RmaMethod) {
		Terminal.puts("    + ");
		printRmaMember(memberInfo.container, memberInfo);
	}
}
