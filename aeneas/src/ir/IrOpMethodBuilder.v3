// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def INITIAL_MSIZE = 16;

// Creates methods to wrap operators so they can be used as delegates
class IrOpMethodBuilder(compiler: Compiler) {
	def prog = compiler.prog;
	var closures: Array<IrClass>;

	def buildOpMethod(op: Operator) -> IrSpec {
		// XXX: cache Operator -> IrSpec
		var typeArgs: TypeArgs;
		if (op.isPolymorphic()) {
			var abstracter = TypeParamAbstracter.new(prog);
			op = op.subst(abstracter.substitute);
			typeArgs = abstracter.getTypeArgs();
		}
		// build SSA params and types
		def container = createGlobalIrClass();
		var paramTypes = op.paramTypes, numParams = paramTypes.length;
		var params = Array<SsaParam>.new(numParams + 1);
		var args = Array<SsaInstr>.new(numParams);
		params(0) = SsaParam.new(0, container);
		for (i = 0; i < numParams; i++) {
			var param = SsaParam.new(i + 1, paramTypes(i));
			params(i + 1) = param;
			args(i) = param;
		}
		// build IrMethod
		var meth = createIrMethod(container, typeArgs, paramTypes, op.resultType);
		meth.setFact(Facts.M_INLINE | Facts.M_OPERATOR);
		meth.ssa = SsaRegion.new(params, op.resultType);
		// build block
		var block = SsaBuilder.new(meth.ssa.startBlock);
		var apply = block.addApply(null, op, args);
		block.addReturn([apply]);
		compiler.printSsa("Generated", null, meth);
		// create the IrSpec
		var ta = if(typeArgs != null, Arrays.prepend(container, typeArgs.types), [container]);
		return IrSpec.new(container, ta, meth);
	}
	// build an operator capable of creating a closure for the given operator and args
	def buildOpClosure(ssa: SsaBuilder, op: Operator, args: Array<SsaInstr>, indexMap: Array<int>) -> SsaInstr {
		// get the closure type
		var ic = createClosureClass(indexMap.length);
		var closureType = getClosureType(ic, op, indexMap);
		var newSpec = IrSpec.new(closureType, [closureType], ic.methods(0));
		// create the closure object
		// XXX: fold the closure creation if possible
		var closure = ssa.addApply(null, V3Op.newClassAlloc(newSpec), args);
		closure.setFact(Facts.O_PURE);
		// create the closure method
		var abstracter = TypeParamAbstracter.new(prog);
		var meth = createClosureMethod(ic, op, abstracter, indexMap);
		var spec = IrSpec.new(prog.globalType(), Lists.toArray(List.new(closureType, abstracter.oldTypeParams)), meth);
		// XXX: fold creation of delegate if possible
		return ssa.addApply(null, V3Op.newCreateDelegate(spec, closureType), [closure]);
	}
	private def getClosureType(ic: IrClass, op: Operator, indexMap: Array<int>) -> Type {
		var boundTypes: List<Type>;
		for (i = indexMap.length - 1; i >= 0; i--) {
			boundTypes = List.new(op.paramTypes(indexMap(i)), boundTypes);
		}
		return ic.ctype.typeCon.create(boundTypes);
	}
	private def createClosureMethod(ic: IrClass, op: Operator, abstracter: TypeParamAbstracter, indexMap: Array<int>) -> IrMethod {
		// create parameters and method
		op = op.subst(abstracter.substitute);
		var paramTypes = Lists.toArray(op.getResidualParamTypeList(indexMap));
		var meth = createIrMethod(ic.ctype, abstracter.getDefaultTypeArgs(), paramTypes, op.resultType);
		meth.setFact(Facts.M_INLINE);
		// build the body of the method
		var closureType = getClosureType(ic, op, indexMap);
		var block = createSsa(closureType, meth);
		var receiver: SsaInstr = meth.ssa.params(0);
		var args = Array<SsaInstr>.new(op.paramTypes.length);
		var ia = 0, ip = 1;
		for (i = 0; i < op.paramTypes.length; i++) {
			if (ia < indexMap.length && i == indexMap(ia)) {
				// the argument is bound in the closure
				var spec = IrSpec.new(closureType, [closureType], ic.fields(ia));
				var load = block.addApply(null, V3Op.newClassGetField(spec), [receiver]);
				load.setFact(Facts.O_PURE | Facts.O_NO_NULL_CHECK);
				args(i) = load;
				ia++;
			} else {
				// the argument is a parameter to this method
				args(i) = meth.ssa.params(ip++);
			}
		}
		var app = block.addApply(null, op, args);
		block.addReturn([app]);
		compiler.printSsa("Generated", null, meth);
		return meth;
	}
	private def createClosureClass(numBound: int) -> IrClass {
		if (closures == null) closures = Array.new(numBound + 3);
		if (numBound >= closures.length) closures = Arrays.grow(closures, closures.length + numBound);
		if (closures(numBound) != null) return closures(numBound);

		// create the VST-level class type
		var name = Strings.toBuffer(prog.name()).puts("$closure").puti(numBound).toString();
		var typeParams: List<TypeParam>;
		for (i = 0; i < numBound; i++) {
			typeParams = List.new(TypeUtil.newTypeParam(null, prog.typeCache), typeParams);
		}
		var decl = VstClass.new(Token.new("<generated>", name, 0, 0), typeParams, null, null, null, null);
		decl.typeEnv = TypeEnv.new(null, typeParams);
		decl.typeCon = V3Class_TypeCon.new(decl, prog.typeCache);
		var classType = decl.getDeclaredType();

		// add a constructor that initializes the fields
		var builder = IrClassBuilder.new(classType, null);
		var paramTypes = Array<Type>.new(numBound);
		var i = 0;
		for (l = typeParams; l != null; (l = l.tail, i++)) {
			var f = IrField.new(classType, l.head);
			f.index = i;
			f.setFact(Facts.F_VALUE);
			builder.addIrField(f); // add a field
			paramTypes(i) = l.head; // and a parameter type
		}
		var meth = IrMethod.new(classType, null, paramTypes, classType);
		meth.setFact(Facts.M_NEW | Facts.M_INLINE);
		builder.addIrMethod(meth);
		builder.methods.grow(INITIAL_MSIZE);
		builder.methods.length = INITIAL_MSIZE;

		// build the body of the constructor
		var block = createSsa(classType, meth), params = meth.ssa.params;
		var receiver: SsaInstr = params(0);
		for (i = 0; i < numBound; i++) {
			var spec = IrSpec.new(classType, [classType], builder.fields.get(i));
			block.addApply(null, V3Op.newClassInitField(spec), [receiver, params(i + 1)]);
		}
		block.addReturn([receiver]);
		compiler.printSsa("Generated", null, meth);
		var ic = closures(numBound) = builder.build();
		prog.ir.classMap.set(ic.ctype, ic);
		return ic;
	}
	private def createSsa(receiver: Type, meth: IrMethod) -> SsaBuilder {
		var params = Array<SsaParam>.new(meth.paramTypes.length + 1);
		params(0) = SsaParam.new(0, receiver);
		for (i = 1; i < params.length; i++) {
			params(i) = SsaParam.new(i, meth.paramTypes(i - 1));
		}
		meth.ssa = SsaRegion.new(params, meth.returnType);
		return SsaBuilder.new(meth.ssa.startBlock);
	}
	private def createIrMethod(container: Type, typeArgs: TypeArgs, paramTypes: Array<Type>, returnType: Type) -> IrMethod {
		// XXX: ugly hack; add another method to an existing IrClass by recreating it if necessary
		var ic = prog.ir.getIrClass(container);
		var m = IrMethod.new(container, typeArgs, paramTypes, returnType);
		// search for an empty slot
		var length = ic.methods.length;
		for (i = 1; i < length; i++) {
			if (ic.methods(i) == null) return setIrMethod(ic, i, m);
		}
		ic = IrClass.new(container, ic.typeArgs, ic.parent, ic.fields, Arrays.grow(ic.methods, length * 4));
		prog.ir.classMap.set(container, ic);
		return setIrMethod(ic, length, m);
	}
	private def setIrMethod(ic: IrClass, i: int, m: IrMethod) -> IrMethod {
		m.index = i;
		return ic.methods(i) = m;
	}
	private def createGlobalIrClass() -> Type {
		var container = prog.globalType();
		var ic = prog.ir.getIrClass(container);
		if (ic == null) {
			ic = IrClass.new(container, null, null, [], Array<IrMethod>.new(INITIAL_MSIZE));
			prog.ir.classMap.set(container, ic);
		}
		return container;
	}
}
// Abstracts any type parameters in a type with a new type parameter
class TypeParamAbstracter(prog: Program) extends TypeSubst {
	var newTypeParams: List<TypeParam>;
	var oldTypeParams: List<Type>;

	def substituteTypeParam(typeParam: TypeParam) -> Type {
		// XXX: (linear) search for existing type parameter substitution
		var nl = newTypeParams;
		for (ol = oldTypeParams; ol != null; (ol = ol.tail, nl = nl.tail)) {
			if (ol.head == typeParam) return nl.head;
		}
		// introduce a new type parameter
		oldTypeParams = List.new(typeParam, oldTypeParams);
		var newTypeParam = TypeUtil.newTypeParam(null, prog.typeCache);
		newTypeParams = List.new(newTypeParam, newTypeParams);
		return newTypeParam;
	}
	def getTypeArgs() -> TypeArgs {
		if (oldTypeParams == null) return null;
		var typeEnv = TypeEnv.new(null, newTypeParams);
		return TypeArgs.new(typeEnv, Lists.toArray(oldTypeParams));
	}
	def getDefaultTypeArgs() -> TypeArgs {
		if (oldTypeParams == null) return null;
		return TypeEnv.new(null, newTypeParams).getDefaultTypeArgs();
	}
}
