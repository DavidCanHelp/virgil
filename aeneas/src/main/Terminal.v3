// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility class for pretty colors and formatting output to the terminal.
component Terminal {
	def CTRL_BLACK        = "\x1B[0;30m";
	def CTRL_RED          = "\x1B[0;31m";
	def CTRL_GREEN        = "\x1B[0;32m";
	def CTRL_BROWN        = "\x1B[0;33m";
	def CTRL_BLUE         = "\x1B[0;34m";
	def CTRL_PURPLE       = "\x1B[0;35m";
	def CTRL_CYAN         = "\x1B[0;36m";
	def CTRL_LIGHTGRAY    = "\x1B[0;37m";
	def CTRL_DARKGRAY     = "\x1B[1;30m";
	def CTRL_BRIGHT_RED   = "\x1B[1;31m";
	def CTRL_BRIGHT_GREEN = "\x1B[1;32m";
	def CTRL_YELLOW       = "\x1B[1;33m";
	def CTRL_BRIGHT_BLUE  = "\x1B[1;34m";
	def CTRL_MAGENTA      = "\x1B[1;35m";
	def CTRL_BRIGHT_CYAN  = "\x1B[1;36m";
	def CTRL_WHITE        = "\x1B[1;37m";
	def CTRL_DEFAULT      = "\x1B[1;00m";

	// XXX: putc buffer is not future-proof for multiple threads
	private var putc_buffer: Array<byte> = Array.new(1);

	def putln(str: string) {
		put(str);
		ln();
	}
	def put(str: string) { System.puts(str); }
	def putc(ch: byte) {
		putc_buffer(0) = ch;
		System.puts(putc_buffer);
	}
	def putb(buf: StringBuffer) { System.puts(buf.toString()); } // XXX: output without copying
	def putbln(buf: StringBuffer) { System.puts(buf.toString()); putc('\n'); } // XXX: output without copying
	def ln() { putc('\n'); }
	def tab() { putc('\t'); }
	def puti(val: int) { System.puti(val); }
	def put1<A>(fmt: string, a: A) { put(Strings.format1(fmt, a)); }
	def put2<A, B>(fmt: string, a: A, b: B) { put(Strings.format2(fmt, a, b)); }
	def put3<A, B, C>(fmt: string, a: A, b: B, c: C) { put(Strings.format3(fmt, a, b, c)); }
	def cyan<T>(fmt: string, a: T) { color(CTRL_CYAN, fmt, a); }
	def blue<T>(fmt: string, a: T) { color(CTRL_BLUE, fmt, a); }
	def red<T>(fmt: string, a: T) { color(CTRL_RED, fmt, a); }
	def green<T>(fmt: string, a: T) { color(CTRL_GREEN, fmt, a); }
	def yellow<T>(fmt: string, a: T) { color(CTRL_YELLOW, fmt, a); }
	def color<T>(c: string, fmt: string, a: T) {
		put(c);
		put(Strings.format1(fmt, a));
		put(CTRL_DEFAULT);
	}
}
// adds colorization methods to string buffers
class TerminalBuffer extends StringBuffer {
	var color: string;
	def blue() -> TerminalBuffer {
		puts(color = Terminal.CTRL_BLUE);
		return this;
	}
	def green() -> TerminalBuffer {
		puts(color = Terminal.CTRL_GREEN);
		return this;
	}
	def cyan() -> TerminalBuffer {
		puts(color = Terminal.CTRL_CYAN);
		return this;
	}
	def red() -> TerminalBuffer {
		puts(color = Terminal.CTRL_RED);
		return this;
	}
	def yellow() -> TerminalBuffer {
		puts(color = Terminal.CTRL_YELLOW);
		return this;
	}
	def end() -> TerminalBuffer {
		if (color != null) puts(Terminal.CTRL_DEFAULT);
		color = null;
		return this;
	}
}
