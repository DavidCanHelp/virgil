// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The main component of the Aeneas compiler. It provides many global command line
// options. From the options and command line arguments, it decides what action
// should be performed on the program(s) on the command line.
component Aeneas {
	def options = BasicOptions.new(null);
	def o = options;

	// Action options
	def HELP		= o.newBoolOption("help", false);
	def VERSION		= o.newBoolOption("version", false);
	def TEST		= o.newBoolOption("test", false);
	def TEST_ST		= o.newBoolOption("test.st", false);
	def TEST_GC		= o.newStringOption("test.gc", "");
	def RUN			= o.newBoolOption("run", false);
	def PROFILE		= o.newBoolOption("profile", false);
	def INSTR_PROFILE	= o.newBoolOption("iprofile", false);
	def PROFILE_DEPTH	= o.newIntOption ("profile-depth", 0);
	def COVERAGE		= o.newBoolOption("coverage", false);
	def INSTR_COVERAGE	= o.newBoolOption("icoverage", false);
	// User options
	def MULTIPLE		= o.newBoolOption("multiple", false);
	def TARGET		= o.newOption("target", null, getTarget);
	def OUTPUT		= o.newStringOption("output", null);
	// Internal testing options
	def VERBOSE		= o.newIntOption("verbose", 1);
	def EXPECT		= o.newStringOption("expect", null);
	def RA			= o.newBoolOption("ra", false);
	def RA_PARTIAL		= o.newBoolOption("ra-partial", false);
	def SET_EXEC		= o.newBoolOption("set-exec", true);
	def HEAP_SIZE		= o.newSizeOption("heap-size", 0);
	def RT_STTABLES		= o.newBoolOption("rt.sttables", false);
	def RT_GCTABLES		= o.newBoolOption("rt.gctables", false);
	def RT_GC		= o.newBoolOption("rt.gc", false);
	def RT_TEST_GC		= o.newBoolOption("rt.test-gc", false);
	// Debugging options
	def PRINT_IC		= o.newBoolOption("print-ic", false);
	def PRINT_VST		= o.newBoolOption("print-vst", false);
	def PRINT_RA		= o.newBoolOption("print-ra", false);
	def PRINT_SSA		= o.newStringOption("print-ssa", null);
	def PRINT_SSA_STATS	= o.newStringOption("print-ssa-stats", null);
	def PRINT_MACH		= o.newBoolOption("print-mach", false);
	def PRINT_CFG		= o.newBoolOption("print-cfg", false);
	def PRINT_BIN		= o.newBoolOption("print-bin", false);
	def PRINT_RT		= o.newBoolOption("print-rt", false);
	def PRINT_DEAD_CODE	= o.newBoolOption("print-dead-code", false);
	def FATAL		= o.newBoolOption("fatal", false);
	def TRACE		= o.newBoolOption("trace", false);
	// For performance testing only (!)
	def DISABLE_BOUNDS_CHECKS = o.newBoolOption("disable-bounds-checks", false);
	def DISABLE_SHIFT_CHECKS  = o.newBoolOption("disable-shift-checks", false);
	def DISABLE_NULL_CHECKS   = o.newBoolOption("disable-null-checks", false);
	def DISABLE_TYPE_CHECKS   = o.newBoolOption("disable-type-checks", false);
	def DISABLE_LENGTH_CHECKS = o.newBoolOption("disable-length-checks", false);

	var targets: List<Target>;

	def main(args: Array<string>) -> bool {
		args = options.parse(args);
		if (VERSION.get()) return printVersion(true, "\n");
		if (args.length == 0) return printVersion(false, ": no input files\n");
		if (TEST.get()) return Regression.run(options, args);
		if (HELP.get()) return printHelp(args);
		if (RUN.get()) return compileAndRun(args);
		if (MULTIPLE.get()) return compileMultiple(args);
		return !compile(args).reportErrors();
	}
	def getTarget(name: string) -> Target {
		if (name == null) return null;
		for (list = targets; list != null; list = list.tail) {
			if (Strings.equal(list.head.name, name)) return list.head;
		}
		Terminal.put("Unknown target: ");
		Terminal.put(name);
		Terminal.ln();
		return null;
	}
	def compileMultiple(args: Array<string>) -> bool {
		var failed = false, verbose = VERBOSE.get();
		var progress = ProgressPrinter.new(args.length, verbose);
		for (i = 0; i < args.length; i++) {
			progress.begin(args(i));
			var compiler = compile([args(i)]);
			if (compiler.ERROR.numErrors > 0) {
				failed = true;
				progress.fail(compiler.ERROR.firstError());
			} else {
				progress.pass();
			}
		}
		if (verbose > 0) progress.report();
		return failed;
	}
	def compile(args: Array<string>) -> Compiler {
		var compiler = Compiler.new(options, V3.newProgram(), ErrorGen.new(15), TARGET.get());
		if (compiler.target == null) SystemModule.install(compiler);
		compiler.setArgs(args);
		compiler.compile();
		return compiler;
	}
	def compileAndRun(args: Array<string>) -> bool {
		var compiler = Compiler.new(options, V3.newProgram(), ErrorGen.new(15), TARGET.get());
		if (compiler.target == null) SystemModule.install(compiler);
		compiler.setArgs(args);
		var after: void -> void;
		if (COVERAGE.get()) {
			after = IcCoverage.new(compiler, INSTR_COVERAGE.get()).report;
		} else if (INSTR_PROFILE.get()) {
			after = IcInstrProfiler.new(compiler).report;
		} else if (PROFILE.get()) {
			after = IcTreeProfiler.new(compiler).report;
		}
		compiler.compile();
		if (!compiler.reportErrors()) return true;
		var result = compiler.runMain();
		if (Exception.?(result)) {
			var rettype = compiler.getMain().getReturnType();
			Terminal.putbln(compiler.prog.renderResult(result, rettype, StringBuffer.new()));
		}
		if (after != null) after();
		return false;
	}
	def registerTarget(target: Target) {
		targets = List<Target>.new(target, targets);
	}
	def printHelp(args: Array<string>) -> bool {
		return printVersion(true, "\n");
	}
	def printVersion(long: bool, next: string) -> bool {
		Terminal.put("Aeneas ");
		Terminal.put(Version.version);
		var data = Version.buildData;
		if (long && data != null) {
			Terminal.put("\nBuild Data: ");
			Terminal.put(data);
		}
		Terminal.put(next);
		return false;
	}
}
