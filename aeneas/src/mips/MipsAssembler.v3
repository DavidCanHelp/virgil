// Copyright 2016 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The set of general purpose registers on MIPS.
type MipsReg {
	case R0;  case R1;  case R2;  case R3;
	case R4;  case R5;  case R6;  case R7;
	case R8;  case R9;  case R10; case R11;
	case R12; case R13; case R14; case R15;
        case R16; case R17; case R18; case R19;
        case R20; case R21; case R22; case R23;
        case R24; case R25; case R26; case R27;
        case R28; case R29; case R30; case R31;
}
class MipsAssembler(encoder: DataEncoder) {
	def pos() -> int {
        	return encoder.pos;
        }

	// Arithmetic instructions
        def add(rd: MipsReg, ra: MipsReg, rb: MipsReg);
        def addi(rd: MipsReg, ra: MipsReg, imm: i16);
        def addiu(rd: MipsReg, ra: MipsReg, imm: u16);
        def addu(rd: MipsReg, ra: MipsReg, imm: u16);
        def and(rd: MipsReg, ra: MipsReg, rb: MipsReg);
        def andi(rd: MipsReg, ra: MipsReg, imm: u16);
	def div(ra: MipsReg, rb: MipsReg);
	def divu(ra: MipsReg, rb: MipsReg);
	def mult(ra: MipsReg, rb: MipsReg);
	def multu(ra: MipsReg, rb: MipsReg);
	def nop();
        def or(rd: MipsReg, ra: MipsReg, rb: MipsReg);
        def ori(rd: MipsReg, ra: MipsReg, imm: u16);
        def sll(rd: MipsReg, ra: MipsReg, imm: u5);
        def sllv(rd: MipsReg, ra: MipsReg, rb: MipsReg);
        def srl(rd: MipsReg, ra: MipsReg, imm: u5);
        def srlv(rd: MipsReg, ra: MipsReg, rb: MipsReg);
        def xor(rd: MipsReg, ra: MipsReg, rb: MipsReg);
        def xori(rd: MipsReg, ra: MipsReg, imm: u16);

	// Set instructions
	def slt(rd: MipsReg, ra: MipsReg, rb: MipsReg);
        def slti(rd: MipsReg, ra: MipsReg, imm: i16);
        def sltiu(rd: MipsReg, ra: MipsReg, imm: u16);
        def sltu(rd: MipsReg, ra: MipsReg, rb: MipsReg);
	def sle(rd: MipsReg, ra: MipsReg, rb: MipsReg);
        def slei(rd: MipsReg, ra: MipsReg, imm: i16);
        def sleiu(rd: MipsReg, ra: MipsReg, imm: u16);
        def sleu(rd: MipsReg, ra: MipsReg, rb: MipsReg);
	
	// Branch instructions
	def beq(ra: MipsReg, rb: MipsReg, off: i16);        
	def bgez(ra: MipsReg, off: i16);        
	def bgezal(ra: MipsReg, off: i16);        
	def bgtz(ra: MipsReg, off: i16);        
	def blez(ra: MipsReg, off: i16);        
	def bltzal(ra: MipsReg, off: i16);        
	def bne(ra: MipsReg, rb: MipsReg, off: i16);

	def j(target: u26);
        def jal(target: u26);
        def jr(target: MipsReg);

	// Trap instructions
        def teq(ra: MipsReg, rb: MipsReg);
        def tne(ra: MipsReg, rb: MipsReg);
        def tlt(ra: MipsReg, rb: MipsReg);
        def tle(ra: MipsReg, rb: MipsReg);
        def tgt(ra: MipsReg, rb: MipsReg);
        def tge(ra: MipsReg, rb: MipsReg);

	// Loads and stores
        def lb(rd: MipsReg, rs: MipsReg, offset: u16);
        def lbu(rd: MipsReg, rs: MipsReg, offset: u16);
        def lh(rd: MipsReg, rs: MipsReg, offset: u16);
        def lhu(rd: MipsReg, rs: MipsReg, offset: u16);
        def lui(rd: MipsReg, imm: u16);
        def lw(rd: MipsReg, rs: MipsReg, offset: u16);
	def sb(ra: MipsReg, rb: MipsReg, offset: u16);
	def sh(ra: MipsReg, rb: MipsReg, offset: u16);
	def sw(ra: MipsReg, rb: MipsReg, offset: u16);

	// Access $LO and $HI registers
	def mfhi(rd: MipsReg);
        def mflo(rd: MipsReg);

	def move(rd: MipsReg, rs: MipsReg);

	def syscall();
}
