// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// and encodes CiRuntime.GC tables into a compact format.
// XXX: make CiRuntime addresses into global constants that store the actual
// addresses in an array in the MachProgram or MachRuntime
class MachRtGcTables(mach: MachProgram, rt: MachRuntime) {
	var refMapBuilder = MachRefMapBuilder.new();
	var stackRefMaps = MachRtPageTable.new(CiRuntimeModule.GC_STACKMAP_PAGES, CiRuntimeModule.GC_STACKMAP_TABLE, null, false).grow(mach.numMethods * 2);
	var typeRefMaps = Vector<int>.new();
	var mutableMap = TypeUtil.newTypeMap<List<int>>();
	var rootMap: BitMatrix;

	def recordStackRefMap(off: int, source: Source, stackMap: int) {
//		var map = StringBuffer.new().putx(stackMap).toString();
//		if (rt.debug && rt.src != null) rt.src.debugPoint("stackmap", map, off - 1, source, rt.src.frameSlots());
		stackRefMaps.add(off - 1, stackMap, 0);
	}
	def recordTypeRefMap(ic: IrClass) {
		// compute the reference map for a given IrClass
		var slots = ic.machSize / mach.refSize;
		refMapBuilder.beginRefMap(slots, 32); // XXX: 32-bit centric; use 16-bit maps on 16-bit targets
		var mutable: List<int>;
		for (f in ic.fields) {
			if (mach.isRefType(f.fieldType)) {
				refMapBuilder.setRefMap(f.machOffset / mach.refSize);
				if (!f.checkFact(Facts.F_VALUE)) mutable = List.new(f.machOffset, mutable);
			}
		}
		mutableMap.set(ic.ctype, mutable);
		var refmap = refMapBuilder.finishRefMap();
		// grow the typeRefMaps table if necessary
		var typeId = ic.minClassId;
		if (typeId >= typeRefMaps.length) {
			typeRefMaps.grow(typeRefMaps.length + typeId + 10);
			typeRefMaps.length = typeId + 1; // XXX: dirty, direct modification of sequence length
		}
		typeRefMaps.set(typeId, refmap);
	}
	def recordRootObject(off: int, r: Record) {
		// record the (mutable) references inside a root object at the given offset
		if (V3.isArray(r.rtype)) {
			var elem = V3Array.elementType(r.rtype);
			if (mach.isRefType(elem)) {
				var start = off + mach.getArrayElemOffset(r.rtype);
				recordRootRefRange(start, start + r.values.length * mach.refSize);
			}
		} else if (V3.isClass(r.rtype)) {
			// only record mutable field refs of this object
			for (l = mutableMap.get(r.rtype); l != null; l = l.tail) {
				recordRootRef(off + l.head);
			}
		}
	}
	def beginRefMap(slots: int, max: int) -> MachRefMapBuilder {
		refMapBuilder.beginRefMap(slots, max);
		return refMapBuilder;
	}
	def recordDataSize(size: int) {
		rootMap = BitMatrix.new(1, mach.data.align(size) / mach.refSize);
	}
	def recordRootRef(off: int) {
//		if (Aeneas.PRINT_MACH.get()) Terminal.put1("@rootref data + %1\n", off);
		rootMap.set(0, off / mach.refSize);
	}
	def recordRootRefRange(startOff: int, endOff: int) {
		// XXX: optimize setting of root ranges
//		if (rt.debug) Terminal.put2("@rootref data + %1 ... %2\n", startOff, endOff);
		var end = endOff / mach.refSize;
		for (off = startOff / mach.refSize; off < end; off++) rootMap.set(0, off);
	}
	def encode(u: MachDataEncoder) {
		// encode stack-refmap table
		stackRefMaps.encode(rt, u);
		// encode root-refmap as a series of (offset, refmap) pairs
		CiRuntimeModule.GC_ROOTS_START.setAbs(rt, u.endAddr());
		var b = rootMap.bits;
		for (i < b.length) {
			if (b(i) != 0) {
				u.i4(i * 32 * mach.refSize); // offset
				u.i4(b(i)); // refmap bits
			}
		}
		CiRuntimeModule.GC_ROOTS_END.setAbs(rt, u.endAddr());
		// encode type-refmap table
		CiRuntimeModule.GC_TYPE_TABLE.setAbs(rt, u.endAddr());
		for (i < typeRefMaps.length) {
			u.i4(typeRefMaps.get(i));
		}
		// encode ext-refmap area
		CiRuntimeModule.GC_EXTMAPS.setAbs(rt, u.endAddr());
		var ex = refMapBuilder.extended;
		for (i < ex.length) {
			u.i4(ex.get(i));
		}
	}
}
// Helper for building a reference map, including extended reference maps.
class MachRefMapBuilder {
	def extended = Vector<int>.new();
	var curSlots: int;
	var curBits: int;
	var curExtended: int;

	// begin a new stackmap entry with the given length in bits
	def beginRefMap(slots: int, max: int) {
		curSlots = slots;
		if (slots >= (max - 1)) {
			// allocate space in the extended map
			curExtended = 1 << u5.!(max - 1);
			curBits = extended.length;
			var words = (slots + 30) / 31;
			// bit 31 set indicates more words to follow
			for (i = 1; i < words; i++) extended.add(0x80000000);
			// bit 31 not set indicates this is the last word
			extended.add(1 << u5.!(slots % 31));
		} else {
			// number of slots is small enough to fit in the compact map
			curBits = 1 << u5.!(slots);
			curExtended = 0;
		}
	}
	// set the given bit in the current stackmap entry
	def setRefMap(index: int) {
		if (index >= curSlots) return V3.fail("out of bounds in stack map construction");
		if (curExtended != 0) {
			// set the appropriate bit in the extended map
			var i = curBits + index / 31, bit = u5.!(index % 31);
			extended.set(i, extended.get(i) | (1 << bit));
		} else {
			// set the bit in the current bits
			curBits = curBits | (1 << u5.!(index));
		}
	}
	// return the encoded form of the current entry
	def finishRefMap() -> int {
		return curExtended | curBits;
	}
}
