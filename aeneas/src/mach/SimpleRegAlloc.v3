// Copyright 2021 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Simple register allocator that spills everything to the stack between
// instructions.
class SimpleRegAlloc(regSet: MachRegSet, codegen: SsaMachGen) {
	def curVreg = Array<VReg>.new(regSet.physRegs);
	def allocated = Array<byte>.new(regSet.physRegs);
	var cursor: int;

	def allocate(frame: MachFrame) {
		var i = codegen.first;
		while (i != null) {
			var next = i.next;
			release();
			var operands = i.operands;
			var first_def = true;
			for (j = operands.length - 1; j >= 0; j--) {
				match (operands[j]) {
					Use(ssa, vreg, constraint) => {
						var loc = alloc(frame, vreg, constraint);
						codegen.insertRestoreLocal(vreg, loc, i);
						operands[j] = Operand.Use(ssa, vreg, loc);
					}
					Overwrite(ssa, dst, use, constraint) => {
						var loc = alloc(frame, use, constraint);
						codegen.insertRestoreLocal(use, loc, i);
						operands[j] = Operand.Overwrite(ssa, dst, use, loc);
						codegen.insertSaveLocal(loc, dst, next);
					}
					Def(ssa, vreg, constraint) => {
						if (first_def) {
							release();
							first_def = false;
						}
						var loc = alloc(frame, vreg, constraint);
						operands[j] = Operand.Def(ssa, vreg, loc);
						codegen.insertSaveLocal(loc, vreg, next);
					}
					_ => ;
				}
			}
			i = next;
		}
	}
	def alloc(frame: MachFrame, vreg: VReg, constraint: int) -> int {
		if (vreg.spill == 0) {
			// allocate a spill slot for the VReg
			vreg.spill = frame.allocSpill(vreg.regClass);
		}
		if (constraint == 0) {
			// no constraint: use register class
			var rclass = (vreg.regClass.tag + 1) >>> 2;
			constraint = regSet.regClasses[rclass];
		} else if (constraint >= regSet.regSets.length) {
			// constraint is for a spill slot
			return constraint;
		}
		var set = regSet.regSets[constraint];
		// Check if existing register (if any) is in the constraint set
		if (vreg.reg != 0) {
			for (reg in set) if (reg == vreg.reg) return reg;
		}
		// Allocate a register from the constraint set
		for (reg in set) {
			if (curVreg[reg] == null) {
				curVreg[reg] = vreg;
				allocated[cursor++] = reg;
				if (vreg.reg == 0) vreg.reg = reg;
				return reg;
			}
		}
		return V3.fail1("out of registers in set %s", regSet.identify(constraint));
	}
	def release() {
		for (i < cursor) { // Release all registers.
			var num = allocated[i];
			var vreg = curVreg[num];
			curVreg[num] = null;
			vreg.reg = 0;
		}
		cursor = 0;
	}
}
