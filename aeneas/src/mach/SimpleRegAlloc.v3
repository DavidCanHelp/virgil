// Copyright 2021 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Simple register allocator that spills everything to the stack between
// instructions.
class SimpleRegAlloc(regSet: MachRegSet, codegen: SsaMachGen) {
	def curVreg = Array<VReg>.new(regSet.physRegs);
	def allocated = Array<byte>.new(regSet.physRegs);
	def parmoveDests = Vector<(VReg, List<Operand.Def>)>.new();
	var cursor: int;

	def allocate() {
		var i = codegen.first;
		while (i != null) {
			var next = i.next;
			release();
			if (i.opcode() == ArchInstrs.ARCH_PARMOVE) {
				i.remove();
				doParallelMove(i, next);
				i = next;
				continue;
			}
			var operands = i.operands;
			var first_def = true;
			for (j = operands.length - 1; j >= 0; j--) {
				match (operands[j]) {
					Use(ssa, vreg, constraint) => {
						var loc = alloc(vreg, constraint);
						codegen.insertRestoreLocal(vreg, loc, i);
						operands[j] = Operand.Use(ssa, vreg, loc);
					}
					Overwrite(ssa, dst, use, constraint) => {
						var loc = alloc(use, constraint);
						codegen.insertRestoreLocal(use, loc, i);
						spillVar(dst);
						operands[j] = Operand.Overwrite(ssa, dst, use, loc);
						codegen.insertSaveLocal(loc, dst, next);
					}
					Def(ssa, vreg, constraint) => {
						if (first_def) {
							release();
							first_def = false;
						}
						var loc = alloc(vreg, constraint);
						operands[j] = Operand.Def(ssa, vreg, loc);
						codegen.insertSaveLocal(loc, vreg, next);
					}
					_ => ;
				}
			}
			i = next;
		}
	}
	def spillVar(vreg: VReg) {
		if (vreg.spill == 0) {
			// allocate a spill slot for the VReg
			vreg.spill = codegen.frame.allocSpill(vreg.regClass);
		}
	}
	def alloc(vreg: VReg, constraint: int) -> int {
		spillVar(vreg);
		if (constraint == 0) {
			// no constraint: use register class
			var rclass = (vreg.regClass.tag + 1) >>> 2;
			constraint = regSet.regClasses[rclass];
		} else if (constraint >= regSet.regSets.length) {
			// constraint is for a spill slot
			return constraint;
		}
		var set = regSet.regSets[constraint];
		// Check if existing register (if any) is in the constraint set
		if (vreg.reg != 0) {
			for (reg in set) if (reg == vreg.reg) return reg;
		}
		// Allocate a register from the constraint set
		for (reg in set) {
			if (curVreg[reg] == null) {
				curVreg[reg] = vreg;
				allocated[cursor++] = reg;
				if (vreg.reg == 0) vreg.reg = reg;
				return reg;
			}
		}
		return V3.fail1("out of registers in set %s", regSet.identify(constraint));
	}
	def release() {
		for (i < cursor) { // Release all registers.
			var num = allocated[i];
			var vreg = curVreg[num];
			curVreg[num] = null;
			vreg.reg = 0;
		}
		cursor = 0;
	}
	def doParallelMove(i: ArchInstr, next: ArchInstr) {
		codegen.gatherParallelMoveDests(i, parmoveDests);
		for (j < parmoveDests.length) recursivelyEmitMoves(j, next);
	}
	def recursivelyEmitMoves(j: int, next: ArchInstr) {
		var t = parmoveDests[j], vreg = t.0, dest = t.1;
		vreg.parmoveState = ON_STACK;
		for (l = dest; l != null; l = l.tail) {
			var o = l.head, dreg = o.vreg, index = dreg.parmoveState;
			spillVar(dreg);
			if (index == ON_STACK) {
				// destination is already on stack; cycle; load to temp
				dreg.parmoveState = IN_CYCLE;
				codegen.insertRestoreLocal(dreg, getParallelMoveReg(dreg), next);
			}
			if (index > 0) recursivelyEmitMoves(index - 1, next);
		}
		var loc = getParallelMoveReg(vreg);
		spillVar(vreg);
		codegen.insertRestoreLocal(vreg, loc, next);
		for (l = dest; l != null; l = l.tail) {
			codegen.insertSaveLocal(loc, l.head.vreg, next);
		}
		vreg.parmoveState = 0;
	}
	def getParallelMoveReg(vreg: VReg) -> int {
		var regSet = codegen.frame.conv.regSet;
		var which = if(vreg.parmoveState == IN_CYCLE, 1, 0);
		var cl = regSet.regClasses[vreg.regClass.tag];
		var loc = regSet.regSets[cl][which];
		return loc;
	}
}
def ON_STACK = -1;
def IN_CYCLE = -2;