// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def pname(width: int) -> string {
	return Strings.toBuffer("$p").puti(width).toString();
}
class AddressSpace {
	def name: string;		// name of address space
	def bigEndian: bool;		// true if data is loaded/stored in big endian
	def addressWidth: int;		// width of address in bits
	def addressSize: int;		// size of address in bytes
	def alignment: int;		// natural alignment of space
	def alignAdd: int = alignment - 1;
	def alignMask: int = -1 ^ alignAdd;
	def ptrTypeCon: TypeCon = Mach_TypeCon.new(pname(addressWidth), MachType.MACH_POINTER, 0, addressWidth);
	def ptrType: Type = ptrTypeCon.create0();

	new(name, bigEndian, addressWidth, addressSize, alignment) { }

	def align(i: int) -> int {
		return (i + alignAdd) & alignMask;
	}
}
// Represents a contiguous region of memory with an address space, e.g. the data region.
// Allows allocation of space within the region to various program entities and records
// the offsets for each allocation for later debugging.
class Region(name: string, space: AddressSpace) {
	def contents = Sequence<(Addr, int, int)>.new();
	var mark: int;		// the current end of the allocations

	// align the current allocation mark to the specified size
	def align(size: int) {
		mark = (mark + (size - 1)) & (-1 ^ (size - 1));
	}
	// allocate a new item into this region
	def allocate<T>(v: T, size: int) -> Address<T> {
		var addr = Address.new(this, v);
		contents.add(addr, mark, size);
		mark = mark + size;
		return addr;
	}
	// apply the function to the contents of this region
	def apply(f: (Addr, int, int) -> void) {
		contents.apply(f);
	}
	def layout(startAddr: int) -> int {
		// set all addresses
		for (i = 0; i < contents.length; i++) {
			var t = contents.get(i);
			t.0.absolute = startAddr + t.1;
		}
		return mark;
	}
}
// Addr represents any kind of address
class Addr(region: Region, base: Addr, offset: int) extends Val {
	var absolute: int = -1;	// absolute address if this is a base address

	def equals(val: Val) -> bool {
		if (Addr.?(val)) {
			var that = Addr.!(val);
			return that.region == this.region 
				&& that.offset == this.offset
				&& Values.equal(that.base, this.base);
		}
		return false;
	}
	def add(delta: int) -> Addr {
		if (delta == 0) return this; // nothing to do
		var noffset = offset + delta;
		if (base == null) {
			if (noffset == 0) return null; // null address
			return Addr.new(region, this, noffset); // use this as the base
		} else {
			if (noffset == 0) return base; // zero offset
			return Addr.new(region, base, noffset); // new offset from base
		}
	}
	def get<T>() -> T {
		return Address<T>.!(this).val;
	}
	def is<T>() -> bool {
		return Address<T>.?(this);
	}
}
// Address represents the exact address of a particular type of item, like an object or method
class Address<T> extends Addr {
	def val: T;
	new(region: Region, val) : super(region, null, 0) { }
	def equals(v: Val) -> bool {
		if (Address<T>.?(v)) {
			var other = Address<T>.!(v);
			return other.val == val && other.offset == 0; // only compare values
		}
		return false;
	}
}
// A specialized DataEncoder with machine-level properties, such as a start address
// and the ability to encode an address that is tracked for later patching.
class MachDataEncoder extends DataEncoder {
	def pageSize: int;
	var startAddr: int;
	var refs: List<(Addr, int, int)>;
	new(pageSize, startAddr, bigEndian: bool, initialSize: int)
		: super(bigEndian, Array<byte>.new(initialSize), 0, null) { }

	def recordPatch(addr: Addr, pos: int) {
		refs = List.new((addr, startAddr + pos, pos), refs);
	}
	def patch(f: (DataEncoder, Addr, int, int) -> void) {
		// patch address locations with user function
		for (l = refs; l != null; l = l.tail) {
			f(this, l.head.0, l.head.1, l.head.2);
		}
	}
	def abs4(addr: Addr, encoding: int) {
		recordPatch(addr, pos);
		i4(encoding);
	}
	def posAddr() -> int {
		return startAddr + pos;
	}
	def endAddr() -> int {
		return startAddr + end();
	}
	def skipPage() {
		startAddr = startAddr + pageSize;
	}
	def endPageAddr() -> int {
		return endAddr() & (-1 ^ (pageSize - 1));
	}
}
