// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class MachLanguage extends Language {
	def renderVal(val: Val, vtype: Type, buf: StringBuffer) -> bool {
		if (Address<IrMethod>.?(val)) {
			var addr = Address<IrMethod>.!(val);
			return addOffset(buf.format1("&%1", addr.val.renderLong), addr);
		} else if (Address<Array<IrMethod>>.?(val)) {
			var addr = Address<Array<IrMethod>>.!(val);
			return addOffset(buf.format1("&mt(%1)", mtableName(addr)), addr);
		} else if (Address<Record>.?(val)) {
			var addr = Address<Record>.!(val);
			return addOffset(buf.format1("&#%1", addr.val.id), addr);
		} else if (Address<IrField>.?(val)) {
			var addr = Address<IrField>.!(val);
			return addOffset(buf.format1("&%1", addr.val.renderLong), addr);
		} else if (Address<string>.?(val)) {
			var addr = Address<string>.!(val);
			return addOffset(buf.format1("&%1", addr.val), addr);
		} else if (Addr.?(val)) {
			var addr = Addr.!(val);
			return addOffset(buf.putc('&'), addr);
		}
		return false;
	}
	def addOffset(buf: StringBuffer, addr: Addr) -> bool {
		var name = if(addr.region == null, "data", addr.region.name);
		buf.format1("[%1", name);
		if (addr.offset < 0) buf.puts(" - ").puti(0 - addr.offset);
		if (addr.offset > 0) buf.puts(" + ").puti(addr.offset);
		buf.puts("]");
		return true;
	}
	def mtableName(addr: Address<Array<IrMethod>>) -> StringBuffer -> StringBuffer {
		if (addr.val.length > 0) return addr.val(0).renderLong;
		return none;
	}
	def none(buf: StringBuffer) -> StringBuffer {
		return buf.puts("mt(?)");
	}
}
