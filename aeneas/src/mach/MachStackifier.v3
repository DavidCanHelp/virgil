// Copyright 2017 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def XXX: Terminal;
// A utility to introduce explicit loads and stores of local variables
// between instructions for stack machines such as WASM and the JVM.
class MachStackifier(gen: StackInstrGen) {
	private def VERBOSE = Aeneas.PRINT_STACKIFY.get();
	private def stack = Vector<Operand.Use>.new();	
	private def defs = Vector<Operand.Def>.new();
	private def parmoveDests = Vector<(VReg, List<Operand.Def>)>.new();

	private def defStack = Vector<Operand.Def>.new();
	private def loads = Vector<Operand.Use>.new();
	private def insertPoint = Vector<ArchInstr>.new();
	private def insertLoads = Vector<(ArchInstr, int, int)>.new();
	private def moveStack = Vector<int>.new();

	var printInstr: ArchInstr -> void;

	def stackify(uid: int, pre: ArchInstr, end: ArchInstr, dumpRefsOnKill: bool) {
		if (VERBOSE) {
			XXX.put1("#stackify #%1 {\n", uid);
			for (i = pre.next; i != end; i = i.next) printInstr(i);
			XXX.put("----begin\n");
		}

		defStack.length = 0;
		loads.length = 0;
		insertPoint.length = 0;
		insertLoads.length = 0;

		insertPoint.set(0, pre.next);
		// Process instructions forward, tracking definitions on the abstract stack
		var start = pre.next;
		var i = start;
		while (true) {
			if (i == end) return finishInstrs(start, end);
			if (VERBOSE) printInstr(i);
			if (i.opcode() == ArchInstrs.ARCH_PARMOVE) {
				prepareParMove(i);
				finishInstrs(start, i);
				start = i.next;
				lowerParMove(i);
				i = start;
			} else {
				processUses(i);
				processDefs(i);
				i = i.next;
			}
		}
	}
	def finishInstrs(start: ArchInstr, end: ArchInstr) {
		if (VERBOSE) XXX.put("---insertLoads\n");
		// Insert loads at points determined from previous pass
		for (j = insertLoads.length - 1; j >= 0; j--) {
			var t = insertLoads[j], next = t.0;
			for (k = t.1; k < t.2; k++) loadVRegOntoStack(loads[k].vreg, next);
		}
		loads.length = 0;
		insertLoads.length = 0;
		// Insert pops or tees for anything not consumed from stack
		if (VERBOSE) XXX.put("---finishDefs\n");
		var next: ArchInstr;
		for (i = start; i != end; i = next) {
			next = i.next;
			finishDefs(i);
		}
	}
	def processUses(i: ArchInstr) {
		var operands = i.operands;
		var loadStart = loads.length;
		var s = 0, nextHeight = defStack.length;
		// Search for operands on the definition stack
		for (j < operands.length) {
			if (VERBOSE) XXX.put1("  op#%1 ", j);
			var o = operands[j];
			if (!Operand.Use.?(o)) {
				if (VERBOSE) XXX.put1("(skip)\n", j);
				continue;
			}
			var u = Operand.Use.!(o), i = u.ssa;
			if (SsaConst.?(i) || SsaParam.?(i) || SsaPhi.?(i)) {
				// instruction won't be on stack, needs to be loaded
				if (VERBOSE) XXX.put1("load +%1\n", loads.length);
				loads.add(u);
				continue;
			}
			var found = false;
			// not a loadable, search stack for this instruction
			while (s < defStack.length) {
				if (VERBOSE) XXX.put1("\n    s = %1 ", s);
				var x = defStack[s];
				if (x.ssa == i) { // found on definition stack
					if (loads.length > loadStart) insertLoadsAfter(s, loadStart);
					if (nextHeight == defStack.length) nextHeight = s;
					loadStart = loads.length;
					x.vreg.consumedFromStack = true;
					found = true;
					s++;
					break;
				}
				s++;
			}
			if (!found) {
				// not found on the stack, load everything
				for (k = j; k < operands.length; k++) {
					var o = operands[k];
					if (Operand.Use.?(o)) loads.add(Operand.Use.!(o));
				}
				break;
			}
		}
		insertLoadsAfter(defStack.length, loadStart);
		defStack.length = nextHeight;
	}
	// Prepare to lower a parallel move. Load all move sources that are on the
	// definition stack to the move stack and mark them as consumed on the stack.
	def prepareParMove(i: ArchInstr) {
		gatherParMoveDests(i);
		var next = i.next;
		moveStack.length = 0;
		for (i < defStack.length) {
			var vreg = defStack[i].vreg;
			pushOntoMoveStack(vreg, null);
		}
		defStack.length = 0;
	}
	// Replace a parallel move with individual moves in the right order.
	// The definition stack has already been used to initialize the move stack.
	def lowerParMove(i: ArchInstr) {
		var next = i.next;
		processMoveStack(next);
		// Push any remaining move sources onto the move stack and process them
		for (i < parmoveDests.length) {
			pushOntoMoveStack(parmoveDests[i].0, next);
			processMoveStack(next);
		}
		// Lastly, remove this instruction from the block
		i.remove();
	}
	def pushOntoMoveStack(vreg: VReg, next: ArchInstr) -> bool {
		if (vreg != null && vreg.parmoveState > 0) {
			moveStack.add(vreg.parmoveState - 1);
			vreg.parmoveState = 0 - moveStack.length;
			if (next != null) loadVRegOntoStack(vreg, next);
			else vreg.consumedFromStack = true;
			return true;
		}
		return false;
	}
	// Use the move stack to implement a non-recursive post-order traversal of the move
	// graph. Always recurse on the first destination of the top of stack. If that
	// is already done or on the stack, generate a move, otherwise push it.
	def processMoveStack(next: ArchInstr) {
		while (moveStack.length > 0) {
			var index = moveStack[moveStack.length - 1];
			var t = parmoveDests[index], vreg = t.0, destList = t.1;
			var done = true;
			while (destList != null) {
				var dest = destList.head.vreg;
				if (pushOntoMoveStack(dest, next)) {
					done = false;
					parmoveDests[index] = (vreg, destList);  // remember remaining moves
					break;
				} else {
					var pop = destList.tail == null;  // pop if last in list
					gen.insertStoreLocal(dest, pop, next);
				}
				destList = destList.tail;
			}
			if (done) {
				moveStack.length--;     // pop off move stack
				vreg.parmoveState = 0;  // signify it's done
				parmoveDests[index] = (null, null); // defensive
			}
		}
	}
	def processDefs(i: ArchInstr) {
		var next = i.next;
		for (o in i.operands) {
			if (!Operand.Def.?(o)) continue;
			defStack.add(Operand.Def.!(o));
			insertPoint.set(defStack.length, next);
		}
		insertPoint.set(defStack.length, next);
	}
	def finishDefs(i: ArchInstr) {
		var operands = i.operands;
		for (j < operands.length) {  // skip everything consumed on stack with useCount == 1
			var o = operands[j];
			if (!Operand.Def.?(o)) continue;
			var d = Operand.Def.!(o);
			if (!d.vreg.consumedFromStack || useCount(d) != 1) return finishRemainingDefs(operands, j, i.next);
		}
	}
	def finishRemainingDefs(operands: Array<Operand>, j: int, next: ArchInstr) {
		var mustPop = false;
		while (j < operands.length) {  // process all that need tee, pop, or store
			var o = operands[j++];
			if (!Operand.Def.?(o)) continue;
			var d = Operand.Def.!(o), c = useCount(d);
			if (c == 0) {
				gen.insertPop(d.vreg, next);
			} else {
				var pop = mustPop || !d.vreg.consumedFromStack;
				gen.insertStoreLocal(d.vreg, pop, next);
			}
			mustPop = true;
		}
	}
	def insertLoadsAfter(height: int, start: int) {
		var count = loads.length - start;
		if (count > 0) {
			insertLoads.add(insertPoint[height], start, loads.length);
		}
	}
	def loadVRegOntoStack(vreg: VReg, next: ArchInstr) {
		if (SsaConst.?(vreg.ssa)) {
			var const = SsaConst.!(vreg.ssa);
			gen.insertLoadConst(const.vtype, const.val, next);
		} else {
			gen.insertLoadLocal(vreg, next);
		}
	}
	def gatherParMoveDests(i: ArchInstr) {
		parmoveDests.length = 0;
		var operands = i.operands;
		// XXX: Construct the vreg -> List<Def> mapping at instruction selection
		for (i = 0; i < operands.length; i += 2) {
			var d = Operand.Def.!(operands[i]), u = Operand.Use.!(operands[i + 1]);
			var v = u.vreg;
			if (v.parmoveState <= 0) {
				var index = parmoveDests.length;
				v.parmoveState = 1 + index;
				parmoveDests.add(v, List.new(d, null));
			} else {
				var index = v.parmoveState - 1;
				var prev = parmoveDests[index].1;
				parmoveDests[index] = (v, List.new(d, prev));
			}
		}
	}
	def useCount(d: Operand.Def) -> int {
		// XXX: get this information from the VReg.
		if (d.ssa == null) return 1;
		if (d.ssa.useList == null) return 0;
		if (d.ssa.useList.next == null) return 1;
		return 2;
	}
	private def printStack() {
		Terminal.put1("  #stack |%1| ", stack.length);
		for (i < stack.length) {
			var u = stack[i];
			if (u.ssa != null) Terminal.put1("@%1 ", u.ssa.uid);
			else Terminal.put1("#%1 ", u.vreg.varNum);
		}
		Terminal.ln();
	}
}

// The interface between MachStackifier and the (architecture-specific) code generator.
class StackInstrGen {
	def insertLoadLocal(v: VReg, next: ArchInstr);
	def insertStoreLocal(v: VReg, pop: bool, next: ArchInstr);
	def insertPop(v: VReg, next: ArchInstr);
	def insertLoadConst(t: Type, val: Val, next: ArchInstr);
	def insertBefore(i: ArchInstr, next: ArchInstr) {
		i.prev = next.prev;
		if (i.prev != null) i.prev.next = i;
		next.prev = i;
		i.next = next;
	}
}
