// Copyright 2017 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility to introduce explicit loads and stores of local variables
// between instructions, for arch code that targets stack machines, such
// as WASM and the JVM.
class MachStackifier(gen: StackInstrGen) {
	private var first: ArchInstr;
	private def stack = Vector<Operand.Def>.new();
	private def last = Vector<ArchInstr>.new();
	private def loads = Vector<Operand.Use>.new();

	def stackify(start: ArchInstr, end: ArchInstr, dumpRefsOnKill: bool) {
		stack.length = 0;
		last.length = 0;
		loads.length = 0;
		first = start;
		for (i = start; i != end; i = i.next) {
			computeLoads(i.operands, dumpRefsOnKill);
			addDefs(i);
		}
		first = null;  // avoid leaking across reuse
		stack.clear();
		last.clear();
		loads.clear();
	}
	private def computeLoads(operands: Array<Operand>, dumpRefsOnKill: bool) {
		var s = 0, nextHeight = stack.length;
		var kill = false;
		for (i = 0; i < operands.length; i++) {
			var operand = operands[i];
			if (Operand.Kill.?(operand)) kill = true;  // record any kills
			if (!Operand.Use.?(operand)) continue;  // skip defs, immediates, etc
			var use = Operand.Use.!(operand), ssa = use.ssa;
			if (SsaConst.?(ssa) || SsaParam.?(ssa) || SsaPhi.?(ssa)) {
				// Constants, parameters, and phis always require loads.
				loads.add(use);
				continue;
			}
			var found = false;
			// search for a definition on the abstract stack
			while (s < stack.length) {
				var x = stack[s];
				if (x.vreg == use.vreg) {
					if (loads.length > 0) insertLoadsAfter(s, loads);
					if (nextHeight == stack.length) nextHeight = s;
					loads.length = 0;
					markAsStackConsumed(x, use);
					found = true;
					s++;
					break;
				}
				s++;
			}
			// Did not find the use on the stack, load everything
			if (!found) {
				while (i < operands.length) {
					var operand = operands[i++];
					if (!Operand.Use.?(operand)) continue;
					loads.add(Operand.Use.!(operand));
				}
			}
		}
		if (loads.length > 0) insertLoadsAfter(stack.length, loads);
		stack.length = nextHeight;
		if (dumpRefsOnKill && kill) ;  // TODO: insert spills for ref values
	}
	private def addDefs(i: ArchInstr) {
		// TODO: this does not behave correctly for multi-defs.
		for (operand in i.operands) {
			if (!Operand.Def.?(operand)) continue;
			stack.add(Operand.Def.!(operand));
			last.add(i);
		}
	}
	private def insertLoadsAfter(height: int, loads: Vector<Operand.Use>) {
		var instr = if(last.length > 0, last[height]);
		for (i < loads.length) {
			var next = if(instr == null, first, instr.next);
			var use = loads[i];
			if (SsaConst.?(use.ssa)) {
				var const = SsaConst.!(use.ssa);
				gen.insertLoadConst(const.vtype, const.val, next);
			} else {
				gen.insertLoadLocal(use.vreg, next);
			}
		}
		loads.length = 0;
	}
	private def markAsStackConsumed(d: Operand.Def, u: Operand.Use) {
		// TODO: mark {d} as not needing a flush to a local, if used
		// only once as {u}
	}
}
class StackInstrGen {
	def insertLoadLocal(v: MachVar, next: ArchInstr);
	def insertStoreLocal(v: MachVar, pop: bool, next: ArchInstr);
	def insertPop(v: MachVar, next: ArchInstr);
	def insertLoadConst(t: Type, val: Val, next: ArchInstr);
	def insertBefore(i: ArchInstr, next: ArchInstr) {
		i.prev = next.prev;
		if (i.prev != null) i.prev.next = i;
		next.prev = i;
		i.next = next;
	}
}
