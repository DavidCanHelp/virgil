// Copyright 2017 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility to introduce explicit loads and stores of local variables
// between instructions, for arch code that targets stack machines, such
// as WASM and the JVM.
class MachStackifier(gen: StackInstrGen) {
	def VERBOSE = false;
	private def stack = Vector<Operand.Def>.new();
	private def last = Vector<ArchInstr>.new();
	private def loads = Vector<Operand.Use>.new();
	private var firstLoad = 0;
	private var deferredLoads: List<(ArchInstr, int, int)>;
	private var possibleStores: List<(ArchInstr, Operand.Def)>;

	def stackify(start: ArchInstr, end: ArchInstr, dumpRefsOnKill: bool) -> ArchInstr {
		stack.length = 0;
		last.length = 0;
		loads.length = 0;
		last.grow(1);
		last[0] = start;
		firstLoad = 0;
		deferredLoads = null;
		for (i = start; i != end; i = i.next) {
			if (VERBOSE) printStack();
			if (VERBOSE) Terminal.put("begin ");
			if (i.opcode() == ArchInstrs.ARCH_RESOLVE) {
				resolvePhis(i.operands);
			} else {
				computeLoads(i.operands, dumpRefsOnKill);
				addDefs(i);
			}
			if (VERBOSE) Terminal.put("\n");
			last.grow(stack.length + 1);
			last[stack.length] = i;
		}
		var prev = start.prev;
		doDeferredLoads();
		doPossibleStores();
		stack.clear();  // cleanup
		last.clear();   // cleanup
		loads.clear();  // cleanup
		while (start.prev != prev) start = start.prev;
		return start;
	}
	private def computeLoads(operands: Array<Operand>, dumpRefsOnKill: bool) {
		var s = 0, nextHeight = stack.length;
		var kill = false;
		for (i = 0; i < operands.length; i++) {
			var operand = operands[i];
			if (Operand.Kill.?(operand)) kill = true;  // record any kills
			if (!Operand.Use.?(operand)) continue;  // skip defs, immediates, etc
			var use = Operand.Use.!(operand), ssa = use.ssa;
			if (VERBOSE) Terminal.put1("  use @%1 ", ssa.uid);
			if (SsaConst.?(ssa) || SsaParam.?(ssa) || SsaPhi.?(ssa)) {
				// Constants, parameters, and phis always require loads.
				loads.add(use);
				continue;
			}
			var found = false;
			// search for a definition on the abstract stack
			while (s < stack.length) {
				var x = stack[s];
				if (x.vreg == use.vreg) {
					insertLoadsAfter(s);
					if (nextHeight == stack.length) nextHeight = s;
					markAsStackConsumed(x, use);
					if (VERBOSE) Terminal.put1("  [found !%1]", s);
					found = true;
					s++;
					break;
				}
				s++;
			}
			// Did not find the use on the stack, load everything
			if (!found) {
				if (VERBOSE) Terminal.put("  [load rest]");
				while (i < operands.length) {
					var operand = operands[i++];
					if (!Operand.Use.?(operand)) continue;
					loads.add(Operand.Use.!(operand));
				}
				break;
			}
		}
		insertLoadsAfter(stack.length);
		stack.length = nextHeight;
		if (dumpRefsOnKill && kill) ;  // TODO: insert spills for ref values
	}
	private def resolvePhis(operands: Array<Operand>) {
		// TODO: The operands come in (def, use) pairs. Use the SsaDeconstructor
		// to resolve dependencies between the moves properly. Let this instruction
		// (the phi resolve instruction) be R, which should occur at the end of the
		// current block.

		// Consider a phi definition P in R and its corresponding input use V in R.
		// If V is defined in this block, then we can either:
		//   1.) If P is a join-value phi, then we must leave V on the stack at the
		//       end of the block. Either:
		//       a.) implicitly leave on stack if it is at the bottom
		//       b.) emit @ R: get_local V if V has a variable
		//       c.) emit @ V: tee_local to a temporary
		//   2.) emit @ V either
		//       a.) tee_local P, if P is not live out of this block
		//       b.) tee_local T for some temporary
		//   3.) reuse V's local variable, if it has one, and emit @ R:
		//        get_local V
		//        set_local P
		//   4.) leave V on the stack, and either:
		//       a.) emit @ R: set_local P

		// If V is defined outside this block, it already has a local. We emit
		// @ R the same as 2.) above.

		// If we don't have liveness for P, then we can be conservative and not do 1.a.).

		// Note that P cannot be live at V unless it is a _loop phi_.

		// Other than SSA resolution moves, WASM locals will be in SSA form if we
		// do not reuse them.
	}
	private def ssaOf(i: ArchInstr) -> SsaInstr {
		for (o in i.operands) {
			if (Operand.Def.?(o)) return Operand.Def.!(o).ssa;
		}
		return null;
	}
	private def addDefs(i: ArchInstr) {
		for (operand in i.operands) {
			if (!Operand.Def.?(operand)) continue;
			var d = Operand.Def.!(operand);
			stack.add(d);
			possibleStores = List.new((i, d), possibleStores);
		}
	}
	private def insertLoadsAfter(height: int) {
		deferredLoads = List.new((last[height], firstLoad, loads.length), deferredLoads);
		firstLoad = loads.length;
	}
	private def doDeferredLoads() {
		for (l = deferredLoads; l != null; l = l.tail) {
			var next = l.head.0, firstLoad = l.head.1, lastLoad = l.head.2;
			for (i = firstLoad; i < lastLoad; i++) {
				var use = loads[i];
				if (SsaConst.?(use.ssa)) {
					var const = SsaConst.!(use.ssa);
//					Terminal.put1("  LK@%1", use.ssa.uid);
					gen.insertLoadConst(const.vtype, const.val, next);
				} else {
//					Terminal.put1("  LL@%1", use.ssa.uid);
					gen.insertLoadLocal(use.vreg, next);
				}
			}
		}
		deferredLoads = null;
	}
	private def doPossibleStores() {
		for (l = possibleStores; l != null; l = l.tail) {
			var i = l.head.0, d = l.head.1, count = useCount(d);
			if (count == 0) gen.insertPop(d.vreg, i.next);
			else if (!d.vreg.consumedFromStack || count > 1) {
				gen.insertStoreLocal(d.vreg, d.vreg.consumedFromStack, i.next);
			}
		}
		possibleStores = null;
	}
	def useCount(d: Operand.Def) -> int {
		// TODO: get this information from the MachVar.
		if (d.ssa.useList == null) return 0;
		if (d.ssa.useList.next == null) return 1;
		return 2;
	}
	private def markAsStackConsumed(d: Operand.Def, u: Operand.Use) {
		// mark {d} as not needing a flush to a local, if used
		// only once as {u}
		d.vreg.consumedFromStack = true;
	}
	private def printStack() {
		Terminal.put1("stack.length=%1 ", stack.length);
		for (i < stack.length) {
			var d = stack[i];
			Terminal.put1("%1 ", d.ssa.uid);
		}
		Terminal.ln();
	}
}
class StackInstrGen {
	def insertLoadLocal(v: MachVar, next: ArchInstr);
	def insertStoreLocal(v: MachVar, pop: bool, next: ArchInstr);
	def insertPop(v: MachVar, next: ArchInstr);
	def insertLoadConst(t: Type, val: Val, next: ArchInstr);
	def insertBefore(i: ArchInstr, next: ArchInstr) {
		i.prev = next.prev;
		if (i.prev != null) i.prev.next = i;
		next.prev = i;
		i.next = next;
	}
}
