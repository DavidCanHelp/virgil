// Copyright 2017 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Some marker values used in detecting cycles when processing phi moves.
def PHI_ON_STACK = -2;
def PHI_DONE = -3;
def PHI_CYCLE = -4;
// A utility to introduce explicit loads and stores of local variables
// between instructions for stack machines such as WASM and the JVM.
class MachStackifier(gen: StackInstrGen) {
	private def VERBOSE = Aeneas.PRINT_STACKIFY.get();
	private def stack = Vector<Operand.Use>.new();	
	private def defs = Vector<Operand.Def>.new();
	private def phiMoves = Vector<(VReg, List<Operand.Def>)>.new();

	def stackify(start: ArchInstr, end: ArchInstr, dumpRefsOnKill: bool,
		     printInstr: ArchInstr -> void) -> ArchInstr {
		// Prepare.
		stack.length = 0;
		// Process all instructions before {end} in reverse order, including {start}.
		var limit = start.prev, i = end.prev;
		while (i != limit) {
			var prev = i.prev;
			if (VERBOSE) printStack();
			if (VERBOSE) printInstr(i);
			if (i.opcode() == ArchInstrs.ARCH_RESOLVE) processPhiResolve(i);
			else processInstr(i);
			i = prev;
		}
		// Reached the instruction before {start}. Load remaining values.
		loadStackFrom(0, start);
		// Clean up.
		stack.length = 0;
		defs.length = 0;
		return start;
	}
	def processInstr(i: ArchInstr) {
		var operands = i.operands;
		// Find and process all definitions of this instruction.
		defs.length = 0;
		for (o in operands) if (Operand.Def.?(o)) defs.add(Operand.Def.!(o));
		if (defs.length > 0) processDefs(i);
		// Load all the uses onto the stack
		for (o in operands) if (Operand.Use.?(o)) stack.add(Operand.Use.!(o));
		// TODO: deal with kills
	}
	def processDefs(i: ArchInstr) {
		var firstVreg = defs[0].vreg, consumed = 0, pos = stack.length;
		// Find the lowest occurrence of the first defined vreg.
		// XXX: this could be made faster with a field in the vreg.
		for (s < stack.length) {
			var u = stack[s];
			if (u.vreg == firstVreg) {  // found first vreg.
				// Consume as many vregs on stack as possible.
				for (j < defs.length) {
					if (s+j >= stack.length) break;  // end of stack
					if (!canConsumeFromStack(defs[j], stack[s+j])) break;
					consumed = j+1;
				}
				pos = s + consumed;
				break;
			}
		}
		// Store all the non-consumed definitions to locals (in reverse-definition order).
		if (VERBOSE) Terminal.put2("   #pos=%1 consumed=%2\n", pos, consumed);
		var next = i.next;
		for (j = defs.length - 1; j >= consumed; j--) {
			var d = defs[j];
			if (useCount(d) == 0) gen.insertPop(d.vreg, next);
			else gen.insertStoreLocal(defs[j].vreg, true, next);
		}
		// Load the missing operands onto the stack, starting at {pos}.
		loadStackFrom(pos, next);
		// Trim the stack back to the first (consumed) definition.
		stack.length = pos - consumed;
	}
	def loadStackFrom(pos: int, next: ArchInstr) {
		if (VERBOSE) Terminal.put1("   #loadStackFrom pos=%1\n", pos);
		for (s = pos; s < stack.length; s++) {
			loadVRegOntoStack(stack[s].vreg, next);
		}
	}
	def loadVRegOntoStack(vreg: VReg, next: ArchInstr) {
		if (SsaConst.?(vreg.ssa)) {
			var const = SsaConst.!(vreg.ssa);
			gen.insertLoadConst(const.vtype, const.val, next);
		} else {
			gen.insertLoadLocal(vreg, next);
		}
	}
	def processPhiResolve(i: ArchInstr) {
		var map = Ssa.newMap<SsaInstr>();
		var operands = i.operands;
		phiMoves.length = 0;
		// Construct a mapping from vreg -> List<Def> in {phiMoves}
		// XXX: Construct the vreg -> List<Def> mapping at instruction selection
		for (i = 0; i < operands.length; i += 2) {
			var d = Operand.Def.!(operands[i]), u = Operand.Use.!(operands[i + 1]);
			var v = u.vreg;
			if (VERBOSE) Terminal.put2("  #resolve_phi @%1 = @%2\n", d.vreg.ssa.uid, v.ssa.uid);
			if (v.endPos <= 0) {
				var index = phiMoves.length;
				v.endPos = 1 + index;
				phiMoves.add(v, List.new(d, null));
			} else {
				var index = v.endPos - 1;
				var prev = phiMoves[index].1;
				phiMoves[index] = (v, List.new(d, prev));
			}
		}
		// Topologically sort the moves and resolve cycles.
		var next = i.next;
		for (i < phiMoves.length) {
			var t = phiMoves[i];
			recursivelyEmitPhiMoves(t.0, t.1, next);
		}
		phiMoves.clear();
		// Moves have been inserted. Remove the phi resolution instruction.
		i.remove();
	}
	// Perform a topological sort of the moves by doing a DFS and emitting moves in postorder.
	// If a cycle is detected, then use the operand stack as a temporary in order to break
	// the cycle. Since each ssa phi has only one input, each def can appear in at most one
	// destination list, which means that a cycle can only occur involving the first
	// recursion. Handle the general case anyway.
	def recursivelyEmitPhiMoves(vreg: VReg, dstList: List<Operand.Def>, next: ArchInstr) {
		if (vreg.endPos == PHI_DONE) return;  // Already done.
		if (vreg.endPos == PHI_CYCLE || vreg.endPos == PHI_ON_STACK) return V3.fail1("should not recurse through cycle @%1", vreg.ssa.uid);
		if (VERBOSE) Terminal.put2("    #recurse @%1 (state=%2)\n", vreg.ssa.uid, vreg.endPos);
		// Recursively emit moves before overwriting any destinations.
		vreg.endPos = PHI_ON_STACK;
		for (l = dstList; l != null; l = l.tail) {
			var dest = l.head.vreg;
			if (dest.endPos > 0) {
				var t = phiMoves[dest.endPos - 1];
				recursivelyEmitPhiMoves(t.0, t.1, next);
			}
		}
		// Emit moves from {vreg} to its destinations.
		loadVRegOntoStack(vreg, next);
		var cycle = false;
		for (l = dstList; l != null; l = l.tail) {
			var dest = l.head.vreg;
			if (dest.endPos == PHI_ON_STACK || dest.endPos == PHI_CYCLE) {
				// Overwriting the destination vreg would complete a cycle.
				// Skip and leave this vreg on the stack.
				// The move will be emitted when the recursive call for the destination unwinds.
				cycle = true;
				dest.endPos = PHI_CYCLE;
			} else {
				// Emit a store local. Pop if the last move.
				gen.insertStoreLocal(dest, /*pop=*/ l.tail == null && !cycle, next);
			}
		}
		// If this vreg was the completion of a cycle, a recursive call hit the case above and skipped emitting a move.
		if (vreg.endPos == PHI_CYCLE) gen.insertStoreLocal(vreg, true, next);
		vreg.endPos = PHI_DONE;
	}
	def canConsumeFromStack(d: Operand.Def, u: Operand.Use) -> bool {
		return d.vreg == u.vreg && useCount(d) == 1;
	}
	def useCount(d: Operand.Def) -> int {
		// XXX: get this information from the VReg.
		if (d.ssa == null) return 1;
		if (d.ssa.useList == null) return 0;
		if (d.ssa.useList.next == null) return 1;
		return 2;
	}
	private def printStack() {
		Terminal.put1("  #stack |%1| ", stack.length);
		for (i < stack.length) {
			var u = stack[i];
			if (u.ssa != null) Terminal.put1("@%1 ", u.ssa.uid);
			else Terminal.put1("#%1 ", u.vreg.varNum);
		}
		Terminal.ln();
	}
}

// The interface between MachStackifier and the (architecture-specific) code generator.
class StackInstrGen {
	def insertLoadLocal(v: VReg, next: ArchInstr);
	def insertStoreLocal(v: VReg, pop: bool, next: ArchInstr);
	def insertPop(v: VReg, next: ArchInstr);
	def insertLoadConst(t: Type, val: Val, next: ArchInstr);
	def insertBefore(i: ArchInstr, next: ArchInstr) {
		i.prev = next.prev;
		if (i.prev != null) i.prev.next = i;
		next.prev = i;
		i.next = next;
	}
}
