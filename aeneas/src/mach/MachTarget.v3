// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component MachComponent {
	var x = Aeneas.registerTarget(MachTarget.new());
}

class MachTarget extends Target {
	new() : super("m32") { }
	def emit(compiler: Compiler) {
		// make a unified 32-bit address space
		var addrSpace = AddressSpace.new("mem", false, 32, 4, 4);
		var mach = MachProgram.new(compiler, addrSpace, addrSpace);
		mach.build();
		if (Aeneas.PRINT_MACH.get()) {
			printData(mach);
			printCode(mach);
		}
	}
	def configure(compiler: Compiler) {
		compiler.skipRma = false;
		SystemModule.install(compiler);
		MachModule.install(compiler);
	}
	def printData(mach: MachProgram) {
		Terminal.put1("---- data: %1 bytes --------\n", mach.layout.dataRegion.mark);
		mach.layout.dataRegion.apply(printAddr);
	}
	def printCode(mach: MachProgram) {
		Terminal.put1("---- code: %1 bytes --------\n", mach.layout.codeRegion.mark);
		mach.layout.codeRegion.apply(printAddr);
	}
	def printAddr(a: Addr, offset: int, size: int) {
		var buf = StringBuffer.new();
		buf.puts(Terminal.CTRL_CYAN);
		buf.putx(offset);
		buf.puts(Terminal.CTRL_DEFAULT);
		buf.puts(" ");
		buf.puti(size);
		buf.pad(' ', 32);
		if (a.is<IrMethod>()) {
			var m = a.get<IrMethod>();
			buf.puts("code   ");
			m.render(buf);
		} else if (a.is<Array<IrMethod>>()) {
			var t = a.get<Array<IrMethod>>();
			buf.puts("mtable ");
			if (t.length > 0) buf.format2("%1.%2", t(0).container.ctype.render, t(0).render);
		} else if (a.is<Record>()) {
			var r = a.get<Record>();
			buf.puts("object ");
			buf.format2("#%1:%2", r.id, r.rtype.render);
			if (r.rtype == V3.stringType) {
				buf.puts(" = ");
				printString(buf, r);
			}
		} else if (a.is<IrField>()) {
			var f = a.get<IrField>();
			buf.puts("field  ");
			buf.format3("%1.%2: %3", f.container.ctype.render, f.render, f.fieldType.render);
		} else {
			buf.puts("unknown");
		}
		Terminal.putbln(buf);
	}
	def printString(buf: StringBuffer, r: Record) {
		buf.putc('\"');
		for (v in r.values) buf.appendEscapedByte(Byte.unbox(v));
		buf.putc('\"');
	}
}
