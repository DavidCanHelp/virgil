// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Transforms "v3" code in SSA form to "mach" code (i.e. machine-level
// operations such as memory load/store).
class SsaMachGen extends SsaRebuilder {
	def mach: MachProgram;
	var explicitNullChecks: bool;

	new(mach, context: SsaContext) super(context) { }

	def build() {
		context.method.ssa = genGraph();
		context.printSsa("Machine");
	}
	def genSimpleVal(v: Val) -> Val {
		return mach.machVal(v);
	}
	def genValN(e: SsaDfEdge, index: int, oi: SsaValue, tn: TypeNorm, seq: Sequence<SsaInstr>) {
		var edgeType = typeFromEdge(e, index);
		tn = normalize(edgeType);
		if (tn == null) {
			seq.add(newGraph.valConst(edgeType, oi.val));
		} else if (tn.size == 1) {
			seq.add(newGraph.valConst(tn.newType, oi.val));
		} else {
			var vals = Array<Val>.new(tn.size);
			genValIntoArray(oi.val, tn, vals, 0);
			for (i < tn.size) seq.add(newGraph.valConst(tn.sub(i), vals(i)));
		}
	}
	def genValIntoArray(v: Val, tn: TypeNorm, dest: Array<Val>, index: int) {
		if (tn == null || tn.size == 1) {
			dest(index) = v;
			return;
		}
		if (RaIntType.?(tn)) {
			if (Box<int>.?(v)) mach.intNorm.normalizeIntIntoArray(V3.asInt(tn.oldType), Int.unbox(v), dest, index);
			if (Box<(int, int)>.?(v)) mach.intNorm.normalizeLongIntoArray(V3.asInt(tn.oldType), Int64.unbox(v), dest, index);
		}
	}
	def normalize(t: Type) -> TypeNorm {
		match (t.typeCon.kind) {
			V3Kind.INT: return mach.intNorm.normalize(t);
			V3Kind.TUPLE: return normalizeTuple(t);
		} else {
			var mt = mach.machType(t);
			return if(mt != t, TypeNorm.new(t, mt, null));
		}
	}
	def normalizeTuple(t: Type) -> RaTuple {
		// TODO: cache flattened tuples which occur in returns
		// flatten tuples
		var seqT = Sequence<Type>.new();
		var seqO = Sequence<int>.new();
		var seqN = Sequence<TypeNorm>.new();
		for (p = t.nested; p != null; p = p.tail) {
			var n = normalize(p.head);
			seqO.add(seqT.length);
			seqN.add(n);
			if (n == null) seqT.add(p.head);
			else n.addTo(seqT);
		}
		var ta = seqT.extract();
		return RaTuple.new(t, Tuple.newType(Lists.fromArray(ta)), ta, seqN.extract(), seqO.extract());
	}
	def genApplyOp(oi: SsaApplyOp) {
		var ni: SsaInstr;
		match(oi.op.opcode) {
			// Simple operators require no conversion other than normalization
			V3Opcode.Equal,
			V3Opcode.NotEqual:		ni = genEqualOp(oi);
			V3Opcode.IntLt:			ni = genIntCmp(oi, V3Infix.Lt, V3Infix.Lt);
			V3Opcode.IntGt:			ni = genIntCmp(oi, V3Infix.Gt, V3Infix.Gt);
			V3Opcode.IntLteq:		ni = genIntCmp(oi, V3Infix.Lt, V3Infix.Lteq);
			V3Opcode.IntGteq:		ni = genIntCmp(oi, V3Infix.Gt, V3Infix.Gteq);
			V3Opcode.BoolAnd,
			V3Opcode.BoolOr,
			V3Opcode.BoolNot: 		ni = genSimple(oi);
			// Output of integer operations must be normalized
			V3Opcode.IntAdd,
			V3Opcode.IntSub,
			V3Opcode.IntMul,
			V3Opcode.IntDiv,
			V3Opcode.IntMod:		return genTruncatingIntOp(oi);
			V3Opcode.IntShl,
			V3Opcode.IntSar,
			V3Opcode.IntShr:		return genShiftOp(oi);
			// Output of integer operations must be normalized
			V3Opcode.IntAnd:		return genParallelIntOp(oi, V3Infix.And);
			V3Opcode.IntOr:			return genParallelIntOp(oi, V3Infix.Or);
			V3Opcode.IntXor:		return genParallelIntOp(oi, V3Infix.Xor);
			// Conversions have to be normalized specially
			V3Opcode.IntConvert:		return genIntConvert(oi);

			V3Opcode.TypeCast: 		ni = genTypeCast(oi);
			V3Opcode.TypeQuery: 		ni = genTypeQuery(oi);
			V3Opcode.TypeSubsume: 		return genTypeSubsume(oi);
			V3Opcode.ArrayAlloc: 		ni = genArrayAlloc(oi);
			V3Opcode.ArrayInit: 		ni = genArrayInit(oi);
			V3Opcode.ArrayGetElem: 		return genArrayGetElem(oi);
			V3Opcode.ArraySetElem: 		return genArraySetElem(oi);
			V3Opcode.ArrayGetLength: 	ni = genArrayGetLength(oi);
			V3Opcode.ClassAlloc: 		return genClassAlloc(oi);
			V3Opcode.ClassGetField: 	return genClassGetField(oi);
			V3Opcode.ClassInitField:	return genClassSetField(oi, true);
			V3Opcode.ClassSetField: 	return genClassSetField(oi, false);
			V3Opcode.ClassGetMethod: 	ni = genClassGetMethod(oi);
			V3Opcode.ClassGetVirtFunc: 	ni = genClassGetVirtual(oi);
			V3Opcode.ComponentGetField: 	return genComponentGetField(oi);
			V3Opcode.ComponentSetField: 	return genComponentSetField(oi);
			V3Opcode.TupleGetElem: 		return genTupleGetElem(oi);
			V3Opcode.NullCheck: {
				ni = genNullCheck(oi);
				instrMap.set(oi, ni);
				return; // don't update SSA facts of the receiver if folded.
			}
			V3Opcode.BoundsCheck: 		ni = genBoundsCheck(oi, true);
			V3Opcode.CallMethod: 		return genCallMethod(oi);
			V3Opcode.CallClassVirtual: 	return genCallClassVirtual(oi);
			V3Opcode.CallFunction: {
				var funcRep = mach.getFuncRep(oi.op.typeArgs(0));
				call(oi, funcRep, genRefs(oi.inputs));
				return;
			}
			V3Opcode.VariantGetTag:	{
				var oobj = oi.inputs(0), nobj = genRef1(oobj);
				ni = genIfNull(oi, oi.op.resultType, nobj, null, genVariantGetTag(oi, _));
			}
			V3Opcode.ConditionalThrow:	ni = genConditionalThrow(oi);
			MachOpcode.MachSpecial: {
				// perform specialized lowering by calling the supplied function
				var loweringFunc = oi.op.attr<(SsaApplyOp, SsaMachGen) -> SsaInstr>();
				ni = loweringFunc(oi, this);
			}
			V3Opcode.TupleCreate,
			V3Opcode.ClassGetVirtual,
			V3Opcode.ComponentInit,
			V3Opcode.ComponentGetMethod,
			V3Opcode.CallClosure:		return unexpected(oi);
			MachOpcode.MachSystemOp,
			V3Opcode.SystemOp: {
				var ni = curBlock.addApply(oi.source, oi.op, genRefs(oi.inputs));
				ni.facts = ni.facts | oi.facts;
				mapNorm(oi, ni, normalize(oi.op.resultType));
				return;
			}
		} else {
			// assume machine-level and other operators aren't lowered
			ni = curBlock.addApply(oi.source, oi.op, genRefs(oi.inputs));
		}
		map1(oi, context.nonnull(ni));
	}
	def unexpected(oi: SsaApplyOp) {
		context.fail1("unexpected operator %1", V3Op.renderOp(oi.op));
	}
	def genIntCmp(oi: SsaApplyOp, infixH: byte, infixL: byte) -> SsaInstr {
		var tn = mach.intNorm.normalize(oi.op.typeArgs(0));
		if (tn == null || tn.size == 1) return genSimple(oi);
		var newArgs = genRefs(oi.inputs);
		return genIntCmpRec(oi, tn, newArgs, tn.bigEndIndex(), infixH, infixL);
	}
	def genIntCmpRec(oi: SsaApplyOp, tn: RaIntType, newArgs: Array<SsaInstr>, i: int, infixH: byte, infixL: byte) -> SsaInstr {
		var a = newArgs(i), b = newArgs(i + tn.size);
		var tt = V3.asInt(tn.sub(i));
		if (i == tn.littleEndIndex()) {
			var op = tt.lookupInfix(infixL, null);
			return apply(oi.source, op, [a, b]);
		}
		var op = tt.lookupInfix(if(i == tn.littleEndIndex(), infixL, infixH), null);
		var cmp = apply(oi.source, op, [a, b]);
		var eq = apply(null, tt.lookupInfix(V3Infix.Equal, null), [a, b]);
		var next = i + if(mach.intNorm.bigEndian, 1, -1);
		var sub = genIntCmpRec(oi, tn, newArgs, next, infixH, infixL);
		var and = apply(null, V3Op.opBoolAnd, [eq, sub]);
		return cmp = apply(oi.source, V3Op.opBoolOr, [cmp, and]);
	}
	def genEqualOp(oi: SsaApplyOp) -> SsaInstr {
		var tn = normalize(oi.op.typeArgs(0));
		if (tn == null || tn.size == 1) return genSimple(oi);
		return genEqualN(oi, tn);
	}
	def genShiftOp(oi: SsaApplyOp) {
		// TODO: recognize shift by constants for wide shifts and rearrange words.
		genTruncatingIntOp(oi);
	}
	def genTruncatingIntOp(oi: SsaApplyOp) {
		var tt = V3.asInt(oi.op.resultType);
		var inputs = genRefs(oi.inputs);
		if (inputs.length == 2) {
			// 2 -> 1 operation.
			var ni = apply(oi.source, oi.op, inputs);
			if (tt.width < mach.intNorm.width) {
				ni = curBlock.opIntConvert(V3Op.newIntConvert(mach.intNorm.word, oi.op.resultType), ni);
			}
			return map1(oi, ni);
		}
		// N*2 -> N operation.
		var tn = mach.intNorm.makeType(tt);
		var ni = apply(oi.source, V3Op.newIntWide(oi.op, tn.sub, tn.newType), inputs);
		return mapWide(oi, ni, tn, true);
	}
	def genParallelIntOp(oi: SsaApplyOp, infix: byte) {
		var inputs = genRefs(oi.inputs);
		if (inputs.length == 2) {
			// 2 -> 1 operation.
			return map1(oi, apply(oi.source, oi.op, inputs));
		}
		// N*2 -> N operation.
		var tt = V3.asInt(oi.op.resultType);
		var tn = mach.intNorm.makeType(tt);
		var vals = Array<SsaInstr>.new(tn.size);
		for (i < vals.length) {
			var op = V3.asInt(tn.sub(i)).lookupInfix(infix, null);
			vals(i) = apply(oi.source, op, [inputs(i), inputs(i + tn.size)]);
		}
		return mapN(oi, vals);
	}
	def extendBigEnd(bigEnd: SsaInstr, ft: Int_TypeCon, signed: bool) -> SsaInstr {
		if (signed) {
			var shift = newGraph.intConst(mach.intNorm.width - 1);
			return apply(null, ft.lookupInfix(V3Infix.Sar, null), [bigEnd, shift]);
		}
		return newGraph.nullConst(mach.intNorm.word);
	}
	def genIntConvert(oi: SsaApplyOp) {
		var inputs = genRefs(oi.inputs);
		var ft = V3.asInt(oi.op.paramTypes(0));
		var tt = V3.asInt(oi.op.resultType);
		if (tt.width > mach.intNorm.width) {
			// M -> (N > 1) conversion.
			var ftn = mach.intNorm.makeType(ft);
			var ttn = mach.intNorm.makeType(tt);
			var fbig = ftn.bigEndIndex();
			if (ftn.size < ttn.size) {
				// M < N, so sign or zero extend the big end.
				var signed = ft.signed && !oi.inputs(0).dest.checkFact(Facts.V_NON_NEGATIVE);
				var extend = extendBigEnd(inputs(fbig), ft, signed);
				var vals = ftn.growToN(inputs, ttn.size, extend);
				return mapN(oi, vals);
			}
			// M >= N, so select N values from inputs.
			var vals = ftn.getLowestN(inputs, ttn.size);
			// truncate the big end if necessary.
			var fbt = ftn.sub(fbig), tbig = ftn.bigEndIndex(), tbt = ttn.sub(tbig);
			if (fbt != tbt) vals(tbig) = curBlock.opIntConvert(V3Op.newIntConvert(fbt, tbt), vals(tbig));
			return mapN(oi, vals);
		}
		var ni: SsaInstr;
		if (ft.width > mach.intNorm.width) {
			// (N > 1) -> 1 conversion.
			var ftn = mach.intNorm.makeType(ft);
			var ttn = mach.intNorm.makeType(tt);
			var lt = ftn.sub(ftn.littleEndIndex());
			var little = inputs(ftn.littleEndIndex());
			if (lt == ttn.newType) ni = little;
			else ni = curBlock.opIntConvert(V3Op.newIntConvert(lt, ttn.newType), little);
		} else {
			// 1 -> 1 conversion.
			ni = apply(oi.source, oi.op, inputs);
		}
		map1(oi, ni);
	}
	def mapWide(oi: SsaInstr, ni: SsaInstr, tn: RaIntType, truncate: bool) {
		if (tn == null) return map1(oi, ni);
		var vals = Array<SsaInstr>.new(tn.sub.length);
		for (i < tn.size) vals(i) = apply(null, V3Op.newTupleGetElem(tn.newType, i), [ni]);
		if (truncate) {
			// truncate the big end of the result if necessary.
			var tbig = tn.bigEndIndex(), rem = tn.sub(tbig);
			if (V3.asInt(rem).width < mach.intNorm.width) {
				vals(tbig) = apply(null, V3Op.newIntConvert(mach.intNorm.word, rem), [vals(tbig)]);
			}
		}
		mapN(oi, vals);
	}
	def genSimple(oi: SsaApplyOp) -> SsaInstr {
		return apply(oi.source, oi.op, genRefs(oi.inputs));
	}
	def genTypeCast(oi: SsaApplyOp) -> SsaInstr {
		var castOp = oi.op.attr<TypeCast>();
		var ft = oi.op.typeArgs(0), tt = oi.op.typeArgs(1);
		match (castOp.approx) {
			CastOp.SUBSUME,
			CastOp.TRUE: return genRef1(oi.inputs(0));
			CastOp.FALSE: return curBlock.addThrow(oi.source, V3Exception.TypeCheck);
			CastOp.VALUE: return newGraph.valConst(tt, castOp.result);
			CastOp.CLASS_CAST: return genClassCast(ft, tt, oi);
		} else {
			// other kinds of casts should have been removed
			context.fail1("unexpected cast %1", castOp.name());
			return newGraph.nop();
		}
	}
	def genClassCast(ft: Type, tt: Type, oi: SsaApplyOp) -> SsaInstr {
		var oobj = oi.inputs(0), nobj = genRef1(oobj);
		if (context.compiler.DisableTypeChecks) return nobj;
		var t = mach.classIdRange(tt), low = t.0, high = t.1;
		if (low == high) {
			// no live classes can match, only null
			if (V3Op.needsNullCheck(oi, oobj.dest)) {
				var cmp = apply(null, V3Op.newNotEqual(ft), [nobj, newGraph.nullConst(ft)]);
				apply(oi.source, V3Op.newConditionalThrow(V3Exception.TypeCheck), [cmp]);
				return newGraph.nullConst(tt);
			}
			return curBlock.addThrow(oi.source, V3Exception.TypeCheck);
		}
		return genIfNull(oi, mach.machType(tt), nobj, null, genClassIdCheck(oi, low, high, _));
	}
	def genClassIdCheck(oi: SsaApplyOp, low: int, high: int, nobj: SsaInstr) -> SsaInstr {
		var tid = ptrLoad(mach.tagType, nobj, 0);
		if (high == low + 1) {
			var cmp = apply(null, V3Op.newNotEqual(Int.TYPE), [tid, newGraph.intConst(low)]);
			apply(oi.source, V3Op.newConditionalThrow(V3Exception.TypeCheck), [cmp]);
		} else {
			var cmp1 = curBlock.opIntLt(tid, newGraph.intConst(low));
			apply(oi.source, V3Op.newConditionalThrow(V3Exception.TypeCheck), [cmp1]);
			var cmp2 = curBlock.opIntGteq(tid, newGraph.intConst(high));
			apply(oi.source, V3Op.newConditionalThrow(V3Exception.TypeCheck), [cmp2]);
		} 
		return nobj;
	}
	def genTypeQuery(oi: SsaApplyOp) -> SsaInstr {
		var ft = oi.op.typeArgs(0), tt = oi.op.typeArgs(1);
		if (V3.isClass(ft) && V3.isClass(tt)) {
			var oobj = oi.inputs(0), nobj = genRef1(oobj);	
			var t = mach.classIdRange(tt), low = t.0, high = t.1;
			if (low == high) {
				// no live classes can match, and null is not an instance of
				return newGraph.falseConst();
			}
			return genIfNull(oi, Bool.TYPE, nobj, null, genClassIdQuery(oi, low, high, _));
		}
		return newGraph.trueConst();
	}
	def genClassIdQuery(oi: SsaApplyOp, low: int, high: int, nobj: SsaInstr) -> SsaInstr {
		var tid = ptrLoad(mach.tagType, nobj, 0);
		if (high == low + 1) {
			return apply(null, V3Op.newEqual(Int.TYPE), [tid, newGraph.intConst(low)]);
		} else {
			var cmp1 = curBlock.opIntGteq(tid, newGraph.intConst(low));
			var cmp2 = curBlock.opIntLt(tid, newGraph.intConst(high));
			return apply(null, V3Op.opBoolAnd, [cmp1, cmp2]);
		}
	}
	def genTypeSubsume(oi: SsaApplyOp) {
		mapN(oi, genRefs(oi.inputs));  // always a no-op at the machine level
	}
	def genArrayAlloc(oi: SsaApplyOp) -> SsaInstr {
		var olen = oi.inputs(0), arrayType = oi.op.typeArgs(0);
		var hsize = mach.getArrayElemOffset(arrayType), scale = mach.getArrayElemScale(arrayType);
		if (SsaValue.?(olen.dest)) {
			// length is known statically
			var len = olen.dest.unbox<int>();
			if (len < 0) return curBlock.addThrow(oi.source, V3Exception.LengthCheck);
			return genArrayAllocWithSize(oi.source, arrayType, hsize, len, scale);
		}
		var nlen = genRef1(olen);
		if (!oi.checkFact(Facts.O_NO_LENGTH_CHECK) && !context.compiler.DisableLengthChecks) {
			// add a check (length < 0)
			var check = curBlock.opIntLt(nlen, newGraph.zeroConst());
			apply(oi.source, V3Op.newConditionalThrow(V3Exception.LengthCheck), [check]);
		}
		var size: SsaInstr = newGraph.intConst(hsize);
		if (scale > 0) {
			// scale the length by the element scale
			var elemsize = nlen;
			if (scale > 1) elemsize = curBlock.opIntMul(nlen, newGraph.intConst(scale));
			if (scale != mach.data.align(scale)) {
				// alignment is necessary
				size = curBlock.opIntAdd(newGraph.intConst(hsize + mach.data.alignAdd), elemsize);
				size = curBlock.opIntAnd(newGraph.intConst(mach.data.alignMask), size);
			} else {
				size = curBlock.opIntAdd(size, elemsize);
			}
		}
		// allocate the array, store tag, and store length
		var narr = apply(oi.source, MachOp.newAlloc(mach.machType(arrayType)), [size]);
		storeObjectTag(narr, arrayType);
		ptrStore(Int.TYPE, narr, mach.getArrayLengthOffset(arrayType), nlen);
		return narr;
	}
	def genArrayAllocWithSize(source: Source, arrayType: Type, hsize: int, len: int, scale: int) -> SsaInstr {
		var totalSize = mach.data.align(hsize + len * scale);
		// allocate the array with the known size
		var narr = apply(source, MachOp.newAlloc(mach.machType(arrayType)), [newGraph.intConst(totalSize)]);
		storeObjectTag(narr, arrayType); // store tag
		ptrStore(Int.TYPE, narr, mach.getArrayLengthOffset(arrayType), newGraph.intConst(len)); // store length
		return narr;
	}
	def genArrayInit(oi: SsaApplyOp) -> SsaInstr {
		var arrayType = oi.op.typeArgs(0);
		var offset = mach.getArrayElemOffset(arrayType), scale = mach.getArrayElemScale(arrayType);
		var narr = genArrayAllocWithSize(oi.source, arrayType, offset, oi.inputs.length, scale);
		var machType = mach.machType(V3Array.elementType(arrayType));
		var tn = mach.intNorm.normalize(machType), stride = if(tn == null, 1, tn.size);
		var inputs = genRefs(oi.inputs);
		for (i = 0; i < inputs.length; (i = i + stride, offset = offset + scale)) {
			// generate unchecked pointer stores to initialize the array
			// XXX: cache type normalization across calls to this method
			genNormalizedStores(oi, false, true, machType, narr, offset, inputs, i);
		}
		return narr;
	}
	def genArrayGetElem(oi: SsaApplyOp) {
		genBoundsCheck(oi, false);
		var narr = genRef1(oi.inputs(0)), arrayType = oi.op.typeArgs(0);
		var hsize = mach.getArrayElemOffset(arrayType), scale = mach.getArrayElemScale(arrayType);
		var index = genRef1(oi.inputs(1));
		var offset = genArrayElemOffset(hsize, scale, index);
		// XXX: fold null check into pointer access if no bounds check
		genNormalizedLoads(oi, false, false, mach.machType(oi.getType()), ptrAdd(narr, offset), 0);
	}
	def genArraySetElem(oi: SsaApplyOp) {
		genBoundsCheck(oi, false);
		var inputs = genRefs(oi.inputs);
		var narr = inputs(0), arrayType = oi.op.typeArgs(0);
		var hsize = mach.getArrayElemOffset(arrayType), scale = mach.getArrayElemScale(arrayType);
		var offset = genArrayElemOffset(hsize, scale, inputs(1));
		// XXX: fold null check into pointer access if no bounds check
		var machType = mach.machType(V3Array.elementType(arrayType));
		genNormalizedStores(oi, false, false, machType, ptrAdd(narr, offset), 0, inputs, 2);
	}
	def genArrayElemOffset(headerSize: int, scale: int, index: SsaInstr) -> SsaInstr {
		if (SsaValue.?(index)) {
			// fold the offset calculation
			return newGraph.intConst(headerSize + scale * index.unbox<int>());
		} else {
			var offset = index;
			if (scale > 1) offset = curBlock.opIntMul(index, newGraph.intConst(scale));
			if (headerSize != 0) offset = curBlock.opIntAdd(offset, newGraph.intConst(headerSize));
			return offset;
		}
	}
	def genArrayGetLength(oi: SsaApplyOp) -> SsaInstr {
		var oarr = oi.inputs(0), narr = genRef1(oarr);
		return refLoad(Int.TYPE, oi, oarr, narr, mach.getArrayLengthOffset(oi.op.typeArgs(0)));
	}
	def genClassAlloc(oi: SsaApplyOp) {
		var classType = oi.getType();
		var size = mach.getObjectSize(classType, null);
		// allocate the object
		var nobj = apply(oi.source, MachOp.newAlloc(mach.machType(classType)), [newGraph.intConst(size)]);
		storeObjectTag(nobj, classType);
		var newRef = V3Op.extractIrSpec(oi.op);
		if (newRef.member != null) {
			var funcRep = mach.funcRep(newRef);
			// nontrivial constructor
			var func = newGraph.valConst(funcRep.machType, mach.getCodeAddress(newRef));
			var args = Arrays.prepend(func, Arrays.prepend(nobj, genRefs(oi.inputs)));
			call(oi, funcRep, args);
			return;
		}
		return map1(oi, nobj);
	}
	def genClassGetField(oi: SsaApplyOp) {
		var fieldRef = V3Op.extractIrSpec(oi.op);
		var oobj = oi.inputs(0), nobj = genRef1(oobj);
		var machType = mach.machType(fieldRef.getFieldType());
		var offset = mach.classFieldOffset(fieldRef);
		var nullCheck = V3Op.needsNullCheck(oi, oobj.dest);
		var nullIsBottom = V3.isVariant(fieldRef.container);
		genNormalizedLoads(oi, nullCheck, nullIsBottom, machType, nobj, offset);
	}
	def genClassSetField(oi: SsaApplyOp, init: bool) {
		var inputs = genRefs(oi.inputs);
		var fieldRef = V3Op.extractIrSpec(oi.op), nobj = inputs(0);
		var offset = mach.classFieldOffset(fieldRef);
		var machType = mach.machType(fieldRef.getFieldType());
		genNormalizedStores(oi, V3Op.needsNullCheck(oi, nobj), init, machType, nobj, offset, inputs, 1);
	}
	def genClassGetMethod(oi: SsaApplyOp) -> SsaInstr {
		var methodRef = V3Op.extractIrSpec(oi.op);
		var funcRep = mach.funcRep(methodRef);
		return newGraph.valConst(funcRep.machType, mach.getCodeAddress(methodRef));
	}
	def genClassGetVirtual(oi: SsaApplyOp) -> SsaInstr {
		var methodRef = V3Op.extractIrSpec(oi.op);
		var funcRep = mach.funcRep(methodRef);
		var oobj = oi.inputs(0), nobj = genRef1(oobj);
		if (V3.isVariant(methodRef.container)) {
			var defm = mach.getCodeAddress(context.prog.ir.resolveVariantDefaultMethodImpl(methodRef));
			return genIfNull(oi, funcRep.machType, nobj, defm, genMtableLookup(oi, oobj, _, funcRep, methodRef));
		}
		return genMtableLookup(oi, oobj, nobj, funcRep, methodRef);
	}
	def genMtableLookup(oi: SsaApplyOp, oobj: SsaDfEdge, nobj: SsaInstr, funcRep: Mach_FuncRep, methodRef: IrSpec) -> SsaInstr {
		// use method-table based dispatch
		var tid = refLoad(mach.tagType, oi, oobj, nobj, 0);
		var mtbl = newGraph.valConst(mach.data.ptrType, mach.methodTable(methodRef));
		return ptrLoad(funcRep.machType, ptrAdd(mtbl, tid), 0);
	}
	def genComponentGetField(oi: SsaApplyOp) {
		var fieldRef = V3Op.extractIrSpec(oi.op);
		var fieldType = mach.machType(fieldRef.getFieldType());
		var ptr = componentFieldPtr(fieldRef);
		genNormalizedLoads(oi, false, false, fieldType, ptr, 0);
	}
	def genComponentSetField(oi: SsaApplyOp) {
		var fieldRef = V3Op.extractIrSpec(oi.op);
		var inputs = genRefs(oi.inputs);
		var machType = mach.machType(fieldRef.getFieldType());
		var ptr = componentFieldPtr(fieldRef);
		// generate remaining stores for normalized fields.
		genNormalizedStores(oi, false, false, machType, ptr, 0, inputs, 1);
	}
	def genTupleGetElem(oi: SsaApplyOp) {
		var tn = RaTuple.!(normalize(oi.op.typeArgs(0)));
		mapN(oi, tn.getElem(genRefs(oi.inputs), oi.op.attr<int>()));
	}
	def genNullCheck(oi: SsaApplyOp) -> SsaInstr {
		var oobj = oi.inputs(0), nobj = genRef1(oobj);
		if (context.compiler.DisableNullChecks) return nobj;
		if (SsaValue.?(nobj)) {
			var oval = SsaValue.!(nobj).val;
			if (oval == null) curBlock.addThrow(oi.source, V3Exception.NullCheck);
			return nobj; // no check necessary
		}
		if (V3Op.needsNullCheck(oi, oobj.dest)) {
			if (explicitNullChecks) return explicitNullCheck(oi.source, mach.machType(oobj.dest.getType()), nobj);
			else ptrLoadT(oi.source, Void.TYPE, nobj, 0);
		}
		return nobj;
	}
	def genBoundsCheck(oi: SsaApplyOp, nullCheck: bool) -> SsaInstr {
		var oarr = oi.inputs(0), narr = genRef1(oarr);
		if (context.compiler.DisableBoundsChecks || oi.checkFact(Facts.O_NO_BOUNDS_CHECK)) {
			return if(nullCheck, genNullCheck(oi), newGraph.nullConst(Void.TYPE));
		}
		// load length
		// XXX: CSE the array length if possible
		var len = refLoad(Int.TYPE, oi, oarr, narr, mach.getArrayLengthOffset(oi.op.typeArgs(0)));
		var index = genRef1(oi.inputs(1));
		var throwOp = V3Op.newConditionalThrow(V3Exception.BoundsCheck);
		// throw BoundsCheckException if ugteq(index, length)
		apply(oi.source, throwOp, [apply(null, MachOp.opIntUgteq, [index, len])]);
		return index;
	}
	def genCallMethod(oi: SsaApplyOp) {
		var methodRef = V3Op.extractIrSpec(oi.op);
		if (V3.isClass(methodRef.container)) genNullCheck(oi);
		var funcRep = mach.funcRep(methodRef);
		var func = newGraph.valConst(funcRep.machType, mach.getCodeAddress(methodRef));
		var args = Arrays.prepend(func, genRefs(oi.inputs));
		call(oi, funcRep, args);
	}
	def genCallClassVirtual(oi: SsaApplyOp) {
		var func = genClassGetVirtual(oi);
		var methodRef = V3Op.extractIrSpec(oi.op);
		var args = Arrays.prepend(func, genRefs(oi.inputs));
		call(oi, mach.funcRep(methodRef), args);
	}
	def genVariantGetTag(oi: SsaApplyOp, nobj: SsaInstr) -> SsaInstr {
		var val = ptrLoad(mach.tagType, nobj, 0);
		var min = mach.classIdRange(oi.op.typeArgs(0)).0;
		if (min != 0) {
			var sub = V3.asInt(mach.tagType).lookupInfix0(V3Infix.Sub);
			val = apply(oi.source, sub, [val, newGraph.intConst(min)]);
		}
		var shift = IntOp.log(mach.code.addressSize);
		if (shift > 0) {
			var shr = V3.asInt(mach.tagType).lookupInfix0(V3Infix.Shr);
			val = apply(null, shr, [val, newGraph.intConst(shift)]);
		}
		var conv = V3Op.newIntConvert(mach.tagType, oi.op.resultType);
		return apply(null, conv, [val]);
	}
	def genConditionalThrow(oi: SsaApplyOp) -> SsaInstr {
		return apply(oi.source, oi.op, genRefs(oi.inputs));
	}

	def explicitNullCheck(source: Source, t: Type, nobj: SsaInstr) -> SsaInstr {
		if (context.compiler.DisableNullChecks) return nobj;
		var check = apply(null, V3Op.newEqual(t), [nobj, newGraph.nullConst(t)]);
		apply(source, V3Op.newConditionalThrow(V3Exception.NullCheck), [check]);
		return nobj;
	}
	def storeObjectTag(nobj: SsaInstr, t: Type) {
		var tag = newGraph.valConst(mach.tagType, mach.objectTag(t));
		ptrStore(mach.tagType, nobj, 0, tag);
	}
	def genIfNull(oi: SsaApplyOp, resultType: Type, nobj: SsaInstr, nullVal: Val, gen: SsaInstr -> SsaInstr) -> SsaInstr {
		if (nobj.checkFact(Facts.V_ZERO)) {
			return newGraph.valConst(resultType, nullVal);
		} else if (V3Op.needsNullCheck(oi, nobj)) {
			var tblock = newBlock(), fblock = newBlock(), merge = newBlock();
			curBlock.addIfEqual(nobj, newGraph.nullConst(nobj.getType()), tblock.block, fblock.block);
			curBlock = fblock;
			// if (nobj != null) generate the nonnull case
			var nonNull = gen(nobj);
			fblock.addGoto(merge.block);
			tblock.addGoto(merge.block);
			curBlock = merge;
			if (blockEndMap != null) blockEndMap.set(context.block, curBlock.block);
			// if (nobj == null) use the null value
			return curBlock.addPhi(resultType, [newGraph.valConst(resultType, nullVal), nonNull]);
		} else {
			return gen(nobj);
		}
	}

	def call(oi: SsaApplyOp, funcRep: Mach_FuncRep, args: Array<SsaInstr>) {
		var ni = curBlock.addApply(oi.source, MachOp.newCallAddress(funcRep), args);
		ni.facts = ni.facts | oi.facts;
		var tn = normalize(oi.op.resultType);
		mapNorm(oi, ni, tn);
	}
	def apply(source: Source, op: Operator, args: Array<SsaInstr>) -> SsaInstr {
		return curBlock.addApply(source, op, args);
	}
	def ptrAdd(base: SsaInstr, offset: SsaInstr) -> SsaInstr {
		var pt = base.getType(), pd = pt; // TODO: derived type?
		if (SsaValue.?(offset)) {
			// XXX: fold address calculation in optimizer, not here
			if (base.opcode() == MachOpcode.PtrAdd) {
				// match PtrAdd(PtrAdd(left, right), #offset)
				var left = base.inputs(0).dest, right = base.inputs(1).dest;
				if (SsaValue.?(left)) {
					// PtrAdd(PtrAdd(#left, right), #offset)
					var addr = Addr.!(SsaValue.!(left).val);
					left = newGraph.valConst(pd, addr.add(offset.unbox<int>()));
					return ptrAdd(left, right);
				}
				if (SsaValue.?(right)) {
					// PtrAdd(PtrAdd(left, #right), #offset)
					offset = newGraph.valConst(pd, Int.box(right.unbox<int>() + offset.unbox<int>()));
					base = left;
				}
			} else if (SsaValue.?(base)) {
				// fold PtrAdd(#addr, #offset)
				var addr = Addr.!(SsaValue.!(base).val);
				if (addr != null) {
					var addr = newGraph.valConst(pd, addr.add(offset.unbox<int>()));
					addr.setFact(Facts.V_NON_ZERO);
					return addr;
				}
			}
		}
		return apply(null, MachOp.newPtrAdd(pt, pd), [base, offset]); 
	}
	def ptrLoad(vt: Type, p: SsaInstr, offset: int) -> SsaInstr {
		if (offset != 0) p = ptrAdd(p, newGraph.intConst(offset));
		var i = apply(null, MachOp.newPtrLoad(p.getType(), vt), [p]);
		i.setFact(Facts.O_NO_NULL_CHECK); // this load won't trap
		return i;
	}
	def ptrStore(vt: Type, p: SsaInstr, offset: int, v: SsaInstr) -> SsaInstr {
		if (offset != 0) p = ptrAdd(p, newGraph.intConst(offset));
		var i = apply(null, MachOp.newPtrStore(p.getType(), vt), [p, v]);
		i.setFact(Facts.O_NO_NULL_CHECK); // this store won't trap
		return i;
	}
	def ptrLoadT(source: Source, t: Type, p: SsaInstr, offset: int) -> SsaInstr {
		if (offset != 0) p = ptrAdd(p, newGraph.intConst(offset));
		return apply(source, MachOp.newPtrLoad(p.getType(), t), [p]); // this load may trap
	}
	def ptrStoreT(source: Source, t: Type, p: SsaInstr, offset: int, v: SsaInstr) -> SsaInstr {
		if (offset != 0) p = ptrAdd(p, newGraph.intConst(offset));
		return apply(source, MachOp.newPtrStore(p.getType(), t), [p, v]); // this store may trap
	}
	def refLoad(vt: Type, oi: SsaApplyOp, oobj: SsaDfEdge, nobj: SsaInstr, offset: int) -> SsaInstr {
		if (V3Op.needsNullCheck(oi, oobj.dest)) {
			if (explicitNullChecks) explicitNullCheck(oi.source, mach.machType(oobj.dest.getType()), nobj);
			else return ptrLoadT(oi.source, vt, nobj, offset);
		}
		return ptrLoad(vt, nobj, offset);
	}
	def componentFieldPtr(f: IrSpec) -> SsaInstr {
		return newGraph.valConst(mach.data.ptrType, mach.componentFieldPtr(f));
	}
	def newBlock() -> V3SsaBuilder {
		return V3SsaBuilder.new(context, newGraph, SsaBlock.new());
	}
	// Support for normalizing loads and stores.
	def genNormalizedLoads(oi: SsaApplyOp, nullCheck: bool, nullIsBottom: bool, machType: Type, base: SsaInstr, offset: int) {
		var tn = mach.intNorm.normalize(machType);
		// check for simple case first.
		if (tn == null) {
			var result: SsaInstr;
			if (nullIsBottom) { // generate an explicit null check
				result = genIfNull(oi, machType, base, null, ptrLoad(machType, _, offset));
			} else {
				if (nullCheck) result = ptrLoadT(oi.source, machType, base, offset);
				else result = ptrLoad(machType, base, offset);
			}
			return map1(oi, result);
		}
		var tblock: V3SsaBuilder, fblock: V3SsaBuilder, merge: V3SsaBuilder;
		if (nullCheck && nullIsBottom) {
			tblock = newBlock();
			fblock = newBlock();
			merge = newBlock();
			curBlock.addIfEqual(base, newGraph.nullConst(base.getType()), tblock.block, fblock.block);
			curBlock = fblock;
		}
		// generate multiple loads for normalized fields and array elements.
		var loads = Array<SsaInstr>.new(tn.size);
		var check = if(nullCheck, 0, -1);
		for (i < loads.length) {
			var load: SsaInstr, et = tn.sub(i);
			if (i == check) load = ptrLoadT(oi.source, et, base, offset);
			else load = ptrLoad(et, base, offset);
			loads(i) = load;
			offset = offset + mach.sizeOf(et);
		}
		if (nullCheck && nullIsBottom) {
			// TODO: factor this could out with genIfNull into an if-builder?
			fblock.addGoto(merge.block);
			tblock.addGoto(merge.block);
			curBlock = merge;
			if (blockEndMap != null) blockEndMap.set(context.block, curBlock.block);
			// if (nobj == null) emit null values
			for (i < loads.length) {
				loads(i) = curBlock.addPhi(tn.sub(i), [newGraph.valConst(tn.sub(i), null), loads(i)]);
			}
		}

		return mapN(oi, loads);
	}
	def genNormalizedStores(oi: SsaApplyOp, nullCheck: bool, init: bool, machType: Type, base: SsaInstr, offset: int, vals: Array<SsaInstr>, start: int) {
		var tn = mach.intNorm.normalize(machType);
		// check for simple case first.
		if (tn == null) {
			var val = vals(start);
			if (nullCheck) ptrStoreT(oi.source, machType, base, offset, val);
			else if (isNonTrivialStore(init, val)) ptrStore(machType, base, offset, val);
			return;
		}
		// generate multiple stores for normalized fields and array elements.
		var check = if(nullCheck, 0, -1);
		for (i < tn.size) {
			var et = tn.sub(i), val = vals(start + i);
			if (i == check) ptrStoreT(oi.source, et, base, offset, val);
			else if (isNonTrivialStore(init, val)) ptrStore(et, base, offset, val);
			offset = offset + mach.sizeOf(et);
		}
	}
	def isNonTrivialStore(init: bool, v: SsaInstr) -> bool {
		if (init) {
			if (SsaValue.?(v)) return !Values.equal(SsaValue.!(v).val, null);
		}
		return true;
	}
}
