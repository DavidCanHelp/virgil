// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Transforms "v3" code in SSA form to "mach" code (i.e. machine-level
// operations such as memory load/store).
class SsaMachGen extends SsaRebuilder {
	def mach: MachProgram;
	var explicitNullChecks: bool;

	new(mach, context: SsaContext) super(context) { }

	def build() {
		context.method.ssa = genGraph();
		context.printSsa("Machine");
	}
	def genSimpleVal(v: Val) -> Val {
		return mach.machVal(v);
	}
	def genValN(e: SsaDfEdge, index: int, oi: SsaValue, tn: TypeNorm, seq: Sequence<SsaInstr>) {
		tn = normalize(typeFromEdge(e, index));
		var vals = Array<Val>.new(tn.size);
		genValIntoArray(oi.val, tn, vals, 0);
		for (i < tn.size) seq.add(newGraph.valConst(tn.sub(i), vals(i)));
	}
	def genValIntoArray(v: Val, tn: TypeNorm, dest: Array<Val>, index: int) {
		if (tn == null || tn.size == 1) {
			dest(index) = v;
			return;
		}
		if (RaIntType.?(tn)) {
			if (Box<int>.?(v)) mach.intNorm.normalizeIntIntoArray(V3.asInt(tn.oldType), Int.unbox(v), dest, index);
			if (Box<(int, int)>.?(v)) mach.intNorm.normalizeLongIntoArray(V3.asInt(tn.oldType), Int64.unbox(v), dest, index);
		}
	}
	def normalize(t: Type) -> TypeNorm {
		if (V3.isInt(t)) return mach.intNorm.normalize(t);
		var mt = mach.machType(t);
		return if(mt != t, TypeNorm.new(t, mt, null));
	}
	def genApplyOp(oi: SsaApplyOp) {
		var ni: SsaInstr;
		match(oi.op.opcode) {
			// Simple operators require no conversion other than normalization
			V3Opcode.Equal,
			V3Opcode.NotEqual,
			V3Opcode.IntLt,
			V3Opcode.IntGt,
			V3Opcode.IntLteq,
			V3Opcode.IntGteq,
			V3Opcode.BoolAnd,
			V3Opcode.BoolOr,
			V3Opcode.BoolNot: 		ni = genSimple(oi);
			// Output of integer operations must be normalized
			V3Opcode.IntAdd,
			V3Opcode.IntSub,
			V3Opcode.IntMul,
			V3Opcode.IntDiv,
			V3Opcode.IntMod,
			V3Opcode.IntShl,
			V3Opcode.IntShr:		return genIntOp(oi, true);
			// Output of integer operations must be normalized
			V3Opcode.IntAnd,
			V3Opcode.IntOr,
			V3Opcode.IntXor:		return genIntOp(oi, false);
			// Conversions have to be normalized
			V3Opcode.IntConvert:		return genIntConvert(oi);

			V3Opcode.TypeCast: 		ni = genTypeCast(oi);
			V3Opcode.TypeQuery: 		ni = genTypeQuery(oi);
			V3Opcode.TypeSubsume: 		ni = genTypeSubsume(oi);
			V3Opcode.ArrayAlloc: 		ni = genArrayAlloc(oi);
			V3Opcode.ArrayInit: 		ni = genArrayInit(oi);
			V3Opcode.ArrayGetElem: 		ni = genArrayGetElem(oi);
			V3Opcode.ArraySetElem: 		ni = genArraySetElem(oi);
			V3Opcode.ArrayGetLength: 	ni = genArrayGetLength(oi);
			V3Opcode.ClassAlloc: 		ni = genClassAlloc(oi);
			V3Opcode.ClassGetField: 	ni = genClassGetField(oi);
			V3Opcode.ClassInitField,
			V3Opcode.ClassSetField: 	ni = genClassSetField(oi);
			V3Opcode.ClassGetMethod: 	ni = genClassGetMethod(oi);
			V3Opcode.ClassGetVirtFunc: 	ni = genClassGetVirtual(oi);
			V3Opcode.ComponentGetField: 	ni = genComponentGetField(oi);
			V3Opcode.ComponentSetField: 	ni = genComponentSetField(oi);
			V3Opcode.TupleCreate: 		ni = genTupleCreate(oi);
			V3Opcode.TupleGetElem: 		ni = genTupleGetElem(oi);
			V3Opcode.NullCheck: {
				ni = genNullCheck(oi);
				instrMap.set(oi, ni);
				return; // don't update SSA facts!!!
			}
			V3Opcode.BoundsCheck: 		ni = genBoundsCheck(oi, true);
			V3Opcode.CallMethod: 		ni = genCallMethod(oi);
			V3Opcode.CallClassVirtual: 	ni = genCallClassVirtual(oi);
			V3Opcode.CallFunction: {
				var ftype = oi.op.typeArgs(0);
				ni = call(oi.source, true, mach.machType(ftype), null, genRefs(oi.inputs));
			}
			V3Opcode.VariantGetTag:	{
				var oobj = oi.inputs(0), nobj = genRef1(oobj);
				ni = genIfNull(oi, oi.op.resultType, nobj, null, genVariantGetTag(oi, _));
			}
			V3Opcode.ConditionalThrow:	ni = genConditionalThrow(oi);
			MachOpcode.MachSpecial: {
				// perform specialized lowering by calling the supplied function
				var loweringFunc = oi.op.attr<(SsaApplyOp, SsaMachGen) -> SsaInstr>();
				ni = loweringFunc(oi, this);
			}
			V3Opcode.ClassGetVirtual,
			V3Opcode.ComponentInit,
			V3Opcode.ComponentGetMethod,
			V3Opcode.CallClosure:		return unexpected(oi);
		} else {
			// assume machine-level and other operators aren't lowered
			ni = curBlock.addApply(oi.source, oi.op, genRefs(oi.inputs));
		}
		map1(oi, context.nonnull(ni));
	}
	def unexpected(oi: SsaApplyOp) {
		context.fail(Strings.format1("unexpected operator %1", V3Op.renderOp(oi.op)));
	}
	def genIntOp(oi: SsaApplyOp, truncate: bool) {
		var tt = V3.asInt(oi.op.resultType);
		var ni = apply(oi.source, oi.op, genRefs(oi.inputs));
		if (mach.intNorm.isNormalType(tt)) {
			// a single output is produced.
			if (truncate && tt.width < mach.intNorm.width) {
				ni = apply(null, V3Op.newIntConvert(Int.TYPE, oi.op.resultType), [ni]);
			}
			return map1(oi, ni);
		}
		// multiple outputs are produced.
		var tn = mach.intNorm.makeType(tt);
		var vals = Array<SsaInstr>.new(tn.sub.length);
		for (i < tn.size) vals(i) = apply(null, V3Op.newTupleGetElem(tn.newType, i), [ni]);
		if (truncate) {
			// truncate the big end of the result if necessary.
			var big = tn.bigEndIndex(), rem = tn.sub(big);
			if (V3.asInt(rem).width < mach.intNorm.width) {
				vals(big) = apply(null, V3Op.newIntConvert(rem, mach.intNorm.word), [vals(big)]);
			}
		}
		mapN(oi, vals);
	}
	def genIntConvert(oi: SsaApplyOp) {
		map1(oi, genSimple(oi));
	}
	def genSimple(oi: SsaApplyOp) -> SsaInstr {
		return apply(oi.source, oi.op, genRefs(oi.inputs));
	}
	def genTypeCast(oi: SsaApplyOp) -> SsaInstr {
		var castOp = oi.op.attr<TypeCast>();
		var ft = oi.op.typeArgs(0), tt = oi.op.typeArgs(1);
		match (castOp.approx) {
			CastOp.SUBSUME,
			CastOp.TRUE: return genRef1(oi.inputs(0));
			CastOp.FALSE: return curBlock.addThrow(oi.source, V3Exception.TypeCheck);
			CastOp.VALUE: return newGraph.valConst(tt, castOp.result);
			CastOp.CLASS_CAST: return genClassCast(ft, tt, oi);
		} else {
			// other kinds of casts should have been removed
			context.fail(Strings.format1("unexpected cast %1", castOp.name()));
			return newGraph.nop();
		}
	}
	def genClassCast(ft: Type, tt: Type, oi: SsaApplyOp) -> SsaInstr {
		var oobj = oi.inputs(0), nobj = genRef1(oobj);
		if (context.compiler.DisableTypeChecks) return nobj;
		var t = mach.classIdRange(tt), low = t.0, high = t.1;
		if (low == high) {
			// no live classes can match, only null
			if (V3Op.needsNullCheck(oi, oobj.dest)) {
				var cmp = apply(null, V3Op.newNotEqual(ft), [nobj, newGraph.nullConst(ft)]);
				apply(oi.source, V3Op.newConditionalThrow(V3Exception.TypeCheck), [cmp]);
				return newGraph.nullConst(tt);
			}
			return curBlock.addThrow(oi.source, V3Exception.TypeCheck);
		}
		return genIfNull(oi, mach.machType(tt), nobj, null, genClassIdCheck(oi, low, high, _));
	}
	def genClassIdCheck(oi: SsaApplyOp, low: int, high: int, nobj: SsaInstr) -> SsaInstr {
		var tid = ptrLoad(mach.tagType, nobj, 0);
		if (high == low + 1) {
			var cmp = apply(null, V3Op.newNotEqual(Int.TYPE), [tid, newGraph.intConst(low)]);
			apply(oi.source, V3Op.newConditionalThrow(V3Exception.TypeCheck), [cmp]);
		} else {
			var cmp1 = curBlock.opIntLt(tid, newGraph.intConst(low));
			apply(oi.source, V3Op.newConditionalThrow(V3Exception.TypeCheck), [cmp1]);
			var cmp2 = curBlock.opIntGteq(tid, newGraph.intConst(high));
			apply(oi.source, V3Op.newConditionalThrow(V3Exception.TypeCheck), [cmp2]);
		} 
		return nobj;
	}
	def genTypeQuery(oi: SsaApplyOp) -> SsaInstr {
		// TODO: norm
		var ft = oi.op.typeArgs(0), tt = oi.op.typeArgs(1);
		if (V3.isClass(ft) && V3.isClass(tt)) {
			var oobj = oi.inputs(0), nobj = genRef1(oobj);	
			var t = mach.classIdRange(tt), low = t.0, high = t.1;
			if (low == high) {
				// no live classes can match, and null is not an instance of
				return newGraph.falseConst();
			}
			return genIfNull(oi, Bool.TYPE, nobj, null, genClassIdQuery(oi, low, high, _));
		}
		return newGraph.trueConst();
	}
	def genClassIdQuery(oi: SsaApplyOp, low: int, high: int, nobj: SsaInstr) -> SsaInstr {
		var tid = ptrLoad(mach.tagType, nobj, 0);
		if (high == low + 1) {
			return apply(null, V3Op.newEqual(Int.TYPE), [tid, newGraph.intConst(low)]);
		} else {
			var cmp1 = curBlock.opIntGteq(tid, newGraph.intConst(low));
			var cmp2 = curBlock.opIntLt(tid, newGraph.intConst(high));
			return apply(null, V3Op.opBoolAnd, [cmp1, cmp2]);
		}
	}
	def genTypeSubsume(oi: SsaApplyOp) -> SsaInstr {
		// TODO: norm
		return genRef1(oi.inputs(0)); // always a no-op at the machine level
	}
	def genArrayAlloc(oi: SsaApplyOp) -> SsaInstr {
		var olen = oi.inputs(0), arrayType = oi.op.typeArgs(0);
		var hsize = mach.getArrayElemOffset(arrayType), scale = mach.getArrayElemScale(arrayType);
		if (SsaValue.?(olen.dest)) {
			// length is known statically
			var len = olen.dest.unbox<int>();
			if (len < 0) return curBlock.addThrow(oi.source, V3Exception.LengthCheck);
			return genArrayAllocWithSize(oi.source, arrayType, hsize, len, scale);
		}
		var nlen = genRef1(olen);
		if (!oi.checkFact(Facts.O_NO_LENGTH_CHECK) && !context.compiler.DisableLengthChecks) {
			// add a check (length < 0)
			var check = curBlock.opIntLt(nlen, newGraph.zeroConst());
			apply(oi.source, V3Op.newConditionalThrow(V3Exception.LengthCheck), [check]);
		}
		var size: SsaInstr = newGraph.intConst(hsize);
		if (scale > 0) {
			// scale the length by the element scale
			var elemsize = nlen;
			if (scale > 1) elemsize = curBlock.opIntMul(nlen, newGraph.intConst(scale));
			if (scale != mach.data.align(scale)) {
				// alignment is necessary
				size = curBlock.opIntAdd(newGraph.intConst(hsize + mach.data.alignAdd), elemsize);
				size = curBlock.opIntAnd(newGraph.intConst(mach.data.alignMask), size);
			} else {
				size = curBlock.opIntAdd(size, elemsize);
			}
		}
		// allocate the array, store tag, and store length
		var narr = apply(oi.source, MachOp.newAlloc(mach.machType(arrayType)), [size]);
		storeObjectTag(narr, arrayType);
		ptrStore(Int.TYPE, narr, mach.getArrayLengthOffset(arrayType), nlen);
		return narr;
	}
	def genArrayAllocWithSize(source: Source, arrayType: Type, hsize: int, len: int, scale: int) -> SsaInstr {
		var totalSize = mach.data.align(hsize + len * scale);
		// allocate the array with the known size
		var narr = apply(source, MachOp.newAlloc(mach.machType(arrayType)), [newGraph.intConst(totalSize)]);
		storeObjectTag(narr, arrayType); // store tag
		ptrStore(Int.TYPE, narr, mach.getArrayLengthOffset(arrayType), newGraph.intConst(len)); // store length
		return narr;
	}
	def genArrayInit(oi: SsaApplyOp) -> SsaInstr {
		// TODO: norm
		var arrayType = oi.op.typeArgs(0);
		var offset = mach.getArrayElemOffset(arrayType), scale = mach.getArrayElemScale(arrayType);
		var narr = genArrayAllocWithSize(oi.source, arrayType, offset, oi.inputs.length, scale);
		var elemType = V3Array.elementType(arrayType);
		var refs = genRefs(oi.inputs);
		for (i < oi.inputs.length) {
			// generate unchecked pointer stores to initialize the array
			var val = refs(i);  // TODO: norm
			if (!SsaValue.?(val) || SsaValue.!(val).val != null) {
				// store only non-default values
				ptrStore(elemType, narr, offset, val);
			}
			offset = offset + scale;
		}
		return narr;
	}
	def genArrayGetElem(oi: SsaApplyOp) -> SsaInstr {
		// TODO: norm
		genBoundsCheck(oi, false);
		var narr = genRef1(oi.inputs(0)), arrayType = oi.op.typeArgs(0);
		var hsize = mach.getArrayElemOffset(arrayType), scale = mach.getArrayElemScale(arrayType);
		var index = genRef1(oi.inputs(1));
		var offset = genArrayElemOffset(hsize, scale, index);
		// XXX: fold null check into pointer access if no bounds check
		return ptrLoad(mach.machType(oi.getType()), ptrAdd(narr, offset), 0);
	}
	def genArraySetElem(oi: SsaApplyOp) -> SsaInstr {
		// TODO: norm
		genBoundsCheck(oi, false);
		var narr = genRef1(oi.inputs(0)), arrayType = oi.op.typeArgs(0);
		var hsize = mach.getArrayElemOffset(arrayType), scale = mach.getArrayElemScale(arrayType);
		var index = genRef1(oi.inputs(1));
		var offset = genArrayElemOffset(hsize, scale, index);
		var val = genRef1(oi.inputs(2));
		// XXX: fold null check into pointer access if no bounds check
		return ptrStore(mach.machType(oi.op.paramTypes(2)), ptrAdd(narr, offset), 0, val);
	}
	def genArrayElemOffset(headerSize: int, scale: int, index: SsaInstr) -> SsaInstr {
		if (SsaValue.?(index)) {
			// fold the offset calculation
			return newGraph.intConst(headerSize + scale * index.unbox<int>());
		} else {
			var offset = index;
			if (scale > 1) offset = curBlock.opIntMul(index, newGraph.intConst(scale));
			if (headerSize != 0) offset = curBlock.opIntAdd(offset, newGraph.intConst(headerSize));
			return offset;
		}
	}
	def genArrayGetLength(oi: SsaApplyOp) -> SsaInstr {
		var oarr = oi.inputs(0), narr = genRef1(oarr);
		return refLoad(Int.TYPE, oi, oarr, narr, mach.getArrayLengthOffset(oi.op.typeArgs(0)));
	}
	def genClassAlloc(oi: SsaApplyOp) -> SsaInstr {
		var classType = oi.getType();
		var size = mach.getObjectSize(classType, null);
		// allocate the object
		var nobj = apply(oi.source, MachOp.newAlloc(mach.machType(classType)), [newGraph.intConst(size)]);
		storeObjectTag(nobj, classType);
		var newRef = V3Op.extractIrSpec(oi.op);
		if (newRef.member != null) {
			// TODO: norm
			// nontrivial constructor
			var constr = mach.getCodeAddress(newRef);
			var newType = mach.funcType(newRef);
			call(oi.source, true, newType, newGraph.valConst(newType, constr), Arrays.prepend(nobj, genRefs(oi.inputs)));
		}
		return nobj;
	}
	def genClassGetField(oi: SsaApplyOp) -> SsaInstr {
		// TODO: norm
		var fieldRef = V3Op.extractIrSpec(oi.op);
		var oobj = oi.inputs(0), nobj = genRef1(oobj);
		var ftype = mach.machType(fieldRef.getFieldType());
		if (V3.isVariant(fieldRef.container)) {
			return genIfNull(oi, ftype, nobj, null, ptrLoad(ftype, _, mach.classFieldOffset(fieldRef)));
		}
		return refLoad(ftype, oi, oobj, nobj, mach.classFieldOffset(fieldRef));
	}
	def genClassSetField(oi: SsaApplyOp) -> SsaInstr {
		// TODO: norm
		var fieldRef = V3Op.extractIrSpec(oi.op), nobj = genRef1(oi.inputs(0));
		var val = genRef1(oi.inputs(1)), ft = mach.machType(fieldRef.getFieldType());
		var offset = mach.classFieldOffset(fieldRef);
		if (V3Op.needsNullCheck(oi, nobj)) return ptrStoreT(oi.source, ft, nobj, offset, val);
		else return ptrStore(ft, nobj, offset, val);
	}
	def genClassGetMethod(oi: SsaApplyOp) -> SsaInstr {
		var methodRef = V3Op.extractIrSpec(oi.op), machType = mach.funcType(methodRef);
		return newGraph.valConst(machType, mach.getCodeAddress(methodRef));
	}
	def genClassGetVirtual(oi: SsaApplyOp) -> SsaInstr {
		var methodRef = V3Op.extractIrSpec(oi.op);
		var oobj = oi.inputs(0), nobj = genRef1(oobj);
		if (V3.isVariant(methodRef.container)) {
			var defm = mach.getCodeAddress(context.prog.ir.resolveVariantDefaultMethodImpl(methodRef));
			return genIfNull(oi, mach.funcType(methodRef), nobj, defm, genMtableLookup(oi, oobj, _, methodRef));
		}
		return genMtableLookup(oi, oobj, nobj, methodRef);
	}
	def genMtableLookup(oi: SsaApplyOp, oobj: SsaDfEdge, nobj: SsaInstr, methodRef: IrSpec) -> SsaInstr {
		// use method-table based dispatch
		var tid = refLoad(mach.tagType, oi, oobj, nobj, 0);
		var mtbl = newGraph.valConst(mach.data.ptrType, mach.methodTable(methodRef));
		return ptrLoad(mach.funcType(methodRef), ptrAdd(mtbl, tid), 0);
	}
	def genComponentGetField(oi: SsaApplyOp) -> SsaInstr {
		// TODO: norm
		var fieldRef = V3Op.extractIrSpec(oi.op);
		return ptrLoad(mach.machType(fieldRef.getFieldType()), componentFieldPtr(fieldRef), 0);
	}
	def genComponentSetField(oi: SsaApplyOp) -> SsaInstr {
		// TODO: norm
		var fieldRef = V3Op.extractIrSpec(oi.op);
		var val = genRef1(oi.inputs(1));
		return ptrStore(mach.machType(fieldRef.getFieldType()), componentFieldPtr(fieldRef), 0, val);
	}
	def genTupleCreate(oi: SsaApplyOp) -> SsaInstr {
		// TODO: norm
		var ni = genRefs(oi.inputs);
		return apply(null, V3Op.newTupleCreate(mach.machType(oi.getType())), ni);
	}
	def genTupleGetElem(oi: SsaApplyOp) -> SsaInstr {
		// TODO: norm
		var e = genRef1(oi.inputs(0)), index = oi.op.attr<int>();
		return apply(null, V3Op.newTupleGetElem(e.getType(), index), [e]);
	}
	def genNullCheck(oi: SsaApplyOp) -> SsaInstr {
		var oobj = oi.inputs(0), nobj = genRef1(oobj);
		if (context.compiler.DisableNullChecks) return nobj;
		if (SsaValue.?(nobj)) {
			var oval = SsaValue.!(nobj).val;
			if (oval == null) curBlock.addThrow(oi.source, V3Exception.NullCheck);
			return nobj; // no check necessary
		}
		if (V3Op.needsNullCheck(oi, oobj.dest)) {
			if (explicitNullChecks) return explicitNullCheck(oi.source, mach.machType(oobj.dest.getType()), nobj);
			else ptrLoadT(oi.source, Void.TYPE, nobj, 0);
		}
		return nobj;
	}
	def genBoundsCheck(oi: SsaApplyOp, nullCheck: bool) -> SsaInstr {
		var oarr = oi.inputs(0), narr = genRef1(oarr);
		if (context.compiler.DisableBoundsChecks || oi.checkFact(Facts.O_NO_BOUNDS_CHECK)) {
			return if(nullCheck, genNullCheck(oi), newGraph.nullConst(Void.TYPE));
		}
		// load length
		// XXX: CSE the array length if possible
		var len = refLoad(Int.TYPE, oi, oarr, narr, mach.getArrayLengthOffset(oi.op.typeArgs(0)));
		var index = genRef1(oi.inputs(1));
		var throwOp = V3Op.newConditionalThrow(V3Exception.BoundsCheck);
		// throw BoundsCheckException if ugteq(index, length)
		apply(oi.source, throwOp, [apply(null, MachOp.opIntUgteq, [index, len])]);
		return index;
	}
	def genCallMethod(oi: SsaApplyOp) -> SsaInstr {
		var methodRef = V3Op.extractIrSpec(oi.op);
		if (V3.isClass(methodRef.container)) genNullCheck(oi);
		var addr = mach.getCodeAddress(methodRef);
		var ftype = mach.funcType(methodRef);
		var receiver = !V3.isComponent(methodRef.container);
		return call(oi.source, receiver, ftype, newGraph.valConst(ftype, addr), genRefs(oi.inputs));
	}
	def genCallClassVirtual(oi: SsaApplyOp) -> SsaInstr {
		var methodRef = V3Op.extractIrSpec(oi.op);
		var addr = genClassGetVirtual(oi);
		var ftype = mach.funcType(methodRef);
		return call(oi.source, true, ftype, addr, genRefs(oi.inputs));
	}
	def genVariantGetTag(oi: SsaApplyOp, nobj: SsaInstr) -> SsaInstr {
		var val = ptrLoad(mach.tagType, nobj, 0);
		var min = mach.classIdRange(oi.op.typeArgs(0)).0;
		if (min != 0) {
			var sub = V3.asInt(mach.tagType).lookupInfix0(V3Infix.Sub);
			val = apply(oi.source, sub, [val, newGraph.intConst(min)]);
		}
		var shift = IntOp.log(mach.code.addressSize);
		if (shift > 0) {
			var shr = V3.asInt(mach.tagType).lookupInfix0(V3Infix.Shr);
			val = apply(null, shr, [val, newGraph.intConst(shift)]);
		}
		var conv = V3Op.newIntConvert(mach.tagType, oi.op.resultType);
		return apply(null, conv, [val]);
	}
	def genConditionalThrow(oi: SsaApplyOp) -> SsaInstr {
		return apply(oi.source, oi.op, genRefs(oi.inputs));
	}

	def explicitNullCheck(source: Source, t: Type, nobj: SsaInstr) -> SsaInstr {
		if (context.compiler.DisableNullChecks) return nobj;
		var check = apply(null, V3Op.newEqual(t), [nobj, newGraph.nullConst(t)]);
		apply(source, V3Op.newConditionalThrow(V3Exception.NullCheck), [check]);
		return nobj;
	}
	def storeObjectTag(nobj: SsaInstr, t: Type) {
		var tag = newGraph.valConst(mach.tagType, mach.objectTag(t));
		ptrStore(mach.tagType, nobj, 0, tag);
	}
	def genIfNull(oi: SsaApplyOp, resultType: Type, nobj: SsaInstr, nullVal: Val, gen: SsaInstr -> SsaInstr) -> SsaInstr {
		if (nobj.checkFact(Facts.V_ZERO)) {
			return newGraph.valConst(resultType, nullVal);
		} else if (V3Op.needsNullCheck(oi, nobj)) {
			var tblock = newBlock(), fblock = newBlock(), merge = newBlock();
			curBlock.addIfNull(nobj, tblock.block, fblock.block);
			curBlock = fblock;
			// if (nobj != null) generate the nonnull case
			var nonNull = gen(nobj);
			fblock.addGoto(merge.block);
			tblock.addGoto(merge.block);
			curBlock = merge;
			if (blockEndMap != null) blockEndMap.set(context.block, curBlock.block);
			// if (nobj == null) use the null value
			return curBlock.addPhi(resultType, [newGraph.valConst(resultType, nullVal), nonNull]);
		} else {
			return gen(nobj);
		}
	}

	def call(source: Source, receiver: bool, ftype: Type, func: SsaInstr, args: Array<SsaInstr>) -> SsaInstr {
		if (func != null) args = Arrays.prepend(func, args);
		return curBlock.addApply(source, MachOp.newCallAddress(receiver, ftype, ftype.nested.head), args);
	}
	def apply(source: Source, op: Operator, args: Array<SsaInstr>) -> SsaInstr {
		return curBlock.addApply(source, op, args);
	}
	def ptrAdd(p: SsaInstr, offset: SsaInstr) -> SsaInstr {
		var pt = p.getType(), pd = pt; // TODO: derived type
		if (SsaValue.?(p) && SsaValue.?(offset)) {
			// XXX: fold address calculation in optimizer, not here
			var addr = Addr.!(SsaValue.!(p).val);
			if (addr != null) {
				var addr = newGraph.valConst(pd, addr.add(offset.unbox<int>()));
				addr.setFact(Facts.V_NON_ZERO);
				return addr;
			}
		}
		return apply(null, MachOp.newPtrAdd(pt, pd), [p, offset]); 
	}
	def ptrLoad(vt: Type, p: SsaInstr, offset: int) -> SsaInstr {
		if (offset != 0) p = ptrAdd(p, newGraph.intConst(offset));
		var i = apply(null, MachOp.newPtrLoad(p.getType(), vt), [p]);
		i.setFact(Facts.O_NO_NULL_CHECK); // this load won't trap
		return i;
	}
	def ptrStore(vt: Type, p: SsaInstr, offset: int, v: SsaInstr) -> SsaInstr {
		if (offset != 0) p = ptrAdd(p, newGraph.intConst(offset));
		var i = apply(null, MachOp.newPtrStore(p.getType(), vt), [p, v]);
		i.setFact(Facts.O_NO_NULL_CHECK); // this store won't trap
		return i;
	}
	def ptrLoadT(source: Source, t: Type, p: SsaInstr, offset: int) -> SsaInstr {
		if (offset != 0) p = ptrAdd(p, newGraph.intConst(offset));
		return apply(source, MachOp.newPtrLoad(p.getType(), t), [p]); // this load may trap
	}
	def ptrStoreT(source: Source, t: Type, p: SsaInstr, offset: int, v: SsaInstr) -> SsaInstr {
		if (offset != 0) p = ptrAdd(p, newGraph.intConst(offset));
		return apply(source, MachOp.newPtrStore(p.getType(), t), [p, v]); // this store may trap
	}
	def refLoad(vt: Type, oi: SsaApplyOp, oobj: SsaDfEdge, nobj: SsaInstr, offset: int) -> SsaInstr {
		if (V3Op.needsNullCheck(oi, oobj.dest)) {
			if (explicitNullChecks) explicitNullCheck(oi.source, mach.machType(oobj.dest.getType()), nobj);
			else return ptrLoadT(oi.source, vt, nobj, offset);
		}
		return ptrLoad(vt, nobj, offset);
	}
	def componentFieldPtr(f: IrSpec) -> SsaInstr {
		return newGraph.valConst(mach.data.ptrType, mach.componentFieldPtr(f));
	}
	def newBlock() -> V3SsaBuilder {
		return V3SsaBuilder.new(context, newGraph, SsaBlock.new());
	}
}
