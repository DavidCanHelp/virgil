// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Manages the mapping between V3-level program entities (classes, objects, functions) 
// and machine-level entities (addresses and tables) and provides logic to encode
// values into byte arrays for producing binaries.
class MachProgram(prog: Program, code: AddressSpace, data: AddressSpace) {
	def typeReps = TypeUtil.newTypeMap<MachRep>();
	def tagType = Int.TYPE;
	def refSize = data.addressSize; // TODO: reference size different from pointer size

	var runtime: MachRuntime;
	var layout: MachProgramLayout;
	var stackAlign: int;
	var componentFields: MachLayout; // location of component fields
	var numMethods: int;

	new() {
		layout = MachProgramLayout.new(this);
		stackAlign = data.alignment;
		prog.addLanguage(MachLanguage.new());
		componentFields = MachLayout.new(this);
	}
	def build(compiler: Compiler) {
		prog.ir.classes.apply(processIrClass);
		var context = SsaContext.new(compiler, prog);
		var methods = prog.ir.methods;
		for (i = 0; i < methods.length; i++) {
			SsaMachGen.new(this, context.enterMethod(methods.get(i))).build();
		}
		numMethods = methods.length;
	}
	def computeFieldOffsets(p: Program, b: Sequence<IrField>, start: int) {
		var layout = MachLayout.new(this);
		if (start == 0) { // add type tag as first field
			layout.addType(tagType);
		} else { // skip to end of previous fields
			var last = b.get(start - 1);
			layout.size = last.machOffset + sizeOf(last.fieldType);
		}
		for (i = start; i < b.length; i++) {
			var f = b.get(i);
			f.machOffset = layout.addType(f.fieldType);
		}
	}
	def processIrClass(ic: IrClass) {
		var t = ic.ctype;
		if (V3.isComponent(t)) return processComponent(ic);
		// compute size of heap objects if necessary
		if (ic.minClassId < 0) return;
		if (!Facts.isLive(ic)) return;
		computeSize(ic);
		// create GC maps for object if necessary
		if (runtime != null && runtime.gc != null) runtime.gc.recordTypeRefMap(ic);
	}
	def computeSize(ic: IrClass) {
		if (ic.fields.length == 0) { // no fields
			ic.machSize = data.align(sizeOf(tagType));
			return;
		}
		// find field at maximum offset; assume no overlapping fields
		var maxf = ic.fields(0);
		for (f in ic.fields) if (f.machOffset > maxf.machOffset) maxf = f;
		ic.machSize = data.align(maxf.machOffset + sizeOf(maxf.fieldType));
	}
	def processComponent(ic: IrClass) {
		// queue component record for processing
		var r = getComponentRecord(ic.ctype);
		if (r != null) layout.recordQueue.add(r);
		for (i = 0; i < ic.fields.length; i++) {
			// XXX: could segregate component fields into refs and nonrefs
			var f = ic.fields(i);
			var size = sizeOf(f.fieldType);
			layout.dataRegion.align(size);
			layout.fieldMap.set(f, layout.dataRegion.allocate(f, size));
		}
	}
	def makeMachArray(utype: Type) -> Mach_V3Array {
		var marray = Mach_V3Array.new(utype, utype);
		var layout = MachLayout.new(this);
		// 1. compute the layout for the array header
		layout.addType(tagType);
		marray.lengthOffset = layout.addType(Int.TYPE);
		marray.headerSize = data.align(layout.size);
		// 2. compute the scale for elements
		var elemType = V3Array.elementType(utype);
		marray.elemScale = sizeOf(elemType); // XXX: round up to a power of two if necessary
		// 3. compute the type tag for the array
		var tag = if(isRefType(elemType), 3, 1);
		marray.typeTag = Int.box((marray.elemScale #<< 2) | tag);
		return marray;
	}
	def machType(t: Type) -> Type {
		match (t.typeCon.kind) {
			V3Kind.VOID,
			V3Kind.BOOL,
			V3Kind.BYTE,
			V3Kind.INT,
			V3Kind.ARRAY,
			V3Kind.CLASS,
			MachType.MACH_REFERENCE,
			MachType.MACH_POINTER: return t;
			V3Kind.COMPONENT: return Void.TYPE;
		}
		var r = typeReps.get(t);
		if (r == null) typeReps.set(t, r = makeMachRep(t));
		return r.machType;
	}
	def funcType(m: IrSpec) -> Type {
		// XXX: more efficient mapping of IrSpec -> Ptr<FuncType>
		return machType(Function.funcRefType(m.getUnboundType()));
	}
	private def makeMachRep(t: Type) -> MachRep {
		match (t.typeCon.kind) {
			V3Kind.FUNCREF: {
				// recursively create function type
				var ptypes = Lists.map(t.nested, machType);
				var ftype = Function.FUNCREF.create(ptypes);
				return MachRep.new(t, code.ptrTypeCon.create1(ftype));
			}
			V3Kind.TUPLE: {
				// recursively create tuple type
				return MachRep.new(t, Tuple.newType(Lists.map(t.nested, machType))); // recursively get tuple type
			}
			V3Kind.SET: {
				// return the representation of the first element
				return MachRep.new(t, machType(t.nested.head));
			}
		}
		return unexpectedType(t, null);
	}
	def machVal(val: Val, t: Type) -> Val {
		if (val == null) return null;
		match (t.typeCon.kind) {
			V3Kind.BOOL, V3Kind.BYTE, V3Kind.INT: return val;
			V3Kind.VOID, V3Kind.COMPONENT: return null;
			V3Kind.ARRAY, V3Kind.CLASS: return layout.mapRecord(Record.!(val));
			V3Kind.FUNCREF: return layout.addrOfMethod(FuncVal.!(val).memberRef.asMethod());
			V3Kind.TUPLE: {
				// deconstruct the tuple and reconstruct it
				var i = 0;
				var ov = (Tuple_Value.!(val)).values;
				var nt = t.nested;
				var nv = Array<Val>.new(ov.length);
				while (i < ov.length) {
					nv(i) = machVal(ov(i), nt.head);
					i++;
					nt = nt.tail;
				}
				return Tuple_Value.new(nv);
			}
		} else {
			if (Addr.?(val)) return val;
		}
		return unexpectedType(t, Values.BOTTOM);
	}
	def getCodeAddress(methodRef: IrSpec) -> Val {
		return layout.addrOfMethod(methodRef.asMethod());
	}
	def getArrayLengthOffset(arrayType: Type) -> int {
		return arrayRep(arrayType).lengthOffset;
	}
	def getArrayElemScale(arrayType: Type) -> int {
		return arrayRep(arrayType).elemScale;
	}
	def getArrayElemOffset(arrayType: Type) -> int {
		return arrayRep(arrayType).headerSize;
	}
	def getObjectSize(t: Type, r: Record) -> int {
		if (V3.isClass(t)) return irClass(t).machSize; // return the size of the object
		if (V3.isArray(t)) return data.align(arrayRep(t).getObjectSize(r)); // return the size of the header only
		return unexpectedType(t, 0);
	}
	def alignTo(i: int, a: int) -> int {
		// XXX: use masks for powers of two
		if (a > 1) return (i + a - 1) / a * a;
		return i;
	}
	def irClass(t: Type) -> IrClass {
		return prog.ir.getIrClass(t);
	}
	private def arrayRep(t: Type) -> Mach_V3Array {
		var ar = Mach_V3Array.!(typeReps.get(t));
		if (ar == null) typeReps.set(t, ar = makeMachArray(t)); // create array representation
		return ar;
	}
	def classIdRange(t: Type) -> (int, int) {
		var r = irClass(t);
		if (r == null) return (0, 0);
		return (r.minClassId * code.addressSize, r.maxClassId * code.addressSize);
	}
	def componentFieldPtr(f: IrSpec) -> Val {
		return layout.fieldMap.get(f.asField());
	}
	def classFieldOffset(f: IrSpec) -> int {
		return f.asField().machOffset;
	}
	def methodTable(spec: IrSpec) -> Addr {
		var mtable = IrSelector.!(spec.member).mtable;
		if (mtable == null) return V3.fail1("mtable is null for %1", spec.render);
		var mtaddr = layout.mtableMap.get(mtable);
		if (mtaddr == null) { // allocate space in method region for mtable
			var size = mtable.table.length * code.addressSize;
			mtaddr = layout.metaRegion.allocate(mtable, size);
			// return a pointer to a table indexed starting from 0
			mtaddr = mtaddr.add(0 - mtable.rootId * code.addressSize);
			layout.mtableMap.set(mtable, mtaddr);
		}
		return mtaddr;
	}
	def unexpectedType<T>(t: Type, v: T) -> T {
		return prog.ERROR.unexpectedType(t, v);
	}
	def objectTag(t: Type) -> Val {
		if (V3.isClass(t)) return Int.box(irClass(t).minClassId * code.addressSize);
		if (V3.isArray(t)) return arrayRep(t).typeTag;
		return unexpectedType(t, null);
	}
	def sizeOf(t: Type) -> int {
		match(t.typeCon.kind) {
			V3Kind.VOID: return 0;
			V3Kind.INT: return 4;
			V3Kind.BYTE,
			V3Kind.BOOL: return 1;
			V3Kind.CLASS,
			V3Kind.ARRAY,
			MachType.MACH_REFERENCE: return refSize;
			V3Kind.SET: return sizeOf(t.nested.head);
			V3Kind.FUNCREF: return code.addressSize;
			MachType.MACH_POINTER: return data.addressSize;
		}
		return unexpectedType(t, 0);
	}
	private def getComponentRecord(t: Type) -> Record {
		return prog.getComponentRecord(V3.asComponent(t).componentDecl);
	}
	def encodeData(region: Region, u: DataEncoder, a: Addr) {
		if (a.is<Record>()) encodeRecord(u, a.get<Record>());
		else if (a.is<IrMtable>()) encodeMtable(u, a.get<IrMtable>());
		else if (a.is<IrField>()) encodeField(u, a.get<IrField>());
		else return prog.ERROR.fail("unexpected data item in region");
	}
	def encodeField(u: DataEncoder, f: IrField) {
		// encode a component's field at the address
		var r = getComponentRecord(f.container);
		encodeVal(u, r.values(f.index), f.fieldType);
	}
	def encodeRecord(u: DataEncoder, r: Record) {
		var v = r.values;
		var start = u.pos;
		if (V3.isArray(r.rtype)) {
			// encode an array
			var rep = arrayRep(r.rtype);
			u.i4(Int.unbox(rep.typeTag));
			u.at(start + rep.lengthOffset).i4(v.length);
			if (rep.elemScale == 0) return; // don't encode zero-length elements
			var et = V3Array.elementType(r.rtype);
			for (i = 0; i < v.length; i++) {
				// XXX: special case Array<byte>, Array<Record>, Array<int> for performance
				encodeVal(u.at(start + i * rep.elemScale + rep.headerSize), v(i), et);
			}
		} else if (V3.isClass(r.rtype)) {
			// encode a class
			var ic = irClass(r.rtype), f = ic.fields;
			u.i4(ic.minClassId * code.addressSize);
			for (i = 0; i < v.length; i++) {
				encodeVal(u.at(start + f(i).machOffset), v(i), f(i).fieldType);
			}
		} else {
			return unexpectedType(r.rtype, ());
		}
	}
	def encodeMtable(u: DataEncoder, mtable: IrMtable) {
		for (m in mtable.table) {
			encodeAddr(u, layout.addrOfMethod(m));
		}
	}
	def encodeVal(u: DataEncoder, v: Val, t: Type) {
		v = machVal(v, t);
		match (t.typeCon.kind) {
			V3Kind.BOOL: u.i1(Bool.toInt(Bool.unbox(v)));
			V3Kind.BYTE: u.i1(Byte.unbox(v));
			V3Kind.INT: u.i4(Int.unbox(v));
			V3Kind.CLASS,
			V3Kind.ARRAY,
			MachType.MACH_POINTER,
			MachType.MACH_REFERENCE,
			V3Kind.FUNCREF: encodeAddr(u, Addr.!(v));
		} else {
			unexpectedType(t, ());
		}
	}
	def encodeAddr(u: DataEncoder, addr: Addr) {
		var abs = layout.absolute(addr);
		if (Aeneas.PRINT_MACH.get()) {
			var buf = prog.renderResult(addr, null, Strings.toBuffer("encode "));
			Terminal.putb(buf.puts(" = 0x").putx(abs).format1(" @ %1\n", u.pos));
		}
		u.i4(abs);
	}
	def fail(msg: string) {
		prog.ERROR.fail(msg);
	}
	def isRefType(t: Type) -> bool {
		var kind = t.typeCon.kind;
		return kind == V3Kind.CLASS || kind == V3Kind.ARRAY || kind == MachType.MACH_REFERENCE;
	}
}
// Machine representation of a type.
class MachRep(origType: Type, machType: Type) { }
// Machine representation of a component
class Mach_V3Component extends MachRep {
	def ic: IrClass;
	new(ic, componentType: Type, machType: Type) : super(componentType, machType) { }
}
// Machine representation of an array.
class Mach_V3Array extends MachRep {
	var lengthOffset: int;
	var headerSize: int;
	var elemScale: int;
	var typeTag: Box<int>;
	new(arrayType: Type, machType: Type) : super(arrayType, machType) { }
	def getObjectSize(r: Record) -> int {
		if (r == null) return headerSize;
		return headerSize + r.values.length * elemScale;
	}
}
// A layout is used for adding fields sequentially to a memory area, aligning fields
// as necessary and recording which offsets contain references.
class MachLayout(mach: MachProgram) {
	var fieldRefOffsets: List<int>;
	var valueRefOffsets: List<int>;
	var size: int;
	var alignedSize: int;

	def addType(t: Type) -> int {
		var s = mach.sizeOf(t);
		var offset = mach.alignTo(size, s);
		size = offset + s;
		return offset;
	}
}
// Manages the program regions and maps objects and code in those regions.
// Guarantees that each item has a unique Address object representing it.
class MachProgramLayout(mach: MachProgram) {
	def codeRegion    = Region.new("code", mach.code);
	def metaRegion    = Region.new("meta", mach.code);
	def runtimeRegion = Region.new("runtime", mach.code);
	def dataRegion    = Region.new("data", mach.data);
	def mtableMap     = IrUtil.newIrItemMap<Addr>();
	def methodMap     = IrUtil.newIrItemMap<Address<IrMethod>>();
	def fieldMap      = IrUtil.newIrItemMap<Address<IrField>>();
	def recordMap     = V3.newRecordMap<Address<Record>>();
	var recordQueue   = Sequence<Record>.new();

	def addrOfMethod(m: IrMethod) -> Address<IrMethod> {
		var a = methodMap.get(m);
		if (a == null) methodMap.set(m, a = Address.new(codeRegion, m));
		return a;
	}
	def absolute(a: Addr) -> int {
		if (a == null) return 0;
		if (a.base != null) return absolute(a.base) + a.offset;
		if (CiRuntime_Address.?(a)) return CiRuntime_Address.!(a).getAbs(mach.runtime);
		if (a.absolute == -1) error(a);
		return a.absolute;
	}
	def error(a: Addr) {
		var buf = Strings.toBuffer("address ");
		mach.prog.renderResult(a, null, buf);
		buf.puts(" not fixed");
		mach.fail(buf.toString());
	}
	// compile each method into the encoder at its final address
	def layoutCode(u: MachDataEncoder, genCode: IrMethod -> void) {
		u.atEnd();
		var methods = mach.prog.ir.methods;
		for (i = 0; i < methods.length; i++) {
			// generate code for the method
			var m = methods.get(i);
			u.atEnd().align(mach.code.alignment);
			addrOfMethod(m).absolute = u.endAddr();
			genCode(m);
		}
	}
	// layout the method tables
	def layoutMeta(u: MachDataEncoder) {
		u.atEnd().align(mach.data.addressSize);
		metaRegion.layout(u.endAddr());
		encodeRegion(metaRegion, u);
	}
	// layout all runtime datastructures
	def layoutRuntime(u: MachDataEncoder) {
		// have to finish laying out the data section to know its size
		u.atEnd().align(mach.data.addressSize);
		Sequences.drain(recordQueue, 0, layoutRecord);
		if (mach.runtime.gc != null) {
			// record the data size and the locations of mutable refs
			mach.runtime.gc.recordDataSize(dataRegion.mark);
			dataRegion.apply(recordDataRefs);
		}
		mach.runtime.encode(u);
	}
	// layout all records into the data region
	def layoutData(u: MachDataEncoder) {
		// compute addresses for all objects in the data region
		dataRegion.layout(u.endAddr());
		// encode all records into the encoder
		encodeRegion(dataRegion, u);
	}
	private def recordDataRefs(a: Addr, off: int, size: int) {
		if (a.is<IrField>()) {
			// a global field in the data section
			var f = a.get<IrField>();
			if (!f.checkFact(Facts.F_VALUE)) {
				if (mach.isRefType(f.fieldType)) mach.runtime.gc.recordRootRef(off);
			}
		} else if (a.is<Record>()) {
			// an object in the data section
			mach.runtime.gc.recordRootObject(off, a.get<Record>());
		}
	}
	private def layoutRecord(r: Record) {
		for (i = 0; i < r.values.length; i++) layoutVal(r.values(i));
	}
	private def layoutVal(val: Val) {
		if (Record.?(val)) mapRecord(Record.!(val));
		else if (Delegate.?(val)) layoutVal(Delegate.!(val).val);
		else if (Tuple_Value.?(val)) for(e in Tuple_Value.!(val).values) layoutVal(e);
	}
	private def encodeRegion(region: Region, u: MachDataEncoder) {
		// encode region contents at the end of this encoder
		var start = u.atEnd().pos;
		u.skipN(region.mark);
		var c = region.contents;
		for (i = 0; i < c.length; i++) {
			var t = c.get(i);
			mach.encodeData(region, u.at(start + t.1), t.0);
		}
	}
	def isValid(addr: Addr) -> bool {
		// XXX: return true for all invalid addresses
		if (addr == null) return false;
		if (addr.equals(null)) return false;
		return true;
	}
	def mapRecord(r: Record) -> Val {
		var addr = recordMap.get(r);
		if (addr == null) {
			// allocate space in the data region
			dataRegion.align(mach.data.alignment);
			addr = dataRegion.allocate(r, mach.getObjectSize(r.rtype, r));
			recordMap.set(r, addr);
			// queue for later processing
			recordQueue.add(r);
		}
		return addr;
	}
}
// Represents all runtime data structures exposed to the Virgil runtime code.
class MachRuntime(mach: MachProgram) {
	def codePageSize = 4096;
	def codePageMask = 4095;
	def codePageShift = 12;
	def codeRegion = mach.layout.codeRegion;
	def metaRegion = mach.layout.metaRegion;
	def dataRegion = mach.layout.dataRegion;
	def runtimeRegion = mach.layout.runtimeRegion;
	def addrs = Array<int>.new(CiRuntimeModule.max); // CiRuntime absolute addresses
	def debug = Aeneas.PRINT_RT.get();
	var typeCon: CiRuntime_TypeCon;

	var ri_init: RaRoot;
	var ri_gc: RaRoot;
	var ri_signal: RaRoot;

	var src: MachRtSrcTables;
	var gc: MachRtGcTables;

	var heapSize = Aeneas.HEAP_SIZE.get();

	new() {
		if (Aeneas.RT_STTABLES.get()) src = MachRtSrcTables.new(mach, this);
		if (Aeneas.RT_GCTABLES.get()) gc = MachRtGcTables.new(mach, this);
		typeCon = CiRuntime_TypeCon.new(MachModule.PTR_32.ptrType, this); // XXX: 32-bit centric
	}

	def recordCodeStart(addr: int) {
		CiRuntimeModule.CODE_START.setAbs(this, addr);
	}
	def recordCodeEnd(addr: int) {
		CiRuntimeModule.CODE_END.setAbs(this, addr);
	}
	def recordDataStart(addr: int) {
		CiRuntimeModule.DATA_START.setAbs(this, addr);
	}
	def recordDataEnd(addr: int) {
		CiRuntimeModule.DATA_END.setAbs(this, addr);
	}
	def getExceptionDest(off: int, ex: string, source: Source) -> Addr;
	def addHeapPointers(u: MachDataEncoder) {
		u.atEnd().align(mach.data.addressSize);
		var start = u.endAddr(), heapStart = start + 8;
		// add a pointer to the start of the heap
		CiRuntimeModule.HEAP_CUR_LOC.setAbs(this, start);
		u.i4(heapStart); // TODO: 32-bit specific
		// add a pointer to the end of the heap
		CiRuntimeModule.HEAP_END_LOC.setAbs(this, start + 4);
		u.i4(heapStart + heapSize); // TODO: 32-bit specific
		// expose the start of the heap and end of the heap as constants
		CiRuntimeModule.HEAP_START.setAbs(this, heapStart);
		CiRuntimeModule.HEAP_END.setAbs(this, heapStart + heapSize);
	}
	def codePages() -> int {
		var end = CiRuntimeModule.CODE_END.getAbs(this);
		if (end == 0) mach.prog.ERROR.fail("code end not set yet");
		return (end - CiRuntimeModule.CODE_START.getAbs(this) + codePageSize - 1) / codePageSize;
	}
	def encode(u: MachDataEncoder) {
		if (gc != null) gc.encode(u);
		if (src != null) src.encode(u);
	}
	def genAlloc(gen: MachCodeGen, i: SsaApplyOp, mv: MachVar);
	def genSystemOp(gen: MachCodeGen, i: SsaApplyOp, mv: MachVar);
	def getFatalAddress(ex: string) -> Addr;
}
// A utility to encode sorted, page-indexed tables such as for stackmaps and sourcepoints.
class MachRtPageTable(
		pageTable: CiRuntime_Address,
		table: CiRuntime_Address,
		end: CiRuntime_Address,
		wide: bool) { // 8-byte entries

	def entries = Sequence<(int, int, int)>.new();

	def encode(rt: MachRuntime, u: MachDataEncoder) {
		var pageTableAddr = u.endAddr();
		pageTable.setAbs(rt, pageTableAddr);
		var maxPage = rt.codePages(), maxEntry = entries.length;
		var tableAddr = pageTableAddr + 4 * (maxPage + 1);
		var tableEndAddr = tableAddr + maxEntry * 4;
		table.setAbs(rt, tableAddr);
		// encode the page table pointers
		var lastPage = -1;
		for (i = 0; i < maxEntry; i++) {
			var page = entries.get(i).0 / rt.codePageSize;
			if (page != lastPage) {
				// first entry on new page, fill intervening pages
				var entryAddr = tableAddr + i * 4;
				for (j = lastPage; j < page; j++) u.i4(entryAddr);
				lastPage = page;
			}
		}
		// encode the last entries of the table
		for (j = lastPage; j < maxPage; j++) u.i4(tableEndAddr);
		// encode the table entries
		for (i = 0; i < maxEntry; i++) {
			var entry = entries.get(i);
			u.i4((entry.0 & rt.codePageMask) | (entry.1 #<< rt.codePageShift));
		}
		if (!wide) return;
		// encode the wide part of the table
		if (end != null) end.setAbs(rt, u.endAddr());
		for (i = 0; i < maxEntry; i++) {
			u.i4(entries.get(i).2);
		}
	}
	def add(offset: int, e0: int, e1: int) {
		entries.add(offset, e0, e1);
	}
	def grow(len: int) -> MachRtPageTable {
		entries.grow(len);
		return this;
	}
}
