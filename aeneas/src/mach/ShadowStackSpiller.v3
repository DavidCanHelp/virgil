// Copyright 2019 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// High-level questions:
// - should this happen before, during, or after stackification?
//   - cannot happen after, since stack values should not survive after calls
//   - placement of reloads might benefit from fw stackification algorithm
//   - before would be great if it doesn't complicate the stackifier
// - is it possible to do anything on a per-block basis?
//   - stack frame allocation/deallocation could be inserted later, as arch instrs
//   - per basic block spill/reload would be fairly simple "dumb" mode

// If shadow spilling is *before*, what mechanisms are used to:
// - insert shadow frame allocation/deallocation
//   => special ArchInstrs with no use/def operands
// - insert spill + reload
//   => new VRegs and rewrite def/uses?
//   => 
// - force stack clear upon kill
// - insert phis for merging spilled and unspilled paths?

// If we do the stupidest thing, how does that work?
// - allocate shadow frame manually in prologue
// - deallocate shadow frame at all returns
// - before every kill, emit get_local/store pairs (manually) for all live vars
// - after every kill, emit load/set_local pairs (manually) for all live vars
// - each killed ref gets a shadow slot index (no coallescing)

class ShadowStackSpiller() {
	var codegen: ArchCodeGen;
	def reset(codegen: ArchCodeGen) {
		this.codegen = codegen;
	}
	def spill() {
		if (codegen.livepoints.length == 0) return;  // nothing to do
		// 1. place spill frame allocation at A = "lowest non-loop common dominator of all livepoints".
		// 2. place spill frame deallocation at post dominating set of A
		// 3. lift spills to "lowest non-loop common dominator"
		// 4. rewrite spilled uses to spilled vreg
		// 5. merge control flow with new phis / parallel moves
	}
	def print() {
		var out = codegen.out;
		for (i = codegen.cursor; i != null; i = i.next) {
			codegen.renderN(i.opcode(), i.operands);
			out.outln();
			for (o in i.operands) match (o) {
				Kill(livepoint, constraint) => {
					out.putLiveness(codegen.liveness, livepoint + codegen.order.length);
				}
				_ => ;
			}
		}
	}
}

enum RegClass {
	BIT_8,
	BIT_16,
	BIT_32,
	BIT_64,
	FLOAT_32,
	FLOAT_64,
	VEC_128,
	VEC_256,
	VEC_512,
	REF_32,
	REF_64
}
// Machine-independent representation of a virtual register.
class NewVReg(id: int) {
	var rclass: RegClass;		// register class
	var ssa: SsaInstr;		// corresponding ssa instruction (if any)
	var hint: byte;			// physical register hint
	var assignment: byte;		// assigned physical register
	var spill: int;			// spill slot (< 0 indicates a constant)
	var shadow: int;		// shadow spill slot

	// VRegs can be reused
	def reset(rclass: RegClass, ssa: SsaInstr) {
		this.rclass = rclass;
		this.ssa = ssa;
		this.hint = 0;
		this.assignment = 0;
		this.spill = 0;
		this.shadow = 0;
	}
	def isRef() -> bool {
		return rclass.tag >= RegClass.REF_32.tag;
	}
	def isConst() -> bool {
		return spill < 0;
	}
}
