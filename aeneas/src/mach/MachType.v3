// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.
component MachType {
	// constants for machine kinds
	def MACH_REFERENCE = 20; // object reference
	def MACH_POINTER   = 21; // pointer (non-reference)
}
// Defines opcodes for machine-level operators.
component MachOpcode {
	def PtrLoad      = '\x39';
	def PtrStore     = '\x3a';
	def PtrAdd       = '\x3b';
	def PtrSub       = '\x3c';
	def Alloc        = '\x3d';
	def UnsignedLt   = '\x3e';
	def UnsignedLteq = '\x3f';
	def UnsignedGt   = '\x40';
	def UnsignedGteq = '\x41';
	def CallAddress  = '\x42';
	def CallerIp     = '\x43';
	def CallerSp     = '\x44';
	def MachSpecial  = '\x45';
	def MachSystemOp = '\x46';

	new() {
		if (PtrLoad <= V3Opcode.LastOpcode) { var x = 1 / 0; } // ERROR: operators overlap with V3Opcodes
		var op = Operators.register, P = Facts.O_PURE;
		// fill in the operator table for machine operators
		op(PtrLoad,		"PtrLoad",	0);
		op(PtrStore,		"PtrStore", 	0);
		op(PtrAdd,		"PtrAdd", 	P); // XXX: could be foldable with offset
		op(PtrSub,		"PtrSub", 	P);
		op(Alloc,		"Alloc", 	0);
		op(UnsignedLt,		"UnsignedLt", 	P);
		op(UnsignedLteq,	"UnsignedLteq", P);
		op(UnsignedGt,		"UnsignedGt", 	P);
		op(UnsignedGteq,	"UnsignedGteq", P);
		op(CallAddress,		"CallAddress", 	0);
		op(CallerIp,		"CallerIp", 	P);
		op(CallerSp,		"CallerSp", 	P);
		op(MachSpecial,		"MachSpecial", 	0);
		op(MachSystemOp,	"MachSystemOp",	0);
	}
}
// Defines operators for machine-level values.
component MachOp {
	// a null pointer to distinguish absolute offsets
	def NULL_PTR = Addr.new(null, null, 0);
	new() {
		NULL_PTR.absolute = 0;
	}
//----------------------------------------------------------------------------
	def newPtrLoad(ptrType: Type, valueType: Type) -> Operator {
		return OperatorOf.new(MachOpcode.PtrLoad, [ptrType, valueType], [ptrType], valueType, (), evalError<void>);
	}
//----------------------------------------------------------------------------
	def newPtrStore(ptrType: Type, valueType: Type) -> Operator {
		return OperatorOf.new(MachOpcode.PtrStore, [ptrType, valueType], [ptrType, valueType], Void.TYPE, (), evalError<void>);
	}
//----------------------------------------------------------------------------
	def newPtrAdd(ptrType: Type, derivedType: Type) -> Operator {
		return OperatorOf.new(MachOpcode.PtrAdd, [ptrType, derivedType], [ptrType, Int.TYPE], derivedType, (), evalPtrAdd);
	}
	private def evalPtrAdd(v: void, args: Arguments) -> Result {
		var p = ptr(args, 0), off = Int.unbox(args.getArg(1));
		if (Addr.?(p)) return Addr.!(p).add(off);
		return args.throw(V3Exception.InternalError, "not a pointer");
	}
//----------------------------------------------------------------------------
	def newPtrSub(ptrType: Type) -> Operator {
		return OperatorOf.new(MachOpcode.PtrSub, [ptrType], [ptrType, ptrType], Int.TYPE, (), evalPtrSub);
	}
	private def evalPtrSub(v: void, args: Arguments) -> Result {
		var p = ptr(args, 0), q = ptr(args, 1);
		if (p.base == q.base) return Int.box(p.offset - q.offset);
		if (p.base == q) return Int.box(p.offset);
		return args.throw(V3Exception.InternalError, "unfoldable pointer subtraction");
	}
//----------------------------------------------------------------------------
	def newAlloc(ptrType: Type) -> Operator {
		return OperatorOf.new(MachOpcode.Alloc, [ptrType], [Int.TYPE], ptrType, (), evalError<void>);
	}
//----------------------------------------------------------------------------
	def opIntUgteq: Operator = newUnsignedCmp(MachOpcode.UnsignedGteq, Int.TYPE);
	def newUnsignedCmp(opcode: byte, t: Type) -> Operator {
		return OperatorOf<void>.new(opcode, TypeUtil.NO_TYPES, [t, t], Bool.TYPE, (), evalIntUgteq);
	}
	def evalIntUgteq(v: void, args: Arguments) -> Result {
		var a = Int.unbox(args.getArg(0)), b = Int.unbox(args.getArg(1));
		var as = a #>> 1, bs = b #>> 1;
		if (as > bs) return Bool.TRUE;
		if (as == bs) return Bool.box((a & 1) >= (b & 1));
		return Bool.FALSE;
	}
//----------------------------------------------------------------------------
	def newCallAddress(receiver: bool, addrType: Type, ftype: Type) -> Operator {
		var fTypes = Function.getParamTypeArray(ftype);
		var paramTypes = Arrays.prepend(addrType, fTypes);
		return OperatorOf.new(MachOpcode.CallAddress, [ftype], paramTypes, Function.getReturnType(ftype), receiver, evalError<bool>);
	}
//----------------------------------------------------------------------------
	def newMachSpecial(typeParams: Array<Type>, paramTypes: Array<Type>, returnType: Type, 
			loweringFunc: (SsaApplyOp, SsaMachGen) -> SsaInstr) -> Operator {
		return OperatorOf.new(MachOpcode.MachSpecial, typeParams, paramTypes, returnType, loweringFunc, evalMachSpecial);
	}
	def evalMachSpecial(loweringFunc: (SsaApplyOp, SsaMachGen) -> SsaInstr, args: Arguments) -> Result {
		return evalError((), args);
	}
//----------------------------------------------------------------------------
	def newCallerIp(ptrType: Type) -> Operator {
		return OperatorOf.new(MachOpcode.CallerIp, TypeUtil.NO_TYPES, TypeUtil.NO_TYPES, ptrType, (), evalError<void>);
	}
//----------------------------------------------------------------------------
	def newCallerSp(ptrType: Type) -> Operator {
		return OperatorOf.new(MachOpcode.CallerSp, TypeUtil.NO_TYPES, TypeUtil.NO_TYPES, ptrType, (), evalError<void>);
	}
//----------------------------------------------------------------------------
	def evalError<T>(v: T, args: Arguments) -> Result {
		return args.throw(V3Exception.InternalError, "nonfoldable operation");
	}
	private def ptr(args: Arguments, i: int) -> Addr {
		var p = args.getArg(i);
		if (p == null) return NULL_PTR;
		return Addr.!(p);
	}
}
// module which provides the "pointer" type
component MachModule {
	def PTR_32: MachPointer_TypeCon = MachPointer_TypeCon.new(32);
	def install(prog: Program) {
		// install the builtin "Pointer" type in the program
		prog.typeEnv.add(PTR_32);
	}
}
// type constructor for machine types
class Mach_TypeCon extends Member_TypeCon {
       def width: int;
       def size: int = (width + 7) #>> 3;
       new(name: string, kind: int, arity: int, width) super(name, kind, arity, TypeUtil.globalCache) { }
}
// Type constructor for language-level "Pointer" type, available to programs
// that target machine targets (e.g. x86-darwin)
class MachPointer_TypeCon extends Mach_TypeCon {
	def instMembers = Strings.newMap<(Operator, List<TypeParam>)>();
	var ptrType: Type;
	var opAdd: Operator;
	var opSub: Operator;
	var opLt: Operator;
	var opGt: Operator;
	var opLteq: Operator;
	var opGteq: Operator;
	var atContents: Member;

	new(width: int) super("Pointer", MachType.MACH_POINTER, 0, width) {
		ptrType = create0();
		var typeParam = TypeUtil.ONE_TYPE_PARAM.head;
		var arrayType = V3Array.newType(typeParam);
		instMembers.set("load",  (MachOp.newPtrLoad(ptrType, typeParam), TypeUtil.ONE_TYPE_PARAM));
		instMembers.set("store", (MachOp.newPtrStore(ptrType, typeParam), TypeUtil.ONE_TYPE_PARAM));
		atContents = Members.opMember(MachOp.newMachSpecial(TypeUtil.NO_TYPES, [arrayType], ptrType, lower_atContents), TypeUtil.ONE_TYPE_PARAM);
		opAdd = MachOp.newPtrAdd(ptrType, ptrType);
		opSub = MachOp.newPtrSub(ptrType);
		opLt = MachOp.newUnsignedCmp(MachOpcode.UnsignedLt, ptrType);
		opLteq = MachOp.newUnsignedCmp(MachOpcode.UnsignedLteq, ptrType);
		opGt = MachOp.newUnsignedCmp(MachOpcode.UnsignedGt, ptrType);
		opGteq = MachOp.newUnsignedCmp(MachOpcode.UnsignedGteq, ptrType);
	}
	def lookupMember(t: Type, name: string, receiver: bool) -> Member {
		if (receiver) {
			// p.{load, store}
			var op = instMembers.get(name);
			if (op.0 != null) return Members.closureMember(op.0, op.1);
		} else {
			// Pointer.{SIZE, atContents}
			// Pointer.{load, store}
			if (Strings.equal(name, "atContents")) return atContents;
			if (Strings.equal(name, "SIZE")) return Members.valMember(Int.TYPE, Int.box(size), false);
			if (Strings.equal(name, "NULL")) return Members.valMember(ptrType, null, false);
			var op = instMembers.get(name);
			if (op.0 != null) return Members.opMember(op.0, op.1);
		}
		return null;
	}
	def lookupInfix(infix: byte) -> Operator {
		match (infix) {
			V3Infix.Add:  return opAdd;
			V3Infix.Sub:  return opSub;
			V3Infix.Lt:   return opLt;
			V3Infix.Gt:   return opGt;
			V3Infix.Lteq: return opLteq;
			V3Infix.Gteq: return opGteq;
		}
		return null;
	}
	def lower_atContents(apply: SsaApplyOp, ssa: SsaMachGen) -> SsaInstr {
		// translate a Pointer.atContents operation into a pointer add plus constant
		var op = apply.op;
		var add = MachOp.newPtrAdd(op.resultType, op.resultType);
		var offset = ssa.newGraph.valConst(Int.TYPE, Int.box(ssa.mach.getArrayElemOffset(op.paramTypes(0))));
		var array = ssa.genRef1(apply.inputs(0));
		return ssa.curBlock.addApply(apply.source, add, [array, offset]);
	}
}
