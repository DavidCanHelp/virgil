// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.
component MachType {
	// constants for machine kinds
	def MACH_POINTER   = '\x10'; // pointer (non-reference)
}
// module which provides the "Pointer" type
component MachModule {
	def PTR_16: MachPointer_TypeCon = MachPointer_TypeCon.new(16);
	def PTR_32: MachPointer_TypeCon = MachPointer_TypeCon.new(32);
	def PTR_64: MachPointer_TypeCon = MachPointer_TypeCon.new(64);
	def install(prog: Program, mach: MachProgram) {
		// install the builtin "Pointer" type in the program
		var size = mach.data.addressWidth;
		if (size <= 16) return prog.typeEnv.add(PTR_16);
		if (size <= 32) return prog.typeEnv.add(PTR_32);
		return prog.typeEnv.add(PTR_64);
	}
}
// type constructor for machine types
class Mach_TypeCon extends Member_TypeCon {
       def width: byte;
       def size = byte.view((width + 7u) >>> 3);
       new(name: string, kind: byte, arity: int, width) super(name, kind, arity, TypeUtil.globalCache) { }
}
// Type constructor for language-level "Pointer" type, available to programs
// that target machine targets (e.g. x86-darwin)
class MachPointer_TypeCon extends Mach_TypeCon {
	def instMembers = Strings.newMap<(Operator, List<TypeParamType>)>();
	var ptrType: Type;
	var opAdd: Operator;
	var opSub: Operator;
	var opLt: Operator;
	var opGt: Operator;
	var opLteq: Operator;
	var opGteq: Operator;
	var atContents: Operator;
	var atLength: Operator;
	var atObject: Operator;

	new(width: byte) super("Pointer", MachType.MACH_POINTER, 0, width) {
		ptrType = create0();
		var typeParam = TypeUtil.ONE_TYPE_PARAM.head;
		var arrayType = V3Array.newType(typeParam);
		instMembers["load"] = (V3Op.newPtrLoad(ptrType, typeParam), TypeUtil.ONE_TYPE_PARAM);
		instMembers["store"] = (V3Op.newPtrStore(ptrType, typeParam), TypeUtil.ONE_TYPE_PARAM);
		instMembers["cmpswp"] = (V3Op.newPtrCmpSwp(ptrType, typeParam), TypeUtil.ONE_TYPE_PARAM);
		atContents = V3Op.newPtrAtContents(typeParam, ptrType);
		atLength = V3Op.newPtrAtLength(typeParam, ptrType);
		atObject = V3Op.newPtrAtObject(TypeUtil.REF_TYPE_PARAM.head, ptrType);
		var it = Int.getType(true, width);
		opAdd = V3Op.newPtrAdd(ptrType, it);
		opSub = V3Op.newPtrSub(ptrType, it);
		opLt = V3Op.newPtrLt(ptrType);
		opLteq = V3Op.newPtrLteq(ptrType);
		opGt = V3Op.newVstSugar(VstOperator.Commute(opLt), opLt.typeArgs, opLt.sig.paramTypes, Bool.TYPE);
		opGteq = V3Op.newVstSugar(VstOperator.Commute(opLteq), opLt.typeArgs, opLt.sig.paramTypes, Bool.TYPE);
	}
	def lookupMember(t: Type, name: string, receiver: bool) -> LookupResult {
		if (receiver) {
			// p.{load, store}
			var op = instMembers[name];
			if (op.0 != null) return LookupResult.Partial(op.0, op.1);
		} else {
			// Pointer.{SIZE, NULL, atContents, atLength, atObject}
			// Pointer.{load, store}
			if (Strings.equal(name, "SIZE")) return LookupResult.Const(Int.TYPE, Int.box(size));
			if (Strings.equal(name, "NULL")) return LookupResult.Const(ptrType, null);
			if (Strings.equal(name, "atContents")) return LookupResult.Inst(atContents, TypeUtil.ONE_TYPE_PARAM);
			if (Strings.equal(name, "atLength")) return LookupResult.Inst(atLength, TypeUtil.ONE_TYPE_PARAM);
			if (Strings.equal(name, "atObject")) return LookupResult.Inst(atObject, TypeUtil.REF_TYPE_PARAM);
			var op = instMembers[name];
			if (op.0 != null) return LookupResult.Inst(op.0, op.1);
		}
		return LookupResult.None;
	}
	def lookupInfix(infix: V3Infix, rtype: Type) -> Operator {
		match (infix) {
			Add =>  return opAdd;
			Sub =>  return opSub;
			Lt =>   return opLt;
			Gt =>   return opGt;
			LtEq => return opLteq;
			GtEq => return opGteq;
			_ => return null;
		}
	}
}
