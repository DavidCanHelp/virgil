// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Defines operations and constants exposed by the compiler (Ci) to the runtime (Runtime).
component CiRuntimeModule {
	var max = 0;
	def map = Strings.newMap<CiRuntime_Address>();
	// graph begin and end constants
	def HEAP_START            = addr("HEAP_START");
	def HEAP_END              = addr("HEAP_END");
	def CODE_START            = addr("CODE_START");
	def CODE_END              = addr("CODE_END");
	def DATA_START            = addr("DATA_START");
	def DATA_END              = addr("DATA_END");
	// machine code stub for handling signals
	def SIGNAL_STUB           = addr("signalStub");
	// address of heap current and end pointers
	def HEAP_CUR_LOC          = addr("heapCurLoc");
	def HEAP_END_LOC          = addr("heapEndLoc");
	// tables for print stack traces
	def SRC_POINTS_PAGES      = addr("SRC_POINTS_PAGES");
	def SRC_POINTS_TABLE      = addr("SRC_POINTS_TABLE");
	def SRC_METHODS_PAGES     = addr("SRC_METHODS_PAGES");
	def SRC_METHODS_TABLE     = addr("SRC_METHODS_TABLE");
	def SRC_METHODS_TABLE_END = addr("SRC_METHODS_TABLE_END");
	def SRC_CLASS_TABLE       = addr("SRC_CLASS_TABLE");
	def SRC_STRINGS           = addr("SRC_STRINGS");
	// tables for the "ex" graph which encodes failed explicit checks
	def EX_START              = addr("EX_START");
	def EX_END                = addr("EX_END");
	def EX_TABLE              = addr("EX_TABLE");
	def EX_STRINGS            = addr("EX_STRINGS");
	// tables for precise GC
	def GC_STACKMAP_PAGES     = addr("GC_STACKMAP_PAGES");
	def GC_STACKMAP_TABLE     = addr("GC_STACKMAP_TABLE");
	def GC_EXTMAPS            = addr("GC_EXTMAPS");
	def GC_ROOTS_START        = addr("GC_ROOTS_START");
	def GC_ROOTS_END          = addr("GC_ROOTS_END");
	def GC_TYPE_TABLE         = addr("GC_TYPE_TABLE");

	def addr(name: string) -> CiRuntime_Address {
		var a = CiRuntime_Address.new(name, max++);
		map.set(name, a);
		return a;
	}
}
// An address in the runtime, such as a compiler-generated table or specialized routine.
class CiRuntime_Address extends Addr {
	def name: string;
	def index: int;
	// Negative indices distinguish this address from "user" addresses.
	new(name, index) super(null, null, -1 - index) { }
	def setAbs(rt: MachRuntime, addr: int) {
		rt.addrs(index) = addr;
	}
	def getAbs(rt: MachRuntime) -> int {
		return rt.addrs(index);
	}
}
// The "CiRuntime" component exposes addresses of (readonly) data structures to the
// "RiRuntime" code, which implements GC, stack walking, stack traces, etc.
class CiRuntime_TypeCon extends Member_TypeCon {
	def ptrType: Type;
	def runtime: MachRuntime;

	new(ptrType, runtime) super("CiRuntime", V3Kind.VOID, 0, TypeUtil.globalCache) { }
	def lookupMember2(t: Type, name: string, receiver: bool) -> LookupResult {
		if (receiver) return LookupResult.None;
		var val = CiRuntimeModule.map.get(name);
		if (val != null) return LookupResult.Value(ptrType, val);
		if (Strings.equal(name, "callerIp")) return LookupResult.Op(MachOp.newCallerIp(ptrType), null);
		if (Strings.equal(name, "callerSp")) return LookupResult.Op(MachOp.newCallerSp(ptrType), null);
		return LookupResult.None;
	}
}
