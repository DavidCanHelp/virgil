// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utilities for working with the representation of function types in the compiler.
component Function {
	def DELEGATE = Function_TypeCon.new(V3Kind.DELEGATE);
	def FUNCREF  = Function_TypeCon.new(V3Kind.FUNCREF);

	def getParamType(ftype: Type) -> Type {
		return checkTypeCon(ftype).nested.head;
	}
	def getParamTypeList(ftype: Type) -> List<Type> {
		return Tuple.toTypeList(checkTypeCon(ftype).nested.head);
	}
	def getParamTypeArray(ftype: Type) -> Array<Type> {
		return Lists.toArray(Tuple.toTypeList(checkTypeCon(ftype).nested.head));
	}
	def getReturnType(ftype: Type) -> Type {
		return checkTypeCon(ftype).nested.tail.head;
	}
	def newType(paramType: Type, returnType: Type) -> Type {
		return DELEGATE.create(Lists.cons2(paramType, returnType));
	}
	def funcRefType(ftype: Type) -> Type {
		if (ftype.typeCon == FUNCREF) return ftype;
		return FUNCREF.create(ftype.nested);
	}
	private def checkTypeCon(ftype: Type) -> Type {
		if (!Function_TypeCon.?(ftype.typeCon)) return V3.fail1("not a function type: %1", ftype.render);
		return ftype;
	}
	def prependParamType(ptype: Type, ftype: Type) -> Type {
		var params = List.new(ptype, getParamTypeList(ftype));
		return ftype.typeCon.create(Lists.cons2(Tuple.newType(params), getReturnType(ftype)));
	}
}
// TypeCon for function types in the compiler
class Function_TypeCon extends TypeCon {
	new(kind: int) : super("delegate", kind, 2, TypeUtil.globalCache) { }

	def renderType(buffer: StringBuffer, list: List<Type>) -> StringBuffer {
		var paramType = list.head, isFunc = Function_TypeCon.?(paramType.typeCon);
		if (kind == V3Kind.FUNCREF) buffer.puts("&(");
		if (isFunc) buffer.putc('(');
		paramType.render(buffer);
		if (isFunc) buffer.putc(')');
		buffer.puts(" -> ");
		list.tail.head.render(buffer);
		if (kind == V3Kind.FUNCREF) buffer.puts(")");
		return buffer;
	}
	def renderTypeRef(buffer: StringBuffer, list: List<TypeRef>) -> StringBuffer {
		var paramType = list.head, isFunc = Function_TypeCon.?(paramType.typeCon);
		if (kind == V3Kind.FUNCREF) buffer.puts("&(");
		if (isFunc) buffer.putc('(');
		paramType.render(buffer);
		if (isFunc) buffer.putc(')');
		buffer.puts(" -> ");
		list.tail.head.render(buffer);
		if (kind == V3Kind.FUNCREF) buffer.puts(")");
		return buffer;
	}
}
// A first-class function that is bound to an object
class Delegate(val: Val, memberRef: IrSpec) extends Val {
	def equals(other: Val) -> bool {
		if (other == this) return true;
		if (Delegate.?(other)) {
			var odel = Delegate.!(other);
			if (!Values.equal(odel.val, val)) return false;
			return odel.memberRef.equals(memberRef);
		}
		return false;
	}
}
// A first class function that is not bound to an object
class FuncVal(memberRef: IrSpec) extends Val {
	def equals(other: Val) -> bool {
		if (other == this) return true;
		return FuncVal.?(other) && FuncVal.!(other).memberRef.equals(memberRef);
	}
}
