// Copyright 2011 Google Inc. All rights reserved.
// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A type environment, including type parameters that are bound within its scope
class TypeEnv {
	def parent: TypeEnv;
	def typeParams: List<TypeParamType>;
	def paramArray = TypeUtil.toTypeArray(typeParams);
	def typecons = Strings.newMap<TypeCon>();
	def other: string -> TypeCon;

	new(parent, typeParams, other) {
		// number the type parameters according to their position in the list
		var i = 0;
		for (list = typeParams; list != null; list = list.tail) {
			list.head.index = i++;
		}
	}
	def add(typeCon: TypeCon) {
		typecons[typeCon.name] = typeCon;
	}
	def lookup(name: string) -> TypeCon {
		for (e = this; e != null; e = e.parent) {
			var result = e.typecons[name];
			if (result != null) return result;
			if (e.other != null) result = e.other(name);
			if (result != null) return result;
		}
		return null;
	}
}
// A reference to a type; usually unresolved initially
class TypeRef {
	def left: TypeRef;
	def token: Token;
	def typeRefs: VstList<TypeRef>;
	var typeCon: TypeCon;
	var rtype: Type;

	new(left, token, typeRefs, typeCon, rtype) {
		this.typeCon = typeCon;
		this.rtype = rtype;
	}
	def render(buffer: StringBuilder) -> StringBuilder {
		if (rtype != null) return rtype.render(buffer);
		if (typeCon != null) return typeCon.renderTypeRef(buffer, typeRefs.list);
		buffer.puts(token.image);
		if (typeRefs != null) {
			buffer.putc('<');
			Lists.render(buffer, TypeRef.render, typeRefs.list);
			buffer.putc('>');
		}
		return buffer;
	}
	def getType() -> Type {
		if (rtype == null) return error();
		else return rtype;
	}
	def range() -> FileRange {
		return if(token != null, token.range(), typeRefs.range());
	}
	def error() -> Type {
		return V3.fail(Strings.format3("unresolved TypeRef: %s @ %d:%d", token.image, range().beginLine, range().beginColumn));
	}
}
