// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component Float {
	def FLOAT32 = Float_TypeCon.new(8, 23, "float").create0();
	def FLOAT64 = Float_TypeCon.new(11, 52, "double").create0();
}
// Type constructor for floating point types. Generalized to have a configurable
// exponent and fraction width (in bits) and a sign bit.
class Float_TypeCon extends Member_TypeCon {
	def exp_width: byte;
	def fraction_width: byte;
	def total_width = byte.!(1 + exp_width + fraction_width);
	var cache: FloatOpCache;

	new(exp_width, fraction_width, name: string)
		super(name, V3Kind.FLOAT, 0, TypeUtil.globalCache) {
		cache = FloatOpCache.new(this, create0());
	}

	def lookupMember(t: Type, name: string, receiver: bool) -> LookupResult {
		var op: Operator;
		if (Strings.equal(name, "bits")) op = cache.opBits;
		else if (Strings.equal(name, "sign")) op = cache.opSign;
		else if (Strings.equal(name, "exponent")) op = cache.opExponent;
		else if (Strings.equal(name, "fraction")) op = cache.opFraction;
		if (op != null) {
			if (receiver) return LookupResult.Apply(op, null, Fact.O_PURE);
			else return LookupResult.Inst(op, null);
		}
		if (receiver) return LookupResult.None;

		if (Strings.equal(name, "nan")) return LookupResult.Const(t, null); // TODO
		else if (Strings.equal(name, "infinity")) return LookupResult.Const(t, null); // TODO
		else if (Strings.equal(name, "roundi")) {
			var op = OperatorOf.new(Opcode.FloatRoundI, [TypeUtil.TYPE_PARAM],
				Function.sig(TypeUtil.TYPE_PARAM, t), (), V3Op.unimplemented_error);
			return LookupResult.Inst(op, TypeUtil.ONE_TYPE_PARAM);
		}
		else if (total_width < 64 && Strings.equal(name, "roundd")) {
			op = OperatorOf.new(Opcode.FloatRoundD, cache.typeArgs,
				Function.sig(Float.FLOAT64, t), (), V3Op.unimplemented_error);
		}
		else if (Strings.equal(name, "from")) op = cache.opFromBits;
		else if (Strings.equal(name, "abs")) op = cache.opAbs;
		else if (Strings.equal(name, "ceil")) op = cache.opCeil;
		else if (Strings.equal(name, "floor")) op = cache.opFloor;
		else if (Strings.equal(name, "sqrt")) op = cache.opSqrt;
		else if (Strings.equal(name, "pow")) op = cache.opPow;
		else if (Strings.equal(name, "log")) op = cache.opLog;
		else if (Strings.equal(name, "exp")) op = cache.opExp;

		if (op != null) return LookupResult.Inst(op, null);
		return LookupResult.None;
	}
	def lookupInfix(infix: byte, rtype: Type) -> Operator {
		var t = this;
		if (rtype != null && rtype.typeCon.kind == V3Kind.FLOAT) {
			var that = Float_TypeCon.!(rtype.typeCon);
			if (that.total_width > this.total_width) t = that;
		}
		var op: Operator;
		match (infix) {
			V3Infix.Add => op = t.cache.opAdd;
			V3Infix.Sub => op = t.cache.opSub;
			V3Infix.Mul => op = t.cache.opMul;
			V3Infix.Div => op = t.cache.opDiv;
			V3Infix.Mod => op = t.cache.opMod;
			V3Infix.Equal => op = t.cache.opEqual;
			V3Infix.NotEqual => op = t.cache.opNotEqual;
			V3Infix.Lt => op = t.cache.opLt;
			V3Infix.Lteq => op = t.cache.opLteq;
			V3Infix.Gt => op = t.cache.opGt;
			V3Infix.Gteq => op = t.cache.opGteq;
		}
		return op;
	}
	// Members:
	// T.nan	NaN value
	// T.infinity	positive infinity value
	// v.bits	raw bit representation as an integer
	// v.exponent	exponent
	// v.sign	sign (0, -1)
	// v.fraction	fraction field
	// T.abs()	absolute value
	// T.ceil()	round up to nearest integer
	// T.floor()	round down to nearest integer
	// T.sqrt()	square root
	// T.pow()	x^y
	// T.log()	natural logarithm
	// T.exp()	e^x
}
class FloatOpCache(ftc: Float_TypeCon, ft: Type) {
	def typeArgs: Array<Type> = [ft];
	def tupleType = Tuple.newType(Lists.cons2(ft, ft));
	def unopSig = Function.sig(ft, ft);
	def binopSig = Function.sig(tupleType, ft);
	def cmpSig = Function.sig(tupleType, Bool.TYPE);

	def opAdd = OperatorOf.new(Opcode.FloatAdd, typeArgs, binopSig, (), V3Op.unimplemented_error);
	def opSub = OperatorOf.new(Opcode.FloatSub, typeArgs, binopSig, (), V3Op.unimplemented_error);
	def opMul = OperatorOf.new(Opcode.FloatMul, typeArgs, binopSig, (), V3Op.unimplemented_error);
	def opDiv = OperatorOf.new(Opcode.FloatDiv, typeArgs, binopSig, (), V3Op.unimplemented_error);
	def opMod = OperatorOf.new(Opcode.FloatMod, typeArgs, binopSig, (), V3Op.unimplemented_error);

	def opFromBits = OperatorOf.new(Opcode.FloatFromBits, typeArgs,
		Function.sig(Int.getType(false, ftc.total_width), ft), (), V3Op.unimplemented_error);
	def opBits = OperatorOf.new(Opcode.FloatBits, typeArgs,
		Function.sig(ft, Int.getType(false, ftc.total_width)), (), V3Op.unimplemented_error);
	def opSign = OperatorOf.new(Opcode.FloatSign, typeArgs,
		Function.sig(ft, Int.getType(false, 1)), (), V3Op.unimplemented_error);
	def opExponent = OperatorOf.new(Opcode.FloatExponent, typeArgs,
		Function.sig(ft, Int.getType(true, ftc.exp_width)), (), V3Op.unimplemented_error);
	def opFraction = OperatorOf.new(Opcode.FloatFraction, typeArgs,
		Function.sig(ft, Int.getType(false, ftc.fraction_width)), (), V3Op.unimplemented_error);

	def opAbs = OperatorOf.new(Opcode.FloatAbs, typeArgs, unopSig, (), V3Op.unimplemented_error);
	def opCeil = OperatorOf.new(Opcode.FloatCeil, typeArgs, unopSig, (), V3Op.unimplemented_error);
	def opFloor = OperatorOf.new(Opcode.FloatFloor, typeArgs, unopSig, (), V3Op.unimplemented_error);
	def opSqrt = OperatorOf.new(Opcode.FloatSqrt, typeArgs, unopSig, (), V3Op.unimplemented_error);
	def opPow = OperatorOf.new(Opcode.FloatPow, typeArgs, binopSig, (), V3Op.unimplemented_error);
	def opLog = OperatorOf.new(Opcode.FloatLog, typeArgs, unopSig, (), V3Op.unimplemented_error);
	def opExp = OperatorOf.new(Opcode.FloatExp, typeArgs, unopSig, (), V3Op.unimplemented_error);

	def opEqual = OperatorOf.new(Opcode.FloatEq, typeArgs, cmpSig, (), V3Op.unimplemented_error);
	def opNotEqual = OperatorOf.new(Opcode.FloatNe, typeArgs, cmpSig, (), V3Op.unimplemented_error);
	def opLt = OperatorOf.new(Opcode.FloatLt, typeArgs, cmpSig, (), V3Op.unimplemented_error);
	def opLteq = OperatorOf.new(Opcode.FloatLteq, typeArgs, cmpSig, (), V3Op.unimplemented_error);
	def opGt = V3Op.newVstSugar(VstOperator.FloatGt, [ft], [ft, ft], Bool.TYPE);
	def opGteq = V3Op.newVstSugar(VstOperator.FloatGteq, [ft], [ft, ft], Bool.TYPE);
}
