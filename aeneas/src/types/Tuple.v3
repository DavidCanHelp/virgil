// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility methods for working with the representation of tuples in the compiler
component Tuple {
	def TYPECON = Tuple_TypeCon.new();

	def toTypeList(paramType: Type) -> List<Type> {
		if (paramType == null || paramType == Void.TYPE) return null;
		if (paramType.typeCon == TYPECON) return paramType.nested;
		return List.new(paramType, null);
	}
	def toTypeArray(paramType: Type) -> Array<Type> {
		if (paramType == null || paramType == Void.TYPE) return [];
		if (paramType.typeCon == TYPECON) return Lists.toArray(paramType.nested);
		return [paramType];
	}
	def newType(types: List<Type>) -> Type {
		return TYPECON.create(types);
	}
}

class Tuple_TypeCon extends TypeCon {
	new() : super("tuple", V3Kind.TUPLE, -1, TypeUtil.globalCache) {
		singleton = Void.TYPE; // zero-arg tuple == void
	}

	def create1(t: Type) -> Type {
		return t;
	}
	def renderType(buffer: StringBuffer, list: List<Type>) -> StringBuffer {
		if (list == null) {
			buffer.puts("void");
		} else if (list.tail == null) {
			list.head.render(buffer);
		} else {
			buffer.putc('(');
			buffer.appendCommaList(list, Type.render);
			buffer.putc(')');
		}
		return buffer;
	}
	def renderTypeRef(buffer: StringBuffer, list: List<TypeRef>) -> StringBuffer {
		if (list == null) {
			buffer.puts("void");
		} else if (list.tail == null) {
			list.head.render(buffer);
		} else {
			buffer.putc('(');
			buffer.appendCommaList(list, TypeRef.render);
			buffer.putc(')');
		}
		return buffer;
	}
}

class Tuple_Value extends Val {
	def values: Array<Val>;
	new(values) { }
	def equals(other: Val) -> bool {
		if (other == this) return true;
		if (other == Values.BOTTOM) {
			for (v in values) if (!Values.equal(v, Values.BOTTOM)) return false;
			return true;
		}
		if (! Tuple_Value.?(other)) return false;
		var otuple = Tuple_Value.!(other);
		for (i = 0; i < values.length; i++) {
			if (!Values.equal(values(i), otuple.values(i))) return false;
		}
		return true;
	}
}
