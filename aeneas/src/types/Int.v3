// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility methods for working with ints, including parsing and rendering,
// as well as the representation of the "int" type in the compiler
component Int {
	def MAX_WIDTH = 64;
	private def cache = Array<IntType>.new(2 * MAX_WIDTH + 1);
	def TYPE      = getType(true, 32);
	def TYPECON   = Int_TypeCon.!(TYPE.typeCon);
	def TYPE_LIST = List.new(Type.!(TYPE), null);
	def ONE       = Box.new(1);
	def TWO       = Box.new(2);
	def FOUR      = Box.new(4);
	def MINUS_1   = Box.new(-1);
	def MAX_VALUE = 2147483647;
	def MAX_VALUE_DIV_10 = 214748364;
	def MAX_VALUE_MOD_10 = 7;
	def MIN_VALUE = -2147483648;
	def MIN_VALUE_DIV_10 = -214748364;
	def MIN_VALUE_MOD_10 = 8;

	def getType(signed: bool, width: int) -> IntType {
		if (width <= 0 || width > MAX_WIDTH) return null;
		var index = if (signed, width, width + MAX_WIDTH);
		var t = cache(index);
		if (t == null) t = cache(index) = IntType.!(Int_TypeCon.new(byte.!(width), signed).singleton);
		return t;
	}
	def getTypeCon(signed: bool, width: int) -> Int_TypeCon {
		var t = getType(signed, width);
		return if(t != null, Int_TypeCon.!(t.typeCon));
	}
	def lookupFsi(name: string, signed: bool) -> Int_TypeCon {
		if (name.length < 2 || name.length > 3) return null;
		var width = name(1) - int.!('0');
		if (width < 1 || width > 9) return null;
		if (name.length == 3) {
			var low = name(2) - int.!('0');
			if (low < 0 || low > 9) return null;
			width = width * 10 + low;
		}
		return getTypeCon(signed, width);
	}
	def unbox(val: Val) -> int {
		if (val == null) return 0;
		return Box<int>.!(val).val;
	}
	def box(val: int) -> Box<int> {
		return Box.new(val);
	}
	def newMap<V>() -> HashMap<int, V> {
		return HashMap<int, V>.new(int.!<int>, int.==);
	}
	def parseDecimal(a: Array<byte>) -> Box<int> {
		if (a.length == 0) return null;
		var ch = a(0), r: Parsed<int>;
		if (ch == '-') r = parseNegDecimal(a, 0);
		else if (ch < '0' || ch > '9') return null;
		else r = parsePosDecimal(a, 0);
		if (r.passed && r.length == a.length) return box(r.val);
		return null;
	}
	// note: assumes pos < a.length
	def parsePosDecimal(a: Array<byte>, pos: int) -> Parsed<int> {
		var v0 = a(pos), passed = true;
		if (v0 == '0') {
			var p1 = pos + 1;
			if (p1 == a.length || a(p1) - '0' > 9) return Parsed.new(true, 1, 0);
			passed = false;
		}
		var accum = v0 - u32.!('0');
		if (accum > 9) return error(0);
		var max = a.length, i = pos + 1;
		while (i < max) {
			var d = a(i) - u32.!('0');
			if (d > 9) break;
			if (accum >= MAX_VALUE_DIV_10) {  // check for overflow
				if (accum > MAX_VALUE_DIV_10) passed = false;
				else if (d > MAX_VALUE_MOD_10) passed = false;
			}
			accum = accum * 10 + d;
			i++;
		}
		return Parsed.new(passed, i - pos, int.!(accum));
	}
	// note: assumes a(pos) == '-'
	def parseNegDecimal(a: Array<byte>, pos: int) -> Parsed<int> {
		var p1 = pos + 1, passed = true;
		if (p1 >= a.length) return error(1);
		var v1 = a(p1);
		if (v1 == '0') passed = false;
		else if (v1 < '1' || v1 > '9') return error(1);

		var max = a.length, accum = int.!('0') - v1, i = pos + 2;
		while (i < max) {
			var d: byte = a(i) - '0'; // XXX: use u32 to avoid zero extension
			if (d > 9) break;
			if (accum <= MIN_VALUE_DIV_10) {  // check for overflow
				if (accum < MIN_VALUE_DIV_10) passed = false;
				else if (d > MIN_VALUE_MOD_10) passed = false;
			}
			accum = accum * 10 - d;
			i++;
		}
		return Parsed.new(passed, i - pos, accum);
	}
	private def error(len: int) -> Parsed<int> {
		return Parsed.new(false, len, 0);
	}
	def min(a: int, b: int) -> int {
		return if(a < b, a, b);
	}
	// convert a width and a signed-ness into the name of the integer type
	def name(width: byte, signed: bool) -> string {
		if (width == 16 && signed) return "short";
		if (width == 32 && signed) return "int";
		if (width == 64 && signed) return "long";
		if (width == 8 && !signed) return "byte";
		if (width < 10) return [if(signed, 'i', 'u'), byte.!('0' + width)];
		return [if(signed, 'i', 'u'), byte.!('0' + (width / 10)), byte.!('0' + (width % 10))];
	}
}
// Utility methods for working with longs.
component Long {
	def TYPE = Int.getType(true, 64);
	def unboxSU(val: Val, signed: bool) -> long {
		if (val == null) return 0;
		if (Box<long>.?(val)) return Box<long>.!(val).val;
		if (Box<int>.?(val)) {
			var v = Box<int>.!(val).val;
			return if(signed, v, u32.!(v));
		}
		System.error("UnboxError", "expected integer box");
		return 0L;
	}
	def split(val: long) -> (int, int) {
		return (int.!(val #>> 32), int.!(val));
	}
	def box(val: long) -> Box<long> {
		return if(val != 0, Box.new(val));
	}
}
// Type constructor for integral types, including a width and a signed-ness attribute.
class Int_TypeCon extends Member_TypeCon {
	new(width: byte, signed: bool) super(Int.name(width, signed), V3Kind.INT, 0, TypeUtil.globalCache) {
		singleton = IntType.new(width, signed, this);
	}
	def lookupMember(t: Type, name: string, receiver: bool) -> Member {
		return IntType.!(singleton).lookupMember(t, name, receiver);
	}
	def lookupInfix0(infix: byte) -> Operator {
		return lookupInfix(infix, singleton);
	}
	def lookupInfix(infix: byte, rtype: Type) -> Operator {
		return IntType.!(singleton).lookupInfix(infix, rtype);
	}
}
class IntType extends Type {
	def width: byte;  // width in bits (1-64)
	def signed: bool; // true if signed, false if unsigned
	var cache: Array<Operator>; // cache of operators
	var unopTypes: Array<Type>;
	var binopTypes: Array<Type>;
	var max: Val;
	var min: Val;

	new(width, signed, typeCon: Int_TypeCon) super(if(signed, width, 65 + width), typeCon, null) {
		if (width <= 32) {
			min = if(signed, box(-1 #<< (width - 1)));
			max = box(-1 ^ (0xFFFFFFFF #<< (width - if(signed, 1))));
		} else {
			min = if(signed, boxL(-1L #<< (width - 1)));
			max = boxL(-1L ^ (0xFFFFFFFFFFFFFFFFL #<< (width - if(signed, 1))));
		}
	}
	def box(v: int) -> Val {
		if (v == 0) return null;
		if (width > 32) return Box<long>.new(v);
		return Box.new(v);
	}
	def boxL(v: long) -> Val {
		if (v == 0) return null;
		return Box.new(v);
	}
	def byteSize() -> int {
		if (width <= 8) return 1;
		if (width <= 16) return 2;
		if (width <= 32) return 4;
		return 8;
	}
	def lookupMember(t: Type, name: string, receiver: bool) -> Member {
		if (receiver) return null;
		if (Strings.equal(name, "min")) return Members.valMember(this, min, false);
		if (Strings.equal(name, "max")) return Members.valMember(this, max, false);
		return null;
	}
	def lookupInfix0(infix: byte) -> Operator {
		return lookupInfix(infix, this);
	}
	def lookupInfix(infix: byte, rtype: Type) -> Operator {
		if (rtype == this && cache != null) {
			var op = cache(infix);
			if (op != null) return op;
		}
		match (infix) {
			V3Infix.Equal:    return lookupCompare(infix, rtype, Opcode.Equal);
			V3Infix.NotEqual: return lookupCompare(infix, rtype, Opcode.NotEqual);
			V3Infix.Add:  return lookupArith(infix, rtype, Opcode.IntAdd);
			V3Infix.Sub:  return lookupArith(infix, rtype, Opcode.IntSub);
			V3Infix.Mul:  return lookupArith(infix, rtype, Opcode.IntMul);
			V3Infix.Div:  return lookupArith(infix, rtype, Opcode.IntDiv);
			V3Infix.Mod:  return lookupArith(infix, rtype, Opcode.IntMod);
			V3Infix.And:  return lookupArith(infix, rtype, Opcode.IntAnd);
			V3Infix.Or:   return lookupArith(infix, rtype, Opcode.IntOr);
			V3Infix.Xor:  return lookupArith(infix, rtype, Opcode.IntXor);
			V3Infix.Shl:  return lookupArith(infix, rtype, Opcode.IntShl);
			V3Infix.Shr:  return lookupArith(infix, rtype, Opcode.IntShr);
			V3Infix.Lt:   return lookupCompare(infix, rtype, Opcode.IntLt);
			V3Infix.Gt:   return lookupCompare(infix, rtype, Opcode.IntGt);
			V3Infix.Lteq: return lookupCompare(infix, rtype, Opcode.IntLteq);
			V3Infix.Gteq: return lookupCompare(infix, rtype, Opcode.IntGteq);
			V3Infix.QShl: return lookupShift(infix, Opcode.IntShl);
			V3Infix.QSar: return lookupShift(infix, if(signed, Opcode.IntSar, Opcode.IntShr));
			V3Infix.QShr: return lookupShift(infix, if(signed, Opcode.IntSzr, Opcode.IntShr));
		}
		return null;
	}
	def unsigned() -> IntType {
		return if(signed, Int.getType(false, width), this);
	}
	def wider(rtype: Type) -> IntType {
		if (rtype == this) return this;
		if (IntType.?(rtype)) {
			var that = IntType.!(rtype);
			if (this.width < that.width) {
				if (this.signed == that.signed) return that;
				if (this.signed) return null;
				return that;
			} else if (this.width == that.width) {
				if (this.signed == that.signed) return that;
				return null;
			} else {
				if (this.signed == that.signed) return this;
				if (that.signed) return null;
				return this;
			}
		}
		return null;
	}
	def lookupArith(infix: byte, rtype: Type, opcode: Opcode) -> Operator {
		var wtype = wider(rtype);
		if (wtype == null) wtype = this;
		return wtype.getCached(infix, opcode, wtype);
	}
	def lookupShift(infix: byte, opcode: Opcode) -> Operator {
		if (cache != null && cache(infix) != null) return cache(infix);
		if (unopTypes == null) unopTypes = [Type.!(this)];
		var binopTypes = [this, Type.!(Byte.TYPE)];
		var resultType = this;
		if (width <= 32) {
			var syntax = V3OpSyntax.new(opcode, V3Infix.names(infix), emitSsa);
			var eval = if(signed, eval_i32, eval_u32);
			return setCache(infix, OperatorOf.new(opcode, unopTypes, binopTypes, resultType, syntax, eval));
		} else {
			var syntax = V3OpSyntax.new(opcode, V3Infix.names(infix), emitSsa64);
			var eval = if(signed, eval_i64, eval_u64);
			return setCache(infix, OperatorOf.new(opcode, unopTypes, binopTypes, resultType, syntax, eval));
		}
	}
	def lookupCompare(infix: byte, rtype: Type, opcode: Opcode) -> Operator {
		var wtype = wider(rtype);
		if (wtype == null) {
			if (IntType.?(rtype)) return lookupMixedSignCmp(rtype, opcode);
			else wtype = this;
		}
		return wtype.getCached(infix, opcode, Bool.TYPE);
	}
	def lookupMixedSignCmp(rtype: Type, opcode: Opcode) -> Operator {
		var syntax = V3OpSyntax.new(opcode, Opcode.IntMixedSignCmp.name, emitMixedSignCmp);
		return OperatorOf<V3OpSyntax>.new(Opcode.IntMixedSignCmp, [this, rtype], [this, rtype], Bool.TYPE, syntax, evalMixedSignCmp);
	}
	def getCached(infix: byte, opcode: Opcode, resultType: Type) -> Operator {
		if (infix == V3Infix.Equal) return setCache(infix, V3Op.newEqual(this));
		if (infix == V3Infix.NotEqual) return setCache(infix, V3Op.newNotEqual(this));
		if (unopTypes == null) unopTypes = [Type.!(this)];
		if (binopTypes == null) binopTypes = [this, Type.!(this)];
		if (width <= 32) {
			var syntax = V3OpSyntax.new(opcode, V3Infix.names(infix), emitSsa);
			var eval = if(signed, eval_i32, eval_u32);
			return setCache(infix, OperatorOf.new(opcode, unopTypes, binopTypes, resultType, syntax, eval));
		} else {
			var syntax = V3OpSyntax.new(opcode, V3Infix.names(infix), emitSsa64);
			var eval = if(signed, eval_i64, eval_u64);
			return setCache(infix, OperatorOf.new(opcode, unopTypes, binopTypes, resultType, syntax, eval));
		}
	}
	def setCache(infix: byte, op: Operator) -> Operator {
		if (cache == null) cache = Array.new(V3Infix.NumOps);
		return cache(infix) = op;
	}
	def isU32() -> bool {
		return width == 32 && !signed;
	}
	def isU64() -> bool {
		return width == 64 && !signed;
	}
	// return inverse of an operator {op}, if it exists, {null} otherwise
	def inverse(op: Operator) -> Operator {
		match (op.opcode) {
			IntLt:   return lookupInfix0(V3Infix.Gteq);
			IntGt:   return lookupInfix0(V3Infix.Lteq);
			IntLteq: return lookupInfix0(V3Infix.Gt);
			IntGteq: return lookupInfix0(V3Infix.Lt);
			_: return null;
		}
	}
	// return a commuted operator {op'} where {x op y == y op' x},
	// if it exists, {null} otherwise
	def commute(op: Operator) -> Operator {
		match (op.opcode) {
			IntAdd,
			IntMul,
			IntAnd,
			IntOr,
			IntXor: return op;
			IntLt:   return lookupInfix0(V3Infix.Gt);
			IntGt:   return lookupInfix0(V3Infix.Lt);
			IntLteq: return lookupInfix0(V3Infix.Gteq);
			IntGteq: return lookupInfix0(V3Infix.Lteq);
			_: return null;
		}
	}
	def emitSsa64(b: SsaBuilder, op: Operator, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) {
			// try folding x op y
			if (SsaValue.?(y)) return b.fold2(op, SsaValue.!(x).val, SsaValue.!(y).val);
			var commuted = commute(op);
			if (commuted != null) return b.add(commuted, [y, x], 0); // put constants on right
		}
		// TODO: facts propagation for 64-bit operations
		return b.add(op, [x, y], 0);
	}
	def emitSsa(b: SsaBuilder, op: Operator, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) {
			// try folding x op y
			if (SsaValue.?(y)) return b.fold2(op, SsaValue.!(x).val, SsaValue.!(y).val);
			var commuted = commute(op);
			if (commuted != null) return emitSsaN(b, commuted, y, x); // put constants on right
		}
		return emitSsaN(b, op, x, y);
	}
	def emitSsaN(b: SsaBuilder, op: Operator, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		var facts = if(signed, 0, Facts.V_NON_NEGATIVE);
		if (SsaValue.?(y) && width <= 32) {  // TODO: strength reduce 64 bit ops
			var yv = y.unbox<int>();
			// strength reduce x op K
			match (op.opcode) {
				IntAdd: if (yv == 0) return x; // x + 0 == x
				IntSub: if (yv == 0) return x; // x - 0 == x
				IntMul: {
					if (yv == 0) return y; // x * 0 == 0
					if (yv == 1) return x; // x * 1 == 1
					if (yv == 2) return emitSsaN(b, lookupInfix0(V3Infix.Add), x, x);
					if ((yv & (yv - 1)) == 0) {
						// x * 2^k == x << k
						return emitSsaN(b, lookupInfix0(V3Infix.Shl), x, b.graph.intConst(IntOp.log(yv)));
					}
				}
				IntDiv: {
					if (yv == 0) return b.addThrow(b.source, V3Exception.DivideByZero); // fold x / 0
					if (yv == 1) return x; // x / 1 == x
					if (yv == -1 && signed) return emitSsaN(b, lookupInfix0(V3Infix.Sub), b.graph.zeroConst(), x); // x / -1 == 0 - x
					if ((yv & (yv - 1)) == 0 && x.checkFact(Facts.V_NON_NEGATIVE)) {
						// x / 2^k == x >> k
						return emitSsaN(b, lookupInfix0(V3Infix.Shr), x, b.graph.intConst(IntOp.log(yv)));
					}
					facts = facts | Facts.O_SAFE_DIVIDE;
				}
				IntMod: {
					if (yv == 0) return b.addThrow(b.source, V3Exception.DivideByZero); // fold x % 0
					if (yv == 1 || (yv == -1 && signed)) return b.graph.zeroConst(); // x % +/-1 == 0
					if ((yv & (yv - 1)) == 0 && x.checkFact(Facts.V_NON_NEGATIVE)) {
						// x % 2^k == x & (2^k - 1)
						return emitSsaN(b, lookupInfix0(V3Infix.And), x, b.graph.intConst(yv - 1));
					}
					facts = facts | Facts.O_SAFE_DIVIDE;
				}
				IntAnd: {
					if (yv == 0) return y; // x & 0 == 0
					if (yv == -1) return x; // x & -1 == x
					if (yv >= 0) facts = facts | Facts.V_NON_NEGATIVE;
				}
				IntOr: {
					if (yv == 0) return x; // x | 0 == x
					if (yv == -1) return y; // x | -1 == -1
					if (yv < 0) facts = facts | Facts.V_BELOW_ZERO;
				}
				IntXor: {
					if (yv == 0) return y; // x ^ 0 == x
					if (yv >= 0) facts = facts | Facts.V_NON_NEGATIVE;
				}
				IntSar: {
					if (yv == 0) return x;
					if (yv < 0 || yv >= width) {
						if (x.checkFact(Facts.V_NON_NEGATIVE)) return b.graph.zeroConst();
						if (x.checkFact(Facts.V_BELOW_ZERO)) return b.graph.intConst(-1);
						y = b.graph.intConst(width - 1);
					}
					facts = facts | Facts.O_NO_SHIFT_CHECK;
				}
				IntShl, IntShr, IntSzr: {
					if (yv == 0) return x;
					if (yv < 0 || yv >= width) return b.graph.zeroConst();
					facts = facts | Facts.O_NO_SHIFT_CHECK;
				}
				_: ;
			}
		}
		// propagate facts and perform other strength reductions for x op y.
		match (op.opcode) {
			IntSub: if (x == y) return b.graph.zeroConst();
			IntDiv: {
				if (x == y && x.checkFact(Facts.V_NON_ZERO)) return b.graph.intConst(1);
				if (y.checkFact(Facts.V_NON_ZERO)) facts = facts | Facts.O_SAFE_DIVIDE;
				facts = facts | (x.facts & y.facts & Facts.V_NON_NEGATIVE); // nonneg(x) /% nonneg(y) => nonneg
			}
			IntMod: {
				if (y.checkFact(Facts.V_NON_ZERO)) facts = facts | Facts.O_SAFE_DIVIDE;
			}
			IntAnd: {
				if (x == y) return x;
				facts = facts | (x.facts | y.facts) & Facts.V_NON_NEGATIVE;
			}
			IntOr: {
				if (x == y) return x;
				facts = facts | (x.facts | y.facts) & Facts.V_NON_ZERO;
				facts = facts | (x.facts & y.facts) & Facts.V_NON_NEGATIVE;
			}
			IntXor: if (x == y) return b.graph.zeroConst();
			IntSar: {
				facts = facts | (x.facts & Facts.V_NON_NEGATIVE);
			}
			IntSzr, IntShr: {
				if((y.facts & Facts.V_NON_ZERO) != 0) facts = facts | Facts.V_NON_NEGATIVE;
				facts = facts | (x.facts & Facts.V_NON_NEGATIVE);
			}
			_: ;
		}
		return b.add(op, [x, y], facts);
	}
	def emitSignedPromotion(b: SsaBuilder, st: IntType, ut: IntType, x: SsaInstr) -> SsaInstr {
		if (st.width != ut.width) {
			var from = Int.getType(false, st.width);
			return b.opIntConvert(V3Op.newIntConvert(from, ut), x);
		}
		return x;
	}
	def emitMixedSignCmp(b: SsaBuilder, op: Operator, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		var syntax = OperatorOf<V3OpSyntax>.!(op).attribute;
		var lt = IntType.!(op.typeArgs(0)), rt = IntType.!(op.typeArgs(1));
		var ut = lt, st = rt, ui = x, si = y;
		if (lt.signed) {
			ut = rt;
			st = lt;
			ui = y;
			si = x;
			x = emitSignedPromotion(b, lt, rt, x);
		} else {
			y = emitSignedPromotion(b, rt, lt, y);
		}
		match (syntax.opcode) {
			Equal: {
				return checkPosAnd(b, si, st, b.opEqual(ut, x, y));
			}
			NotEqual: {
				return checkNegOr(b, si, st, b.opNotEqual(ut, x, y));
			}
			IntLt: {
				var cmp = emitSsaN(b, ut.lookupInfix(V3Infix.Lt, ut), x, y);
				if (lt.signed) return checkNegOr(b, si, lt, cmp);
				else return checkPosAnd(b, si, rt, cmp);
			}
			IntLteq: {
				var cmp = emitSsaN(b, ut.lookupInfix(V3Infix.Lteq, ut), x, y);
				if (lt.signed) return checkNegOr(b, si, lt, cmp);
				else return checkPosAnd(b, si, rt, cmp);
			}
			IntGt: {
				var cmp = emitSsaN(b, ut.lookupInfix(V3Infix.Lt, ut), y, x);
				if (lt.signed) return checkPosAnd(b, si, lt, cmp);
				else return checkNegOr(b, si, rt, cmp);
			}
			IntGteq: {
				var cmp = emitSsaN(b, ut.lookupInfix(V3Infix.Lteq, ut), y, x);
				if (lt.signed) return checkPosAnd(b, si, lt, cmp);
				else return checkNegOr(b, si, rt, cmp);
			}
			_: ;
		}
		return b.bk(false);
	}
	def checkPosAnd(b: SsaBuilder, i: SsaInstr, it: IntType, other: SsaInstr) -> SsaInstr {
		var cmp = emitSsa(b, it.lookupInfix(V3Infix.Gteq, it), i, b.graph.nullConst(it));
		return b.opBoolAnd(V3Op.opBoolAnd, cmp, other);
	}
	def checkNegOr(b: SsaBuilder, i: SsaInstr, it: IntType, other: SsaInstr) -> SsaInstr {
		var cmp = emitSsa(b, it.lookupInfix(V3Infix.Lt, it), i, b.graph.nullConst(it));
		return b.opBoolOr(V3Op.opBoolOr, cmp, other);
	}
	def evalMixedSignCmp(v: V3OpSyntax, a: Arguments) -> Result {
		return a.throw(V3Exception.InternalError, "nonfoldable mixed-sign compare");
	}
	def eval_i32(v: V3OpSyntax, a: Arguments) -> Result {
		var x = unbox_i32(a.getArg(0)), y = unbox_i32(a.getArg(1));
		var r: int;
		match (v.opcode) {
			IntAdd:  r = (x + y);
			IntSub:  r = (x - y);
			IntMul:  r = (x * y);
			IntDiv:  { if (y == 0) return a.throw(V3Exception.DivideByZero, null); r = (x / y); }
			IntMod:  { if (y == 0) return a.throw(V3Exception.DivideByZero, null); r = (x % y); }
			IntAnd:  r = (x & y);
			IntOr:   r = (x | y);
			IntXor:  r = (x ^ y);
			IntShl:  r = (x #<< y);
			IntSar:  r = (x >> byte.!(y));
			IntShr:  r = (x #>> y);
			IntSzr:  r = ((x & ((1 << width) - 1)) >>> byte.!(y));
			IntLt:   return Bool.box(x < y);
			IntGt:   return Bool.box(x > y);
			IntLteq: return Bool.box(x <= y);
			IntGteq: return Bool.box(x >= y);
			IntMixedSignCmp: return a.throw(V3Exception.Unimplemented, null);
			_: ;
		}
		return box_i32(r);
	}
	def eval_u32(v: V3OpSyntax, a: Arguments) -> Result {
		var x = unbox_u32(a.getArg(0)), y = unbox_u32(a.getArg(1));
		var r: u32;
		match (v.opcode) {
			IntAdd:  r = (x + y);
			IntSub:  r = (x - y);
			IntMul:  r = (x * y);
			IntDiv:  { if(y == 0) return a.throw(V3Exception.DivideByZero, null); r = (x / y); }
			IntMod:  { if(y == 0) return a.throw(V3Exception.DivideByZero, null); r = (x % y); }
			IntAnd:  r = (x & y);
			IntOr:   r = (x | y);
			IntXor:  r = (x ^ y);
			IntShl:  r = (x #<< y);
			IntSar:  r = (x >> byte.!(y));
			IntShr:  r = (x #>> y);
			IntSzr:  r = (x >>> byte.!(y));
			IntLt:   return Bool.box(x < y);
			IntGt:   return Bool.box(x > y);
			IntLteq: return Bool.box(x <= y);
			IntGteq: return Bool.box(x >= y);
			IntMixedSignCmp: return a.throw(V3Exception.Unimplemented, null);
			_: ;
		}
		return box_u32(r);
	}
	def eval_i64(v: V3OpSyntax, a: Arguments) -> Result {
		var x = unbox_i64(a.getArg(0)), y = unbox_i64(a.getArg(1));
		var r: long;
		match (v.opcode) {
			IntAdd:  r = (x + y);
			IntSub:  r = (x - y);
			IntMul:  r = (x * y);
			IntDiv:  { if(y == 0) return a.throw(V3Exception.DivideByZero, null); r = (x / y); }
			IntMod:  { if(y == 0) return a.throw(V3Exception.DivideByZero, null); r = (x % y); }
			IntAnd:  r = (x & y);
			IntOr:   r = (x | y);
			IntXor:  r = (x ^ y);
			IntShl:  r = (x #<< y);
			IntSar:  r = (x >> byte.!(y));
			IntShr:  r = (x #>> y);
			IntSzr:  r = ((x & ((1L << width) - 1)) >>> byte.!(y));
			IntLt:   return Bool.box(x < y);
			IntGt:   return Bool.box(x > y);
			IntLteq: return Bool.box(x <= y);
			IntGteq: return Bool.box(x >= y);
			IntMixedSignCmp: return a.throw(V3Exception.Unimplemented, null);
			_: ;
		}
		return box_i64(r);
	}
	def eval_u64(v: V3OpSyntax, a: Arguments) -> Result {
		var x = unbox_u64(a.getArg(0)), y = unbox_u64(a.getArg(1));
		var r: u64;
		match (v.opcode) {
			IntAdd:  r = (x + y);
			IntSub:  r = (x - y);
			IntMul:  r = (x * y);
			IntDiv:  { if(y == 0) return a.throw(V3Exception.DivideByZero, null); r = (x / y); }
			IntMod:  { if(y == 0) return a.throw(V3Exception.DivideByZero, null); r = (x % y); }
			IntAnd:  r = (x & y);
			IntOr:   r = (x | y);
			IntXor:  r = (x ^ y);
			IntShl:  r = (x #<< y);
			IntSar,
			IntShr,
			IntSzr:  r = (x #>> y);
			IntLt:   return Bool.box(x < y);
			IntGt:   return Bool.box(x > y);
			IntLteq: return Bool.box(x <= y);
			IntGteq: return Bool.box(x >= y);
			IntMixedSignCmp: return a.throw(V3Exception.Unimplemented, null);
			_: ;
		}
		return box_i64(long.!(r));
	}
	def unbox_u32(v: Val) -> u32 {
		if (v == null) return u32.!(0);
		return u32.!(Box<int>.!(v).val);
	}
	def unbox_i32(v: Val) -> i32 {
		if (v == null) return 0;
		return Box<int>.!(v).val;
	}
	def unbox_i64(v: Val) -> i64 {
		if (v == null) return 0;
		if (Box<int>.?(v)) return Box<int>.!(v).val;
		return Box<long>.!(v).val;
	}
	def unbox_u64(v: Val) -> u64 {
		if (v == null) return 0;
		if (Box<int>.?(v)) return u32.!(Box<int>.!(v).val);
		return u64.!(Box<long>.!(v).val);
	}
	def box_u32(u: u32) -> Val {
		return box_i32(int.!(u));
	}
	def box_i32(v: int) -> Val {
		if (v == 0) return null;
		v = if(width < 32, trunc_32(v), v);
		return if(v != 0, Box.new(v));
	}
	def box_i64(v: long) -> Val {
		if (v == 0) return null;
		v = if(width < 64, trunc_64(v), v);
		return if(v != 0, Box.new(v));
	}
	def trunc_32(v: int) -> int {
		var x = 0xFFFFFFFF #<< width;
		v = v ^ (v & x); // mask off higher bits
		if (signed && (v & (x #>> 1)) != 0) v = v | x; // sign extend
		return v;
	}
	def trunc_64(v: long) -> long {
		var x = 0xFFFFFFFFFFFFFFFFL #<< width;
		v = v ^ (v & x); // mask off higher bits
		if (signed && (v & (x #>> 1)) != 0) v = v | x; // sign extend
		return v;
	}
}
// All functionality relating to integer operations.
component IntOp {
	// computes the log of a power of two integer {v}
	def log(v: int) -> int {
		// XXX: faster integer logarithm
		for (i < 32) {
			if ((1 #<< i) == v) return i;
		}
		return 32;
	}
	def get(op: Operator, infix: byte) -> Operator {
		return IntType.!(op.paramTypes(0)).lookupInfix0(infix);
	}
	def evalConversion(t1: Type, t2: Type, val: Val) -> TypeCast {
		if (t1 == t2) return TypeSystem.TRUE;
		var i1 = IntType.!(t1), i2 = IntType.!(t2);
		if (i1.width < i2.width) {
			if (i1.width <= 32 && i2.width > 32) {
				var v = Long.unboxSU(val, i1.signed);
				return TypeCast.new(CastOp.VALUE, Box.new(v));
			}
			return TypeSystem.TRUE;
		}
		return TypeCast.new(CastOp.VALUE, evalTruncate(i2, i1.signed, val));
	}
	def evalTruncate(t: IntType, signed: bool, val: Val) -> Val {
		if (val == null) return val;
		if (t.width <= 32) {
			if (Box<int>.?(val)) {
				var v = Box<int>.!(val).val, r = t.trunc_32(v);
				return if(r == v, val, Box.new(r));
			} else {
				var v = int.!(Box<long>.!(val).val), r = t.trunc_32(v);
				return Box.new(r);
			}
		}
		return Box.new(t.trunc_64(Long.unboxSU(val, signed)));
	}
}
