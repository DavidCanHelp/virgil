// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def MAX_VALUE_DIV_10 = 214748364;
def MAX_VALUE_MOD_10 = 7;
def MIN_VALUE_DIV_10 = -214748364;
def MIN_VALUE_MOD_10 = 8;
def ZERO_CHAR: u32 = '0';
// Utility methods for working with ints, including parsing and rendering,
// as well as the representation of the "int" type in the compiler
component Int {
	def MAX_WIDTH = 64;
	private def cache = Array<IntType>.new(2 * MAX_WIDTH + 1);
	def TYPE      = getType(true, 32);
	def ARRAY_T: Array<Type> = [TYPE];
	def ONE       = Box.new(1);
	def TWO       = Box.new(2);
	def FOUR      = Box.new(4);
	def MINUS_1   = Box.new(-1);
	def MAX_VALUE = 2147483647;
	def MIN_VALUE = -2147483648;
	def VIEW_TYPE_PARAM_LIST = List.new(TypeUtil.newTypeParamWithConstraint(TypeUtil.BUILTIN_TOKEN, TypeUtil.globalCache,
		true, checkIntViewTypeArg(-1, _, _)), null);
	def VIEW_TYPE_PARAM_LIST_32 = List.new(TypeUtil.newTypeParamWithConstraint(TypeUtil.BUILTIN_TOKEN, TypeUtil.globalCache,
		true, checkIntViewTypeArg(32, _, _)), null);
	def VIEW_TYPE_PARAM_LIST_64 = List.new(TypeUtil.newTypeParamWithConstraint(TypeUtil.BUILTIN_TOKEN, TypeUtil.globalCache,
		true, checkIntViewTypeArg(64, _, _)), null);
	def QUERY_TYPE_PARAM_LIST = List.new(TypeUtil.newTypeParamWithConstraint(TypeUtil.BUILTIN_TOKEN, TypeUtil.globalCache,
		false, checkIntOpTypeArg("query", _, _)), null);
	def CAST_TYPE_PARAM_LIST = List.new(TypeUtil.newTypeParamWithConstraint(TypeUtil.BUILTIN_TOKEN, TypeUtil.globalCache,
		false, checkIntOpTypeArg("cast", _, _)), null);

	def getType(signed: bool, width: int) -> IntType {
		if (width <= 0 || width > MAX_WIDTH) return null;
		var index = if (signed, width, width + MAX_WIDTH);
		var t = cache[index];
		if (t == null) t = cache[index] = IntType.!(Int_TypeCon.new(byte.!(width), signed).singleton);
		return t;
	}
	def getTypeCon(signed: bool, width: int) -> Int_TypeCon {
		var t = getType(signed, width);
		return if(t != null, Int_TypeCon.!(t.typeCon));
	}
	def lookupFsi(name: string, signed: bool) -> Int_TypeCon {
		if (name.length < 2 || name.length > 3) return null;
		var width = name[1] - int.!('0');
		if (width < 1 || width > 9) return null;
		if (name.length == 3) {
			var low = name[2] - int.!('0');
			if (low < 0 || low > 9) return null;
			width = width * 10 + low;
		}
		return getTypeCon(signed, width);
	}
	def unbox(val: Val) -> int {
		if (val == null) return 0;
		return Box<int>.!(val).val;
	}
	def box(val: int) -> Box<int> {
		return Box.new(val);
	}
	def newMap<V>() -> HashMap<int, V> {
		return HashMap<int, V>.new(int.!<int>, int.==);
	}
	// convert a width and a signed-ness into the name of the integer type
	def name(width: byte, signed: bool) -> string {
		if (width == 16 && signed) return "short";
		if (width == 32 && signed) return "int";
		if (width == 64 && signed) return "long";
		if (width == 8 && !signed) return "byte";
		if (width < 10) return [if(signed, 'i', 'u'), byte.!('0' + width)];
		return [if(signed, 'i', 'u'), byte.!('0' + (width / 10)), byte.!('0' + (width % 10))];
	}
	def rankOf(width: byte, signed: bool) -> IntRank {
		if (width < 32) return if(signed, IntRank.SUBI32, IntRank.SUBU32);
		if (width == 32) return if(signed, IntRank.I32, IntRank.U32);
		if (width < 64) return if(signed, IntRank.SUBI64, IntRank.SUBU64);
		return if(signed, IntRank.I64, IntRank.U64);
	}
}
// Useful classification of integer sizes for 32 and 64-bit machines.
enum IntRank {
	SUBI32,  // signed, < 32 bits
	I32,     // signed, 32 bit
	SUBI64,  // signed, 32 < bits < 64
	I64,     // signed, 64 bit
	SUBU32,  // unsigned, < 32 bits
	U32,     // unsigned, 32 bits
	SUBU64,  // unsigned, 32 < bits < 64
	U64      // unsigned, 64 bits
}
// Utility methods for working with longs.
component Long {
	def TYPE = Int.getType(true, 64);
	def unboxSU(val: Val, signed: bool) -> long {
		if (val == null) return 0;
		if (Box<long>.?(val)) return Box<long>.!(val).val;
		if (Box<int>.?(val)) {
			var v = Box<int>.!(val).val;
			return if(signed, v, u32.!(v));
		}
		return V3.fail("expected integer box");
	}
	def split(val: long) -> (int, int) {
		return (int.!(val >> 32), int.!(val));
	}
	def box(val: long) -> Box<long> {
		return if(val != 0, Box.new(val));
	}
}
// Type constructor for integral types, including a width and a signed-ness attribute.
class Int_TypeCon extends Member_TypeCon {
	new(width: byte, signed: bool) super(Int.name(width, signed), V3Kind.INT, 0, TypeUtil.globalCache) {
		singleton = IntType.new(width, signed, this);
	}
	def lookupMember(t: Type, name: string, receiver: bool) -> LookupResult {
		return IntType.!(singleton).lookupMember(t, name, receiver);
	}
	def lookupInfix(infix: V3Infix, rtype: Type) -> Operator {
		return IntType.!(singleton).lookupInfix(infix, rtype);
	}
}
class IntType extends Type {
	def width: byte;  // width in bits (1-64)
	def signed: bool; // true if signed, false if unsigned
	def rank = Int.rankOf(width, signed);
	private var cache: IntOpCache;
	var ishift: u5;
	var lshift: u6;
	var max: Val;
	var min: Val;

	new(width, signed, typeCon: Int_TypeCon) super(if(signed, width, 65 + width), typeCon, null) {
		ishift = u5.!(32 - width);
		lshift = u6.!(64 - width);
		if (width <= 32) {
			min = if(signed, box(-1 << (width - byte.!(1))));
			max = box(-1 ^ (0xFFFFFFFF << (width - if(signed, byte.!(1)))));
		} else {
			min = if(signed, boxL(-1L << (width - byte.!(1))));
			max = boxL(-1L ^ (0xFFFFFFFFFFFFFFFFL << (width - if(signed, byte.!(1)))));
		}
	}
	def opcache() -> IntOpCache {
		if (cache == null) return cache = IntOpCache.new(this);
		return cache;
	}
	def box(v: int) -> Val {
		if (v == 0) return null;
		if (width > 32) return Box<long>.new(v);
		return Box.new(v);
	}
	def boxL(v: long) -> Val {
		if (v == 0) return null;
		return Box.new(v);
	}
	def byteSize() -> int {
		if (width <= 8) return 1;
		if (width <= 16) return 2;
		if (width <= 32) return 4;
		return 8;
	}
	def lookupMember(t: Type, name: string, receiver: bool) -> LookupResult {
		if (receiver) return LookupResult.None;
		if (Strings.equal(name, "min")) return LookupResult.Const(this, min);
		if (Strings.equal(name, "max")) return LookupResult.Const(this, max);
		if (Strings.equal(name, "~")) {
			var c = opcache(), op = c.cache[V3Infix.None.tag];
			if (op == null) op = c.cache[V3Infix.None.tag] = V3Op.newVstSugar(VstOperator.IntBitwiseNeg, [this], [this], this);
			return LookupResult.Inst(op, null);
		}
		if (Strings.equal(name, "view")) {
			var l = Int.VIEW_TYPE_PARAM_LIST;
			if (Aeneas.FLOAT.val) {
				if (width == 32) l = Int.VIEW_TYPE_PARAM_LIST_32;
				if (width == 64) l = Int.VIEW_TYPE_PARAM_LIST_64;
			}
			return LookupResult.Inst(V3Op.newVstSugar(VstOperator.IntView, [l.head, t], [l.head], t), l);
		}
		if (Strings.equal(name, "query")) {
			var l = Int.QUERY_TYPE_PARAM_LIST, tp = l.head;
			var op = V3Op.newVstSugar(VstOperator.IntQueryI, [tp, this], [tp], Bool.TYPE);
			return LookupResult.Inst(op, l);
		}
		if (Strings.equal(name, "cast")) {
			var l = Int.CAST_TYPE_PARAM_LIST, tp = l.head;
			var op = V3Op.newVstSugar(VstOperator.IntCastI, [tp, this], [tp], this);
			return LookupResult.Inst(op, l);
		}
		if (Aeneas.FLOAT.val && Strings.equal(name, "truncf")) {
			return LookupResult.Inst(V3Op.newIntTruncF(Float.FLOAT32, t), null);
		}
		if (Aeneas.FLOAT.val && Strings.equal(name, "truncd")) {
			return LookupResult.Inst(V3Op.newIntTruncF(Float.FLOAT64, t), null);
		}
		return LookupResult.None;
	}
	def lookupInfix0(infix: V3Infix) -> Operator {
		return lookupInfix(infix, this);
	}
	def lookupInfix(infix: V3Infix, rtype: Type) -> Operator {
		return opcache().lookupInfix(infix, rtype);
	}
	def unsigned() -> IntType {
		return if(signed, Int.getType(false, width), this);
	}
	def wider(rtype: Type) -> IntType {
		if (rtype == this) return this;
		if (IntType.?(rtype)) {
			var that = IntType.!(rtype);
			if (this.width < that.width) {
				if (this.signed == that.signed) return that;
				if (this.signed) return null;
				return that;
			}
			if (that.width < this.width) {
				if (this.signed == that.signed) return this;
				if (that.signed) return null;
				return this;
			}
		}
		return null;
	}
	def trunc_32(v: int) -> int {
		return if(signed, (v << ishift) >> ishift, (v << ishift) >>> ishift);
	}
	def trunc_u32(v: int) -> int {
		return (v << ishift) >>> ishift;
	}
	def trunc_64(v: long) -> long {
		return if(signed, (v << lshift) >> lshift, (v << lshift) >>> lshift);
	}
	def trunc_u64(v: long) -> long {
		return (v << lshift) >>> lshift;
	}
	def query(ift: IntType, v: Val) -> bool {
		var l = Long.unboxSU(v, ift.signed), itt = this;
		if (ift.signed) {
			if (itt.signed) {
				return trunc_64(l) == l; // sign match
			}
			if (l < 0) return false;
			return trunc_u64(l) == l;
		} else {
			if (itt.signed) {
				var tl = trunc_64(l);
				return tl == l && tl >= 0;
			}
			return trunc_u64(l) == l; // sign match
		}
	}
	def extendsTo(tt: IntType) -> bool {
		var ft = this;
		if (tt == ft) return true;		// identity
		if (tt.width <= ft.width) return false;	// truncation
		if (tt.signed) return true;		// destination is already signed
		return tt.signed == ft.signed;		// signs must match
	}
	def extendsToLong(tt: IntType) -> bool {
		var ft = this;
		return ft.width <= 32 && tt.width > 32;
	}
	def truncatesToInt(tt: IntType) -> bool {
		var ft = this;
		return ft.width > 32 && tt.width <= 32;
	}
}
// A cache of integer arithmetic operators that is referenced from the TypeCon.
class IntOpCache(it: IntType) {
	def typeArgs: Array<Type> = [it];
	def tupleType = Tuple.newType(Lists.cons2(it, it));
	def binopSig = Function.sig(tupleType, it);
	def cmpSig = Function.sig(tupleType, Bool.TYPE);
	def cache = Array<Operator>.new(V3Infix.None.tag + 1);

	def lookupInfix(infix: V3Infix, rtype: Type) -> Operator {
		if (rtype == it) {
			var op = cache[infix.tag];
			if (op != null) return op;
		}
		match (infix) {
			EqEq =>  return lookupCompare(infix, rtype, Opcode.IntEq, VstOperator.IntMixedEqual);
			NotEq => return lookupCompare(infix, rtype, Opcode.NullCheck, VstOperator.IntMixedNotEqual);
			Add =>   return lookupArith(infix, rtype, Opcode.IntAdd);
			Sub =>   return lookupArith(infix, rtype, Opcode.IntSub);
			Mul =>   return lookupArith(infix, rtype, Opcode.IntMul);
			Div =>   return lookupArith(infix, rtype, Opcode.IntDiv);
			Mod =>   return lookupArith(infix, rtype, Opcode.IntMod);
			And =>   return lookupArith(infix, rtype, Opcode.IntAnd);
			Or =>    return lookupArith(infix, rtype, Opcode.IntOr);
			Xor =>   return lookupArith(infix, rtype, Opcode.IntXor);
			Lt =>    return lookupCompare(infix, rtype, Opcode.IntLt, VstOperator.IntMixedLt);
			Gt =>    return lookupAndCommute(infix, V3Infix.Lt, Opcode.IntLt, rtype);
			LtEq =>  return lookupCompare(infix, rtype, Opcode.IntLteq, VstOperator.IntMixedLteq);
			GtEq =>  return lookupAndCommute(infix, V3Infix.LtEq, Opcode.IntLteq, rtype);
			Shl =>   return newShiftOp(infix, Opcode.IntShl);
			Sar =>   return newShiftOp(infix, if(it.signed, Opcode.IntSar, Opcode.IntShr));
			Shr =>   return newShiftOp(infix, Opcode.IntShr);
			_ => ;
		}
		return null;
	}
	private def lookupAndCommute(infix: V3Infix, comm: V3Infix, opcode: Opcode, rtype: Type) -> Operator {
		var cop: Operator, wt: IntType, c: IntOpCache;
		if (rtype == it || rtype == null) { // same type
			c = this;
			cop = lookupInfix(comm, rtype);
		} else if ((wt = it.wider(rtype)) != null) { // wider type
			c = wt.opcache();
			cop = c.lookupInfix(comm, wt);
		} else if (IntType.?(rtype)) { // mixed sign
			cop = IntType.!(rtype).opcache().lookupInfix(comm, it);
		}
		if (cop == null) cop = Operator.new(opcode, typeArgs, cmpSig); // may end up being a type error
		var paramTypes = cop.sig.paramTypes;
		paramTypes = [paramTypes[1], paramTypes[0]];  // may be mixed sign comparison
		var op = V3Op.newVstSugar(VstOperator.Commute(cop), cop.typeArgs, paramTypes, cop.sig.returnType());
		if (c != null) c.cache[infix.tag] = op;
		return op;
	}
	private def lookupArith(infix: V3Infix, rtype: Type, opcode: Opcode) -> Operator {
		var wt = it.wider(rtype);
		var c = if(wt != null, wt.opcache(), this);
		var op = c.cache[infix.tag];
		if (op == null) op = c.cache[infix.tag] = Operator.new(opcode, c.typeArgs, c.binopSig);
		return op;
	}
	private def newShiftOp(infix: V3Infix, opcode: Opcode) -> Operator {
		return cache[infix.tag] = Operator.new(opcode, typeArgs, Function.siga([it, Byte.TYPE], it));
	}
	private def lookupCompare(infix: V3Infix, rtype: Type, opcode: Opcode, vst: VstOperator) -> Operator {
		if (rtype == it) return getCompareOp(infix, opcode, vst);
		var wt = it.wider(rtype);
		if (wt != null) return wt.opcache().getCompareOp(infix, opcode, vst);
		if (IntType.?(rtype)) {
			// Mixed sign comparison. Create a sugared one and don't cache.
			return V3Op.newVstSugar(vst, [it, rtype], [it, rtype], Bool.TYPE);
		}
		return getCompareOp(infix, opcode, vst); // no such comparison, just return the binop comparison for this type
	}
	private def getCompareOp(infix: V3Infix, opcode: Opcode, vst: VstOperator) -> Operator {
		var op = cache[infix.tag];
		if (op != null) return op;
		// XXX(ugly): using nonsensical operator to mark desugaring
		if (opcode == Opcode.NullCheck) op = V3Op.newVstSugar(vst, cmpSig.paramTypes, cmpSig.paramTypes, Bool.TYPE);
		else op = Operator.new(opcode, typeArgs, cmpSig);
		return cache[infix.tag] = op;
	}
}

def checkIntOpTypeArg(op: string, tv: TypeVarType, t: Type) -> Type {
	if (Aeneas.FLOAT.val && t.typeCon.kind == V3Kind.FLOAT) {
		return t;  // int.view<float> or int.view<double>
	}
	if (t.typeCon.kind != V3Kind.INT) {
		if (!tv.error) {
			tv.error = true;
			tv.error_msg = Strings.format1("%s requires integral type argument", op);
		}
		return null;
	}
	return t;
}
def checkIntViewTypeArg(width: int, tv: TypeVarType, t: Type) -> Type {
	if (t.typeCon.kind == V3Kind.INT) return t;
	if (t.typeCon.kind == V3Kind.FLOAT) {
		var ftc = Float_TypeCon.!(t.typeCon);
		if (ftc.total_width == width) return t;
	}
	if (!tv.error) {
		tv.error = true;
		tv.error_msg = Strings.format1("view requires integral or %d-bit float type argument", int.!(width));
	}
	return null;
}