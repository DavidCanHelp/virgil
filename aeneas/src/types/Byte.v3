// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component Byte {
	def MAX_VALUE = '\xFF';
	var TYPE = Int.getType(false, 8);

	def unbox(val: Val) -> byte {
		if (val == null) return '\x00';
		return byte.!(Box<int>.!(val).val);
	}
	def box(val: byte) -> Val {
		return Box<int>.new(val);
	}
	def unboxString(val: Val) -> Array<byte> {
		if (val == null) return null;
		return Arrays.map((Record.!(val)).values, unbox);
	}
	def boxString(str: Array<byte>, prog: Program) -> Record {
		if (str == null) return null;
		var record = prog.newRecord(V3Array.newType(TYPE), str.length);
		Arrays.mapInto(str, box, record.values);
		return record;
	}
	def parseByte(a: Array<byte>, pos: int) -> Parsed<byte> {
		if (pos + 2 >= a.length) return error(0);
		if (a(pos) != '\'') return error(0);
		var ch = a(pos + 1);
		if (ch < ' ' || ch > 127) return error(2);
		if (ch == '\'') return error(2);
		if (ch == '\"') return error(2);
		var end = pos + 2;
		if (ch == '\\') {
			var parsed = parseEscape(a, pos + 2);
			if (!parsed.passed) return Parsed.new(false, 2 + parsed.length, ch);
			else ch = parsed.val;
			end = end + parsed.length;
		}
		if (end >= a.length) return error(end - pos);
		if (a(end) == '\'') return Parsed.new(true, 1 + end - pos, ch);
		return error(1 + end - pos);
	}
	def parseString(a: Array<byte>, pos: int) -> Parsed<string> {
		if (pos + 1 >= a.length) return error(0);
		if (a(pos) != '\"') return error(0);
		var max = a.length, i = pos + 1, buf = StringBuffer.new();
		while (i < max) {
			var ch = a(i);
			if (ch < ' ' || ch > 127) return error(i - pos);
			if (ch == '\'') return error(i - pos);
			if (ch == '\"') return Parsed.new(true, 1 + i - pos, buf.toString());
			var end = i + 2;
			if (ch == '\\') {
				var parsed = parseEscape(a, i + 1);
				if (!parsed.passed) return error(i + parsed.length);
				else buf.putc(parsed.val);
				i = i + parsed.length;
			} else {
				buf.putc(ch);
			}
			i++;
		}
		return error(i - pos);
	}
	private def parseEscape(a: Array<byte>, pos: int) -> Parsed<byte> {
		if (pos >= a.length) return error(0);
		match (a(pos)) {
			'r': return Parsed.new(true, 1, '\r');
			't': return Parsed.new(true, 1, '\t');
			'n': return Parsed.new(true, 1, '\n');
			'\"': return Parsed.new(true, 1, '\"');
			'\'': return Parsed.new(true, 1, '\'');
			'\\': return Parsed.new(true, 1, '\\');
			'x': {
				if (pos + 2 >= a.length) return error(1);
				if (!Char.isHex(a(pos + 1))) return error(1);
				if (!Char.isHex(a(pos + 2))) return error(2);
				return Parsed.new(true, 3, byte.!(Char.hexValue(a(pos + 1)) << 4 | Char.hexValue(a(pos + 2))));
			}
		}
		return error(1);
	}
	def error<T>(len: int) -> Parsed<T> {
		var none: T;
		return Parsed.new(false, 0, none);
	}
}
