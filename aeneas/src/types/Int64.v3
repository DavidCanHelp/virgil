// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Emulates 64-bit integers with 32-bit integers.
// TODO: replace this entire component with real 64-bit integers once bootstrapped.
// TODO: type emu64 = (int, int);
// def MAX_VALUE = 9223372036854775807;
// def MIN_VALUE = -9223372036854775808;
component Int64 {
	def zero = (0, 0);
	def one = (0, 1);
	def minus_one = (-1, -1);
	def render(a: (int, int), buffer: StringBuffer) -> StringBuffer {
		return buffer.putxl(a);
	}
	def from_u32(a: u32) -> (int, int) {
		return (0, int.!(a));
	}
	def from_i32(a: int) -> (int, int) {
		return (if(a < 0, -1), a);
	}
	def box(a: (int, int)) -> Box<(int, int)> {
		return Box.new(a);
	}
	def unbox(val: Val) -> (int, int) {
		if (val == null) return zero;
		return Box<(int, int)>.!(val).val;
	}
	def unboxVal(val: Val, signed: bool) -> (int, int) {
		if (val == null) return zero;
		if (Box<(int, int)>.?(val)) return Box<(int, int)>.!(val).val;
		if (Box<int>.?(val)) {
			var i = Box<int>.!(val).val;
			return (if(signed && i < 0, -1), i);
		}
		System.error("Int64Error", "expected integer box");
		return zero;
	}
	def shl(a: (int, int), b: (int, int)) -> (int, int) {
		return if(b.0 != 0, zero, shlint(a, b.1));
	}
	def shlint(a: (int, int), x: int) -> (int, int) {
		if (x < 0 || x > 63) return zero;
		if (x < 32) {
			var rh = (a.0 #<< x) | int.!(u32.!(a.1) #>> u32.!(32 - x));
			var rl = a.1 #<< x;
			return (rh, rl);
		}
		return (a.1 #<< (x - 32), 0);
	}
	def shr(a: (int, int), b: (int, int)) -> (int, int) {
		if (b == zero) return a;
		return if(b.0 != 0, zero, shrint(a, b.1));
	}
	def shrint(a: (int, int), x: int) -> (int, int) {
		if (u32.!(x) > 63) return zero;
		if (x < 32) {
			var rh = a.0 #>> x;
			var rl = (a.1 #>> x) | int.!(u32.!(a.0) #<< u32.!(32 - x));
			return (rh, rl);
		}
		return (0, a.0 #>> (x - 32));
	}
	def szr(width: byte, a: (int, int), b: (int, int)) -> (int, int) {
		return if(b.0 != 0, zero, szrint(width, a, b.1));
	}
	def szrint(width: byte, a: (int, int), x: int) -> (int, int) {
		if (u32.!(x) > 63) return zero;
		var upper = width - '\x20';
		var uh = a.0 #<< (32 - upper) #>> (32 - upper);
		if (x < 32) {
			var rh = IntOp.szr(upper, a.0, x);
			var rl = (a.1 #>> x) | uh #<< (32 - x);
			return (rh, rl);
		}
		if (x == 32) return (0, uh);
		return (0, IntOp.szr(upper, a.0, (x - 32)));
	}
	def sar(a: (int, int), b: (int, int)) -> (int, int) {
		if (b.0 != 0) {
			var s = IntOp.sign(a.0);
			return (s, s);
		}
		return sarint(a, b.1);
	}
	def sarint(a: (int, int), x: int) -> (int, int) {
		var s = IntOp.sign(a.0);
		if (u32.!(x) >= 63) return (s, s);
		if (x < 32) {
			var rh = IntOp.sar(a.0, x);
			var rl = (a.1 #>> x) | int.!(u32.!(a.0) #<< u32.!(32 - x));
			return (rh, rl);
		}
		return (s, IntOp.sar(a.0, (x - 32)));
	}
	def shiftin(a: (int, int), x: int, low: int) -> (int, int) {
		var rh = (a.0 #<< x) | int.!(u32.!(a.1) #>> u32.!(32 - x));
		var rl = a.1 #<< x;
		return (rh, rl | low);
	}
	def neg(a: (int, int)) -> (int, int) {
		return addu32((-1 ^ a.0, -1 ^ a.1), u32.!(1));
	}
	def and(a: (int, int), b: (int, int)) -> (int, int) {
		return (a.0 & b.0, a.1 & b.1);
	}
	def or(a: (int, int), b: (int, int)) -> (int, int) {
		return (a.0 | b.0, a.1 | b.1);
	}
	def xor(a: (int, int), b: (int, int)) -> (int, int) {
		return (a.0 ^ b.0, a.1 ^ b.1);
	}
	def add(a: (int, int), b: (int, int)) -> (int, int) {
		var low31c = (a.1 & u31.max) + (b.1 & u31.max);
		var bit31c = (a.1 #>> 31) + (b.1 #>> 31) + (low31c #>> 31);
		var carry = bit31c #>> 1;
		return (a.0 + b.0 + carry, a.1 + b.1);
	}
	def sub(a: (int, int), b: (int, int)) -> (int, int) {
		return add(a, neg(b));
	}
	def mul(a: (int, int), b: (int, int)) -> (int, int) {
		var a_1 = u32.!(u16.!(a.1));
		var a_2 = u32.!(a.1 #>> 16);

		var b_1 = u32.!(u16.!(b.1));
		var b_2 = u32.!(b.1 #>> 16);

		var rh: u32, rl: u32;

		rl = a_1 * b_1;

		var result = (int.!(rh), int.!(rl));
		result = add(result, shlint((0, int.!(a_2 * b_1)), 16));
		result = add(result, shlint((0, int.!(a_1 * b_2)), 16));

		rh = u32.!(result.0);
		rl = u32.!(result.1);

		var a_3 = u32.!(u16.!(a.0));
		var b_3 = u32.!(u16.!(b.0));

		rh = rh + a_3 * b_1;
		rh = rh + a_2 * b_2;
		rh = rh + a_1 * b_3;

		var a_4 = u32.!(a.0 #>> 16);
		var b_4 = u32.!(b.0 #>> 16);

		rh = rh + ((a_4 * b_1) #<< u32.!(16));
		rh = rh + ((a_3 * b_2) #<< u32.!(16));
		rh = rh + ((a_2 * b_3) #<< u32.!(16));
		rh = rh + ((a_1 * b_4) #<< u32.!(16));

		return (int.!(rh), int.!(rl));
	}
	def addu32(a: (int, int), b: u32) -> (int, int) {
		var al = u32.!(a.1), sum = al + b;
		return if (sum < al, (a.0 + 1, int.!(sum)), (a.0, int.!(sum)));
	}
	def mulu16(a: (int, int), n: u16) -> (int, int) {
		var low16 = (a.1 & u16.max) * n;
		var hi16 = (a.1 #>> 16) * n + (low16 #>> 16);
		var carry = hi16 #>> 16;
		return (a.0 * n + carry, hi16 #<< 16 | (low16 & u16.max));
	}
	def lt(a: (int, int), b: (int, int)) -> bool {
		if (a.0 < b.0) return true;
		if (a.0 == b.0) return u32.!(a.1) < u32.!(b.1);
		return false;
	}
	def gt(a: (int, int), b: (int, int)) -> bool {
		if (a.0 > b.0) return true;
		if (a.0 == b.0) return u32.!(a.1) > u32.!(b.1);
		return false;
	}
	def lteq(a: (int, int), b: (int, int)) -> bool {
		if (a.0 < b.0) return true;
		if (a.0 == b.0) return u32.!(a.1) <= u32.!(b.1);
		return false;
	}
	def gteq(a: (int, int), b: (int, int)) -> bool {
		if (a.0 > b.0) return true;
		if (a.0 == b.0) return u32.!(a.1) >= u32.!(b.1);
		return false;
	}
	def ult(a: (int, int), b: (int, int)) -> bool {
		var ah = u32.!(a.0), bh = u32.!(b.0);
		if (ah < bh) return true;
		if (ah == bh) return u32.!(a.1) < u32.!(b.1);
		return false;
	}
	def ugt(a: (int, int), b: (int, int)) -> bool {
		var ah = u32.!(a.0), bh = u32.!(b.0);
		if (ah > bh) return true;
		if (ah == bh) return u32.!(a.1) > u32.!(b.1);
		return false;
	}
	def ulteq(a: (int, int), b: (int, int)) -> bool {
		var ah = u32.!(a.0), bh = u32.!(b.0);
		if (ah < bh) return true;
		if (ah == bh) return u32.!(a.1) <= u32.!(b.1);
		return false;
	}
	def ugteq(a: (int, int), b: (int, int)) -> bool {
		var ah = u32.!(a.0), bh = u32.!(b.0);
		if (ah > bh) return true;
		if (ah == bh) return u32.!(a.1) >= u32.!(b.1);
		return false;
	}
	def div(a: (int, int), b: (int, int)) -> (int, int) {
		if (b == zero) return (1 / 0, 0);
		var negate = false;
		if (a.0 < 0) { a = neg(a); negate = !negate; }
		if (b.0 < 0) { b = neg(b); negate = !negate; }
		var q = udiv64(a, b).0;
		return if(negate, neg(q), q);
	}
	def mod(a: (int, int), b: (int, int)) -> (int, int) {
		if (b == zero) return (1 / 0, 0);
		var negate = false;
		if (a.0 < 0) { a = neg(a); negate = true; }
		if (b.0 < 0) b = neg(b);
		var r = udiv64(a, b).1;
		return if(negate, neg(r), r);
	}
	def udiv(a: (int, int), b: (int, int)) -> (int, int) {
		if (b == zero) return (1 / 0, 0);
		return udiv64(a, b).0;
	}
	def umod(a: (int, int), b: (int, int)) -> (int, int) {
		if (b == zero) return (1 / 0, 0);
		return udiv64(a, b).1;
	}
	def udiv64(a: (int, int), b: (int, int)) -> ((int, int), (int, int)) {
		var bit = ones(a) - ones(b);
		if (bit < 0) return (zero, a);
		var r = shrint(a, bit);
		var q = zero;
		while (bit > 0) {
			if (ugteq(r, b)) {
				q = or(q, shlint(one, bit));
				r = sub(r, b);
			}
			r = shlint(r, 1);
			if (1 == (shrint(a, bit - 1).1 & 1)) r = or(r, one);
			bit--;
		}
		if (ugteq(r, b)) {
			q = or(q, one);
			r = sub(r, b);
		}
		return (q, r);
	}
	def ones(a: (int, int)) -> int {
		if (a.0 != 0) return 32 + ones32(a.0);
		return ones32(a.1);
	}
	def ones32(a: int) -> int {
		var l = 0;
		while (a != 0) {
			a = a #>> 1;
			l++;
		}
		return l;
	}
}
