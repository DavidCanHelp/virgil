// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Emulates 64-bit integers with 32-bit integers.
component Int64 {
	def zero = (0, 0);
	def print(a: int, b: int) {
		var buf = "0x0000000000000000\n";
		Strings.renderHex8(buf, 2, a);
		Strings.renderHex8(buf, 10, b);
		Terminal.put(buf);
	}
	def box(a: (int, int)) -> Box<(int, int)> {
		if (a.0 == 0 && a.1 == 0) return null;
		return Box.new(a);
	}
	def unbox(val: Val) -> (int, int) {
		if (val == null) return zero;
		return Box<(int, int)>.!(val).val;
	}
	def shl(a: (int, int), b: (int, int)) -> (int, int) {
		var x = b.1;
		if (b.0 != 0) return zero;
		if (x < 0 || x > 63) return zero;
		if (x < 32) {
			var rh = (a.0 #<< x) | int.!(u32.!(a.1) #>> u32.!(x));
			var rl = a.1 #<< x;
			return (rh, rl);
		}
		return (a.0 #<< (x - 32), 0);
	}
	def and(a: (int, int), b: (int, int)) -> (int, int) {
		return (a.0 & b.0, a.1 & b.1);
	}
	def or(a: (int, int), b: (int, int)) -> (int, int) {
		return (a.0 & b.0, a.1 & b.1);
	}
	def xor(a: (int, int), b: (int, int)) -> (int, int) {
		return (a.0 & b.0, a.1 & b.1);
	}
}
