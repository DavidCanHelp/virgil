// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utilities for the representation of the "bool" type in the compiler.
component Bool {
	def TYPE  = Bool_TypeCon.new().create0();
	def ARRAY_T = [TYPE];
	def ARRAY_TT = [TYPE, TYPE];
	def ANDAND = V3Op.newVstSugar(VstOperator.BoolAndAnd, TypeUtil.NO_TYPES, ARRAY_TT, TYPE);
	def OROR = V3Op.newVstSugar(VstOperator.BoolOrOr, TypeUtil.NO_TYPES, ARRAY_TT, TYPE);
	def TRUE  = Box.new(true);
	def FALSE = Box.new(false);

	def unbox(val: Result) -> bool {
		if (val == null) return false;
		return (Box<bool>.!(val)).val;
	}
	def box(val: bool) -> Box<bool> {
		return if(val, TRUE, FALSE);
	}
	def toInt(b: bool) -> int {
		return if(b, 1, 0);
	}
}
class Bool_TypeCon extends Member_TypeCon("bool", V3Kind.BOOL, 0, TypeUtil.globalCache) {
	def lookupInfix(infix: V3Infix, rtype: Type) -> Operator {
		match (infix) {
			AndAnd => return Bool.ANDAND;
			OrOr => return Bool.OROR;
			And => return V3Op.opBoolAnd;
			Or => return V3Op.opBoolOr;
			_ => return null;
		}
	}
}
