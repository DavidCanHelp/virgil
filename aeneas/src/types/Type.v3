// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component TypeConst {
	def TYPEVAR_MASK   = 0x40000000;
	def TYPEPARAM_MASK = 0x20000000;
	def OPEN_MASK      = 0x60000000;
	def UID_MASK       = 0x1FFFFFFF;
}
// Representation of a type.
class Type {
	def hash: int;		// hash and bits indicating openness
	def typeCon: TypeCon;	// type constructor
	def nested: List<Type>;	// nested types, if any
	var link: Type;		// used as a link in the hash bucket chain

	new(hash, typeCon, nested) { }

	def open() -> bool { return (hash & TypeConst.OPEN_MASK) != 0; }
	def hasTypeVars() -> bool { return (hash & TypeConst.TYPEVAR_MASK) != 0; }
	def render(buffer: StringBuffer) -> StringBuffer {
		return typeCon.renderType(buffer, nested);
	}
	def substitute(typeSubst: TypeSubst) -> Type {
		if (typeSubst == null) return this;
		if ((hash & TypeConst.TYPEVAR_MASK) != 0) {
			// if no nested types, then this must itself be a type variable
			if (nested == null) return typeSubst.substituteTypeVar(TypeVar.!(this));
			return recurse(typeSubst);
		}
		if ((hash & TypeConst.TYPEPARAM_MASK) != 0) {
			// if no nested types, then this must itself be a type parameter
			if (nested == null) return typeSubst.substituteTypeParam(TypeParam.!(this));
			return recurse(typeSubst);
		}
		return this;
	}
	private def recurse(typeSubst: TypeSubst) -> Type {
		// recursively substitute type variables / parameters
		var ntypes: List<Type> = null;
		var changed = false;
		for (list = nested; list != null; list = list.tail) {
			var otype = list.head;
			var ntype = otype.substitute(typeSubst);
			changed = bool.||(changed, otype != ntype);
			ntypes = List.new(ntype, ntypes);
		}
		if (changed) return typeCon.create(Lists.reverse(ntypes));
		return this;
	}
}
// Representation of a type parameter.
class TypeParam extends Type {
	def token: Token;
	var index: int;
	new(hash: int, token, typeCon: TypeCon) 
		: super(hash | TypeConst.TYPEPARAM_MASK, typeCon, null) { }
}
// Representation of a type variable.
class TypeVar extends Type {
	def token: Token;
	def typeParam: TypeParam;
	var vtype: Type;
	var constraint: (TypeVar, Type) -> Type;
	var error: bool;
	new(hash: int, typeCon: TypeCon, token, typeParam) 
		: super(hash | TypeConst.TYPEVAR_MASK, typeCon, null) { }
	def setType(t: Type) {
		if (constraint != null) t = constraint(this, t);
		vtype = t;
	}
}
// Enforces reference equality for types using a customized hashing representation.
// Makes use of the "link" var of a type, using the type itself as the hash bucket.
// A type is created by only one type constructor and cached in only one TypeCache.
class TypeCache {
	def uid = UID.next++;
	var singleBuckets = Array<Type>.new(11);
	var multiBuckets  = Array<Type>.new(13);

	def get1(hash: int, typeCon: TypeCon, t: Type) -> Type {
		var index = hash % singleBuckets.length;
		var bucket = singleBuckets(index), chain = 0;
		// search the bucket chain for a type with the same typecon and nested
		for (b = bucket; b != null; b = b.link) {
			// specialized search for a single nested type
			chain++;
			if (b.hash != hash) continue;
			if (b.typeCon != typeCon) continue;
			if (b.nested.head == t) return b;
		}
		// not found, create and insert.
		var n = Type.new(hash, typeCon, List.new(t, null));
		n.link = bucket;
		singleBuckets(index) = n;
		if (chain > 5) singleBuckets = rebalance(singleBuckets);
		return n;
	}
	def getN(hash: int, typeCon: TypeCon, nested: List<Type>) -> Type {
		var index = hash % multiBuckets.length;
		var bucket = multiBuckets(index), chain = 0;
		// search the bucket chain for a type with the same typecon and nested
		for (b = bucket; b != null; b = b.link) {
			chain++;
			if (b.hash != hash) continue;
			if (b.typeCon != typeCon) continue;
			if (TypeUtil.equalsList(nested, b.nested)) return b;
		}
		// not found, create and insert.
		var n = Type.new(hash, typeCon, nested);
		n.link = bucket;
		multiBuckets(index) = n;
		if (chain > 5) multiBuckets = rebalance(multiBuckets);
		return n;
	}
	private def rebalance(buckets: Array<Type>) -> Array<Type> {
		if (buckets.length > 10000) return buckets; // enforce maximum size
		var newsize = 7 * buckets.length + 112; // grow fast (11 -> 189 -> 1435 -> 10157)
		var newbuckets = Array<Type>.new(newsize);
		for (b in buckets) {
			if (b == null) continue;
			var p = b.link;
			for (o = b; o != null; o = p) {
				p = o.link;
				var index = o.hash % newsize;
				o.link = newbuckets(index);
				newbuckets(index) = o;
			}
		}
		return newbuckets;
	}
}
// Constructs all types, using a type cache for enforcing reference equality.
// Either uses this typecache or the typecache with the largest UID of any of the
// nested types. E.g. Array<T> will be cached in either Array's typecache or T's
// typecache, depending on which has the higher ID.
class TypeCon {
	def uid  = UID.next++;		// unique id for type constructor
	def name: string;		// name of the type
	def kind: int;			// kind of the type constructor
	def arity: int;			// expected number of type parameters
	def typeCache: TypeCache;	// per-language or per-program type cache
	var singleton: Type;		// type with 0 nested types

	new(name, kind, arity, typeCache) { }
	def create(nested: List<Type>) -> Type {
		if (nested == null) return create0();
		if (nested.tail == null) return create1(nested.head);
		var cache = typeCache, hash = uid;
		for (l = nested; l != null; l = l.tail) {
			var t = l.head, tc = t.typeCon.typeCache;
			if (tc.uid > cache.uid) cache = tc;
			hash = (TypeConst.UID_MASK & (t.hash + hash * 33)) | (TypeConst.OPEN_MASK & (t.hash | hash));
		}
		return cache.getN(hash, this, nested);
	}
	def create0() -> Type {
		if (singleton == null) singleton = Type.new(uid, this, null);
		return singleton;
	}
	def create1(t: Type) -> Type {
		var cache = typeCache, tc = t.typeCon.typeCache;
		if (tc.uid > cache.uid) cache = tc;
		var hash = (TypeConst.UID_MASK & (t.hash + uid * 33)) | (TypeConst.OPEN_MASK & t.hash);
		return cache.get1(hash, this, t);
	}
	def renderType(buffer: StringBuffer, typeParams: List<Type>) -> StringBuffer {
		buffer.puts(name);
		if (typeParams != null) {
			buffer.putc('<');
			buffer.appendCommaList(typeParams, Type.render); 
			buffer.putc('>');
		}
		return buffer;
	}
	def renderTypeRef(buffer: StringBuffer, typeRefs: List<TypeRef>) -> StringBuffer {
		buffer.puts(name);
		if (typeRefs != null) {
			buffer.putc('<');
			buffer.appendCommaList(typeRefs, TypeRef.render); 
			buffer.putc('>');
		}
		return buffer;
	}
}
// A special type constructor for type variables.
class TypeVar_TypeCon extends TypeCon {
	def typeParam: TypeParam;
	var typeVar: TypeVar;
	new(token: Token, typeParam, typeCache: TypeCache) : super(typeParam.token.image, TypeUtil.TYPE_VAR_KIND, 0, typeCache) {
		singleton = typeVar = TypeVar.new(UID.next++, this, token, typeParam);
	}
	def renderType(buffer: StringBuffer, typeParams: List<Type>) -> StringBuffer {
		return render(buffer);
	}
	def renderTypeRef(buffer: StringBuffer, typeParams: List<TypeRef>) -> StringBuffer {
		return render(buffer);
	}
	private def render(buffer: StringBuffer) -> StringBuffer{
		buffer.putc('?');
		buffer.puts(name);
		if (typeVar.vtype != null) {
			buffer.putc('=');
			if (typeVar.vtype.typeCon == this) buffer.putc('?');
			else typeVar.vtype.render(buffer);
		}
		return buffer;
	}
}
// Abstract class that can recursively substitute a type for a type parameter
class TypeSubst {
	def substitute(t: Type) -> Type { return t.substitute(this); }
	def substituteTypeParam(typeParam: TypeParam) -> Type { return typeParam; }
	def substituteTypeVar(typeVar: TypeVar) -> Type { return typeVar; }
}
// A type environment, including type parameters that are bound within its scope
class TypeEnv {
	def parent: TypeEnv;
	def typeParams: List<TypeParam>;
	def paramArray = TypeUtil.toTypeArray(typeParams);
	def typeMap = Strings.newMap<TypeCon>();

	new(parent, typeParams) {
		// number the type parameters according to their position in the list
		var i = 0;
		for (list = typeParams; list != null; list = list.tail) {
			list.head.index = i++;
		}
	}
	def add(typeCon: TypeCon) {
		typeMap.set(typeCon.name, typeCon);
	}
	def lookup(name: string) -> TypeCon {
		var result = typeMap.get(name);
		if (result == null && parent != null) result = parent.lookup(name);
		return result;
	}
}
// A reference to a type; usually unresolved initially
class TypeRef {
	def token: Token;
	def typeRefs: List<TypeRef>;
	var typeCon: TypeCon;
	var rtype: Type;

	new(token, typeRefs, typeCon, rtype) {
		this.typeCon = typeCon;
		this.rtype = rtype;
	}
	def render(buffer: StringBuffer) -> StringBuffer {
		if (rtype != null) return rtype.render(buffer);
		if (typeCon != null) return typeCon.renderTypeRef(buffer, typeRefs);
		buffer.puts(token.image);
		if (typeRefs != null) {
			buffer.putc('<');
			buffer.appendCommaList(typeRefs, TypeRef.render); 
			buffer.putc('>');
		}
		return buffer;
	}
	def getType() -> Type {
		if (rtype == null) return error();
		else return rtype;
	}
	def range() -> FileRange { return token.range(); }
	def error() -> Type {
		return V3.fail(Strings.format3("unresolved TypeRef: %1 @ %2:%3", token.image, range().beginLine, range().beginColumn));
	}
}
// Utility methods for types.
component TypeUtil {
	def globalCache = TypeCache.new();
	def TYPE_PARAM_KIND = 8;
	def TYPE_VAR_KIND   = 9;
	def NO_TYPES: Array<Type> = [];
	def ONE_TYPE_PARAM = List.new(newTypeParam(Token.new("<builtin>", "T", 0, 0), globalCache), null);

	def aliasTypeCon(name: string, t: Type) -> TypeCon {
		var typeCon = TypeCon.new(name, t.typeCon.kind, 0, t.typeCon.typeCache);
		typeCon.singleton = t;
		return typeCon;
	}
	def singleType(name: string, kind: int) -> Type {
		var typeCon = TypeCon.new(name, kind, 0, TypeUtil.globalCache);
		return typeCon.create0();
	}
	def typeRefOf(actualType: Type) -> TypeRef {
		return TypeRef.new(null, null, actualType.typeCon, actualType);
	}
	def newTypeMap<T>() -> HashMap<Type, T> {
		return HashMap.new(Type.hash, Type.==);
	}
	def newTypePairMap<T>() -> PartialMap<(Type, Type), T> {
		return HashMap.new(typePairHash, typePairEqual);
	}
	def equalsList(l1: List<Type>, l2: List<Type>) -> bool {
		if (l1 == l2) return true;
		while (l1 != null) {
			if (l2 == null || l1.head != l2.head) return false;
			l1 = l1.tail;
			l2 = l2.tail;
		}
		return l2 == null;
	}
	def getParamType(param: ParamDecl) -> Type {
		return param.vtype; // XXX: replace with ParamDecl.vtype when type inference improves
	}
	def typePairHash(a: Type, b: Type) -> int {
		return a.hash + b.hash;
	}
	def typePairEqual(a: (Type, Type), b: (Type, Type)) -> bool {
		return a == b;
	}
	def newTypeParam(token: Token, typeCache: TypeCache) -> TypeParam {
		var name = if(token == null, "T", token.image);
		var typeCon = TypeCon.new(name, V3Kind.TYPE_PARAM, 0, typeCache);
		var typeParam = TypeParam.new(UID.next++, token, typeCon);
		typeCon.singleton = typeParam;
		return typeParam;
	}
	def toTypeArray(list: List<TypeParam>) -> Array<Type> {
		if (list == null) return TypeUtil.NO_TYPES;
		var length = Lists.length(list), array = Array<Type>.new(length);
		for (i = 0; i < length; i++) {
			array(i) = list.head;
			list = list.tail;
		}
		return array;
	}
}
// A utility class to substitute type params for their bound types.
// Generates an error if an unbound type variable is encountered.
class TypeVarEliminator extends TypeSubst {
	def error: TypeVar -> void;
	new(error) { }
	def substituteTypeVar(typeVar: TypeVar) -> Type {
		if (typeVar.vtype == null) {
			if (error != null) error(typeVar);
			return typeVar;
		}
		return typeVar.vtype;
	}
	def substituteTypeParam(typeParam: TypeParam) -> Type {
		return typeParam;
	}
}
// Represents the substitution of type arguments for type parameters
class TypeArgs extends TypeSubst {
	def typeEnv: TypeEnv;
	def types: Array<Type>;
	new(typeEnv, types) { }
	def substituteTypeVar(typeVar: TypeVar) -> Type {
		return typeVar;
	}
	def substituteTypeParam(typeParam: TypeParam) -> Type {
		if (types != null) {
			var index = typeParam.index, typeParamArray = typeEnv.paramArray;
			if (index < typeParamArray.length) {
				if (typeParam == typeParamArray(index)) return types(index);
			}
		}
		return typeParam;
	}
	def copy(ntypes: Array<Type>) -> TypeArgs {
		return TypeArgs.new(typeEnv, ntypes);
	}
	def render(buffer: StringBuffer) -> StringBuffer {
		buffer.putc('<');
		var unbound = (types == null);
		for (i = 0; i < typeEnv.paramArray.length; i++) {
			if (i > 0) buffer.puts(", ");
			if (unbound) {
				typeEnv.paramArray(i).render(buffer);
				buffer.puts("=?");
			} else {
				types(i).render(buffer);
			}
		}
		buffer.putc('>');
		return buffer;
	}
}
