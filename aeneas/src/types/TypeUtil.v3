// Copyright 2011 Google Inc. All rights reserved.
// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility methods for types.
component TypeUtil {
	def BUILTIN_TOKEN = Token.new("<builtin>", "T", 0, 0);
	def globalCache = TypeCache.new();
	def TYPE_PARAM_KIND = '\x09';
	def TYPE_VAR_KIND   = '\x0A';
	def NO_TYPES: Array<Type> = [];
	def TYPE_PARAM = newTypeParam(BUILTIN_TOKEN, globalCache);
	def ONE_TYPE_PARAM = List.new(TYPE_PARAM, null);

	def aliasTypeCon(name: string, t: Type) -> TypeCon {
		var typeCon = TypeCon.new(name, t.typeCon.kind, 0, t.typeCon.typeCache);
		typeCon.singleton = t;
		return typeCon;
	}
	def singleType(name: string, kind: byte) -> Type {
		var typeCon = TypeCon.new(name, kind, 0, TypeUtil.globalCache);
		return typeCon.create0();
	}
	def typeRefOf(actualType: Type) -> TypeRef {
		return TypeRef.new(null, null, null, actualType.typeCon, actualType);
	}
	def typeRefOfParam(t: TypeParamType) -> TypeRef {
		return TypeUtil.typeRefOf(t);
	}
	def newTypeMap<T>() -> HashMap<Type, T> {
		return HashMap.new(Type.hash, Type.==);
	}
	def newTypePairMap<T>() -> PartialMap<(Type, Type), T> {
		return HashMap.new(typePairHash, typePairEqual);
	}
	def equalsList(l1: List<Type>, l2: List<Type>) -> bool {
		if (l1 == l2) return true;
		while (l1 != null) {
			if (l2 == null || l1.head != l2.head) return false;
			l1 = l1.tail;
			l2 = l2.tail;
		}
		return l2 == null;
	}
	def getParamType(param: ParamDecl) -> Type {
		return param.vtype; // XXX: replace with ParamDecl.vtype when type inference improves
	}
	def typePairHash(a: Type, b: Type) -> int {
		return a.hash + b.hash;
	}
	def typePairEqual(a: (Type, Type), b: (Type, Type)) -> bool {
		return a == b;
	}
	def newTypeParamWithConstraint(token: Token, typeCache: TypeCache,
			hard: bool, constraint: (TypeVarType, Type) -> Type) -> TypeParamType {
		var name = if(token == null, "T", token.image);
		var typeCon = TypeCon.new(name, V3Kind.TYPE_PARAM, 0, typeCache);
		var typeParam = TypeParamType.new(UID.next++, token, typeCon, hard, constraint);
		typeCon.singleton = typeParam;
		return typeParam;
	}
	def newTypeParam(token: Token, typeCache: TypeCache) -> TypeParamType {
		return newTypeParamWithConstraint(token, typeCache, false, null);
	}
	def toTypeArray(list: List<TypeParamType>) -> Array<Type> {
		if (list == null) return TypeUtil.NO_TYPES;
		var length = Lists.length(list), array = Array<Type>.new(length);
		for (i < length) {
			array[i] = list.head;
			list = list.tail;
		}
		return array;
	}
}
