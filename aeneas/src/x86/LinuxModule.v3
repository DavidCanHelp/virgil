// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class LinuxSyscall {
	def sysnum: int;	// system call number
	def killEdx: bool;	// kills EDX as well
	def typeParams: List<TypeParam>;
	new(sysnum, killEdx, typeParams) { }
}
// A module which exposes system calls directly to Virgil programs.
component LinuxModule {
	// conventional virtual address start
	def VADDR_START = 0x08000000; 
	// registers for system call arguments
	def paramRegs = [X86MachRegs.EBX, X86MachRegs.ECX, X86MachRegs.EDX, X86MachRegs.ESI, X86MachRegs.EDI];

	def void_t = Void.TYPE;			// void
	def int_t  = Int.TYPE;			// platform-sized int
	def i32_t  = Int.TYPE;			// 32-bit int
	def i64_t  = Tuple.newType(Lists.cons2(Int.TYPE, Int.TYPE));
	def t2i_t  = i64_t;			// tuple of two ints
	def addr_t = MachModule.PTR_32.ptrType;	// address
	def str_t  = addr_t;			// null-terminated string
	def off_t  = i64_t;			// 64-bit offset
	def size_t = Int.TYPE;			// 32-bit int

	var linux = Syscall_TypeCon.new("Linux");

	new() {
		var T = true, F = false, N = TypeUtil.NO_TYPES;

		syscall(1,   void_t,"exit",         [int_t]);
		syscall(3,   size_t,"read",         [int_t, addr_t, size_t]);
		syscall(4,   size_t,"write",        [int_t, addr_t, size_t]);
		syscall(5,   int_t, "open",         [str_t, int_t, int_t]);
		syscall(6,   int_t, "close",        [int_t]);
		syscall(15,  int_t, "chmod",        [str_t, int_t]);
		syscall(19,  off_t, "lseek",        [int_t, int_t, int_t]);
		syscall(28,  int_t, "fstat",        [int_t, addr_t]);
		syscall(48,  int_t, "signal",       [int_t, addr_t]);
		syscall(67,  int_t, "sigaction",    [int_t, addr_t, addr_t]);
		syscall(106,  int_t, "stat",        [str_t, addr_t]);
		syscall(78,  t2i_t, "gettimeofday", [addr_t, addr_t]);

		// polymorphic system call
		var typeParam = TypeUtil.ONE_TYPE_PARAM.head;
		var returnType = Tuple.newType(Lists.cons2(Int.TYPE, Int.TYPE));
		var syscall = LinuxSyscall.new(0, true, TypeUtil.ONE_TYPE_PARAM);
		var sysop = OperatorOf.new(MachOpcode.MachSystemOp, [typeParam], [Int.TYPE, typeParam], returnType, syscall, MachOp.evalError<LinuxSyscall>);
		linux.syscalls.set("syscall", (sysop, syscall.typeParams));
	}
	def syscall(num: int, returnType: Type, name: string, paramTypes: Array<Type>) {
		var syscall = LinuxSyscall.new(num, returnType.typeCon == Tuple.TYPECON, null);
		var sysop = OperatorOf.new(MachOpcode.MachSystemOp, TypeUtil.NO_TYPES, paramTypes, returnType, syscall, MachOp.evalError<LinuxSyscall>);
		linux.syscalls.set(name, (sysop, null));
	}
	def install(compiler: Compiler) {
		compiler.prog.typeEnv.add(linux);
	}
}
