// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.
component X86Component {
	new() {
		Aeneas.registerTarget(X86Target.new("x86-darwin-test", true, X86Darwin.new, DarwinModule.install));
		Aeneas.registerTarget(X86Target.new("x86-darwin", false, X86Darwin.new, DarwinModule.install));
		Aeneas.registerTarget(X86Target.new("x86-linux-test", true, X86Linux.new, LinuxModule.install));
		Aeneas.registerTarget(X86Target.new("x86-linux", false, X86Linux.new, LinuxModule.install));
	}
}
// common code for X86 targets
class X86Target extends Target {
	def test: bool;
	def space = AddressSpace.new("mem", false, 32, 4, 4);
	def intNorm = IntNormalizer.new(32, false);
	def ciRtName = "CiRuntime"; // CiRuntime provided by compiler
	def makeRuntime: (SsaContext, bool, MachProgram) -> X86Runtime;
	def installModule: Program -> void;

	new(name: string, test, makeRuntime, installModule) super(name) { }
	def emit(compiler: Compiler, prog: Program) {
		var rt = getRuntime(prog);
		rt.mach.build(compiler);
		rt.emit();
	}
	def configure(compiler: Compiler, prog: Program) {
		var mach = MachProgram.new(prog, space, space, intNorm);
		var rt = makeRuntime(SsaContext.new(compiler, prog), test, mach);
		mach.runtime = rt;
		compiler.Reachability = true;
		MachModule.install(prog);
		installModule(prog);
		prog.typeEnv.add(rt.typeCon);
	}
	def computeFieldOffsets(prog: Program, b: Sequence<IrField>, start: int) {
		getRuntime(prog).mach.computeFieldOffsets(prog, b, start);
	}
	def addRoots(compiler: Compiler, prog: Program, add: IrSpec -> RaRoot) {
		getRuntime(prog).addRoots(add);
	}
	private def getRuntime(prog: Program) -> X86Runtime {
		return X86Runtime.!(CiRuntime_TypeCon.!(prog.typeEnv.lookup(ciRtName)).runtime);
	}
}
