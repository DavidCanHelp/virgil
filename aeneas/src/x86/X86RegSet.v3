// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Register sets for X86, used in register allocation.
component X86MachRegs {
	def EAX = '\x01'; // A
	def ECX = '\x02'; // B
	def EDX = '\x03'; // C
	def EBX = '\x04'; // D
	def ESI = '\x05'; // E
	def EDI = '\x06'; // F
	def EBP = '\x07'; // G
	def GPR = '\x08';
	def BYTE = '\x09';
	def EAX_EDX = '\x0a';
	def NOT_EDX = '\x0b';
	def ALL = '\x0c';
	def SCRATCH = X86Regs.EBP;

	// a billion spill slots ought to be enough...
	def CALLER_SPILL_START = 1000000000;
	def CALLEE_SPILL_START = 2000000000;

	var regs: MachRegSet;

	new() {
		var rarray = Array<Array<byte>>.new(ALL + 1);
		rarray(EAX) = [EAX];
		rarray(EBX) = [EBX];
		rarray(ECX) = [ECX];
		rarray(EDX) = [EDX];
		rarray(ESI) = [ESI];
		rarray(EDI) = [EDI];
		rarray(EBP) = [];	// XXX: EBP is off limits because it's scratch
		rarray(BYTE) = [EDX, ECX, EAX, EBX];
		rarray(GPR) = [EAX, EBX, ECX, EDX, ESI, EDI];
		rarray(NOT_EDX) = [EAX, EBX, ECX, ESI, EDI];
		rarray(ALL) = [EAX, EBX, ECX, EDX, ESI, EDI];
		rarray(EAX_EDX) = [EAX, EDX];

		var rnames = Array<string>.new(rarray.length);
		rnames(EAX) = "eax";
		rnames(EBX) = "ebx";
		rnames(ECX) = "ecx";
		rnames(EDX) = "edx";
		rnames(ESI) = "esi";
		rnames(EDI) = "edi";
		rnames(EBP) = "ebp";
		rnames(BYTE) = "{byte}";
		rnames(GPR) = "{gpr}";
		rnames(EAX_EDX) = "{eax,edx}";
		rnames(NOT_EDX) = "{~edx}";
		rnames(ALL) = "{all}";

		// XXX: don't use EBP for scratch
		regs = MachRegSet.new(6, rarray, rnames, EBP, CALLER_SPILL_START, CALLEE_SPILL_START);
	}
}
// Defines the standard parameter and return registers for X86 calls between Virgil methods.
component X86VirgilCallConv {
	def paramRegs = [X86MachRegs.EDI, X86MachRegs.EAX, X86MachRegs.ECX, X86MachRegs.EDX, X86MachRegs.ESI];
	def retRegs = [X86MachRegs.EAX, X86MachRegs.ECX, X86MachRegs.EDX, X86MachRegs.ESI];
	
	private def compute(paramTypes: Array<Type>, returnType: Type) -> MachCallConv {
		// compute the locations of each parameter
		var spillStart = X86MachRegs.regs.spillStart;
		var ploc = Array<int>.new(paramTypes.length);
		var pspill = 0;
		for (i = 0; i < ploc.length; i++) {
			if (i < paramRegs.length) ploc(i) = paramRegs(i);
			else ploc(i) = spillStart + pspill++;
		}
		// compute locations of each return value
		// XXX: use Tuple.length() and dont use a register for return of void
		var rsize = if(returnType.typeCon.kind == V3Kind.TUPLE, Lists.length(returnType.nested), 1);
		var rloc = Array<int>.new(rsize), rspill = 0;
		for (i = 0; i < rloc.length; i++) {
			if (i < retRegs.length) rloc(i) = retRegs(i);
			else rloc(i) = spillStart + rspill++;
		}
		if (pspill > rspill) rspill = pspill;
		return MachCallConv.new(X86MachRegs.regs, paramTypes, ploc, returnType, rloc, rspill);
	}
	def getForRegion(region: SsaRegion) -> MachCallConv {
		// XXX: cache calling conventions by type for SSA region
		return compute(Arrays.map(region.params, SsaParam.vtype), region.returnType);
	}
	def getForType(ftype: Type) -> MachCallConv {
		// XXX: cache calling conventions by type
		return compute(Function.getParamTypeArray(ftype), Function.getReturnType(ftype));
	}
}
