// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class X86LinuxTarget extends Target {
	def PAGE_SIZE = 4096;
	def VADDR_START = 0x80000000;

	new(name: string) : super(name) {
	}
	def emit(compiler: Compiler) {
		// make an ELF file
		var elf = ElfHeader.new();
		elf.e_machine = ElfConst.EM_386;

		// fill out the code section
		var code = elf.addProgramHeader();
		code.p_type = ElfConst.PT_LOAD;
		code.p_offset = 0;
		code.p_vaddr = VADDR_START;
		code.p_filesz = PAGE_SIZE;
		code.p_memsz = PAGE_SIZE;
		code.p_flags = ElfConst.PF_RX;

		var u = MachDataEncoder.new(PAGE_SIZE, VADDR_START, false, 300);

		u.skipN(elf.size());
		elf.e_entry = u.posAddr();
		// assemble the code to call kernel.exit()
		var asm = X86Assembler.new(u);
		asm.movd_rm_i(X86Regs.EAX, 1);
		asm.movd_rm_i(X86Regs.EBX, 42);
		asm.intK(0x80);

		elf.encode(u.at(0));

		var file = compiler.getOutputFileName(compiler.programName(), null);
		var fd = System.fileOpen(file, false);
		if (fd < 0) return compiler.ERROR.OutputError(file);
		// write the entire file from the encoder array
		System.fileWriteK(fd, u.array, 0, u.end());
		System.fileClose(fd);
		// change permissions to make binary executable
		compiler.makeExecutable(file);
	}
}