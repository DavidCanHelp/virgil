// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Directs the creation of an x86-darwin binary.
class X86Darwin extends X86Runtime {
	new(context: SsaContext, test: bool, mach: MachProgram) super(context, test, mach) {
		header = MachO_Header.new(false); 
		header.cputype = MachO.CPU_TYPE_X86;
		header.filetype = MachO.MH_EXECUTE;
	}
	def emit() {
		// protect page zero for trapping null accesses
		var pz = newSegmentLoad("__NULL", 0);
		pz.vmsize = PAGE_SIZE;
		// code (text) segment starts at page 1
		var cs = newSegmentLoad("__TEXT", MachO.VM_PROT_RX);
		// data segment immediately follows code segment
		var ds = newSegmentLoad("__DATA", MachO.VM_PROT_RW);
		// initial thread state for registers (includes starting IP)
		var ts = MachO_X86ThreadState.new();
		header.addCmd(ts);
		// ex segment for trapping explicit checks
		var ex = if(src != null, newSegmentLoad("__EX", 0));
		// create the buffer
		var buffer = MachDataBuffer.new(PAGE_SIZE, 0, false, 300 + mach.numMethods * 50);
		// skip mach-o headers
		buffer.skipN(header.totalsize);
		// skip page zero
		buffer.skipPage();
		// generate code and runtime tables into buffer
		encodeCode(buffer, cs, ts);
		// generate the unmapped "ex" region for trapping explicit checks
		if (ex != null) {
			buffer.skipPage();
			var exStart = buffer.endPageAddr();
			var exSize = pageAlign(src.layoutExRegion(exStart));
			buffer.startAddr = buffer.startAddr + exSize;
			ex.vmaddr = exStart;
			ex.vmsize = exSize;
			ex.filesize = 0;
			ex.fileoff = 0;
		}
		// generate data into buffer
		buffer.skipPage();
		// compute starting location of data
		encodeData(buffer, ds);
		// patch all addresses in the binary
		buffer.patch(patchCodeAddr);
		// encode header at position 0 now that all addresses and offsets are known
		header.encode(buffer.at(0));
		header.encodeCmds(buffer);
		// open the output file
		var file = context.compiler.getOutputFileName(context.prog.name(), null);
		var fd = System.fileOpen(file, false);
		if (fd < 0) return context.prog.ERROR.OutputError(file);
		// write the entire file from the buffer array
		System.fileWriteK(fd, buffer.array, 0, buffer.end());
		System.fileClose(fd);
		// change permissions to make binary executable
		context.compiler.makeExecutable(file);
	}
	def newSegmentLoad(name: string, prot: int) ->  MachO_SegmentLoad {
		var s = MachO_SegmentLoad.new(name);
		s.initprot = prot;
		s.maxprot = prot;
		header.addCmd(s);
		return s;
	}
	def asm_exit_code(asm: X86Assembler, code: int) {
		asm.movd_rm_i(X86Regs.EAX, 1); // sys_exit() = 1
		asm.push_i(code);
		asm.push_i(0);
		asm.intK(0x80);
	}
	def asm_exit_rm(asm: X86Assembler, rm: X86Rm) {
		asm.push(rm);
		asm.movd_rm_i(X86Regs.EAX, 1); // sys_exit() = 1
		asm.push_i(0);
		asm.intK(0x80);
	}
	def encodeCode(u: MachDataBuffer, cs: MachO_SegmentLoad, ts: MachO_X86ThreadState) {
		var codeStartOffset = u.end();
		allocator.init(getFrame);
		ts.eip = u.endAddr();
		cs.vmaddr = u.endPageAddr();
		recordCodeStart(ts.eip);
		var asm = X86MacroAssembler.new(mach, u, codeStartOffset);
		genMainStub(asm);
		allocator.genAllocStub(asm);
		mach.layoutCode(u, genX86Code(_, asm));
		genSignalHandler(asm);
		var size = u.end();
		if (size < PAGE_SIZE) {
			// TODO: Santa or MacOS rejects binaries with text segments smaller than a page!
			u.skipN(PAGE_SIZE - size);
		}
		recordCodeEnd(u.endAddr());
		mach.layoutMeta(u);
		mach.layoutRuntime(u);
		cs.filesize = u.end();
		cs.vmsize = pageAlign(cs.filesize);
		cs.fileoff = 0;
	}
	def encodeData(u: MachDataBuffer, ds: MachO_SegmentLoad) {
		u.atEnd().align(mach.data.addressSize);
		ds.vmaddr = u.endPageAddr();
		ds.fileoff = ds.vmaddr - u.startAddr;
		recordDataStart(u.endAddr());
		mach.layoutData(u);
		recordDataEnd(u.endAddr());
		addHeapPointers(u);
		ds.filesize = u.end() - ds.fileoff;
		ds.vmsize = pageAlign(ds.filesize + heapSize);
	}
	def genTestOutput(asm: X86MacroAssembler, frame: MachFrame) {
		// output the return register as a 4-byte integer to stdout
		asm.push(asm.loc_rm(frame, frame.conv.callerRet(0)));
		asm.movd_rm_r(X86Regs.EBX, X86Regs.ESP);
		asm.push_i(4);			// size to write
		asm.push(X86Regs.EBX);		// pointer into stack
		asm.push_i(1);			// stdout
		asm.push_i(0);
		asm.movd_rm_i(X86Regs.EAX, 4); // write()
		asm.intK(0x80);
	}
	def genSignalHandler(asm: X86MacroAssembler) {
		// Specialized assembly to directly handle a signal from the kernel
		if (ri_signal == null) return;
		var handler_meth = ri_signal.spec.asMethod();
		var frame = getFrame(handler_meth.ssa);
		CiRuntimeModule.SIGNAL_STUB.setAbs(this, asm.machBuffer.posAddr());
		// "this" = null
		asm.movd_rm_i(asm.loc_rm(frame, frame.conv.calleeParam(0)), 0); // "this" = null
		var scratch = X86MachRegs.SCRATCH;
		// param 1 = signum @ [esp + 12]
		asm.movd_rm_rm(asm.loc_rm(frame, frame.conv.calleeParam(1)), X86Regs.ESP.plus(3 * mach.data.addressSize), scratch);
		// param 2 = siginfo @ [esp + 16]
		asm.movd_rm_rm(asm.loc_rm(frame, frame.conv.calleeParam(2)), X86Regs.ESP.plus(4 * mach.data.addressSize), scratch);
		// param 3 = ucontext @ [esp + 20]
		asm.movd_rm_rm(asm.loc_rm(frame, frame.conv.calleeParam(3)), X86Regs.ESP.plus(5 * mach.data.addressSize), scratch);
		// call RiRuntime.signal(signum: int, siginfo: Pointer, ucontext: Pointer)
		asm.call_addr(mach.addrOfMethod(handler_meth));
		// should not return
	}
	def genFatalStub(ex: string, addr: Addr, u: MachDataBuffer) {
		var asm = X86Assembler.new(u);
		addr.absolute = u.endAddr();
		// 1. encode a call to write() on stderr
		asm.push_i(ex.length + 1);			// size to write
		asm.push_i(X86Addrs.ABS_CONST);			// pointer to msg
		var msgAddrPos = asm.pos() - 4;
		asm.push_i(2);					// stderr
		asm.push_i(0);					// unused
		asm.movd_rm_i(X86Regs.EAX, 4);			// write()
		asm.intK(0x80);
		// 2. encode a call to exit()
		asm.push_i(-1);
		asm.push_i(-1);
		asm.movd_rm_i(X86Regs.EAX, 1);			// exit()
		asm.intK(0x80);
		// 3. output message at end of code
		var msgAddr = u.posAddr();
		u.i1('!');
		u.iN(ex);
		u.at(msgAddrPos).i4(msgAddr);
		u.atEnd();
	}
	// generate code that installs a signal handler
	def genSigHandlerInstall(asm: X86Assembler, signo: int, handler: Addr) {
		asm.push_i(0);			// sa_flags
		asm.push_i(0);			// sa_mask
		asm.push_i(X86Addrs.ABS_CONST);	// sa_handler: handler address
		recordPatch(asm, handler);
		asm.push_i(2);			// TODO: why a nonzero value here?
		asm.movd_rm_r(X86Regs.EBX, X86Regs.ESP);
		asm.push_i(0);			// sigaction *oact
		asm.push(X86Regs.EBX);		// sigaction *act
		asm.push_i(signo);		// signal number
		asm.push_i(0);			// "dummy" value
		asm.movd_rm_i(X86Regs.EAX, 46); // sigaction
		asm.intK(0x80);
		asm.add.rm_i(X86Regs.ESP, 32);	// pop params off stack
	}
	def genSystemOp(g: MachCodeGen, sys: SsaApplyOp, rv: VReg) {
		var gen = X86CodeGen.!(g);
		var inputs = sys.inputs;
		gen.frame.allocOverflow((1 + inputs.length) * mach.data.addressSize);
		// polymorphic system call: define EAX, EDX, and ECX = eflags
		gen.dfnAt(rv, X86MachRegs.EAX);
		// define second result in EDX
		gen.dfnAt(gen.vars[rv.varNum + 1], X86MachRegs.EDX);
		// define third result in ECX
		var flags = gen.vars[rv.varNum + 2];
		gen.dfnAt(flags, X86MachRegs.ECX);
		// accept system call number in EAX
		gen.useFixed(inputs[0].dest, X86MachRegs.EAX);
		// accept arguments on callee's portion of stack of current frame
		var start = gen.frame.conv.regSet.calleeStart;
		for (i = 1; i < inputs.length; i++) {
			gen.useFixed(inputs[i].dest, start + i);
		}
		gen.gen("darwin:int80", asmSystemOp, (gen, flags));
	}
	def genAlloc(g: MachCodeGen, i: SsaApplyOp, mv: VReg) {
		return allocator.gen_alloc(g, i, mv);
	}
	private def asmSystemOp(gen: X86CodeGen, flags: VReg) {
		// polymorphic
		gen.asm.intK(0x80);
		if (flags.live) {
			gen.asm.pushfd();         // push flags
			gen.asm.pop(X86Regs.ECX); // pop flags into ECX
		}
	}
}
// a mach-O thread state command for x86
class MachO_X86ThreadState extends MachO_LoadCmd {
	var eip: int;
	def encode(is64: bool, u: DataBuffer) {
		u.i4(0x5); // unix thread
		u.i4(80);  // 80 bytes for x86
		u.i4(1);   // X86 thread state
		u.i4(16);  // number of words
		// eax ebx ecx edx edi
		u.zeroN(5 * 4);
		// esi ebp esp ss eflags
		u.zeroN(5 * 4);
		// entrypoint address
		u.i4(eip);
		// cs ds es fs gs
		u.zeroN(5 * 4);
	}
	def size(is64: bool) -> int {
		return 80;
	}
}
