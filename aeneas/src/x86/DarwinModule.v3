// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class DarwinSyscall {
	def cfneg: bool;	// negate EAX if carry flag is set
	def sysnum: int;	// system call number
	def killEdx: bool;	// kills EDX as well
	new(cfneg, sysnum, killEdx) { }
}

component DarwinModule {
	def void_t = Void.TYPE;			// void
	def int_t  = Int.TYPE;			// platform-sized int
	def i32_t  = Int.TYPE;			// 32-bit int
	def i64_t  = Tuple.newType(Lists.cons2(Int.TYPE, Int.TYPE));
	def t2i_t  = i64_t;			// tuple of two ints
	def addr_t = MachModule.PTR_32.ptrType;	// address
	def str_t  = addr_t;			// null-terminated string
	def off_t  = i64_t;			// 64-bit offset
	def size_t = Int.TYPE;			// 32-bit int

	var darwinType: Type; // type of the "Darwin" component

	new() {
		var cdecl = VstComponent.new(Token.new("<builtin>", "Darwin", 0, 0), null);
		var typeCon = V3Component_TypeCon.new(cdecl);
		darwinType = typeCon.create(false, null);
		cdecl.memberMap = Strings.newMap();

		var T = true, F = false, N = TypeUtil.NO_TYPES;

		syscall(F, 1,   void_t,"exit",     [int_t]);
		syscall(F, 2,   int_t, "fork",     N);
		syscall(T, 3,   size_t,"read",     [int_t, addr_t, size_t]);
		syscall(T, 4,   size_t,"write",    [int_t, addr_t, size_t]);
		syscall(T, 5,   int_t, "open",     [str_t, int_t, int_t]);
		syscall(T, 6,   int_t, "close",    [int_t]);
		syscall(F, 7,   int_t, "wait4",    [int_t, addr_t, int_t, addr_t]);
//		syscall(F, 9,   int_t, "link",     [addr_t, addr_t]);
//		syscall(F, 10,  int_t, "unlink",   [addr_t]);
//		syscall(F, 12,  int_t, "chdir",    [addr_t]);
//		syscall(F, 13,  int_t, "fchdir",   [int_t]);
//		syscall(F, 14,  int_t, "mknod",    [addr_t, int_t, int_t]);
		syscall(F, 15,  int_t, "chmod",    [str_t, int_t]);
//		syscall(F, 16,  int_t, "chown",    [addr_t, int_t, int_t]);
//		syscall(F, 18,  int_t, "getfsstat", [addr_t, int_t, int_t]);
//		syscall(F, 20,  int_t, "getpid",   N);
//		syscall(F, 23,  int_t, "setuid",   [int_t]);
//		syscall(F, 24,  int_t, "getuid",   N);
//		syscall(F, 25,  int_t, "geteuid",  N);
//		syscall(F, 26,  int_t, "ptrace",   [int_t, pid_t, addr_t, int_t]);
//		syscall(F, 27,  int_t, "recvmsg",  [int_t, msghdr_p, int_t]);
//		syscall(F, 28,  int_t, "sendmsg",  [int_t, addr_t, int_t]);
//		syscall(F, 29,  int_t, "recvfrom", [int_t, addr_t, size_t, int_t, sockaddr_p, int_p]);
//		syscall(F, 30,  int_t, "accept",   [int_t, addr_t, int_p]);
//		syscall(F, 31,  int_t, "getpeername", [int_t, addr_t, int_p]);
//		syscall(F, 32,  int_t, "getsockname", [int_t, addr_t, int_p]);
//		syscall(F, 33,  int_t, "access",   [addr_t, int_t]);
//		syscall(F, 34,  int_t, "chflags",  [str_t, int_t]);
//		syscall(F, 35,  int_t, "fchflags", [int_t, int_t]);
//		syscall(F, 36,  int_t, "sync",     N);
//		syscall(F, 37,  int_t, "kill",     [int_t, int_t, int_t]);
//		syscall(F, 39,  int_t, "getppid",  N);
//		syscall(F, 41,  int_t, "dup",      [uint_t]);
//		syscall(F, 42,  int_t, "pipe",     N);
//		syscall(F, 43,  int_t, "getegid",  N);
//		syscall(F, 44,  int_t, "profil",   [addr_t, size_t, uint_t, uint_t]);
		syscall(F, 46,  int_t, "sigaction", [int_t, addr_t, addr_t]);
//		syscall(F, 47,  int_t, "getgid",   N);
		syscall(F, 48,  int_t, "sigprocmask", [int_t, addr_t, addr_t]);
//		syscall(F, 49,  int_t, "getlogin", [str_t, uint_t]);
//		syscall(F, 50,  int_t, "setlogin", [str_t]);
//		syscall(F, 51,  int_t, "acct",     [str_t]);
		syscall(F, 52,  int_t, "sigpending", [addr_t]);
//		syscall(F, 53,  int_t, "sigaltstack", [sigaltstack_p, sigaltstack_p]);
//		syscall(F, 54,  int_t, "ioctl",    [int_t, size_t, addr_t]);
//		syscall(F, 55,  int_t, "reboot",   [int_t, str_t]);
//		syscall(F, 56,  int_t, "revoke",   [str_t]);
//		syscall(F, 57,  int_t, "symlink",  [str_t, str_t]);
//		syscall(F, 58,  int_t, "readlink", [str_t, str_t, int_t]);
		syscall(F, 59,  int_t, "execve",   [str_t, addr_t, addr_t]);
//		syscall(F, 60,  int_t, "umask",    [int_t]);
//		syscall(F, 61,  int_t, "chroot",   [addr_t]);
//		syscall(F, 65,  int_t, "msync",    [addr_t, size_t, int_t]);
		syscall(F, 66,  int_t, "vfork",    N);
//		syscall(F, 73,  int_t, "munmap",   [addr_t, size_t]);
//		syscall(F, 74,  int_t, "mprotect", [addr_t, size_t, int_t]);
//		syscall(F, 75,  int_t, "madvise",  [addr_t, size_t, int_t]);
//		syscall(F, 78,  int_t, "mincore",  [addr_t, size_t, addr_t]);
//		syscall(F, 79,  int_t, "getgroups", [uint_t, int_p]);
//		syscall(F, 80,  int_t, "setgroups", [uint_t, int_p]);
//		syscall(F, 81,  int_t, "getpgrp",  N);
//		syscall(F, 82,  int_t, "setpgid",  [int_t, int_t]);
//		syscall(F, 83,  int_t, "setitimer",    [uint_t, itimerval_p, itimerval_p]);
//		syscall(F, 85,  int_t, "swapon",       N);
//		syscall(F, 86,  int_t, "getitimer",    [uint_t, itimerval_p]);
//		syscall(F, 89,  int_t, "getdtablesize", N);
//		syscall(F, 90,  int_t, "dup2",         [uint_t, uint_t]);
//		syscall(F, 92,  int_t, "fcntl",        [int_t, int_t, uint_t]);
//		syscall(F, 93,  int_t, "select",       [int_t, int_p, int_p, int_p, timeval_p]);
//		syscall(F, 95,  int_t, "fsync",        [int_t]);
//		syscall(F, 96,  int_t, "setpriority",  [int_t, id_t, int_t]);
//		syscall(F, 97,  int_t, "socket",       [int_t, int_t, int_t]);
//		syscall(F, 98,  int_t, "connect",      [int_t, addr_t, int_t]);
//		syscall(F, 100, int_t, "getpriority",  [int_t, id_t]);
//		syscall(F, 104, int_t, "bind",         [int_t, addr_t, int_t]);
//		syscall(F, 105, int_t, "setsockopt",   [int_t, int_t, int_t, addr_t, int_t]);
//		syscall(F, 106, int_t, "listen",       [int_t, int_t]);
//		syscall(F, 111, int_t, "sigsuspend",   [sigset_t]);
		syscall(F, 116, t2i_t, "gettimeofday", [addr_t, addr_t]);
//		syscall(F, 117, int_t, "getrusage",    [int_t, rusage_p]);
//		syscall(F, 118, int_t, "getsockopt",   [int_t, int_t, int_t, addr_t, int_p]);
//		syscall(F, 120, size_t, "readv",       [int_t, iovec_p, uint_t]);
//		syscall(F, 121, size_t, "writev",      [int_t, iovec_p, uint_t]);
//		syscall(F, 122, int_t, "settimeofday", [timeval_p, timezone_p]);
//		syscall(F, 123, int_t, "fchown",       [int_t, int_t, int_t]);
		syscall(F, 124, int_t, "fchmod",       [int_t, int_t]);
//		syscall(F, 126, int_t, "setreuid",     [int_t, int_t]);
//		syscall(F, 127, int_t, "setregid",     [int_t, int_t]);
//		syscall(F, 128, int_t, "rename",       [str_t, str_t]);
//		syscall(F, 131, int_t, "flock",        [int_t, int_t]);
//		syscall(F, 132, int_t, "mkfifo",       [str_t, int_t]);
//		syscall(F, 133, int_t, "sendto",       [int_t, addr_t, size_t, int_t, addr_t, int_t]);
//		syscall(F, 134, int_t, "shutdown",     [int_t, int_t]);
//		syscall(F, 135, int_t, "socketpair",   [int_t, int_t, int_t, int_p]);
		syscall(F, 136, int_t, "mkdir",        [str_t, int_t]);
		syscall(F, 137, int_t, "rmdir",        [str_t]);
//		syscall(F, 138, int_t, "utimes",       [str_t, timeval_p]);
//		syscall(F, 139, int_t, "futimes",      [int_t, timeval_p]);
//		syscall(F, 140, int_t, "adjtime",      [timeval_p, timeval_p]);
//		syscall(F, 142, int_t, "gethostuuid",  [str_t, timespec_p]);
//		syscall(F, 147, int_t, "setsid",       N);
//		syscall(F, 151, int_t, "getpgid",      [pid_t]);
//		syscall(F, 152, int_t, "setprivexec",  [int_t]);
//		syscall(F, 153, size_t, "pread",   [int_t, addr_t, size_t, off_t]);
//		syscall(F, 154, size_t, "pwrite",  [int_t, addr_t, size_t, off_t]);
//		syscall(F, 155, int_t, "nfssvc",   [int_t, addr_t]);
//		syscall(F, 157, int_t, "statfs",   [str_t, statfs_p]);
//		syscall(F, 158, int_t, "fstatfs",  [int_t, statfs_p]);
//		syscall(F, 159, int_t, "unmount",  [str_t, int_t]);
//		syscall(F, 161, int_t, "getfh",    [str_t, fhandle_p]);
//		syscall(F, 165, int_t, "quotactl", [str_t, int_t, int_t, addr_t]);
//		syscall(F, 167, int_t, "mount",    [str_t, str_t, int_t, addr_t]);
//		syscall(F, 169, int_t, "csops",    [pid_t, uint_t, addr_t, size_t]);
//		syscall(F, 173, int_t, "waitid",   [idtype_t, id_t, siginfo_p, int_t]);
//		syscall(F, 176, int_t, "add_profil", [addr_t, size_t, u_long, uint_t]);
//		syscall(F, 180, int_t, "kdebug_trace", [int_t, int_t, int_t, int_t, int_t, int_t]);
//		syscall(F, 181, int_t, "setgid",    [int_t]);
//		syscall(F, 182, int_t, "setegid",   [int_t]);
//		syscall(F, 183, int_t, "seteuid",   [int_t]);
//		syscall(F, 184, int_t, "sigreturn", [ucontext_p, int_t]);
//		syscall(F, 185, int_t, "chud",      [u64_t, u64_t, u64_t, u64_t, u64_t, u64_t]);
//		syscall(F, 187, int_t, "fdatasync", [int_t]);
		syscall(T, 188, int_t, "stat",     [str_t, addr_t]);
		syscall(T, 189, int_t, "fstat",    [int_t, addr_t]);
//		syscall(F, 190, int_t, "lstat",    [str_t, addr_t]);
//		syscall(F, 191, int_t, "pathconf", [str_t, int_t]);
//		syscall(F, 192, int_t, "fpathconf", [int_t, int_t]);
//		syscall(F, 194, int_t, "getrlimit", [uint_t, rlimit_p]);
//		syscall(F, 195, int_t, "setrlimit", [uint_t, rlimit_p]);
//		syscall(F, 196, int_t, "getdirentries", [int_t, str_t, uint_t, addr_t]);
//		syscall(F, 197, addr_t, "mmap",    [addr_t, size_t, int_t, int_t, int_t, off_t]);
		syscall(F, 199, off_t, "lseek",    [int_t, off_t, int_t]);
//		syscall(F, 200, int_t, "truncate", [str_t, off_t]);
//		syscall(F, 201, int_t, "ftruncate", [int_t, off_t]);
//		syscall(F, 202, int_t, "__sysctl", [int_p, uint_t, addr_t, int_p, addr_t, size_t]);
//		syscall(F, 203, int_t, "mlock", [addr_t, size_t]);
//		syscall(F, 204, int_t, "munlock", [addr_t, size_t]);
//		syscall(F, 205, int_t, "undelete", [str_t]);
//		syscall(F, 206, int_t, "ATsocket", [int_t]);
//		syscall(F, 207, int_t, "ATgetmsg", [int_t, addr_t, addr_t, int_p]);
//		syscall(F, 208, int_t, "ATputmsg", [int_t, addr_t, addr_t, int_t]);
//		syscall(F, 209, int_t, "ATPsndreq", [int_t, addr_t, int_t, int_t]);
//		syscall(F, 210, int_t, "ATPsndrsp", [int_t, addr_t, int_t, int_t]);
//		syscall(F, 211, int_t, "ATPgetreq", [int_t, addr_t, int_t]);
//		syscall(F, 212, int_t, "ATPgetrsp", [int_t, addr_t]);
//		syscall(F, 216, int_t, "mkcomplex", [str_t, mode_t, u_long]);
//		syscall(F, 217, int_t, "statv", [str_t, vstat_p]);
//		syscall(F, 218, int_t, "lstatv", [str_t, vstat_p]);
//		syscall(F, 219, int_t, "fstatv", [int_t, vstat_p]);
//		syscall(F, 220, int_t, "getattrlist", [str_t, attrlist_p, addr_t, size_t, u_long]);
//		syscall(F, 221, int_t, "setattrlist", [str_t, attrlist_p, addr_t, size_t, u_long]);
//		syscall(F, 222, int_t, "getdirentriesattr", [int_t, attrlist_p, addr_t, size_t, long_p, long_p, long_p, u_long]);
//		syscall(F, 223, int_t, "exchangedata", [str_t, str_t, u_long]);
//		syscall(F, 225, int_t, "searchfs", [str_t, fssearchblock_p, u32_p, u32_t, u32_t, searchstate_p]);
//		syscall(F, 226, int_t, "delete", [str_t]);
//		syscall(F, 227, int_t, "copyfile", [str_t, str_t, int_t, int_t]);
//		syscall(F, 228, int_t, "fgetattrlist", [int_t, attrlist_p, addr_t, size_t, u_long]);
//		syscall(F, 229, int_t, "fsetattrlist", [int_t, attrlist_p, addr_t, size_t, u_long]);
//		syscall(F, 230, int_t, "poll", [pollfd_p, uint_t, int_t]);
//		syscall(F, 231, int_t, "watchevent", [eventreq_p, int_t]);
//		syscall(F, 232, int_t, "waitevent",  [eventreq_p, timeval_p]);
//		syscall(F, 233, int_t, "modwatch",   [eventreq_p, int_t]);
//		syscall(F, 234, size_t, "getxattr",  [str_t, addr_t, addr_t, size_t, u32_t, int_t]);
//		syscall(F, 235, size_t, "fgetxattr", [int_t, addr_t, addr_t, size_t, u32_t, int_t]);
//		syscall(F, 236, int_t, "setxattr",   [str_t, addr_t, addr_t, size_t, u32_t, int_t]);
//		syscall(F, 237, int_t, "fsetxattr",  [int_t, addr_t, addr_t, size_t, u32_t, int_t]);
//		syscall(F, 238, int_t, "removexattr", [str_t, addr_t, int_t]);
//		syscall(F, 239, int_t, "fremovexattr", [int_t, addr_t, int_t]);
//		syscall(F, 240, size_t, "listxattr",   [str_t, addr_t, size_t, int_t]);
//		syscall(F, 241, size_t, "flistxattr",  [int_t, addr_t, size_t, int_t]);
//		syscall(F, 242, int_t, "fsctl",       [str_t, u_long, addr_t, uint_t]);
//		syscall(F, 243, int_t, "initgroups",  [uint_t, int_p, int_t]);
//		syscall(F, 244, int_t, "posix_spawn", [int_p, str_t, posix_spawn_args_desc_p, addr_t, addr_t]);
//		syscall(F, 245, int_t, "ffsctl",  [int_t, u_long, addr_t, uint_t]);
//		syscall(F, 247, int_t, "nfsclnt", [int_t, addr_t]);
//		syscall(F, 248, int_t, "fhopen",  [fhandle_p, int_t]);
//		syscall(F, 250, int_t, "minherit", [addr_t, size_t, int_t]);
//		syscall(F, 251, int_t, "semsys",  [uint_t, int_t, int_t, int_t, int_t]);
//		syscall(F, 252, int_t, "msgsys",  [uint_t, int_t, int_t, int_t, int_t]);
//		syscall(F, 253, int_t, "shmsys",  [uint_t, int_t, int_t, int_t]);
//		syscall(F, 254, int_t, "semctl",  [int_t, int_t, int_t, semun_t]);
//		syscall(F, 255, int_t, "semget",  [key_t, int_t, int_t]);
//		syscall(F, 256, int_t, "semop",   [int_t, sembuf_p, int_t]);
//		syscall(F, 258, int_t, "msgctl",  [int_t, int_t, msqid_ds_p]);
//		syscall(F, 259, int_t, "msgget",  [key_t, int_t]);
//		syscall(F, 260, int_t, "msgsnd",  [int_t, addr_t, size_t, int_t]);
//		syscall(F, 261, size_t, "msgrcv", [int_t, addr_t, size_t, long, int_t]);
//		syscall(F, 262, addr_t, "shmat",  [int_t, addr_t, int_t]);
//		syscall(F, 263, int_t, "shmctl",  [int_t, int_t, shmid_ds_p]);
//		syscall(F, 264, int_t, "shmdt",   [addr_t]);
//		syscall(F, 265, int_t, "shmget",  [key_t, size_t, int_t]);
//		syscall(F, 266, int_t, "shm_open",   [str_t, int_t, int_t]);
//		syscall(F, 267, int_t, "shm_unlink", [str_t]);
//		syscall(F, 268, addr_t, "sem_open",  [str_t, int_t, int_t, int_t]);
//		syscall(F, 269, int_t, "sem_close",  [sem_p]);
//		syscall(F, 270, int_t, "sem_unlink", [str_t]);
//		syscall(F, 271, int_t, "sem_wait",   [sem_p]);
//		syscall(F, 272, int_t, "sem_trywait", [sem_p]);
//		syscall(F, 273, int_t, "sem_post", [sem_p]);
//		syscall(F, 274, int_t, "sem_getvalue", [sem_p, int_p]);
//		syscall(F, 275, int_t, "sem_init", [sem_p, int_t, uint_t]);
//		syscall(F, 276, int_t, "sem_destroy", [sem_p]);
//		syscall(F, 277, int_t, "open_extended", [str_t, int_t, int_t, int_t, int_t, addr_t]);
//		syscall(F, 278, int_t, "umask_extended", [int_t, addr_t]);
//		syscall(F, 279, int_t, "stat_extended", [str_t, addr_t, addr_t, addr_t]);
//		syscall(F, 280, int_t, "lstat_extended", [str_t, addr_t, addr_t, addr_t]);
//		syscall(F, 281, int_t, "fstat_extended", [int_t, addr_t, addr_t, addr_t]);
//		syscall(F, 282, int_t, "chmod_extended", [str_t, int_t, int_t, int_t, addr_t]);
//		syscall(F, 283, int_t, "fchmod_extended", [int_t, int_t, int_t, int_t, addr_t]);
//		syscall(F, 284, int_t, "access_extended", [addr_t, size_t, addr_t, int_t]);
//		syscall(F, 285, int_t, "settid", [int_t, int_t]);
//		syscall(F, 286, int_t, "gettid", [int_p, int_p]);
//		syscall(F, 287, int_t, "setsgroups", [int_t, addr_t]);
//		syscall(F, 288, int_t, "getsgroups", [addr_t, addr_t]);
//		syscall(F, 289, int_t, "setwgroups", [int_t, addr_t]);
//		syscall(F, 290, int_t, "getwgroups", [addr_t, addr_t]);
//		syscall(F, 291, int_t, "mkfifo_extended", [str_t, int_t, int_t, int_t, addr_t]);
//		syscall(F, 292, int_t, "mkdir_extended", [str_t, int_t, int_t, int_t, addr_t]);
//		syscall(F, 293, int_t, "identitysvc", [int_t, addr_t]);
//		syscall(F, 294, int_t, "shared_region_check_np", [addr_t]);
//		syscall(F, 295, int_t, "shared_region_map_np", [int_t, u32_t, shared_file_mapping_np_p]);
//		syscall(F, 296, int_t, "vm_pressure_monitor", [int_t, int_t, u32_p]);
//		syscall(F, 297, u32_t, "psynch_rw_longrdlock", [addr_t, u32_t, u32_t, u32_t, int_t]);
//		syscall(F, 298, u32_t, "psynch_rw_yieldwrlock", [addr_t, u32_t, u32_t, u32_t, int_t]);
//		syscall(F, 299, int_t, "psynch_rw_downgrade", [addr_t, u32_t, u32_t, u32_t, int_t]);
//		syscall(F, 300, u32_t, "psynch_rw_upgrade", [addr_t, u32_t, u32_t, u32_t, int_t]);
//		syscall(F, 301, u32_t, "psynch_mutexwait", [addr_t,  u32_t, u32_t , u64_t, u32_t]);
//		syscall(F, 302, u32_t, "psynch_mutexdrop", [addr_t,  u32_t, u32_t , u64_t, u32_t]);
//		syscall(F, 303, int_t, "psynch_cvbroad", [addr_t, u32_t, u32_t, addr_t,  u32_t, u32_t, u64_t, u32_t]);
//		syscall(F, 304, int_t, "psynch_cvsignal", [addr_t, u32_t, u32_t, addr_t,  u32_t, u32_t, int_t, u32_t]);
//		syscall(F, 305, u32_t, "psynch_cvwait", [addr_t, u32_t, u32_t, addr_t,  u32_t, u32_t, u64_t, u64_t]);
//		syscall(F, 306, u32_t, "psynch_rw_rdlock", [addr_t, u32_t, u32_t, u32_t, int_t]);
//		syscall(F, 307, u32_t, "psynch_rw_wrlock", [addr_t, u32_t, u32_t, u32_t, int_t]);
//		syscall(F, 308, u32_t, "psynch_rw_unlock", [addr_t, u32_t, u32_t, u32_t, int_t]);
//		syscall(F, 309, u32_t, "psynch_rw_unlock2", [addr_t, u32_t, u32_t, u32_t]);
//		syscall(F, 310, int_t, "getsid", [pid_t]);
//		syscall(F, 311, int_t, "settid_with_pid", [pid_t, int_t]);
//		syscall(F, 313, int_t, "aio_fsync", [int_t, addr_t]);
//		syscall(F, 314, size_t, "aio_return", [addr_t]);
//		syscall(F, 315, int_t, "aio_suspend", [addr_t, int_t, addr_t]);
//		syscall(F, 316, int_t, "aio_cancel", [int_t, addr_t]);
//		syscall(F, 317, int_t, "aio_error", [addr_t]);
//		syscall(F, 318, int_t, "aio_read",  [addr_t]);
//		syscall(F, 319, int_t, "aio_write", [addr_t]);
//		syscall(F, 320, int_t, "lio_listio", [int_t, addr_t, int_t, addr_t]);
//		syscall(F, 322, int_t, "iopolicysys", [int_t, addr_t]);
//		syscall(F, 324, int_t, "mlockall", [int_t]);
//		syscall(F, 325, int_t, "munlockall", [int_t]);
//		syscall(F, 327, int_t, "issetugid", N);
//		syscall(F, 328, int_t, "__pthread_kill", [int_t, int_t]);
//		syscall(F, 329, int_t, "__pthread_sigmask", [int_t, addr_t, addr_t]);
//		syscall(F, 330, int_t, "__sigwait", [addr_t, addr_t]);
//		syscall(F, 331, int_t, "__disable_threadsignal", [int_t]);
//		syscall(F, 332, int_t, "__pthread_markcancel", [int_t]);
//		syscall(F, 333, int_t, "__pthread_canceled", [int_t]);
//		syscall(F, 334, int_t, "__semwait_signal", [int_t, int_t, int_t, int_t, i64_t, i32_t]);
//		syscall(F, 336, int_t, "proc_info", [i32_t, i32_t, u32_t, u64_t, addr_t, i32_t]);
//		syscall(F, 337, int_t, "sendfile", [int_t, int_t, off_t, off_p, sf_hdtr_p, int_t]);
//		syscall(F, 338, int_t, "stat64", [str_t, addr_t]);
//		syscall(F, 339, int_t, "fstat64", [int_t, addr_t]);
//		syscall(F, 340, int_t, "lstat64", [str_t, addr_t]);
//		syscall(F, 341, int_t, "stat64_extended", [str_t, addr_t, addr_t, addr_t]);
//		syscall(F, 342, int_t, "lstat64_extended", [str_t, addr_t, addr_t, addr_t]);
//		syscall(F, 343, int_t, "fstat64_extended", [int_t, addr_t, addr_t, addr_t]);
//		syscall(F, 344, size_t, "getdirentries64", [int_t, addr_t, size_t, off_p]);
//		syscall(F, 345, int_t, "statfs64", [str_t, statfs64_p]);
//		syscall(F, 346, int_t, "fstatfs64", [int_t, statfs64_p]);
//		syscall(F, 347, int_t, "getfsstat64", [addr_t, int_t, int_t]);
//		syscall(F, 348, int_t, "__pthread_chdir", [str_t]);
//		syscall(F, 349, int_t, "__pthread_fchdir", [int_t]);
//		syscall(F, 350, int_t, "audit", [addr_t, int_t]);
//		syscall(F, 351, int_t, "auditon", [int_t, addr_t, int_t]);
//		syscall(F, 353, int_t, "getauid", [au_id_p]);
//		syscall(F, 354, int_t, "setauid", [au_id_p]);
//		syscall(F, 355, int_t, "getaudit", [auditinfo_p]);
//		syscall(F, 356, int_t, "setaudit", [auditinfo_p]);
//		syscall(F, 357, int_t, "getaudit_addr", [auditinfo_addr_p, int_t]);
//		syscall(F, 358, int_t, "setaudit_addr", [auditinfo_addr_p, int_t]);
//		syscall(F, 359, int_t, "auditctl", [str_t]);
//		syscall(F, 360, addr_t, "bsdthread_create", [addr_t, addr_t, addr_t, addr_t, u32_t]);
//		syscall(F, 361, int_t, "bsdthread_terminate", [addr_t, size_t, u32_t, u32_t]);
//		syscall(F, 362, int_t, "kqueue", N);
//		syscall(F, 363, int_t, "kevent", [int_t, kevent_p, int_t, kevent_p, int_t, timespec_p]);
//		syscall(F, 364, int_t, "lchown", [str_t, int_t, int_t]);
//		syscall(F, 365, int_t, "stack_snapshot", [pid_t, addr_t, u32_t, u32_t, u32_t]);
//		syscall(F, 366, int_t, "bsdthread_register", [addr_t, addr_t, int_t, addr_t, addr_t, u64_t]);
//		syscall(F, 367, int_t, "workq_open", N);
//		syscall(F, 368, int_t, "workq_kernreturn", [int_t, addr_t, int_t, int_t]);
//		syscall(F, 369, int_t, "kevent64", [int_t, kevent64_s_p, int_t, kevent64_s_p, int_t, uint_t, timespec_p]);
//		syscall(F, 370, int_t, "__old_semwait_signal", [int_t, int_t, int_t, int_t, timespec_p]);
//		syscall(F, 371, int_t, "__old_semwait_signal_nocancel", [int_t, int_t, int_t, int_t, timespec_p]);
//		syscall(F, 372, u64_t, "thread_selfid",  N);
//		syscall(F, 380, int_t, "__mac_execve",   [str_t, addr_t, addr_t, mac_p]);
//		syscall(F, 381, int_t, "__mac_syscall",  [str_t, int_t, addr_t]);
//		syscall(F, 382, int_t, "__mac_get_file", [str_t, mac_p]);
//		syscall(F, 383, int_t, "__mac_set_file", [str_t, mac_p]);
//		syscall(F, 384, int_t, "__mac_get_link", [str_t, mac_p]);
//		syscall(F, 385, int_t, "__mac_set_link", [str_t, mac_p]);
//		syscall(F, 386, int_t, "__mac_get_proc", [mac_p]);
//		syscall(F, 387, int_t, "__mac_set_proc", [mac_p]);
//		syscall(F, 388, int_t, "__mac_get_fd",   [int_t, mac_p]);
//		syscall(F, 389, int_t, "__mac_set_fd",   [int_t, mac_p]);
//		syscall(F, 390, int_t, "__mac_get_pid",  [pid_t, mac_p]);
//		syscall(F, 391, int_t, "__mac_get_lcid", [pid_t, mac_p]);
//		syscall(F, 392, int_t, "__mac_get_lctx", [mac_p]);
//		syscall(F, 393, int_t, "__mac_set_lctx", [mac_p]);
//		syscall(F, 394, int_t, "setlcid", [pid_t, pid_t]);
//		syscall(F, 395, int_t, "getlcid", [pid_t]);
//		syscall(F, 396, size_t, "read_nocancel",   [int_t, addr_t, size_t]);
//		syscall(F, 397, size_t, "write_nocancel",  [int_t, addr_t, size_t]);
//		syscall(F, 398, int_t, "open_nocancel",    [str_t, int_t, int_t]);
//		syscall(F, 399, int_t, "close_nocancel",   [int_t]);
//		syscall(F, 400, int_t, "wait4_nocancel",   [int_t, addr_t, int_t, addr_t]);
//		syscall(F, 401, int_t, "recvmsg_nocancel", [int_t, msghdr_p, int_t]);
//		syscall(F, 402, int_t, "sendmsg_nocancel", [int_t, addr_t, int_t]);
//		syscall(F, 403, int_t, "recvfrom_nocancel", [int_t, addr_t, size_t, int_t, sockaddr_p, int_p]);
//		syscall(F, 404, int_t, "accept_nocancel", [int_t, addr_t, int_p]);
//		syscall(F, 405, int_t, "msync_nocancel",  [addr_t, size_t, int_t]);
//		syscall(F, 406, int_t, "fcntl_nocancel",  [int_t, int_t, int_t]);
//		syscall(F, 407, int_t, "select_nocancel", [int_t, int_p, int_p, int_p, timeval_p]);
//		syscall(F, 408, int_t, "fsync_nocancel",  [int_t]);
//		syscall(F, 409, int_t, "connect_nocancel", [int_t, addr_t, int_t]);
//		syscall(F, 410, int_t, "sigsuspend_nocancel", [sigset_t]);
//		syscall(F, 411, size_t, "readv_nocancel",  [int_t, iovec_p, uint_t]);
//		syscall(F, 412, size_t, "writev_nocancel", [int_t, iovec_p, uint_t]);
//		syscall(F, 413, int_t, "sendto_nocancel",  [int_t, addr_t, size_t, int_t, addr_t, int_t]);
//		syscall(F, 414, size_t, "pread_nocancel",  [int_t, addr_t, size_t, off_t]);
//		syscall(F, 415, size_t, "pwrite_nocancel", [int_t, addr_t, size_t, off_t]);
//		syscall(F, 416, int_t, "waitid_nocancel",  [idtype_t, id_t, siginfo_p, int_t]);
//		syscall(F, 417, int_t, "poll_nocancel",    [pollfd_p, uint_t, int_t]);
//		syscall(F, 418, int_t, "msgsnd_nocancel",  [int_t, addr_t, size_t, int_t]);
//		syscall(F, 419, size_t, "msgrcv_nocancel", [int_t, addr_t, size_t, int_t, int_t]);
//		syscall(F, 420, int_t, "sem_wait_nocancel", [sem_p]);
//		syscall(F, 421, int_t, "aio_suspend_nocancel", [addr_t, int_t, addr_t]);
//		syscall(F, 422, int_t, "__sigwait_nocancel", [addr_t, addr_t]);
//		syscall(F, 423, int_t, "__semwait_signal_nocancel", [int_t, int_t, int_t, int_t, i64_t, int_t]);
//		syscall(F, 424, int_t, "__mac_mount", [str_t, str_t, int_t, addr_t, mac_p]);
//		syscall(F, 425, int_t, "__mac_get_mount", [str_t, mac_p]);
//		syscall(F, 426, int_t, "__mac_getfsstat", [addr_t, int_t, addr_t, int_t, int_t]);
//		syscall(F, 427, size_t, "fsgetpath", [addr_t, size_t, addr_t, u64_t]);
//		syscall(F, 428, mach_port_name_t, "audit_session_self", N);
//		syscall(F, 429, int_t, "audit_session_join", [mach_port_name_t]);
//		syscall(F, 430, int_t, "pid_suspend", [int_t]);
//		syscall(F, 431, int_t, "pid_resume", [int_t]);
//		syscall(F, 432, int_t, "fileport_makeport", [int_t, addr_t]);
//		syscall(F, 433, int_t, "fileport_makefd", [mach_port_name_t]);
	}
	def syscall(cfneg: bool, num: int, returnType: Type, name: string, paramTypes: Array<Type>) {
		var syscall = DarwinSyscall.new(cfneg, num, returnType.typeCon == Tuple.TYPECON);
		var sysop = OperatorOf.new(MachOpcode.MachSystemOp, TypeUtil.NO_TYPES, paramTypes, returnType, syscall, MachOp.evalError<DarwinSyscall>);
		V3Op.registerOp(darwinType, name, sysop);
	}
	def install(compiler: Compiler) {
		compiler.prog.typeEnv.store("Darwin", darwinType.typeCon);
	}
}
