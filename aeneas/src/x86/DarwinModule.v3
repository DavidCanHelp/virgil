// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class DarwinSyscall {
	def cfneg: bool;	// negate EAX if carry flag is set
	def sysnum: int;	// system call number
	def killEdx: bool;	// kills EDX as well
	def typeParams: List<TypeParam>;
	new(cfneg, sysnum, killEdx, typeParams) { }
}

component DarwinModule {
	def void_t = Void.TYPE;			// void
	def int_t  = Int.TYPE;			// platform-sized int
	def i64_t  = Tuple.newType(Lists.cons2(Int.TYPE, Int.TYPE));
	def t2i_t  = i64_t;			// tuple of two ints
	def addr_t = MachModule.PTR_32.ptrType;	// address
	def str_t  = addr_t;			// null-terminated string

	var darwin = Syscall_TypeCon.new("Darwin");

	new() {
		var T = true, F = false, N = TypeUtil.NO_TYPES;

		syscall(F, 1,   void_t,"exit",		[int_t]);
		syscall(F, 2,   int_t, "fork",		N);
		syscall(T, 3,   int_t,"read",		[int_t, addr_t, int_t]);
		syscall(T, 4,   int_t,"write",		[int_t, addr_t, int_t]);
		syscall(T, 5,   int_t, "open",		[str_t, int_t, int_t]);
		syscall(T, 6,   int_t, "close",		[int_t]);
		syscall(F, 15,  int_t, "chmod",		[str_t, int_t]);
		syscall(F, 46,  int_t, "sigaction",	[int_t, addr_t, addr_t]);
		syscall(F, 116, t2i_t, "gettimeofday",	[addr_t, addr_t]);
		syscall(T, 188, int_t, "stat",		[str_t, addr_t]);
		syscall(T, 189, int_t, "fstat",		[int_t, addr_t]);
		syscall(F, 199, i64_t, "lseek",		[int_t, i64_t, int_t]);

		// polymorphic system call
		var typeParam = TypeUtil.ONE_TYPE_PARAM.head;
		var returnType = Tuple.newType(Lists.cons3(Int.TYPE, Int.TYPE, Int.TYPE));
		var syscall = DarwinSyscall.new(false, 0, true, TypeUtil.ONE_TYPE_PARAM);
		var sysop = OperatorOf.new(MachOpcode.MachSystemOp, [typeParam], [Int.TYPE, typeParam], returnType, syscall, MachOp.evalError<DarwinSyscall>);
		darwin.syscalls.set("syscall", (sysop, syscall.typeParams));
	}
	def syscall(cfneg: bool, num: int, returnType: Type, name: string, paramTypes: Array<Type>) {
		var syscall = DarwinSyscall.new(cfneg, num, returnType.typeCon == Tuple.TYPECON, null);
		var sysop = OperatorOf.new(MachOpcode.MachSystemOp, TypeUtil.NO_TYPES, paramTypes, returnType, syscall, MachOp.evalError<DarwinSyscall>);
		darwin.syscalls.set(name, (sysop, null));
	}
	def install(compiler: Compiler) {
		compiler.prog.typeEnv.add(darwin);
	}
}
