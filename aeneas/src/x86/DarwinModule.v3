// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class DarwinSyscall {
}

component DarwinModule {
	def void_t = Void.TYPE;			// void
	def int_t  = Int.TYPE;			// platform-sized int
	def i64_t  = Tuple.newType(Lists.cons2(Int.TYPE, Int.TYPE));
	def t2i_t  = i64_t;			// tuple of two ints
	def addr_t = MachModule.PTR_32.ptrType;	// address
	def str_t  = addr_t;			// null-terminated string

	var darwin = Syscall_TypeCon.new("Darwin");

	new() {
		// polymorphic system call
		var typeParam = TypeUtil.ONE_TYPE_PARAM.head;
		var returnType = Tuple.newType(Lists.cons3(Int.TYPE, Int.TYPE, Int.TYPE));
		var syscall = DarwinSyscall.new();
		var sysop = OperatorOf.new(MachOpcode.MachSystemOp, [typeParam], [Int.TYPE, typeParam], returnType, syscall, MachOp.evalError<DarwinSyscall>);
		darwin.syscalls.set("syscall", (sysop, TypeUtil.ONE_TYPE_PARAM));
	}
	def install(compiler: Compiler) {
		compiler.prog.typeEnv.add(darwin);
	}
}
