// Copyright 2015 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def enumSetName(classDecl: VstClass) -> string {
	return Strings.toBuffer(classDecl.fullName).putc('.').puts("set").toString();
}
// Type constructor for sets of enums.
class V3EnumSet_TypeCon extends Member_TypeCon {
	def classDecl: VstClass;
	def intType = Int.getType(false, classDecl.cases.length);
	var binopTypes: Array<Type>;
	def eqOp = intType.lookupInfix0(V3Infix.Equal);
	def neOp = intType.lookupInfix0(V3Infix.NotEqual);
	def andOp = intType.lookupInfix0(V3Infix.And);
	def orOp = intType.lookupInfix0(V3Infix.Or);
	def xorOp = intType.lookupInfix0(V3Infix.Xor);

	new(classDecl, typeCache: TypeCache) 
		super(enumSetName(classDecl), V3Kind.ENUM_SET, 0, typeCache) {
	}
	// Lookup "Type.member" or "receiver.member"
	def lookupMember2(t: Type, name: string, receiver: bool) -> LookupResult {
		var c = classDecl.memberMap.get(name);
		if (VstCaseMember.?(c)) {
			// simple membership check
			var gen = SsaGenerator.new(TypeUtil.NO_TYPES, [t], Bool.TYPE, genMembershipCheck(VstCaseMember.!(c), _, _, _, _, _));
			return LookupResult.Gen(gen, null, Facts.O_PURE);
		}
		if (!receiver && Strings.equal(name, "all")) {
			// the full set of all cases
			return LookupResult.Value(intType, intType.max);
		}
		return LookupResult.None;
	}
	// Lookup "x (infix) y"
	def lookupInfix(infix: byte, rtype: Type) -> Computation {
		if (binopTypes == null) binopTypes = [create0(), create0()];
		var f = genIntersect, result = create0();
		match(infix) {
			V3Infix.And:  f = genIntersect;
			V3Infix.Or:   f = genUnion;
			V3Infix.Sub:  f = genSubtract;
			V3Infix.Lt:   { f = genStrictSubset; result = Bool.TYPE; }
			V3Infix.Gt:   { f = genStrictSuperset; result = Bool.TYPE; }
			V3Infix.Lteq: { f = genSubset; result = Bool.TYPE; }
			V3Infix.Gteq: { f = genSuperset; result = Bool.TYPE; }
			_: return null;
		}
		return SsaGenerator.new(TypeUtil.NO_TYPES, binopTypes, result, f);
	}

	//========================= SSA generators =============================
	def genMembershipCheck(vcase: VstCaseMember, context: SsaContext, source: Source, args: Array<SsaInstr>, facts: int, block: SsaBuilder) -> SsaInstr {
		var val: Val = if(intType.width <= 32, Int.box(1 #<< vcase.tag), Long.box(1L #<< vcase.tag));
		var mask = context.graph.valConst(intType, val);
		var and = block.addApply(source, andOp, [args(0), mask]);
		var cmp = block.addApply(source, eqOp, [and, mask]);
		return cmp;
	}
	def genUnion(context: SsaContext, source: Source, args: Array<SsaInstr>, facts: int, block: SsaBuilder) -> SsaInstr {
		return block.addApply(source, orOp, args);
	}
	def genIntersect(context: SsaContext, source: Source, args: Array<SsaInstr>, facts: int, block: SsaBuilder) -> SsaInstr {
		return block.addApply(source, andOp, args);
	}
	def genSubtract(context: SsaContext, source: Source, args: Array<SsaInstr>, facts: int, block: SsaBuilder) -> SsaInstr {
		var inv = block.addApply(source, xorOp, [args(1), context.graph.intConst(-1)]);
		return block.addApply(source, andOp, [args(0), inv]);
	}
	def genStrictSubset(context: SsaContext, source: Source, args: Array<SsaInstr>, facts: int, block: SsaBuilder) -> SsaInstr {
		var intersect = block.addApply(source, andOp, args);
		var lt = block.addApply(source, eqOp, [args(0), intersect]);
		var neq = block.addApply(source, neOp, [args(0), args(1)]);
		return block.opBoolAnd(V3Op.opBoolAnd, lt, neq);
	}
	def genStrictSuperset(context: SsaContext, source: Source, args: Array<SsaInstr>, facts: int, block: SsaBuilder) -> SsaInstr {
		var intersect = block.addApply(source, andOp, args);
		var gt = block.addApply(source, eqOp, [args(1), intersect]);
		var neq = block.addApply(source, neOp, [args(0), args(1)]);
		return block.opBoolAnd(V3Op.opBoolAnd, gt, neq);
	}
	def genSubset(context: SsaContext, source: Source, args: Array<SsaInstr>, facts: int, block: SsaBuilder) -> SsaInstr {
		var intersect = block.addApply(source, andOp, args);
		return block.addApply(source, eqOp, [args(0), intersect]);
	}
	def genSuperset(context: SsaContext, source: Source, args: Array<SsaInstr>, facts: int, block: SsaBuilder) -> SsaInstr {
		var intersect = block.addApply(source, andOp, args);
		return block.addApply(source, eqOp, [args(1), intersect]);
	}
}
