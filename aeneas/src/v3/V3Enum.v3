// Copyright 2015 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def enumSetName(classDecl: VstClass) -> string {
	return Strings.builderOf(classDecl.fullName).puts(".set").toString();
}
def intTypeOrU1(length: int) -> IntType {
	return Int.getType(false, if(length == 0, 1, length));
}
// Type constructor for sets of enums.
class V3EnumSet_TypeCon extends TypeCon {
	def classDecl: VstClass;
	def intType = intTypeOrU1(classDecl.cases.length);
	private var types: Array<Type>;
	def eqOp = intType.opEq();
	def andOp = intType.opAnd();
	def orOp = intType.opOr();
	def xorOp = intType.opXor();

	new(classDecl, typeCache: TypeCache) super(enumSetName(classDecl), V3Kind.ENUM_SET, 0, typeCache) {
	}

	def genEnumToSet(x: SsaInstr, block: SsaBuilder) -> SsaInstr {
		var one = block.graph.valConst(intType, intType.box(1));
		var i = block.addApply(null, intType.opShl(), [one, x]);
		i.facts |= Fact.O_NO_SHIFT_CHECK;
		return i;
	}
	def binopTypes() -> Array<Type> {
		if (types == null) {
			var t = create0();
			types = [t, t];
		}
		return types;
	}
}
