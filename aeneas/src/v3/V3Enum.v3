// Copyright 2015 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def enumSetName(classDecl: VstClass) -> string {
	return Strings.toBuffer(classDecl.fullName).puts(".set").toString();
}
def intTypeOrU1(length: int) -> IntType {
	return Int.getType(false, if(length == 0, 1, length));
}
// Type constructor for sets of enums.
class V3EnumSet_TypeCon extends Member_TypeCon {
	def classDecl: VstClass;
	def intType = intTypeOrU1(classDecl.cases.length);
	var binopTypes: Array<Type>;
	def eqOp = intType.lookupInfix0(V3Infix.EqEq);
	def andOp = intType.lookupInfix0(V3Infix.And);
	def orOp = intType.lookupInfix0(V3Infix.Or);
	def xorOp = intType.lookupInfix0(V3Infix.Xor);

	new(classDecl, typeCache: TypeCache) 
		super(enumSetName(classDecl), V3Kind.ENUM_SET, 0, typeCache) {
	}
	// Lookup "Type.member" or "receiver.member"
	def lookupMember(t: Type, name: string, receiver: bool) -> LookupResult {
		var c = classDecl.memberMap[name];
		if (VstCaseMember.?(c)) {
			// simple membership check
			var op = V3Op.newVstSugar(VstOperator.EnumSetHas(VstCaseMember.!(c)), TypeUtil.NO_TYPES, [t], Bool.TYPE);
			return if(receiver, LookupResult.Apply(op, null, Fact.O_PURE), LookupResult.Inst(op, null));
		}
		if (!receiver && Strings.equal(name, "all")) {
			// the full set of all cases
			return LookupResult.Const(create0(), intType.max);
		}
		return LookupResult.None;
	}
	// Lookup "x <infix> y"
	def lookupInfix(infix: V3Infix, rtype: Type) -> Operator {
		if (binopTypes == null) binopTypes = [create0(), create0()];
		var op: VstOperator, result = create0();
		match (infix) {
			And =>  { op = VstOperator.EnumSetIntersect; }
			Or =>   { op = VstOperator.EnumSetUnion; }
			Sub =>  { op = VstOperator.EnumSetSubtract; }
			Lt =>   { op = VstOperator.EnumSetStrictSubset; result = Bool.TYPE; }
			Gt =>   { op = VstOperator.EnumSetStrictSuperset; result = Bool.TYPE; }
			LtEq => { op = VstOperator.EnumSetSubset; result = Bool.TYPE; }
			GtEq => { op = VstOperator.EnumSetSuperset; result = Bool.TYPE; }
			_ => return null;
		}
		return V3Op.newVstSugar(op, TypeUtil.NO_TYPES, binopTypes, result);
	}

	def genEnumToSet(x: SsaInstr, block: SsaBuilder) -> SsaInstr {
		var shl = intType.lookupInfix0(V3Infix.Shl);
		var one = block.graph.valConst(intType, intType.box(1));
		var i = block.addApply(null, shl, [one, x]);
		i.facts |= Fact.O_NO_SHIFT_CHECK;
		return i;
	}
}
