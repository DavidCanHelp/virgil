// Copyright 2015 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def enumSetName(classDecl: VstClass) -> string {
	return Strings.builderOf(classDecl.fullName).puts(".set").toString();
}
def intTypeOrU1(length: int) -> IntType {
	return Int.getType(false, if(length == 0, 1, length));
}
// Type constructor for sets of enums.
class V3EnumSet_TypeCon extends TypeCon {
	def classDecl: VstClass;
	def intType = intTypeOrU1(classDecl.cases.length);
	private var cache: V3EnumSet_OpCache;

	new(classDecl, typeCache: TypeCache) super(enumSetName(classDecl), V3Kind.ENUM_SET, 0, typeCache) {
	}
	def opcache() -> V3EnumSet_OpCache {
		if (cache == null) cache = V3EnumSet_OpCache.new(create0());
		return cache;
	}
	def genEnumToSet(x: SsaInstr, block: SsaBuilder) -> SsaInstr {
		var one = block.graph.valConst(intType, intType.box(1));
		var i = block.addApply(null, intType.opShl(), [one, x]);
		i.facts |= Fact.O_NO_SHIFT_CHECK;
		return i;
	}
}
class V3EnumSet_OpCache(t: Type) {
	private def binopTypes = [t, t];
	def opIntersect = V3Op.newVstSugar(VstOperator.EnumSetIntersect, TypeUtil.NO_TYPES, binopTypes, t);
	def opUnion = V3Op.newVstSugar(VstOperator.EnumSetUnion, TypeUtil.NO_TYPES, binopTypes, t);
	def opSub = V3Op.newVstSugar(VstOperator.EnumSetSubtract, TypeUtil.NO_TYPES, binopTypes, t);
	def opSubset = V3Op.newVstSugar(VstOperator.EnumSetSubset, TypeUtil.NO_TYPES, binopTypes, Bool.TYPE);
	def opStrictSubset = V3Op.newVstSugar(VstOperator.EnumSetStrictSubset, TypeUtil.NO_TYPES, binopTypes, Bool.TYPE);
	def opSuperset = V3Op.newVstSugar(VstOperator.EnumSetSuperset, TypeUtil.NO_TYPES, binopTypes, Bool.TYPE);
	def opStrictSuperset = V3Op.newVstSugar(VstOperator.EnumSetStrictSuperset, TypeUtil.NO_TYPES, binopTypes, Bool.TYPE);
}
