// Copyright 2015 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def enumSetName(classDecl: VstClass) -> string {
	return Strings.toBuffer(classDecl.fullName).putc('.').puts("set").toString();
}
// Type constructor for sets of enums.
class V3EnumSet_TypeCon extends Member_TypeCon {
	def classDecl: VstClass;
	def intType = Int.getType(false, classDecl.cases.length);

	new(classDecl, typeCache: TypeCache) 
		super(enumSetName(classDecl), V3Kind.ENUM_SET, 0, typeCache) {
	}
	def lookupMember(t: Type, name: string, receiver: bool) -> Member {
		if (receiver) {
			var c = classDecl.memberMap.get(name);
			if (VstCaseMember.?(c)) {
				// simple membership check
				return EnumSetMembershipCheck.new(t, intType, VstCaseMember.!(c));
			}
		} else {
			if (Strings.equal(name, "all")) {
				// the full set of all cases
				return Members.valMember(intType, intType.max, false);
			}
			// TODO: membership check functions
		}
		return null;
	}
}
// A membership check for enum sets lowers immediately to a bitwise and.
class EnumSetMembershipCheck extends Member {
	def enumSetType: Type;
	def intType: IntType;
	def vcase: VstCaseMember;
	new(enumSetType: Type, intType, vcase) super(false, Bool.TYPE, null) { }
	def genRead<E>(gen: Gen<E>, receiver: E) -> E {
		var val: Val = if(intType.width <= 32, Int.box(1 #<< vcase.tag), Long.box(1L #<< vcase.tag));
		var mask = gen.genVal(intType, val);
		var and = gen.genApplyOp(intType.lookupInfix0(V3Infix.And), [receiver, mask]);
		var cmp = gen.genApplyOp(intType.lookupInfix0(V3Infix.Equal), [and, mask]);
		return cmp;
	}
}