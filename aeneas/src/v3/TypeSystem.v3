// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Defines operations on types for type checking.
component TypeSystem {
	// static decisions about type casts and queries
	def TRUE = TypeCast.new(CastOp.TRUE, Bool.TRUE);
	def FALSE = TypeCast.new(CastOp.FALSE, Bool.FALSE);
	def TRUE_X_NULL = TypeCast.new(CastOp.TRUE_X_NULL, null);
	def FALSE_X_NULL = TypeCast.new(CastOp.FALSE_X_NULL, null);
	def UNKNOWN_QUERY = TypeCast.new(CastOp.UNKNOWN_QUERY, null);
	def UNKNOWN_CAST = TypeCast.new(CastOp.UNKNOWN_CAST, null);
	def CLASS_CAST = TypeCast.new(CastOp.CLASS_CAST, null);
	def CLASS_QUERY = TypeCast.new(CastOp.CLASS_QUERY, null);
	def INT_CONVERSION = TypeCast.new(CastOp.INT_CONVERSION, null);
	def INT_TO_FLOAT = TypeCast.new(CastOp.INT_TO_FLOAT, null);
	def FLOAT_TO_INT = TypeCast.new(CastOp.FLOAT_TO_INT, null);
	def INT_IS_FLOAT = TypeCast.new(CastOp.INT_IS_FLOAT, null);
	def FLOAT_IS_INT = TypeCast.new(CastOp.FLOAT_IS_INT, null);
	def ENUM_TO_SET = TypeCast.new(CastOp.ENUM_TO_SET, null);
	def TUPLE_CAST = TypeCast.new(CastOp.TUPLE_CAST, null);
	def TUPLE_QUERY = TypeCast.new(CastOp.TUPLE_QUERY, null);
	def VOID_CAST = TypeCast.new(CastOp.VALUE, null);

	// returns {true} if {t1} and {t2} are either the same type, or there is
	// some assignment to type parameters and variables where {t1} and {t2} are
	// the same type.
	def maybeEqual(t1: Type, t2: Type) -> bool {
		if (t1 == t2) return true;
		if (TypeParam.?(t1) || TypeParam.?(t2)) return true;
		if (TypeVar.?(t1) || TypeVar.?(t2)) return true;
		if (t1.typeCon == t2.typeCon) {
			return checkList(t1.nested, t2.nested, maybeEqual);
		}
		return false;
	}
	def isSubtype(t1: Type, t2: Type) -> bool {
		if (t1 == t2) return true;
		match (t2.typeCon.kind) {
			V3Kind.VARIANT => {
				if (V3.isVariant(t1)) {
					for (ct1 = t1; ct1 != null; ct1 = V3.getSuperType(ct1)) {
						if (ct1 == t2) return true;
						if (ct1.typeCon == t2.typeCon) return false;
					}
				}
				return false;
			}
			V3Kind.CLASS => {
				// check subtyping of classes by searching up the inheritance tree.
				if (t1 == Null.TYPE) return true;
				if (V3.isClass(t1)) {
					for (ct1 = t1; ct1 != null; ct1 = V3.getSuperType(ct1)) {
						if (ct1 == t2) return true;
						if (ct1.typeCon == t2.typeCon) return false;
					}
				}
				return false;
			}
			V3Kind.ARRAY => {
				// the only subtype of an array type is NULL.
				return t1 == Null.TYPE;
			} 
			V3Kind.TUPLE => {
				// tuples are co-variantly typed.
				if (V3.isTuple(t1)) return checkList(t1.nested, t2.nested, isSubtype);
				return false;
			}
			V3Kind.FUNCREF,
			V3Kind.CLOSURE => {
				if (t1 == Null.TYPE) return true;
				// functions are co-variant in return type and contra-variant in arguments.
				if (V3.isFunction(t1)) {
					var tl1 = t1.nested;
					var tl2 = t2.nested;
					return isSubtype(tl1.tail.head, tl2.tail.head)
						&& isSubtype(tl2.head, tl1.head);
				}
				return false;
			}
		}
		return false;
	}
	def isPromotable(src: Type, dest: Type) -> bool {
		if (dest == src || isSubtype(src, dest)) return true;
		if (IntType.?(src)) {
			var st = IntType.!(src);
			if (IntType.?(dest)) {
				var dt = IntType.!(dest);
				return isIntPromotable(st, dt);
			}
		}
		var skind = src.typeCon.kind, dkind = dest.typeCon.kind;
		if (skind == V3Kind.TUPLE && dkind == V3Kind.TUPLE) {
			return checkList(src.nested, dest.nested, isPromotable);
		}
		if (isEnumToSet(src, dest)) return true;
		if (dkind == V3Kind.FLOAT) {
			return isPromotableToFloat(src, Float_TypeCon.!(dest.typeCon));
		}
		return false;
	}
	def isIntPromotable(st: IntType, dt: IntType) -> bool {
		if (st.width > dt.width) return false;
		if (st.width == dt.width) return st.signed == dt.signed;
		return dt.signed || st.signed == dt.signed;
	}
	def isPromotableToFloat(src: Type, dtc: Float_TypeCon) -> bool {
		if (IntType.?(src)) {
			var st = IntType.!(src);
			if (st.signed) return st.width <= dtc.fraction_width;
			else return st.width <= 1 + dtc.fraction_width;
		}
		if (src.typeCon.kind == V3Kind.FLOAT) {
			var stc = Float_TypeCon.!(src.typeCon);
			return stc.total_width <= dtc.total_width;
		}
		return false;
	}
	def isEnumToSet(ft: Type, tt: Type) -> bool {
		if (ft.typeCon.kind == V3Kind.ENUM && tt.typeCon.kind == V3Kind.ENUM_SET) {
			return ClassType.!(ft).classDecl == V3EnumSet_TypeCon.!(tt.typeCon).classDecl;
		}
		return false;
	}
	// TODO: rename to allTrue(relation) ?
	// returns {true} if {func} is {true} for all pairs of elements from {a} and {b}.
	def checkList<T>(a: List<T>, b: List<T>, func: (T, T) -> bool) -> bool {
		while (a != null) {
			if (b == null) return false;
			if (!func(a.head, b.head)) return false;
			a = a.tail;
			b = b.tail;
		}
		return b == null;
	}
	def upper(t1: Type, t2: Type) -> Type {
		if (t1 == t2) {
			return t1;
		} else if (t1 == Null.TYPE && isReference(t2)) {
			return t2;
		} else if (t2 == Null.TYPE && isReference(t1)) {
			return t1;
		} else if (ClassType.?(t1)) {
			var crt = commonSuperClass(t1, t2);
			return if(crt.0 != null && crt.0 == crt.1, crt.0);
		} else if (V3.isFunction(t1)) {
			if (V3.isFunction(t2)) {
				return mergeLists(t1.nested, t2.nested, Function.CLOSURE, upper);
			}
			return null;
		} else if (V3.isTuple(t1) && V3.isTuple(t2)) {
			return mergeLists(t1.nested, t2.nested, Tuple.TYPECON, upper);
		}
		return null;
	}
	def widen(t1: Type, t2: Type) -> Type {
		if (t1 == t2) return t1;
		if (IntType.?(t1)) {
			var i1 = IntType.!(t1);
			if (IntType.?(t2)) {
				var i2 = IntType.!(t2);
				if (isIntPromotable(i1, i2)) return t2;
				if (isIntPromotable(i2, i1)) return t1;
			}
			return null;
		}
		match (t1.typeCon.kind) {
			V3Kind.TUPLE => if(t2.typeCon.kind == V3Kind.TUPLE) return mergeLists(t1.nested, t2.nested, Tuple.TYPECON, widen);
			V3Kind.ENUM => if(isEnumToSet(t1, t2)) return t2;
			V3Kind.ENUM_SET => if (isEnumToSet(t2, t1)) return t1;
		}
		return upper(t1, t2);
	}
	def mergeLists(tl1: List<Type>, tl2: List<Type>, tc: TypeCon, mergefun: (Type, Type) -> Type) -> Type {
		var rl: List<Type>;
		while (tl1 != null) {
			if (tl2 == null) return null;
			var rt = mergefun(tl1.head, tl2.head);
			if (rt == null) return null;
			rl = List.new(rt, rl);
			tl1 = tl1.tail;
			tl2 = tl2.tail;
		}
		if (tl2 == null) return tc.create(Lists.reverse(rl));
		return null;
	}
	def commonSuperClass(t1: Type, t2: Type) -> (Type, Type) {
		if (!ClassType.?(t1)) return (null, null);	// t1 is not a class.
		var ct1 = ClassType.!(t1);
		if (ct1.typeCon == t2.typeCon) return (ct1, t2); // common case: the same class.
		if (!ClassType.?(t2)) return (null, null);	// t2 is not a class.
		var ct2 = ClassType.!(t2);
		var d1 = ct1.getDepth(), d2 = ct2.getDepth();
		while (d1 > d2) { ct1 = ct1.getSuperType(); d1--; }	// walk up ct1 to the same depth
		while (d2 > d1) { ct2 = ct2.getSuperType(); d2--; }	// walk up ct2 to the same depth
		while (d1-- >= 0) {
			if (ct1.typeCon == ct2.typeCon) return (ct1, ct2);
			ct1 = ct1.getSuperType();
			if (ct1 == null) break;
			ct2 = ct2.getSuperType();
			if (ct2 == null) break;
		}
		return (null, null);
	}
	def isReference(t1: Type) -> bool {
		var kind = t1.typeCon.kind;
		return kind == V3Kind.CLASS || kind == V3Kind.ARRAY || kind == V3Kind.CLOSURE;
	}
	def unifyWiden(t1: Type, t2: Type) {
		unify(t1, t2, true);
	}
	def unifyUpper(t1: Type, t2: Type) {
		unify(t1, t2, false);
	}
	def unify(t1: Type, t2: Type, useWiden: bool) {
		if (TypeVar.?(t1)) {
			// solve for this type variable
			var tvar = TypeVar.!(t1);
			if (tvar.vtype == null) {
				tvar.setType(t2);
			} else {
				var sol = if (useWiden, widen(tvar.vtype, t2), upper(tvar.vtype, t2));
				if (sol != null) tvar.setType(sol);
			}
		} else if (t1.open()) {
			// XXX: some adjustments for better inference of class types
			// may help here. For example, marking the existing solution of
			// a type variable as "do not modify" since it is already refers
			// to a nested type of an invariant type constructor

			// solve for any type variables nested in this type
			if (V3.isTuple(t1) && V3.isTuple(t2)) {
				// if both are tuple types, continue with current unification function
				if (useWiden) Lists.reduceV(t1.nested, t2.nested, unifyWiden);
				else Lists.reduceV(t1.nested, t2.nested, unifyUpper);
			} else if (t1.typeCon == t2.typeCon) {
				// if typecons match exactly, use the upper() unification function
				Lists.reduceV(t1.nested, t2.nested, unifyUpper);
			} else {
				var common = commonSuperClass(t1, t2);
				var ct1 = common.0, ct2 = common.1;
				if (ct1 != null && ct2 != null) {
					Lists.reduceV(ct1.nested, ct2.nested, unifyUpper);
				}
			}
		}
	}
	def newTypeQuery(fromType: Type, toType: Type) -> TypeCast {
		if (fromType == Null.TYPE) return FALSE;
		if (TypeParam.?(toType)) return UNKNOWN_QUERY;
		if (TypeParam.?(fromType)) return UNKNOWN_QUERY;
		if (TypeVar.?(toType)) return UNKNOWN_QUERY;
		if (TypeVar.?(fromType)) return UNKNOWN_QUERY;
		if (V3.isClass(toType)) {
			if (fromType.typeCon.kind != toType.typeCon.kind) return FALSE;
			var ftc = ClassType.!(fromType), ttc = ClassType.!(toType);
			var fd = ftc.getDepth(), td = ttc.getDepth();
			var query: TypeCast;
			if (fd < td) {  // downquery
				for (i < (td - fd)) ttc = ttc.getSuperType();
				query = CLASS_QUERY;
			} else {  // upquery
				for (i < (fd - td)) ftc = ftc.getSuperType();
				query = if(fromType.typeCon.kind == V3Kind.CLASS, TRUE_X_NULL, TRUE);
			}
			if (ftc.typeCon == ttc.typeCon) return maybeQuery(ftc, ttc, query, FALSE);
			return FALSE;
		}
		if (V3.isTuple(fromType) && V3.isTuple(toType)) {
			return newTupleQuery(fromType, toType);
		}
		if (V3.isFunction(fromType) && V3.isFunction(toType)) {
			return checkFunctionSubtype(fromType, toType, UNKNOWN_QUERY);
		}
		if (V3.isArray(toType)) return maybeQuery(fromType, toType, TRUE_X_NULL, FALSE);
		if (fromType == toType) return TRUE;
		return maybeQuery(fromType, toType, TRUE, FALSE);
	}
	def checkFunctionSubtype(fromType: Type, toType: Type, unknown: TypeCast) -> TypeCast {
		// check param and return types
		if (fromType.open() || toType.open()) return unknown;
		var fl = fromType.nested, tl = toType.nested;
		if (!TypeSystem.isSubtype(fl.tail.head, tl.tail.head)) return FALSE;
		if (!TypeSystem.isSubtype(tl.head, fl.head)) return FALSE;
		return TRUE;
	}
	def newTypeCast(fromType: Type, toType: Type) -> TypeCast {
		if (fromType == toType) return TRUE;
		if (toType == Void.TYPE) return VOID_CAST;
		if (TypeParam.?(toType)) return UNKNOWN_CAST;
		if (TypeParam.?(fromType)) return UNKNOWN_CAST;
		if (TypeVar.?(toType)) return UNKNOWN_CAST;
		if (TypeVar.?(fromType)) return UNKNOWN_CAST;
		if (V3.isClass(toType)) {
			if (fromType == Null.TYPE) return TRUE;
			if (fromType.typeCon.kind != toType.typeCon.kind) return FALSE;
			var ftc = ClassType.!(fromType), ttc = ClassType.!(toType);
			var fd = ftc.getDepth(), td = ttc.getDepth();
			var cast: TypeCast;
			if (fd <= td) {  // downcast
				for (i < (td - fd)) ttc = ttc.getSuperType();
				cast = CLASS_CAST;
			} else {  // upcast (subsumption)
				for (i < (fd - td)) ftc = ftc.getSuperType();
				cast = TRUE;
			}
			var not = if(fromType.typeCon.kind == V3Kind.CLASS, FALSE_X_NULL, FALSE);
			if (ftc.typeCon == ttc.typeCon) return maybeCast(ftc, ttc, cast, not);
			return not;
		}
		if (V3.isTuple(fromType) && V3.isTuple(toType)) {
			return newTupleCast(fromType, toType);
		}
		if (V3.isFunction(fromType) && V3.isFunction(toType)) {
			return checkFunctionSubtype(fromType, toType, UNKNOWN_CAST);
		}
		if (V3.isArray(toType)) {
			if (fromType == Null.TYPE) return TRUE;
			return maybeCast(fromType, toType, TRUE, FALSE);
		}
		if (V3.isVariant(fromType)) {
			return maybeCast(fromType, toType, TRUE, FALSE);
		}
		if (IntType.?(fromType)) {
			if (IntType.?(toType)) return INT_CONVERSION;
			if (toType.typeCon.kind == V3Kind.FLOAT) return INT_IS_FLOAT;
		}
		if (fromType.typeCon.kind == V3Kind.FLOAT && IntType.?(toType)) return FLOAT_IS_INT;
		if (isEnumToSet(fromType, toType)) return ENUM_TO_SET;
		return FALSE;
	}
	def maybeQuery(t1: Type, t2: Type, eq: TypeCast, neq: TypeCast) -> TypeCast {
		if (t1 == t2) return eq;
		if (TypeSystem.maybeEqual(t1, t2)) return UNKNOWN_QUERY;
		return neq;
	}
	def maybeCast(t1: Type, t2: Type, eq: TypeCast, neq: TypeCast) -> TypeCast {
		if (t1 == t2) return eq;
		if (TypeSystem.maybeEqual(t1, t2)) return UNKNOWN_CAST;
		return neq;
	}
	def newTupleQuery(ff: Type, tt: Type) -> TypeCast {
		// recursively check all nested types
		var fl = ff.nested, tl = tt.nested;
		while (fl != null) {
			if (tl == null) return FALSE; // tuple size doesnt match
			var inner = TypeSystem.newTypeQuery(fl.head, tl.head);
			if (inner.isFalse()) return FALSE;
			fl = fl.tail;
			tl = tl.tail;
		}
		if (tl != null) return FALSE; // tuple size doesnt match
		return TUPLE_QUERY;
	}
	def newTupleCast(ff: Type, tt: Type) -> TypeCast {
		// recursively check all nested types
		var fl = ff.nested, tl = tt.nested;
		while (fl != null) {
			if (tl == null) return FALSE; // tuple size doesnt match
			if (TypeSystem.newTypeCast(fl.head, tl.head).isFalse()) return FALSE;
			fl = fl.tail;
			tl = tl.tail;
		}
		if (tl != null) return FALSE; // tuple size doesnt match
		return TUPLE_CAST;
	}
	def evalTypeQuery(ff: Type, tt: Type, val: Val) -> TypeCast {
		return newTypeQuery(ff, tt).eval(ff, tt, val);
	}
	def evalTypeCast(ff: Type, tt: Type, val: Val) -> TypeCast {
		return newTypeCast(ff, tt).eval(ff, tt, val);
	}
}
// enumeration of the different kinds of type casts
enum CastOp {
	UNKNOWN_CAST,
	UNKNOWN_QUERY,
	TRUE,
	TRUE_X_NULL,
	FALSE_X_NULL,
	FALSE,
	VALUE,
	INT_CONVERSION,
	INT_TO_FLOAT,
	FLOAT_TO_INT,
	INT_IS_FLOAT,
	FLOAT_IS_INT,
	CLASS_CAST,
	CLASS_QUERY,
	TUPLE_CAST,
	TUPLE_QUERY,
	ENUM_TO_SET
}

// The representation of a cast operation, or a the result of a cast operation.
class TypeCast(approx: CastOp, result: Val) {
	def eval(ff: Type, tt: Type, val: Val) -> TypeCast {
		match (approx) {
			TRUE,
			FALSE,
			VALUE => return this;
			UNKNOWN_CAST => return TypeSystem.evalTypeCast(ff, tt, val);
			UNKNOWN_QUERY => return TypeSystem.evalTypeQuery(ff, tt, val);
			TRUE_X_NULL => return if(val == null, TypeSystem.FALSE, TypeSystem.TRUE);
			FALSE_X_NULL => return if(val != null, TypeSystem.FALSE, TypeSystem.TRUE);
			TUPLE_QUERY => return evalTupleQuery(ff, tt, val);
			TUPLE_CAST => return evalTupleCast(ff, tt, val);
			CLASS_CAST => {
				if (val == null) return TypeSystem.TRUE;
				if (tt.open()) return TypeSystem.FALSE;
				if (!Record.?(val) || !TypeSystem.isSubtype(Record.!(val).rtype, tt))
					return TypeSystem.FALSE;
				return TypeSystem.TRUE;
			}
			CLASS_QUERY => {
				if (val == null) return TypeSystem.FALSE;
				if (tt.open()) return TypeSystem.FALSE;
				if (!Record.?(val) || !TypeSystem.isSubtype(Record.!(val).rtype, tt))
					return TypeSystem.FALSE;
				return TypeSystem.TRUE;
			}
			INT_CONVERSION => {
				return IntOp.evalConversion(ff, tt, val);
			}
			INT_TO_FLOAT => return TypeSystem.FALSE; // TODO
			FLOAT_TO_INT => return TypeSystem.FALSE; // TODO
			INT_IS_FLOAT => return TypeSystem.FALSE; // TODO
			FLOAT_IS_INT => return TypeSystem.FALSE; // TODO
			ENUM_TO_SET => {
				var it = V3EnumSet_TypeCon.!(tt.typeCon).intType;
				var tag = Int.unbox(val);
				var val: Val = if (it.width > 32, Long.box(1L << u6.!(tag)), Int.box(1 << u5.!(tag)));
				return TypeCast.new(CastOp.VALUE, val);
			}
		}
	}
	def evalTupleQuery(ff: Type, tt: Type, val: Val) -> TypeCast {
		// recursively check all nested types
		var values: Array<Val>;
		if (val == null) values = Array<Val>.new(Lists.length(ff.nested));
		else if (!TupleVal.?(val)) return TypeSystem.FALSE;
		else values = TupleVal.!(val).values;

		var a = ff.nested, b = tt.nested, i = 0;
		while (a != null) {
			if (b == null) return TypeSystem.FALSE;
			var r = TypeSystem.evalTypeQuery(a.head, b.head, values[i]);
			if (r.approx == CastOp.FALSE) return TypeSystem.FALSE;
			a = a.tail; b = b.tail; i++;
		}
		return if(b == null, TypeSystem.TRUE, TypeSystem.FALSE);
	}
	def evalTupleCast(ff: Type, tt: Type, val: Val) -> TypeCast {
		// recursively check nested types of tuples
		var values: Array<Val>;
		if (val == null) values = Array<Val>.new(Lists.length(ff.nested));
		else if (!TupleVal.?(val)) return TypeSystem.FALSE;
		else values = TupleVal.!(val).values;

		var a = ff.nested, b = tt.nested, i = 0, rv = Array<Val>.new(values.length);
		while (a != null) {
			if (b == null) return TypeSystem.FALSE;
			var v = values[i];
			var r = TypeSystem.evalTypeCast(a.head, b.head, v);
			if (r.approx == CastOp.FALSE) return TypeSystem.FALSE;
			else if (r.approx == CastOp.VALUE) rv[i] = r.result;
			else rv[i] = v;
			a = a.tail; b = b.tail; i++;
		}
		if (b == null) return TypeCast.new(CastOp.VALUE, TupleVal.new(rv));
		return TypeSystem.FALSE;
	}
	def isFalse() -> bool { return approx == CastOp.FALSE; }
	def isTrue() -> bool { return approx == CastOp.TRUE; }
}
