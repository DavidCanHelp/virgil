// Copyright 2013 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The type constructor for variant types.
class V3Variant_TypeCon extends TypeCon {
	def variantDecl: VstVariant;
	def tagType = getTagType(variantDecl);
	var names: Record;
	var nameFunc: IrSpec;
	new(variantDecl, typeCache: TypeCache)
		: super(variantDecl.name(), V3Kind.VARIANT, Lists.length(variantDecl.typeParams), typeCache) { }

	def lookupCase(name: Token) -> ValueBinding {
		var m = variantDecl.memberMap.get(name.image);
		if (VstVariantCase.?(m)) {
			var c = VstVariantCase.!(m);
			// TODO: only handles cases without constructors
			return ValueBinding.new(name, Int.box(c.tag), create0());
		}
		return null;
	}
	def getNames(prog: Program) -> Record {
		if (names == null) {
			var vd = variantDecl;
			names = prog.newRecord(V3.stringArrayType, variantDecl.count);
			for (l = vd.cases; l != null; l = l.tail) {
				names.values(l.head.tag) = Byte.boxString(l.head.name(), prog);
			}
		}
		return names;
	}
}
// compute the type of the tag based on the number of variants.
def getTagType(variantDecl: VstVariant) -> Type {
	var width = 1, exp = 2;
	while (exp < variantDecl.count) {
		exp = exp #<< 1;
		width++;
	}
	return Int.NAT_TYPES(width).create0();
}
// The "name" member
class V3Variant_NameMember(variant: V3Variant_TypeCon) extends Member(false, V3.stringType, null) {
	def genRead<E>(gen: Gen<E>, receiver: E) -> E {
		var array = gen.genVal(V3.stringArrayType, variant.getNames(gen.getProgram()));
		var tag = gen.genApplyOp(V3Op.newTypeSubsume(variant.singleton, variant.tagType), [receiver]);
		var index = gen.genApplyOp(V3Op.newIntConvert(variant.tagType, Int.TYPE), [tag]);
		// XXX: set O_SAFE_BOUNDS
		return gen.genApplyOp(V3Op.newArrayGetElem(V3.stringArrayType), [array, index]);
	}
}
// The "name" function
class V3Variant_NameFunction(variant: V3Variant_TypeCon) extends Member(false, Function.newType(variant.singleton, V3.stringType), null) {
	def genRead<E>(gen: Gen<E>, receiver: E) -> E {
		if (variant.nameFunc == null) {
			// XXX: unify with above code
			var opBuilder = gen.getProgram().opBuilder;
			def container = opBuilder.createGlobalIrClass();
			var paramTypes = Function.getParamTypeArray(memberType);
			var returnType = Function.getReturnType(memberType);
			var meth = opBuilder.createIrMethod(container, null, paramTypes, returnType);
			meth.setFact(Facts.M_INLINE | Facts.M_OPERATOR);
			var block = opBuilder.createSsa(container, meth);

			var receiver = meth.ssa.params(1);
			var array = meth.ssa.valConst(V3.stringArrayType, variant.getNames(gen.getProgram()));
			var tag = block.addApply(null, V3Op.newTypeSubsume(variant.singleton, variant.tagType), [receiver]);
			var index = block.addApply(null, V3Op.newIntConvert(variant.tagType, Int.TYPE), [tag]);
			var result = block.addApply(null, V3Op.newArrayGetElem(V3.stringArrayType), [array, index]);
			result.setFact(Facts.O_SAFE_BOUNDS);
			block.addReturn([result]);

			// TODO: print the ssa
			variant.nameFunc = IrSpec.new(container, [container], meth);
		}
		var val = Delegate.new(null, variant.nameFunc);
		return gen.genVal(memberType, val);
	}
}
class V3Variant_FieldMember(variant: V3Variant_TypeCon, vcase: VstVariantCase, param: ParamDecl) extends Member(false, param.vtype, null) {
	def genRead<E>(gen: Gen<E>, receiver: E) -> E {
		return gen.genVal(memberType, null); // TODO
	}
}