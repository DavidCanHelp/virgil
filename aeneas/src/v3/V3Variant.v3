// Copyright 2013 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component V3Variant {
	def render(prog: Program, vtype: Type, val: Variant_Value, buf: StringBuffer) {
		vtype.render(buf).putc('.');

		var vc: IrVariantCase, values: Array<Val>;
		if (val == null) {
			vc = prog.ir.makeIrVariant(vtype).cases(0);
			values = if (vc.fields.length > 0, Array.new(vc.fields.length), Values.NONE);
		} else {
			vc = val.vcase;
			values = val.values;
		}

		buf.puts(vc.source.name());
		if (vc.source.params == null) return;
		var typeArgs = if (vc.variant.typeArgs != null, vc.variant.typeArgs.copy(Lists.toArray(vtype.nested)));

		buf.putc('(');
		for (i = 0; i < values.length; i++) {
			if (i > 0) buf.puts(", ");
			var fieldType = vc.fields(i).fieldType;
			if (typeArgs != null) fieldType = fieldType.substitute(typeArgs);
			prog.renderResult(values(i), fieldType, buf); // TODO: only render shallow variants
		}
		buf.putc(')');
	}
	def getTag(val: Val) -> int {
		if (val == null) return 0;
		return Variant_Value.!(val).vcase.tag;
	}
}
// The type constructor for variant types.
class V3Variant_TypeCon extends TypeCon {
	def variantDecl: VstVariant;
	def tagType = getTagType(variantDecl);
	var names: Record;
	var nameFunc: IrSpec;
	new(variantDecl, typeCache: TypeCache)
		: super(variantDecl.name(), V3Kind.VARIANT, Lists.length(variantDecl.typeParams), typeCache) { }

	def lookupCase(name: Token) -> VstVariantCase {
		var m = variantDecl.memberMap.get(name.image);
		return if (VstVariantCase.?(m), VstVariantCase.!(m));
	}
	def getNames(prog: Program) -> Record {
		if (names == null) {
			var vd = variantDecl;
			names = prog.newRecord(V3.stringArrayType, variantDecl.count);
			for (l = vd.cases; l != null; l = l.tail) {
				names.values(l.head.tag) = Byte.boxString(l.head.name(), prog);
			}
		}
		return names;
	}
	def substitute(vt: Type, t: Type) -> Type {
		if (vt.typeCon == this && variantDecl.typeParams != null) {
			var typeArgs = TypeArgs.new(variantDecl.typeEnv, Lists.toArray(vt.nested));
			t = t.substitute(typeArgs);
		}
		return t;
	}
}
// compute the type of the tag based on the number of variants.
def getTagType(variantDecl: VstVariant) -> Type {
	var width = 1, exp = 2;
	while (exp < variantDecl.count) {
		exp = exp #<< 1;
		width++;
	}
	return Int.NAT_TYPES(width).create0();
}
// The "name" member
class V3Variant_NameMember(variant: V3Variant_TypeCon, vtype: Type)
extends Member(false, V3.stringType, null) {
	def genRead<E>(gen: Gen<E>, receiver: E) -> E {
		var array = gen.genVal(V3.stringArrayType, variant.getNames(gen.getProgram()));
		var tag = gen.genApplyOp(V3Op.newVariantGetTag(vtype), [receiver]);
		var index = gen.genApplyOp(V3Op.newIntConvert(variant.tagType, Int.TYPE), [tag]);
		var get = gen.genApplyOp(V3Op.newArrayGetElem(V3.stringArrayType), [array, index]);
		gen.setFact(get, Facts.O_SAFE_BOUNDS);
		return get;
	}
}
// The "name" function
class V3Variant_NameFunction(variant: V3Variant_TypeCon, vtype: Type)
extends Member(false, Function.newType(vtype, V3.stringType), null) {
	def genRead<E>(gen: Gen<E>, receiver: E) -> E {
		if (variant.nameFunc == null) {
			// XXX: unify with above code
			var opBuilder = gen.getProgram().opBuilder;
			def container = opBuilder.createGlobalIrClass();
			var paramTypes = Function.getParamTypeArray(memberType);
			var returnType = Function.getReturnType(memberType);
			var meth = opBuilder.createIrMethod(container, null, paramTypes, returnType);
			meth.setFact(Facts.M_INLINE | Facts.M_OPERATOR);
			var block = opBuilder.createSsa(container, meth);

			var receiver = meth.ssa.params(1);
			var array = meth.ssa.valConst(V3.stringArrayType, variant.getNames(gen.getProgram()));
			var tag = block.addApply(null, V3Op.newVariantGetTag(vtype), [receiver]);
			var index = block.addApply(null, V3Op.newIntConvert(variant.tagType, Int.TYPE), [tag]);
			var result = block.addApply(null, V3Op.newArrayGetElem(V3.stringArrayType), [array, index]);
			result.setFact(Facts.O_SAFE_BOUNDS);
			block.addReturn([result]);

			// TODO: print the ssa
			variant.nameFunc = IrSpec.new(container, [container], meth);
		}
		var val = Delegate.new(null, variant.nameFunc);
		return gen.genVal(memberType, val);
	}
}
class V3Variant_FieldMember(variant: V3Variant_TypeCon, vcase: VstVariantCase, param: ParamDecl) extends Member(false, param.vtype, null) {
	def genRead<E>(gen: Gen<E>, receiver: E) -> E {
		return gen.genVal(memberType, null); // TODO
	}
}
class Variant_Value(vtype: Type, vcase: IrVariantCase, values: Array<Val>) extends Val {
	def equals(other: Val) -> bool {
		if (other == this) return true;
		if (other == Values.BOTTOM) {
			if (vcase.tag != 0) return false;
			for (v in values) if (!Values.equal(v, Values.BOTTOM)) return false;
			return true;
		}
		if (!Variant_Value.?(other)) return false;
		var that = Variant_Value.!(other);
		if (vcase != that.vcase) return false;
		for (i = 0; i < values.length; i++) {
			if (!Values.equal(values(i), that.values(i))) return false;
		}
		return true;
	}
	def hash() -> int {
		return Arrays.hash(vtype.hash + vcase.tag, values, Values.hash);
	}
}
