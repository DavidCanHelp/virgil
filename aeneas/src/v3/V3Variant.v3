// Copyright 2013 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def fullName(variantDecl: VstVariant) -> string {
	if (variantDecl.parent != null) {
		var buf = StringBuffer.new().puts(variantDecl.parent.name());
		buf.putc('.');
		return buf.puts(variantDecl.name()).toString();
	}
	return variantDecl.name();
}
def parentName(variantDecl: VstVariant) -> string {
	if (variantDecl.parent != null) return variantDecl.parent.name();
	return variantDecl.name();
}
// The type constructor for variant types.
class V3Variant_TypeCon extends TypeCon {
	def variantDecl: VstVariant;
	def tagType = getTagType(variantDecl);
	var names: Record;
	var nameFunc: IrSpec;
	new(variantDecl, typeCache: TypeCache)
		super(fullName(variantDecl), V3Kind.VARIANT, Lists.length(variantDecl.typeParams), typeCache) { }

	def lookupCase(name: Token) -> VstVariantCase {
		var m = variantDecl.memberMap.get(name.image);
		return if (VstVariantCase.?(m), VstVariantCase.!(m));
	}
	def renderType(buffer: StringBuffer, typeParams: List<Type>) -> StringBuffer {
		buffer.puts(parentName(variantDecl));
		if (typeParams != null) {
			buffer.putc('<');
			buffer.appendCommaList(typeParams, Type.render); 
			buffer.putc('>');
		}
		if (variantDecl.parent != null) { // this typecon represents a variant case
			buffer.putc('.');
			buffer.puts(variantDecl.name());
		}
		return buffer;
	}
	def getNames(prog: Program) -> Record {
		if (names == null) {
			var vd = variantDecl;
			names = prog.newRecord(V3.stringArrayType, variantDecl.count);
			for (l = vd.cases; l != null; l = l.tail) {
				names.values(l.head.tag) = Byte.boxString(l.head.name(), prog);
			}
		}
		return names;
	}
	def substitute(vt: Type, t: Type) -> Type {
		if (vt.typeCon == this && variantDecl.typeParams != null) {
			var typeArgs = TypeArgs.new(variantDecl.typeEnv, Lists.toArray(vt.nested));
			t = t.substitute(typeArgs);
		}
		return t;
	}
}
// compute the type of the tag based on the number of variants.
def getTagType(variantDecl: VstVariant) -> Type {
	var width = 1, exp = 2;
	while (exp < variantDecl.count) {
		exp = exp #<< 1;
		width++;
	}
	return Int.getType(false, width);
}
// The "name" member
class V3Variant_NameMember(variant: V3Variant_TypeCon, vtype: Type)
extends Member(false, V3.stringType, null) {
	def genRead<E>(gen: Gen<E>, receiver: E) -> E {
		var array = gen.genVal(V3.stringArrayType, variant.getNames(gen.getProgram()));
		var tag = gen.genApplyOp(V3Op.newVariantGetTag(vtype), [receiver]);
		var index = gen.genApplyOp(V3Op.newIntConvert(variant.tagType, Int.TYPE), [tag]);
		var get = gen.genApplyOp(V3Op.newArrayGetElem(V3.stringArrayType), [array, index]);
		gen.setFact(get, Facts.O_SAFE_BOUNDS);
		return get;
	}
}
// The "name" function
class V3Variant_NameFunction(variant: V3Variant_TypeCon, vtype: Type)
extends Member(false, Function.newType(vtype, V3.stringType), null) {
	def genRead<E>(gen: Gen<E>, receiver: E) -> E {
		if (variant.nameFunc == null) {
			// XXX: unify with above code
			var opBuilder = gen.getProgram().opBuilder;
			def container = opBuilder.createGlobalIrClass();
			var paramTypes = Function.getParamTypeArray(memberType);
			var returnType = Function.getReturnType(memberType);
			var meth = opBuilder.createIrMethod(container, null, paramTypes, returnType);
			meth.setFact(Facts.M_INLINE | Facts.M_OPERATOR);
			var block = opBuilder.createSsa(container, meth);

			var receiver = meth.ssa.params(1);
			var array = meth.ssa.valConst(V3.stringArrayType, variant.getNames(gen.getProgram()));
			var tag = block.addApply(null, V3Op.newVariantGetTag(vtype), [receiver]);
			var index = block.addApply(null, V3Op.newIntConvert(variant.tagType, Int.TYPE), [tag]);
			var result = block.addApply(null, V3Op.newArrayGetElem(V3.stringArrayType), [array, index]);
			result.setFact(Facts.O_SAFE_BOUNDS);
			block.addReturn([result]);

			// TODO: print the ssa
			variant.nameFunc = IrSpec.new(container, [container], meth);
		}
		var val = Closure.new(null, variant.nameFunc);
		return gen.genVal(memberType, val);
	}
}
class V3Variant_FieldMember(variant: V3Variant_TypeCon, vcase: VstVariantCase, param: ParamDecl) extends Member(false, param.vtype, null) {
	def genRead<E>(gen: Gen<E>, receiver: E) -> E {
		return gen.genVal(memberType, null); // TODO
	}
}
