// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def SAFE_DIVIDE = Facts.O_NO_ZERO_CHECK | Facts.O_PURE;
def PURE_LOAD = Facts.O_NO_NULL_CHECK | Facts.O_PURE;
def ZERO_NON_ZERO = Facts.V_ZERO | Facts.V_NON_ZERO;
def ABOVE_BELOW_ZERO = Facts.V_ABOVE_ZERO | Facts.V_BELOW_ZERO;

// An SSA builder specific to Virgil-III language operators that also performs
// local optimizations as each instruction is added to the block.
class V3SsaBuilder extends SsaBuilder {
	def opt: SsaOptSettings;
	def ir: IrPortion;
	def region: SsaRegion;
	var source: Source;
	var nullChecks: PartialMap<SsaInstr, SsaInstr>;

	new(opt, ir, region, block: SsaBlock) : super(block) { }

	// sets the source position that will apply to subsequent instructions
	def at(source: Source) -> V3SsaBuilder {
		this.source = source;
		return this;
	}
	// x == y
	def opEqual(t: Type, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return region.trueConst();
		if (SsaValue.?(x)) {
			if (SsaValue.?(y)) return bk(Values.equal(v(x), v(y))); // fold
			var t = x; x = y; y = t; // K == y == y == K
		}
		var and = x.facts & y.facts, or = x.facts | y.facts;
		if (0 != (and & Facts.V_ZERO)) return region.trueConst(); // 0 == 0 == true
		if (ZERO_NON_ZERO == (or & ZERO_NON_ZERO)) return region.falseConst(); // 0 == nonzero == false
		if (ABOVE_BELOW_ZERO == (or & ABOVE_BELOW_ZERO)) return region.falseConst(); // neg == pos == false
		return add(V3Op.newEqual(t), [x, y]);
	}
	// x != y
	def opNotEqual(t: Type, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return region.falseConst();
		if (SsaValue.?(y)) {
			if (SsaValue.?(x)) return bk(!Values.equal(v(x), v(y))); // fold
			var t = x; x = y; y = t; // K != y == y != K
		}
		var and = x.facts & y.facts, or = x.facts | y.facts;
		if (0 != (and & Facts.V_ZERO)) return region.falseConst(); // 0 != 0 == false
		if (ZERO_NON_ZERO == (or & ZERO_NON_ZERO)) return region.trueConst(); // 0 != nonzero == true
		if (ABOVE_BELOW_ZERO == (or & ABOVE_BELOW_ZERO)) return region.trueConst(); // neg != pos == true
		return add(V3Op.newNotEqual(t), [x, y]);
	}
	// x + y
	def opIntAdd(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) {
			if (SsaValue.?(y)) return ik(iv(x) + iv(y)); // fold K1 + K2
			if (iv(x) == 0) return y; // 0 + y == y
			return add(V3Op.opIntAdd, [y, x]);
		}
		// XXX: reassociate (x + K1) + K2 == x + (K1 + K2)
		if (SsaValue.?(y) && iv(y) == 0) return x; // x + 0 == x
		return add(V3Op.opIntAdd, [x, y]);
	}
	// x - y
	def opIntSub(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return region.zeroConst(); // x - x == 0
		if (SsaValue.?(y)) {
			var yv = iv(y);
			if (SsaValue.?(x)) return ik(iv(x) - yv); // fold K1 - K2
			return add(V3Op.opIntAdd, [x, ik(0 - yv)]); // x - K = x + -K
		}
		if (SsaValue.?(y) && iv(y) == 0) return x; // x - 0 == x
		return add(V3Op.opIntSub, [x, y]);
	}
	// x * y
	def opIntMul(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) { var t = x; x = y; y = t; } // K * y == y * K
		if (SsaValue.?(y)) {
			var yv = iv(y);
			if (SsaValue.?(x)) return ik(iv(x) * yv); // fold K1 * K2
			if (yv == 0) return y; // x * 0 == 0
			if (yv == 1) return x; // x * 1 == x
			if (yv == -1) return add(V3Op.opIntSub, [region.zeroConst(), x]); // x * -1 == 0 - x
			if (yv == 2) return add(V3Op.opIntAdd, [x, x]); // x * 2 == x + x
			if ((yv & (yv - 1)) == 0) {
				// x * 2^k == x << k
				return add(V3Op.opIntShl, [x, ik(log(yv))]);
			}
		}
		// XXX: reassociate
		return add(V3Op.opIntMul, [x, y]);
	}
	// x / y
	def opIntDiv(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (isZero(y)) { // x / zero(y)
			return addThrow(source, V3Exception.DivideByZero);
		}
		var facts = 0;
		if (SsaValue.?(y)) {
			var yv = iv(y);
			if (SsaValue.?(x)) return ik(iv(x) / yv); // fold K1 / K2
			if (yv == 1) return x; // x / 1 == x
			if (yv == -1) return add(V3Op.opIntSub, [region.zeroConst(), x]); // x / -1 == 0 - x
			if ((yv & (yv - 1)) == 0 && 0 != (x.facts & Facts.V_NON_NEGATIVE)) {
				// nonneg(x) / 2^k == x >> k
				return add(V3Op.opIntShr, [x, ik(log(yv))]);
			}
			facts = Facts.O_NO_DIV_CHECK; // Int.MIN / -1 cannot occur
		}
		if (isNonZero(y)) { // x / non-zero(y)
			if (x == y) return region.oneConst();
			facts = facts | SAFE_DIVIDE;
		}
		facts = divFacts(facts, x.facts, y.facts);
		return add(V3Op.opIntDiv, [x, y]).setFact(facts);
	}
	// x % y
	def opIntMod(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (isZero(y)) { // x % zero(y)
			return addThrow(source, V3Exception.DivideByZero);
		}
		var facts = 0;
		if (SsaValue.?(y)) {
			var yv = iv(y);
			if (SsaValue.?(x)) return ik(iv(x) % yv); // fold K1 % K2
			if (yv == 1 || yv == -1) return region.zeroConst();
			if ((yv & (yv - 1)) == 0 && 0 != (x.facts & Facts.V_NON_NEGATIVE)) {
				// nonneg(x) % 2^k == x & (2^k - 1)
				return add(V3Op.opIntAnd, [x, ik(yv - 1)]);
			}
			facts = Facts.O_NO_DIV_CHECK;
		}
		if (isNonZero(y)) { // x % non-zero(y)
			if (x == y) return region.zeroConst();
			facts = facts | SAFE_DIVIDE;  // Int.MIN % -1 cannot occur
		}
		facts = divFacts(facts, x.facts, y.facts);
		return add(V3Op.opIntMod, [x, y]).setFact(facts);
	}
	private def divFacts(facts: int, xfacts: int, yfacts: int) -> int {
		facts = facts | (xfacts & yfacts & Facts.V_NON_NEGATIVE); // nonneg(x) /% nonneg(y) => nonneg
		if (0 != ((xfacts | yfacts) & Facts.V_NON_NEGATIVE)) facts = facts | Facts.O_NO_DIV_CHECK; // nonneg(x) or nonneg(y) => no div check
		return facts;
	}
	// x & y
	def opIntAnd(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return x; // x & x == x
		if (SsaValue.?(x)) {
			if (SsaValue.?(y)) ik(iv(x) & iv(y)); // fold K1 & K2
			var t = x; x = y; y = t; // K & y == y & K
		}
		if (SsaValue.?(y)) {
			var yv = iv(y);
			if (yv == -1) return x; // x & -1 == x
			if (yv == 0) return y; // x & 0 == 0
		}
		// XXX: reassociation
		return add(V3Op.opIntAnd, [x, y]).setFact((x.facts | y.facts) & Facts.V_NON_NEGATIVE);
	}
	// x | y
	def opIntOr(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return x; // x & x == x
		if (SsaValue.?(x)) {
			if (SsaValue.?(y)) ik(iv(x) | iv(y)); // fold K1 | K2
			var t = x; x = y; y = t; // K | y == y | K
		}
		if (SsaValue.?(y)) {
			var yv = iv(y);
			if (yv == -1) return y; // x | -1 == -1
			if (yv == 0) return x; // x | 0 == x
		}
		// XXX: reassociation
		var i = add(V3Op.opIntOr, [x, y]);
		i.setFact((x.facts | y.facts) & Facts.V_NON_ZERO);
		i.setFact((x.facts & y.facts) & Facts.V_NON_NEGATIVE);
		return i;
	}
	// x ^ y
	def opIntXor(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return region.zeroConst(); // x ^ x == 0
		if (SsaValue.?(x)) {
			if (SsaValue.?(y)) ik(iv(x) ^ iv(y)); // fold K1 ^ K2
			var t = x; x = y; y = t; // K ^ y == y ^ K
		}
		if (SsaValue.?(y)) {
			if (iv(y) == 0) return x; // x ^ 0 == x
		}
		// XXX: reassociation
		return add(V3Op.opIntXor, [x, y]);
	}
	// x << y
	def opIntShl(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		var facts = 0;
		if (SsaValue.?(y)) {
			var yv = iv(y);
			if (yv == 0) return x; // x (shift) 0 == x
			if (yv < 0 || yv >= 32) return region.zeroConst();
			facts = Facts.O_NO_SHIFT_CHECK;
		}
		return add(V3Op.opIntShl, [x, y]).setFact(facts);
	}
	// x >> y
	def opIntShr(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		var facts = 0;
		if (SsaValue.?(y)) {
			var yv = iv(y);
			if (yv == 0) return x; // x (shift) 0 == x
			if (yv < 0 || yv >= 32) return region.zeroConst();
			facts = Facts.O_NO_SHIFT_CHECK;
		}
		return add(V3Op.opIntShr, [x, y]).setFact(facts);
	}
	// byte.!<int>
	def opIntToByte(x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) return region.valConst(Byte.TYPE, Byte.box(byte.!(iv(x))));
		if (x.opcode() == V3Opcode.ByteToInt) return x.inputs(0).dest; // byte(int(y)) == y
		return add(V3Op.opIntToByte, [x]);
	}
	// int.!<byte>
	def opByteToInt(x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) return ik(iv(x));
		return add(V3Op.opByteToInt, [x]);
	}
	// x < y
	def opLt(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return region.falseConst(); // x < x == false
		if (SsaValue.?(x)) {
			if (SsaValue.?(y)) return bk(iv(x) < iv(y)); // fold
			return opGt(y, x); // K < x == x > K
		}
		var op = if(x.getType() == Byte.TYPE, V3Op.opByteLt, V3Op.opIntLt);
		return add(op, [x, y]);
	}
	// x > y
	def opGt(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return region.falseConst(); // x > x == false
		if (SsaValue.?(x)) {
			if (SsaValue.?(y)) return bk(iv(x) > iv(y)); // fold
			return opLt(y, x); // K > x == x < K
		}
		var op = if(x.getType() == Byte.TYPE, V3Op.opByteGt, V3Op.opIntGt);
		return add(op, [x, y]);
	}
	// x <= y
	def opLteq(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return region.trueConst(); // x <= x == true
		if (SsaValue.?(x)) {
			if (SsaValue.?(y)) return bk(iv(x) <= iv(y)); // fold
			return opGteq(y, x); // K <= x == x >= K
		}
		var op = if(x.getType() == Byte.TYPE, V3Op.opByteLteq, V3Op.opIntLteq);
		return add(op, [x, y]);
	}
	// x >= y
	def opGteq(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return region.trueConst();
		if (SsaValue.?(x)) {
			if (SsaValue.?(y)) return bk(iv(x) >= iv(y)); // fold
			return opLteq(y, x); // K >= x == x <= K
		}
		var op = if(x.getType() == Byte.TYPE, V3Op.opByteGteq, V3Op.opIntGteq);
		return add(op, [x, y]);
	}
	// x >= y
	def opUgteq(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return region.trueConst();
		// XXX: fold unsigned comparisons
		return add(MachOp.opIntUgteq, [x, y]); // XXX: machine-specific opcode
	}
	// x && y
	def opBoolAnd(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return x; // x && x == x
		if (SsaValue.?(x)) {
			if (bv(x)) return y; // true && y == y
			else return x;       // false && y == false
		} else if (SsaValue.?(y)) {
			if (bv(y)) return x; // x && true == x
			else return y;       // x && false == false
		}
		return add(V3Op.opBoolAnd, [x, y]);
	}
	// x || y
	def opBoolOr(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return x; // x || x == x
		if (SsaValue.?(x)) {
			if (bv(x)) return x; // true || y == true
			else return y;       // false || y == y
		} else if (SsaValue.?(y)) {
			if (bv(y)) return y; // x || true == true
			else return x;       // x || false == x
		}
		return add(V3Op.opBoolOr, [x, y]);
	}
	// !x
	def opBoolNot(x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) return region.boolConst(!bv(x)); // fold !K
		if (SsaApplyOp.?(x)) {
			var ax = SsaApplyOp.!(x), op: Operator;
			match(ax.op.opcode) {
				V3Opcode.Equal:    op = V3Op.newNotEqual(ax.op.typeArgs(0)); // !(x == y) == (x != y)
				V3Opcode.NotEqual: op = V3Op.newEqual(ax.op.typeArgs(0));    // !(x != y) == (x == y)
				V3Opcode.IntLt:    op = V3Op.opIntGteq;  // !(x < y) == (x >= y)
				V3Opcode.IntGt:    op = V3Op.opIntLteq;  // !(x > y) == (x <= y)
				V3Opcode.IntLteq:  op = V3Op.opIntGt;    // !(x <= y) == (x > y)
				V3Opcode.IntGteq:  op = V3Op.opIntLt;    // !(x >= y) == (x < y)
				V3Opcode.ByteLt:   op = V3Op.opByteGteq; // !(x < y) == (x >= y)
				V3Opcode.ByteGt:   op = V3Op.opByteLteq; // !(x > y) == (x <= y)
				V3Opcode.ByteLteq: op = V3Op.opByteGt;   // !(x <= y) == (x > y)
				V3Opcode.ByteGteq: op = V3Op.opByteLt;   // !(x >= y) == (x < y)
				V3Opcode.BoolNot: return ax.inputs(0).dest; // !(!x) == x
			}
			if (op != null) return add(op, [ax.inputs(0).dest, ax.inputs(1).dest]);
		}
		return add(V3Op.opBoolNot, [x]);
	}
	// TypeCast<F, T>(x)
	def opTypeCast(ft: Type, tt: Type, x: SsaInstr) -> SsaInstr {
		if (Aeneas.DISABLE_TYPE_CHECKS.get()) return x;
		if (ft == tt) return x; // fold TypeCast<T, T>
		if (ft == Int.TYPE && tt == Byte.TYPE) return opIntToByte(x);
		if (ft == Byte.TYPE && tt == Int.TYPE) return opByteToInt(x);
		// XXX: fold TypeCast(K)
		match (TypeSystem.decideTypeCast(ft, tt)) {
			TypeSystem.TRUE: return x; // fold TypeCast
			TypeSystem.FALSE: return addThrow(source, V3Exception.TypeCheck); // fold TypeCast
			TypeSystem.TRUE_X_NULL: {
				// TypeCast -> ConditionalThrow(x == null)
				var cmp = add(V3Op.newEqual(ft), [x, region.nullConst(ft)]);
				add(V3Op.newConditionalThrow(V3Exception.TypeCheck), [cmp]);
				return x;
			}
			TypeSystem.FALSE_X_NULL: {
				// TypeCast -> ConditionalThrow(x != null)
				var cmp = add(V3Op.newNotEqual(ft), [x, region.nullConst(ft)]);
				add(V3Op.newConditionalThrow(V3Exception.TypeCheck), [cmp]);
				return x;
			}
		}
		return addLoad(V3Op.newTypeCast(ft, tt), [x]).setFact(x.facts);
	}
	// TypeQuery<F, T>(x)
	def opTypeQuery(ft: Type, tt: Type, x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x) && !tt.open()) {
			var r = V3Op.evalTypeQuery0(ft, tt, v(x), null); // fold TypeQuery(K) 
			return region.valConst(tt, Val.!(r));
		}
		var known = TypeSystem.decideTypeQuery(ft, tt);
		if (known == TypeSystem.TRUE) return region.trueConst();
		if (known == TypeSystem.FALSE) return region.falseConst();
		if (known == TypeSystem.TRUE_X_NULL) return addLoad(V3Op.newNotEqual(ft), [x, region.nullConst(ft)]);
		return addLoad(V3Op.newTypeQuery(ft, tt), [x]);
	}
	// TypeSubsume<F, T>(x)
	def opTypeSubsume(ft: Type, tt: Type, x: SsaInstr) -> SsaInstr {
		if (ft == tt) return x; // fold TypeSubsume<T, T>(x)
		match (tt.typeCon.kind) {
			V3Kind.CLASS: {
				if (ft == Null.TYPE) return region.nullConst(tt);
				else return x; // remove redundant subsume of class
			}
			V3Kind.ARRAY, V3Kind.DELEGATE: {
				// do nothing
			}
		} else {
			// integer conversions
			return opTypeCast(ft, tt, x);
		}
		if (SsaValue.?(x)) return region.valConst(tt, v(x)); // fold TypeSubsume(K)
		var i = addLoad(V3Op.newTypeSubsume(ft, tt), [x]);
		i.setFact(x.facts); // transfer facts in type subsumption
		return i;
	}
	def opArrayAlloc(arrayType: Type, x: SsaInstr) -> SsaInstr {
		var i = add(V3Op.newArrayAlloc(arrayType), [x]);
		if (x.checkFact(Facts.V_NON_NEGATIVE)) i.setFact(Facts.O_NO_LENGTH_CHECK);
		return i;
	}
	def opArrayInit(arrayType: Type, x: Array<SsaInstr>) -> SsaInstr {
		return add(V3Op.newArrayInit(arrayType, x.length), x);
	}
	def opArrayGetElem(arrayType: Type, facts: int, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (Facts.O_SAFE_BOUNDS != (facts & Facts.O_SAFE_BOUNDS)) facts = foldBoundsCheck(x, y);
		if (end) return unreachable(x.getType());
		return addLoad(V3Op.newArrayGetElem(arrayType), [x, y]).setFact(facts);
	}
	def opArraySetElem(arrayType: Type, facts: int, x: SsaInstr, y: SsaInstr, z: SsaInstr) -> SsaInstr {
		if (Facts.O_SAFE_BOUNDS != (facts & Facts.O_SAFE_BOUNDS)) facts = foldBoundsCheck(x, y);
		if (end) return unreachable(x.getType());
		return addLoad(V3Op.newArraySetElem(arrayType), [x, y, z]).setFact(facts);
	}
	private def foldBoundsCheck(x: SsaInstr, y: SsaInstr) -> int {
		if (isZero(x)) {
			// array is null
			addThrow(source, V3Exception.NullCheck);
		} else if (SsaValue.?(y)) {
			// array index is a constant
			var index = iv(y), length = -1;
			if (index < 0) {
				addThrow(source, V3Exception.BoundsCheck);
				return 0;
			}
			if (SsaValue.?(x)) length = rv(x).values.length;
			var opcode = x.opcode();
			if (opcode == V3Opcode.ArrayAlloc) {
				var leninstr = x.inputs(0).dest;
				if (SsaValue.?(leninstr)) length = iv(leninstr);
			} else if (opcode == V3Opcode.ArrayInit) {
				length = SsaApplyOp.!(x).op.attr<int>();
			}
			if (length >= 0) {
				if (index >= length) addThrow(source, V3Exception.BoundsCheck);
				else return Facts.O_SAFE_BOUNDS;
			}
		} else if (opt.PartialBoundsChecks && SsaValue.?(x)) {
			// array is a constant
			var array = rv(x);
			var op = V3Op.newConditionalThrow(V3Exception.BoundsCheck);
			add(op, [opUgteq(y, ik(array.values.length))]); // partially fold bounds check
			return Facts.O_SAFE_BOUNDS;
		}
		return 0;
	}
	// ArrayGetLength<T>(x)
	def opArrayGetLength(arrayType: Type, x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) { // fold ArrayGetLength(K)
			var r = rv(x);
			if (r == null) return addThrow(source, V3Exception.NullCheck);
			return ik(r.values.length);
		}
		var xc = x.opcode();
		if (xc == V3Opcode.ArrayInit) return ik(x.inputs.length); // fold ArrayGetLength(ArrayInit)
		if (xc == V3Opcode.ArrayAlloc) return SsaApplyOp.!(x).inputs(0).dest; // fold ArrayGetLength(ArrayAlloc)
		return addPureLoad(V3Op.newArrayGetLength(arrayType), [x]);
	}
	// ClassAlloc[new](args)
	def opClassAlloc(m: IrSpec, x: Array<SsaInstr>) -> SsaInstr {
		// XXX: fold constant class allocations (e.g. closures)
		return add(V3Op.newClassAlloc(m), x);
	}
	// ClassGetField[f](x)
	def opClassGetField(f: IrSpec, x: SsaInstr) -> SsaInstr {
		var k = fieldConst(f); // fold constant fields
		if (k != null) {
			if (!isNonZero(x)) opNullCheck(x.getType(), x);
			return k;
		}
		var op = V3Op.newClassGetField(f);
		// XXX: only if F_INIT and F_VALUE if (f.member.checkFlag(IrUtil.F_VALUE)) return addPureLoad(op, [x]); // field load is pure if non-null receiver
		return addLoad(op, [x]);
	}
	// ClassSetField[f](x, v)
	def opClassSetField(f: IrSpec, x: SsaInstr, v: SsaInstr) -> SsaInstr {
		// XXX: remove useless field writes
		return addLoad(V3Op.newClassSetField(f), [x, v]);
	}
	// ClassGetMethod[m](x)
	def opClassGetMethod(m: IrSpec, x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) {
			var obj = rv(x);
			if (obj == null) return addThrow(source, V3Exception.NullCheck); // fold ClassGetMethod(null)
			if (!m.isPolymorphic()) return region.valConst(m.getBoundType(), Delegate.new(obj, m)); // fold ClassGetMethod(K)
		}
		return addPureLoad(V3Op.newClassGetMethod(m), [x]);
	}
	// ClassGetVirtual[m](x)
	def opClassGetVirtual(m: IrSpec, x: SsaInstr) -> SsaInstr {
		var dv = devirtualize(m, x);
		if (dv != null) return opClassGetMethod(dv, x);
		return addPureLoad(V3Op.newClassGetVirtual(m), [x]);
	}
	// ClassGetVirtFunc[m](x)
	def opClassGetVirtFunc(m: IrSpec, x: SsaInstr) -> SsaInstr {
		var dv = devirtualize(m, x);
		if (dv != null) return region.valConst(dv.getFuncType(), FuncVal.new(dv));
		return addPureLoad(V3Op.newClassGetVirtFunc(m), [x]);
	}
	// ComponentInit[new]
	def opComponentInit(m: IrSpec) -> SsaInstr {
		// XXX: remove unnecessary component initializations?
		return add(V3Op.newComponentInit(m), SsaUtil.NO_INSTRS);
	}
	// ComponentGetField[f](x)
	def opComponentGetField(f: IrSpec, x: SsaInstr) -> SsaInstr {
		var k = fieldConst(f); // fold constant fields
		return if (k != null, k, add(V3Op.newComponentGetField(f), [x]));
	}
	// ComponentSetField[f](x, v)
	def opComponentSetField(f: IrSpec, x: SsaInstr, v: SsaInstr) -> SsaInstr {
		// XXX: remove dead writes
		return add(V3Op.newComponentSetField(f), [x, v]);
	}
	// ComponentGetMethod[m](x)
	def opComponentGetMethod(m: IrSpec, x: SsaInstr) -> SsaInstr {
		// XXX: fold constant ComponentGetMethod
		return add(V3Op.newComponentGetMethod(m), [x]);
	}
	// (x, y)
	def opTupleCreate(tupleType: Type, x: Array<SsaInstr>) -> SsaInstr {
		// XXX: fold (K, K)
		return add(V3Op.newTupleCreate(tupleType), x);
	}
	// e.N
	def opTupleGetElem(tupleType: Type, i: int, x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) {
			var val = Tuple_Value.!(v(x)), t = Lists.get(tupleType.nested, i);
			return region.valConst(t, if(val != null, val.values(i), null)); // fold K.N
		} else if (x.opcode() == V3Opcode.TupleCreate) {
			return SsaApplyOp.!(x).inputs(i).dest; // reduce (e, e, ...).N
		}
		return add(V3Op.newTupleGetElem(tupleType, i), [x]);
	}
	// NullCheck(x)
	def opNullCheck(rtype: Type, x: SsaInstr) -> SsaInstr {
		// XXX: LVN of null checks
		if (isZero(x)) return addThrow(source, V3Exception.NullCheck);
		if (Aeneas.DISABLE_NULL_CHECKS.get()) return x; // nullchecks disabled
		if (isNonZero(x)) return x;
		if (nullChecks == null) nullChecks = SsaUtil.newMap();
		else if ((nullChecks.has(x))) return x;
		var check = add(V3Op.newNullCheck(x.getType()), [x]);
		nullChecks.set(x, check);
		return check;
	}
	// BoundsCheck(array, index)
	def opBoundsCheck(rtype: Type, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		var facts = foldBoundsCheck(x, y);
		if (end) return unreachable(rtype);
		if (0 != (facts & Facts.O_NO_BOUNDS_CHECK)) {
			if (0 != (facts & Facts.O_NO_NULL_CHECK)) return region.nop();
			return opNullCheck(x.getType(), x);
		}
		return add(V3Op.newBoundsCheck(rtype), [x, y]);
	}
	// CallClassMethod[m](args)
	def opCallClassMethod(m: IrSpec, x: Array<SsaInstr>) -> SsaInstr {
		var i = addLoad(V3Op.newCallClassMethod(m), x);
		if (m.member.checkFact(Facts.O_PURE)) i.setFact(Facts.O_PURE); // pure method call
		// XXX: inline if M_INLINE fact is set
		return i;
	}
	// CallClassVirtual[m](args)
	def opCallClassVirtual(m: IrSpec, x: Array<SsaInstr>) -> SsaInstr {
		var dv = devirtualize(m, x(0));
		if (dv != null) return opCallClassMethod(dv, x); // devirtualize call virtual method
		return addLoad(V3Op.newCallClassVirtual(m), x);
	}
	// CallComponentMethod[m](args)
	def opCallComponentMethod(m: IrSpec, x: Array<SsaInstr>) -> SsaInstr {
		var i = add(V3Op.newCallComponentMethod(m), x);
		if (m.member.checkFact(Facts.O_PURE)) i.setFact(Facts.O_PURE); // pure method call
		// XXX: inline if M_INLINE fact is set
		return i;
	}
	// CallDelegate(args)
	def opCallDelegate(ftype: Type, x: Array<SsaInstr>) -> SsaInstr {
		var m = x(0);
		if (SsaValue.?(m)) {
			var d = Delegate.!(v(m));
			if (d == null) return addThrow(source, V3Exception.NullCheck);
			if (V3.isComponent(d.memberRef.container)) {
				// CallDelegate(K) -> CallComponentMethod
				var nx = Arrays.range(x, 1, x.length);
				return opCallComponentMethod(d.memberRef, nx);
			} else if (V3.isClass(d.memberRef.container)) {
				// CallDelegate(K) -> CallClassMethod
				var nx = Arrays.copy(x, null);
				nx(0) = region.valConst(d.memberRef.container, d.val);
				return opCallClassMethod(d.memberRef, nx);
			}
		}
		match (m.opcode()) {
			V3Opcode.ClassGetMethod: {
				// CallDelegate(GetClassMethod) -> CallClassMethod
				var nx = Arrays.copy(x, null);
				nx(0) = m.inputs(0).dest;
				return opCallClassMethod(extractIrSpec(m), nx);
			}
			V3Opcode.ClassGetVirtual: {
				// CallDelegate(GetClassVirtual) -> CallClassVirtual
				var nx = Arrays.copy(x, null);
				nx(0) = m.inputs(0).dest;
				return opCallClassVirtual(extractIrSpec(m), nx);
			}
			V3Opcode.ComponentGetMethod: {
				// CallDelegate(GetComponentMethod) -> CallComponentMethod
				var nx = Arrays.range(x, 1, x.length);
				return opCallComponentMethod(extractIrSpec(m), nx);
			}
		}
		return addLoad(V3Op.newCallDelegate(ftype), x);
	}
	// CallFunction(args)
	def opCallFunction(x: Array<SsaInstr>) -> SsaInstr {
		var m = x(0), facts = 0;
		if (SsaValue.?(m)) {
			var d = FuncVal.!(v(m));
			if (d == null) return addThrow(source, V3Exception.NullCheck);
			if (V3.isComponent(d.memberRef.container)) {
				// CallFunction(K) -> CallComponentMethod
				return opCallComponentMethod(d.memberRef, Arrays.range(x, 2, x.length));
			} else if (V3.isClass(d.memberRef.container)) {
				// CallFunction(K) -> CallClassMethod
				return opCallClassMethod(d.memberRef, Arrays.range(x, 1, x.length));
			}
		}
		return addLoad(V3Op.newCallFunction(m.getType()), x).setFact(facts);
	}
	// CreateDelegate[m](x)
	def opCreateDelegate(m: IrSpec, x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) {
			// fold CreateDelegate(K)
			if (!m.isPolymorphic()) return region.valConst(m.getBoundType(), Delegate.new(v(x), m));
		}
		return add(V3Op.newCreateDelegate(m, x.getType()), [x]);
	}
	def opSystemOp(op: string, x: Array<SsaInstr>) -> SsaInstr; // TODO
	// ConditionalThrow(exception, cond)
	def opConditionalThrow(ex: string, x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) {
			if (bv(x)) return addThrow(source, ex);
			else return region.nop();
		}
		return add(V3Op.newConditionalThrow(ex), [x]);
	}
	def v(y: SsaInstr) -> Val {
		return SsaValue.!(y).val;
	}
	def iv(y: SsaInstr) -> int {
		return V3.unboxIntegral(SsaValue.!(y).val);
	}
	def rv(y: SsaInstr) -> Record {
		return Record.!(SsaValue.!(y).val);
	}
	def bv(y: SsaInstr) -> bool {
		return Bool.unbox(SsaValue.!(y).val);
	}
	def ik(i: int) -> SsaInstr {
		return region.intConst(i);
	}
	def bk(b: bool) -> SsaInstr {
		return region.boolConst(b);
	}
	def add(op: Operator, args: Array<SsaInstr>) -> SsaInstr {
		if (end) return unreachable(op.resultType);
		var i = SsaApplyOp.new(source, op, args).setFact(Operators.facts(op.opcode));
		block.instrs.add(i);
		return i;
	}
	def addPureLoad(op: Operator, args: Array<SsaInstr>) -> SsaInstr {
		if (end) return unreachable(op.resultType);
		var receiver = args(0);
		if (isZero(receiver)) return addThrow(source, V3Exception.NullCheck);
		var i = SsaApplyOp.new(source, op, args).setFact(Operators.facts(op.opcode));
		block.instrs.add(i);
		return setImplicitNullCheck(receiver, i, PURE_LOAD);
	}
	def addLoad(op: Operator, args: Array<SsaInstr>) -> SsaInstr {
		if (end) return unreachable(op.resultType);
		var receiver = args(0);
		if (isZero(receiver)) return addThrow(source, V3Exception.NullCheck);
		var i = SsaApplyOp.new(source, op, args).setFact(Operators.facts(op.opcode));
		block.instrs.add(i);
		return setImplicitNullCheck(receiver, i, Facts.O_NO_NULL_CHECK);
	}
	// set the given facts if the receiver is non-null or previous implict/explicit
	// record this instruction as a previous implicit null check for the receiver
	def setImplicitNullCheck(receiver: SsaInstr, check: SsaInstr, facts: int) -> SsaInstr {
		if (isNonZero(receiver)) {
			check.setFact(facts);
		} else {
			if (nullChecks == null) nullChecks = SsaUtil.newMap();
			else if ((nullChecks.has(receiver))) check.setFact(facts);
			nullChecks.set(receiver, check);
		}
		return check;
	}
	def fieldConst(f: IrSpec) -> SsaInstr {
		// XXX: use results from RMA if available
		var sf = VstField.!(IrField.!(f.member).source);
		if (sf == null) return null;
		if (sf.isReadOnly && VarExpr.?(sf.init)) {
			var binding = VarExpr.!(sf.init).binding;
			if (ValueBinding.?(binding)) return region.valConst(f.getFieldType(), ValueBinding.!(binding).val);
		}
		return null;
	}
	def devirtualize(m: IrSpec, x: SsaInstr) -> IrSpec {
		if (!m.member.checkFact(Facts.M_OVERRIDDEN)) {
			return m; // CHA devirtualization
		} else if (SsaValue.?(x) && rv(x) != null) {
			return ir.resolveMethodImpl(rv(x).rtype, m); // devirtualize K
		} else if (x.opcode() == V3Opcode.ClassAlloc) {
			return ir.resolveMethodImpl(SsaApplyOp.!(x).op.typeArgs(0), m); // devirtualize ClassAlloc
		}
		// XXX: use results from RMA if available
		return null;
	}
	def extractIrSpec(i: SsaInstr) -> IrSpec {
		return V3Op.extractIrSpec(SsaApplyOp.!(i).op);
	}
	def log(v: int) -> int {
		// XXX: faster integer logarithm
		for (l = 0; l < 32; l++) {
			if ((1 #<< l) == v) return l;
		}
		return 32;
	}
	def isZero(x: SsaInstr) -> bool {
		return 0 != (x.facts & Facts.V_ZERO);
	}
	def isNonZero(x: SsaInstr) -> bool {
		return 0 != (x.facts & Facts.V_NON_ZERO);
	}
	def unreachable(t: Type) -> SsaInstr {
		// TODO: use a special unreachable value?
		return region.nullConst(t);
	}
}
