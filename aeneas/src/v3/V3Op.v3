// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Constants for the syntax of infix operators, used during parsing and
// semantic analysis
component V3Infix {
	def Equal    = '\x01';
	def NotEqual = '\x02';
	def Add      = '\x03';
	def Sub      = '\x04';
	def Mul      = '\x05';
	def Div      = '\x06';
	def Mod      = '\x07';
	def And      = '\x08';
	def Or       = '\x09';
	def AndAnd   = '\x0a';
	def OrOr     = '\x0b';
	def Xor      = '\x0c';
	def Shl      = '\x0d';
	def Shr      = '\x0e';
	def Lt       = '\x0f';
	def Gt       = '\x10';
	def Lteq     = '\x11';
	def Gteq     = '\x12';
	def NumOps   = Gteq + 1;

	def names: Array<string> = Array.new(NumOps);
	def prec: Array<byte> = Array.new(NumOps);

	def op(num: int, name: string, p: int) {
		names(num) = name;
		prec(num) = byte.!(p);
	}

	new() {
		op(Equal,	"==",  17);
		op(NotEqual,	"!=",  16);
		op(Add,		"+",   23);
		op(Sub,		"-",   23);
		op(Mul,		"*",   24);
		op(Div,		"/",   24);
		op(Mod,		"%",   24);
		op(And,		"&",   15);
		op(Or,		"|",   13);
		op(AndAnd,	"&&",  12);
		op(OrOr,	"||",  11);
		op(Xor,		"^",   14);
		op(Shl,		"#<<", 22);
		op(Shr,		"#>>", 22);
		op(Lt,		"<",   20);
		op(Gt,		">",   21);
		op(Lteq,	"<=",  18);
		op(Gteq,	">=",  19);
	}
	def parse(name: string) -> byte {
		// XXX: avoid the need to create an entire ParserState here
		var p = ParserState.new("<input>", name, ErrorGen.new(1), Parser.skipNone, null);
		var r = Parser.parseInfix(p);
		return if(r != null, r.infix);
	}
}
// Constants for all Virgil-III operators, used throughout the middle
// and backend of the compiler
component V3Opcode {
	def Equal		= '\x01';
	def NotEqual		= '\x02';
	def IntAdd		= '\x03';
	def IntSub		= '\x04';
	def IntMul		= '\x05';
	def IntDiv		= '\x06';
	def IntMod		= '\x07';
	def IntAnd		= '\x08';
	def IntOr		= '\x09';
	def IntXor		= '\x0a';
	def IntShl		= '\x0b';
	def IntShr		= '\x0c';
	def IntLt		= '\x0d';
	def IntGt		= '\x0e';
	def IntLteq		= '\x0f';
	def IntGteq		= '\x10';
	def IntConvert		= '\x11';
	def BoolAnd		= '\x13';
	def BoolOr		= '\x14';
	def BoolNot		= '\x15';
	def NullCheck		= '\x16';
	def BoundsCheck		= '\x17';
	def TypeSubsume		= '\x18';
	def TypeCast		= '\x19';
	def TypeQuery		= '\x1a';
	def ArrayAlloc		= '\x1b';
	def ArrayInit		= '\x1c';
	def ArrayGetElem	= '\x1d';
	def ArraySetElem	= '\x1e';
	def ArrayGetLength	= '\x1f';
	def ClassAlloc		= '\x20';
	def ClassGetField	= '\x21';
	def ClassInitField	= '\x22';
	def ClassSetField	= '\x23';
	def ClassGetMethod	= '\x24';
	def ClassGetVirtual	= '\x25';
	def ClassGetVirtFunc	= '\x26';
	def ComponentInit	= '\x27';
	def ComponentGetField	= '\x28';
	def ComponentSetField	= '\x29';
	def ComponentGetMethod	= '\x2a';
	def TupleCreate		= '\x2b';
	def TupleGetElem	= '\x2c';
	def CallClassMethod	= '\x2d';
	def CallClassVirtual	= '\x2e';
	def CallComponentMethod	= '\x2f';
	def CallDelegate	= '\x30';
	def CallFunction	= '\x31';
	def CreateDelegate	= '\x32';
	def SystemOp		= '\x33';
	def VariantCreate	= '\x34';
	def VariantTag		= '\x35';
	def VariantGetField	= '\x36';
	def ConditionalThrow	= '\x37';
	def LastOpcode		= ConditionalThrow;
	def totalOpcodes	= LastOpcode + 1;

	new() {
		// shorthand for registering an operator
		var op = Operators.register;

		// shorthand for SSA optimization facts
		var F = Facts.O_FOLDABLE;
		var P = Facts.O_PURE | Facts.O_FOLDABLE; // pure => foldable
		var C = Facts.O_COMMUTATIVE;
		var A = Facts.O_ASSOCIATIVE;
		var NZ   = Facts.V_NON_ZERO;
		var NNEG = Facts.V_NON_NEGATIVE;

		// register all operators and their optimization facts
		op(Equal,		"Equal",		P  |C);
		op(NotEqual, 		"NotEqual",		P  |C);
		op(IntAdd, 		"IntAdd",		P|A|C);
		op(IntSub, 		"IntSub",		P    );
		op(IntMul, 		"IntMul",		P|A|C);
		op(IntDiv, 		"IntDiv",		F    );
		op(IntMod, 		"IntMod",		F    );
		op(IntAnd, 		"IntAnd",		P|A|C);
		op(IntOr, 		"IntOr",		P|A|C);
		op(IntXor, 		"IntXor",		P|A|C);
		op(IntShl, 		"IntShl",		P    );
		op(IntShr, 		"IntShr",		P    );
		op(IntLt, 		"IntLt",		P    );
		op(IntGt, 		"IntGt",		P    );
		op(IntLteq, 		"IntLteq",		P    );
		op(IntGteq, 		"IntGteq",		P    );
		op(IntConvert, 		"IntConvert",		P    );
		op(BoolAnd, 		"BoolAnd",		P|A|C);
		op(BoolOr, 		"BoolOr",		P|A|C);
		op(BoolNot, 		"BoolNot",		P    );
		op(TypeCast, 		"TypeCast",		F    );
		op(TypeQuery, 		"TypeQuery",		P);
		op(TypeSubsume, 	"TypeSubsume",		P);
		op(ArrayAlloc, 		"ArrayAlloc",		NZ);
		op(ArrayInit, 		"ArrayInit",		NZ);
		op(ArrayGetElem, 	"ArrayGetElem",		0);
		op(ArraySetElem, 	"ArraySetElem",		0);
		op(ArrayGetLength, 	"ArrayGetLength",	F    |NNEG);
		op(ClassAlloc, 		"ClassAlloc",		NZ);
		op(ClassGetField, 	"ClassGetField",	0);
		op(ClassSetField, 	"ClassSetField",	0);
		op(ClassInitField, 	"ClassInitField",	0);
		op(ClassGetMethod, 	"ClassGetMethod",	NZ|F);
		op(ClassGetVirtual, 	"ClassGetVirtual",	NZ|F);
		op(ClassGetVirtFunc, 	"ClassGetVirtFunc",	NZ|F);
		op(ComponentInit, 	"ComponentInit",	0);
		op(ComponentGetField, 	"ComponentGetField",	0);
		op(ComponentSetField, 	"ComponentSetField",	0);
		op(ComponentGetMethod, 	"ComponentGetMethod",	NZ|P);
		op(TupleCreate, 	"TupleCreate",		P);
		op(TupleGetElem, 	"TupleGetElem",		P);
		op(NullCheck, 		"NullCheck",		F|NZ);
		op(BoundsCheck, 	"BoundsCheck",		F);
		op(CallClassMethod, 	"CallClassMethod",	0);
		op(CallClassVirtual, 	"CallClassVirtual",	0);
		op(CallComponentMethod,	"CallComponentMethod",	0);
		op(CallDelegate, 	"CallDelegate",		0);
		op(CallFunction, 	"CallFunction",		0);
		op(CreateDelegate, 	"CreateDelegate",	NZ);
		op(SystemOp, 		"SystemOp",		0);
		op(VariantCreate,	"VariantCreate",	P|NZ);
		op(VariantTag,		"VariantTag",		P|NNEG);
		op(VariantGetField,	"VariantGetField",	P);
		op(ConditionalThrow, 	"ConditionalThrow",	F);
	}
}
// Collects syntactic properties of an operator
class V3OpSyntax {
	def name: string;
	def builder: (V3SsaBuilder, Operator, SsaInstr, SsaInstr) -> SsaInstr;
	new(name, builder) { }
}
// This component centralizes all the operators in the Virgil III language.
// XXX: Use TypeArgs instead of Array<Type> to represent type arguments
component V3Op {
	def NONE: Array<Type> = [];
	def opMap = TypeUtil.newTypeMap<Map<string, Operator>>();
	def renderOp(op: Operator) -> string {
		return renderInto(op, StringBuffer.new()).toString();
	}
	def renderInto(op: Operator, buf: StringBuffer) -> StringBuffer {
		Operators.render(op.opcode, buf);
		if (TerminalBuffer.?(buf)) TerminalBuffer.!(buf).green();
		if (OperatorOf<void>.?(op)) {
			renderTypeArgs(op.typeArgs, buf);
			return buf.end();
		}
		buf.putc('[');
		if (OperatorOf<V3OpSyntax>.?(op)) {
			buf.puts(op.attr<V3OpSyntax>().name);
		} else if (OperatorOf<TypeCast>.?(op)) {
			buf.puts(op.attr<TypeCast>().name());
		} else if (OperatorOf<IrMember>.?(op)) {
			var m = op.attr<IrMember>();
			if (m != null) m.render(buf);
		} else if (OperatorOf<int>.?(op)) {
			buf.puti(op.attr<int>());
		} else if (OperatorOf<string>.?(op)) {
			buf.puts(op.attr<string>());
		} else if (OperatorOf<Int_TypeCon>.?(op)) {
			buf.puts(op.attr<Int_TypeCon>().name);
		} else if (OperatorOf<IrVariantCase>.?(op)) {
			buf.puts(op.attr<IrVariantCase>().source.name());
		} else {
			buf.puts("???");
		}
		renderTypeArgs(op.typeArgs, buf.putc(']'));
		return buf.end();
	}
	def needsNullCheck(app: SsaInstr, obj: SsaInstr) -> bool {
		if (obj.checkFact(Facts.V_NON_ZERO)) return false;
		return !app.checkFact(Facts.O_NO_NULL_CHECK);
	}
	def newOp0(opcode: byte, typeArgs: Array<Type>, paramTypes: Array<Type>, resultType: Type, func: (void, Arguments) -> Result) -> Operator {
		return OperatorOf<void>.new(opcode, typeArgs, paramTypes, resultType, (), func);
	}
	def newOp1<T>(opcode: byte, typeArgs: Array<Type>, paramTypes: Array<Type>, resultType: Type, func: (T, Arguments) -> Result, param: T) -> Operator {
		return OperatorOf<T>.new(opcode, typeArgs, paramTypes, resultType, param, func);
	}
	def op2(opcode: byte, name: string, left: Type, right: Type, result: Type, f: (V3OpSyntax, Arguments) -> Result, builder: (V3SsaBuilder, Operator, SsaInstr, SsaInstr) -> SsaInstr) -> OperatorOf<V3OpSyntax> {
		var syntax = V3OpSyntax.new(name, builder);
		var op = OperatorOf.new(opcode, NONE, [left, right], result, syntax, f);
		registerOp(left, name, op);
		return op;
	}
	def op1(opcode: byte, name: string, left: Type, result: Type, f: (void, Arguments) -> Result) -> Operator {
		var exp = newOp0(opcode, NONE, [left], result, f);
		if (name != null) return registerOp(left, name, exp);
		return exp;
	}
	def lookupOp(vtype: Type, op: string) -> Operator {
		var ops = opMap.get(vtype);
		if (ops != null) return ops.get(op);
		return null;
	}
	def registerOp(vtype: Type, name: string, op: Operator) -> Operator {
		var ops = opMap.get(vtype);
		if (ops == null) {
			ops = Strings.newMap();
			opMap.set(vtype, ops);
		}
		ops.set(name, op);
		return op;
	}
	def renderTypeArgs(typeArgs: Array<Type>, buf: StringBuffer) -> StringBuffer {
		if (typeArgs.length > 0) {
			buf.putc('<');
			for (i = 0; i < typeArgs.length; i++) {
				if (i > 0) buf.puts(", ");
				typeArgs(i).render(buf);
			}			
			buf.putc('>');
		}
		return buf;
	}
	def extractIrSpec(exp: Operator) -> IrSpec {
		var ta = exp.typeArgs;
		return IrSpec.new(ta(0), ta, exp.attr<IrMember>());
	}
	def evalIrSpec(member: IrMember, args: Arguments) -> IrSpec {
		var ta = args.getTypes();
		return IrSpec.new(ta(0), ta, member);
	}
	def i(args: Arguments, index: int) -> int { return Int.unbox(args.getArg(index)); }
	def b(args: Arguments, index: int) -> bool { return Bool.unbox(args.getArg(index)); }
	def c(args: Arguments, index: int) -> byte { return Byte.unbox(args.getArg(index)); }

//----------------------------------------------------------------------------
	def syntaxEqual = V3OpSyntax.new("==", V3SsaBuilder.opEqualOf);
	def newEqual(equalType: Type) -> OperatorOf<V3OpSyntax> {
		return OperatorOf.new(V3Opcode.Equal, [equalType], [equalType, equalType], Bool.TYPE, syntaxEqual, evalEqual);
	}
	def evalEqual(s: V3OpSyntax, args: Arguments) -> Result {
		return Bool.box(Values.equal(args.getArg(0), args.getArg(1)));
	}
//----------------------------------------------------------------------------
	def syntaxNotEqual = V3OpSyntax.new("!=", V3SsaBuilder.opNotEqualOf);
	def newNotEqual(equalType: Type) -> OperatorOf<V3OpSyntax> {
		return OperatorOf.new(V3Opcode.NotEqual, [equalType], [equalType, equalType], Bool.TYPE, syntaxNotEqual, evalNotEqual);
	}
	def evalNotEqual(s: V3OpSyntax, args: Arguments) -> Result {
		return Bool.box(!Values.equal(args.getArg(0), args.getArg(1)));
	}
//----------------------------------------------------------------------------
	def newIntConvert(ft: Type, tt: Type) -> Operator {
		return OperatorOf.new(V3Opcode.IntConvert, [ft, tt], [ft], tt, (), evalIntConvert);
	}
	def evalIntConvert(v: void, a: Arguments) -> Result {
		var val = a.getArg(0), r = IntOp.evalConversion(a.getType(0), a.getType(1), val);
		if (r.approx == CastOp.TRUE) return val;
		if (r.approx == CastOp.VALUE) return r.result;
		else return a.throw(V3Exception.TypeCheck, null);
	}
//----------------------------------------------------------------------------
	def opBoolAnd = op2(V3Opcode.BoolAnd, "&&", Bool.TYPE, Bool.TYPE, Bool.TYPE, evalBoolAnd, V3SsaBuilder.opBoolAnd);
	def evalBoolAnd(s: V3OpSyntax, a: Arguments) -> Result { return Bool.box(b(a, 0) && b(a, 1)); }
//----------------------------------------------------------------------------
	def opBoolOr = op2(V3Opcode.BoolOr, "||", Bool.TYPE, Bool.TYPE, Bool.TYPE, evalBoolOr, V3SsaBuilder.opBoolOr);
	def evalBoolOr(s: V3OpSyntax, a: Arguments) -> Result { return Bool.box(b(a, 0) || b(a, 1)); }
//----------------------------------------------------------------------------
	def opBoolNot: Operator	= op1(V3Opcode.BoolNot, "!", Bool.TYPE, Bool.TYPE, evalBoolNot);
	def evalBoolNot(v: void, a: Arguments) -> Result { return Bool.box(!b(a, 0)); }
//----------------------------------------------------------------------------
	def newTypeCast(ff: Type, tt: Type) -> OperatorOf<TypeCast> {
		var cast = TypeSystem.newTypeCast(ff, tt);
		return OperatorOf.new(V3Opcode.TypeCast, [ff, tt], [ff], tt, cast, evalTypeCast);
	}
	def evalTypeCast(cast: TypeCast, args: Arguments) -> Result {
		var val = args.getArg(0), r = cast.eval(args.getType(0), args.getType(1), val);
		if (r.approx == CastOp.TRUE) return val;
		if (r.approx == CastOp.VALUE) return r.result;
		else return args.throw(V3Exception.TypeCheck, null);
	}
//----------------------------------------------------------------------------
	def newTypeQuery(ff: Type, tt: Type) -> OperatorOf<TypeCast> {
		var cast = TypeSystem.newTypeQuery(ff, tt);
		return OperatorOf.new(V3Opcode.TypeQuery, [ff, tt], [ff], Bool.TYPE, cast, evalTypeQuery);
	}
	def evalTypeQuery(cast: TypeCast, args: Arguments) -> Result {
		var val = args.getArg(0), r = cast.eval(args.getType(0), args.getType(1), val);
		return if(r.approx == CastOp.TRUE, Bool.TRUE, Bool.FALSE);
	}
//----------------------------------------------------------------------------
	def newTypeSubsume(typeFrom: Type, typeTo: Type) -> Operator {
		return newOp0(V3Opcode.TypeSubsume, [typeFrom, typeTo], [typeFrom], typeTo, evalTypeSubsume);
	}
	def evalTypeSubsume(v: void, args: Arguments) -> Result {
		return args.getArg(0);
	}
//----------------------------------------------------------------------------
	def newArrayAlloc(arrayType: Type) -> Operator {
		return newOp0(V3Opcode.ArrayAlloc, [arrayType], [Int.TYPE], arrayType, evalArrayAlloc);
	}
	def evalArrayAlloc(v: void, args: Arguments) -> Result {
		var length = Int.unbox(args.getArg(0));
		if (length < 0) return args.throw(V3Exception.LengthCheck, null);
		var arrayType = args.getType(0);
		if (arrayType.open()) return args.throw(V3Exception.InternalError, Strings.format1("type %1 should not be open", arrayType.render));
		return args.getProgram().newRecord(arrayType, length);
	}
//----------------------------------------------------------------------------
	def newArrayInit(arrayType: Type, length: int) -> Operator {
		var etype = V3Array.elementType(arrayType);
		var types = Array<Type>.new(length);
		for (i = 0; i < types.length; i++) types(i) = etype;
		return newOp1(V3Opcode.ArrayInit, [arrayType], types, arrayType, evalArrayInit, length);
	}
	def evalArrayInit(length: int, args: Arguments) -> Result {
		var array = args.getProgram().newRecord(args.getType(0), length);
		// XXX: Arrays.mapIndex could be useful?
		for (i = 0; i < length; i++) array.values(i) = args.getArg(i);
		return array;
	}
//----------------------------------------------------------------------------
	def newArrayGetElem(arrayType: Type) -> Operator {
		return newOp0(V3Opcode.ArrayGetElem, [arrayType], [arrayType, Int.TYPE], V3Array.elementType(arrayType), evalArrayGetElem);
	}
	def evalArrayGetElem(v: void, args: Arguments) -> Result {
		var array = Record.!(args.getArg(0));
		var index = Int.unbox(args.getArg(1));
		if (array == null) return args.throw(V3Exception.NullCheck, null);
		if (index < 0 || index >= array.values.length) return args.throw(V3Exception.BoundsCheck, null);
		return array.values(index);
	}
//----------------------------------------------------------------------------
	def newArraySetElem(arrayType: Type) -> Operator {
		var etype = V3Array.elementType(arrayType);
		return newOp0(V3Opcode.ArraySetElem, [arrayType], [arrayType, Int.TYPE, etype], Void.TYPE, evalArraySetElem);
	}
	def evalArraySetElem(v: void, args: Arguments) -> Result {
		var array = Record.!(args.getArg(0));
		var index = Int.unbox(args.getArg(1));
		if (array == null) return args.throw(V3Exception.NullCheck, null);
		if (index < 0 || index >= array.values.length) return args.throw(V3Exception.BoundsCheck, null);
		var val = args.getArg(2);
		array.values(index) = val;
		return val;
	}
//----------------------------------------------------------------------------
	def newArrayGetLength(arrayType: Type) -> Operator {
		return newOp0(V3Opcode.ArrayGetLength, [arrayType], [arrayType], Int.TYPE, evalArrayGetLength);
	}
	def evalArrayGetLength(v: void, args: Arguments) -> Result {
		var array = Record.!(args.getArg(0));
		if (array == null) return args.throw(V3Exception.NullCheck, null);
		return Int.box(array.values.length);
	}
//----------------------------------------------------------------------------
	def newClassAlloc(newRef: IrSpec) -> Operator {
		var ftype = newRef.getBoundType(), paramTypes = Function.getParamTypeArray(ftype);
		return newOp1(V3Opcode.ClassAlloc, [newRef.container], paramTypes, newRef.container, evalClassAlloc, newRef.member);
	}
	def evalClassAlloc(newRef: IrMember, args: Arguments) -> Result {
		var spec = evalIrSpec(newRef, args), prog = args.getProgram();
		var record = prog.newRecord(spec.container, prog.ir.numFields(spec.container));
		return args.fwCall(spec, record, 0, args.numArgs());
	}
	def newEmptyClassAlloc(classType: Type) -> Operator {
		return newOp1(V3Opcode.ClassAlloc, [classType], TypeUtil.NO_TYPES, classType, evalEmptyClassAlloc, null);
	}
	def evalEmptyClassAlloc(newRef: IrMember, args: Arguments) -> Result {
		var classType = args.getType(0), prog = args.getProgram();
		var record = prog.newRecord(classType, prog.ir.numFields(classType));
		return record;
	}
//----------------------------------------------------------------------------
	def newClassGetField(fieldRef: IrSpec) -> Operator {
		return newOp1(V3Opcode.ClassGetField, [fieldRef.container], [fieldRef.container],
			fieldRef.getFieldType(), evalClassGetField, fieldRef.member);
	}
	def evalClassGetField(fieldRef: IrMember, args: Arguments) -> Result {
		var object = Record.!(args.getArg(0));
		if (object == null) return args.throw(V3Exception.NullCheck, null);
		return object.values(fieldRef.index);
	}
//----------------------------------------------------------------------------
	def newClassInitField(fieldRef: IrSpec) -> Operator {
		var fieldType = fieldRef.getFieldType();
		return newOp1(V3Opcode.ClassInitField, [fieldRef.container], [fieldRef.container, fieldType], Void.TYPE, evalClassSetField, fieldRef.member);
	}
//----------------------------------------------------------------------------
	def newClassSetField(fieldRef: IrSpec) -> Operator {
		var fieldType = fieldRef.getFieldType();
		return newOp1(V3Opcode.ClassSetField, [fieldRef.container], [fieldRef.container, fieldType], Void.TYPE, evalClassSetField, fieldRef.member);
	}
	def evalClassSetField(fieldRef: IrMember, args: Arguments) -> Result {
		var object = Record.!(args.getArg(0));
		if (object == null) return args.throw(V3Exception.NullCheck, null);
		var val = args.getArg(1);
		object.values(fieldRef.index) = val;
		return Values.BOTTOM;
	}
//----------------------------------------------------------------------------
	def newClassGetMethod(methodRef: IrSpec) -> Operator {
		var typeArgs = methodRef.typeArgs;
		return newOp1(V3Opcode.ClassGetMethod, typeArgs, [methodRef.container], 
			methodRef.getBoundType(), evalClassGetMethod, methodRef.member);
	}
	def evalClassGetMethod(meth: IrMember, args: Arguments) -> Result {
		var obj = Record.!(args.getArg(0));
		if (obj == null) return args.throw(V3Exception.NullCheck, null);
		return Delegate.new(obj, evalIrSpec(meth, args));
	}
	def evalGetMethod(obj: Record, args: Arguments, member: IrMember, implType: Type) -> Delegate {
		var spec = evalIrSpec(member, args);
		var impl = args.getProgram().ir.resolveMethodImpl(implType, spec);
		return Delegate.new(obj, impl);
	}
//----------------------------------------------------------------------------
	def newClassGetVirtual(methodRef: IrSpec) -> Operator {
		var typeArgs = methodRef.typeArgs;
		return newOp1(V3Opcode.ClassGetVirtual, typeArgs, [methodRef.container], 
			methodRef.getBoundType(), evalClassGetVirtual, methodRef.member);
	}
	def evalClassGetVirtual(member: IrMember, args: Arguments) -> Result {
		var obj = Record.!(args.getArg(0));
		if (obj == null) return args.throw(V3Exception.NullCheck, null);
		return evalGetMethod(obj, args, member, obj.rtype);
	}
//----------------------------------------------------------------------------
	def newClassGetVirtFunc(methodRef: IrSpec) -> Operator {
		var typeArgs = methodRef.typeArgs;
		return newOp1(V3Opcode.ClassGetVirtFunc, typeArgs, [methodRef.container], 
			methodRef.getFuncType(), evalClassGetVirtFunc, methodRef.member);
	}
	def evalClassGetVirtFunc(member: IrMember, args: Arguments) -> Result {
		var obj = Record.!(args.getArg(0));
		if (obj == null) return args.throw(V3Exception.NullCheck, null);
		var spec = evalIrSpec(member, args);
		var impl = args.getProgram().ir.resolveMethodImpl(obj.rtype, spec);
		return FuncVal.new(impl);
	}
//----------------------------------------------------------------------------
	def newComponentInit(ctype: Type, member: IrMethod) -> Operator {
		return newOp1(V3Opcode.ComponentInit, [ctype], TypeUtil.NO_TYPES, ctype, evalComponentInit, member);
	}
	def evalComponentInit(newRef: IrMember, args: Arguments) -> Result {
		var ctype = args.getType(0), decl = V3.asComponent(ctype).componentDecl;
		var prog = args.getProgram(), record = prog.getComponentRecord(decl);
		if (record == null) {
			record = prog.newRecord(ctype, prog.ir.numFields(ctype));
			prog.setComponentRecord(decl, record);
			var spec = IrSpec.new(ctype, [ctype], newRef);
			return args.fwCall(spec, record, 0, 0);
		}	
		return record;
	}
//----------------------------------------------------------------------------
	def newComponentGetField(fieldRef: IrSpec) -> Operator {
		return newOp1(V3Opcode.ComponentGetField, [fieldRef.container], [fieldRef.container], 
			fieldRef.getFieldType(), evalComponentGetField, fieldRef.member);
	}
	def evalComponentGetField(memberRef: IrMember, args: Arguments) -> Result {
		return getComponentRecord(args).values(memberRef.index);
	}
	def getComponentRecord(args: Arguments) -> Record {
		return args.getProgram().getComponentRecord(V3.asComponent(args.getType(0)).componentDecl);
	}
//----------------------------------------------------------------------------
	def newComponentSetField(fieldRef: IrSpec) -> Operator {
		var fieldType = fieldRef.getFieldType();
		return newOp1(V3Opcode.ComponentSetField, [fieldRef.container], [fieldRef.container, fieldType], 
			Void.TYPE, evalComponentSetField, fieldRef.member);
	}
	def evalComponentSetField(memberRef: IrMember, args: Arguments) -> Result {
		getComponentRecord(args).values(memberRef.index) = args.getArg(1);
		return Values.BOTTOM;
	}
//----------------------------------------------------------------------------
	def newComponentGetMethod(methodRef: IrSpec) -> Operator {
		var typeArgs = methodRef.typeArgs;
		return newOp1(V3Opcode.ComponentGetMethod, typeArgs, [methodRef.container], 
			methodRef.getBoundType(), evalComponentGetMethod, methodRef.member);
	}
	def evalComponentGetMethod(member: IrMember, args: Arguments) -> Result {
		var memberRef = evalIrSpec(member, args);
		return Delegate.new(args.getArg(0), memberRef);
	}
//----------------------------------------------------------------------------
	def newTupleCreate(tupleType: Type) -> Operator {
		var paramTypes = Lists.toArray(tupleType.nested);
		return newOp1(V3Opcode.TupleCreate, [tupleType], paramTypes, tupleType, evalTupleCreate, paramTypes.length);
	}
	def evalTupleCreate(length: int, args: Arguments) -> Result {
		var vals = Array<Val>.new(length);
		for (i = 0; i < vals.length; i++) vals(i) = args.getArg(i);
		return Tuple_Value.new(vals);
	}
//----------------------------------------------------------------------------
	def newTupleGetElem(tupleType: Type, index: int) -> Operator {
		return newOp1(V3Opcode.TupleGetElem, [tupleType], [tupleType], Lists.get(tupleType.nested, index), evalTupleGetElem, index);
	}
	def evalTupleGetElem(index: int, args: Arguments) -> Result {
		var tuple = args.getArg(0);
		if (tuple == Values.BOTTOM) return Values.BOTTOM;
		return (Tuple_Value.!(tuple)).values(index);
	}
//----------------------------------------------------------------------------
	def newNullCheck(rtype: Type) -> Operator {
		return newOp0(V3Opcode.NullCheck, [rtype], [rtype], rtype, evalNullCheck);
	}
	def evalNullCheck(v: void, args: Arguments) -> Result {
		var obj = args.getArg(0);
		if (obj == null) return args.throw(V3Exception.NullCheck, null);
		return obj;
	}
//----------------------------------------------------------------------------
	def newBoundsCheck(rtype: Type) -> Operator {
		return newOp0(V3Opcode.BoundsCheck, [rtype], [rtype, Int.TYPE], Void.TYPE, evalBoundsCheck);
	}
	def evalBoundsCheck(v: void, args: Arguments) -> Result {
		var array = Record.!(args.getArg(0));
		var index = Int.unbox(args.getArg(1));
		if (array == null) return args.throw(V3Exception.NullCheck, null);
		if (index < 0 || index >= array.values.length) return args.throw(V3Exception.BoundsCheck, null);
		return null;
	}
//----------------------------------------------------------------------------
	def newCallClassMethod(methodRef: IrSpec) -> Operator {
		return newCallOp(methodRef, V3Opcode.CallClassMethod, evalCallClassMethod);
	}
	def evalCallClassMethod(member: IrMember, args: Arguments) -> Result {
		return evalCallClassMethod0(evalClassGetMethod(member, args), args);
	}
	def evalCallClassMethod0(r: Result, args: Arguments) -> Result {
		if (Delegate.?(r)) {
			var del = Delegate.!(r);
			return args.fwCall(del.memberRef, del.val, 1, args.numArgs());
		}
		return r;
	}
	private def newCallOp(methodRef: IrSpec, opcode: byte, eval: (IrMember, Arguments) -> Result) -> Operator {
		var typeArgs = methodRef.typeArgs, ftype = methodRef.getUnboundType();
		var paramTypes = Function.getParamTypeArray(ftype);
		return newOp1(opcode, typeArgs, paramTypes, Function.getReturnType(ftype), eval, methodRef.member);
	}
//----------------------------------------------------------------------------
	def newCallClassVirtual(methodRef: IrSpec) -> Operator {
		return newCallOp(methodRef, V3Opcode.CallClassVirtual, evalCallClassVirtual);
	}
	def evalCallClassVirtual(member: IrMember, args: Arguments) -> Result {
		return evalCallClassMethod0(evalClassGetVirtual(member, args), args);
	}
//----------------------------------------------------------------------------
	def newCallComponentMethod(methodRef: IrSpec) -> Operator {
		var typeArgs = methodRef.typeArgs, ftype = methodRef.getBoundType();
		var paramTypes = Function.getParamTypeArray(ftype);
		return newOp1(V3Opcode.CallComponentMethod, typeArgs, paramTypes, Function.getReturnType(ftype), evalCallComponentMethod, methodRef.member);
	}
	def evalCallComponentMethod(member: IrMember, args: Arguments) -> Result {
		var spec = evalIrSpec(member, args);
		return args.fwCall(spec, null, 0, args.numArgs());
	}
//----------------------------------------------------------------------------
	def newCallDelegate(ftype: Type) -> Operator {
		var fTypes = Function.getParamTypeArray(ftype);
		var paramTypes = Arrays.prepend(ftype, fTypes);
		return newOp0(V3Opcode.CallDelegate, [ftype], paramTypes, Function.getReturnType(ftype), evalCallDelegate);
	}
	def evalCallDelegate(v: void, args: Arguments) -> Result {
		return args.throw(V3Exception.InternalError, "CallDelegate should not be directly evaluated");
	}
//----------------------------------------------------------------------------
	def newCallFunction(ftype: Type) -> Operator {
		ftype = Function.funcRefType(Function.prependParamType(AnyObject.TYPE, ftype));
		if (ftype.typeCon.kind != V3Kind.FUNCREF) return V3.fail("only function types allowed");
		var paramTypes = Arrays.prepend(ftype, Function.getParamTypeArray(ftype));
		return newOp0(V3Opcode.CallFunction, [ftype], paramTypes, Function.getReturnType(ftype), evalCallFunction);
	}
	def evalCallFunction(v: void, args: Arguments) -> Result {
		return args.throw(V3Exception.InternalError, "CallFunction should not be directly evaluated");
	}
//----------------------------------------------------------------------------
	def newCreateDelegate(methodRef: IrSpec, closure: Type) -> Operator {
		var typeArgs = methodRef.typeArgs;
		return newOp1(V3Opcode.CreateDelegate, typeArgs, [closure], methodRef.getBoundType(), evalCreateDelegate, methodRef.member);
	}
	def evalCreateDelegate(member: IrMember, args: Arguments) -> Result {
		return Delegate.new(args.getArg(0), evalIrSpec(member, args));
	}
//----------------------------------------------------------------------------
	def newSystemOp(name: string, paramTypes: Array<Type>, returnType: Type, func: (string, Arguments) -> Result) -> Operator {
		return newOp1(V3Opcode.SystemOp, NONE, paramTypes, returnType, func, name);
	}
//----------------------------------------------------------------------------
	def newVariantCreate(vtype: Type, vcase: IrVariantCase) -> Operator {
		var paramTypes = Arrays.map(vcase.fields, IrField.fieldType);
		if (vcase.variant.typeArgs != null) {
			// XXX: more efficient substitution for type args of variant?
			var typeArgs = vcase.variant.typeArgs.copy(Lists.toArray(vtype.nested));
			paramTypes = Arrays.map(paramTypes, Type.substitute(_, typeArgs));
		}
		return newOp1(V3Opcode.VariantCreate, [vtype], paramTypes, vtype, evalVariantCreate, vcase);
	}
	def evalVariantCreate(vcase: IrVariantCase, args: Arguments) -> Result {
		var vals = Array<Val>.new(vcase.fields.length);
		for (i = 0; i < vals.length; i++) vals(i) = args.getArg(i);
		return Variant_Value.new(args.getType(0), vcase, vals);
	}
//----------------------------------------------------------------------------
	def newVariantTag(vtype: Type) -> Operator {
		var vt = [vtype];
		return newOp1(V3Opcode.VariantTag, vt, vt, V3.asVariant(vtype).tagType, evalVariantTag, ());
	}
	def evalVariantTag(v: void, args: Arguments) -> Result {
		var val = args.getArg(0);
		if (val == null) return null;
		return Int.box(Variant_Value.!(val).vcase.tag);
	}
//----------------------------------------------------------------------------
	def newVariantGetField(vtype: Type, fieldRef: IrSpec) -> Operator {
		return newOp1(V3Opcode.VariantGetField, [fieldRef.container], [fieldRef.container],
			fieldRef.getFieldType(), evalVariantGetField, fieldRef.member);
	}
	def evalVariantGetField(fieldRef: IrMember, args: Arguments) -> Result {
		var val = args.getArg(0);
		if (val == null) return null;
		return Variant_Value.!(val).values(fieldRef.index);
	}
//----------------------------------------------------------------------------
	def newConditionalThrow(exception: string) -> Operator {
		return newOp1(V3Opcode.ConditionalThrow, NONE, [Bool.TYPE], Void.TYPE, evalConditionalThrow, exception);
	}
	def evalConditionalThrow(exception: string, args: Arguments) -> Result {
		if (Bool.unbox(args.getArg(0))) return args.throw(exception, null);
		return Values.BOTTOM;
	}
	// return op' where (x <op> y) == !(x <op'> y), if it exists
	def inverse(op: Operator) -> Operator {
		// XXX: use IntOp.inverse
		match(op.opcode) {
			V3Opcode.Equal:    return V3Op.newNotEqual(op.typeArgs(0)); // !(x == y) == (x != y)
			V3Opcode.NotEqual: return V3Op.newEqual(op.typeArgs(0));    // !(x != y) == (x == y)
			V3Opcode.IntLt:    return IntOp.get(op, V3Infix.Gteq);  // !(x < y) == (x >= y)
			V3Opcode.IntGt:    return IntOp.get(op, V3Infix.Lteq);  // !(x > y) == (x <= y)
			V3Opcode.IntLteq:  return IntOp.get(op, V3Infix.Gt);    // !(x <= y) == (x > y)
			V3Opcode.IntGteq:  return IntOp.get(op, V3Infix.Lt);    // !(x >= y) == (x < y)
		}
		return null;
	}
	// return op' where (x <op> y) == (y <op'> x), if it exists
	def commute(op: Operator) -> Operator {
		// XXX: use IntOp.commute
		match(op.opcode) {
			V3Opcode.IntAdd,
			V3Opcode.IntMul,
			V3Opcode.IntAnd,
			V3Opcode.IntOr,
			V3Opcode.IntXor,
			V3Opcode.Equal,
			V3Opcode.NotEqual: return op; // (x <op> y) == (y <op> x)
			V3Opcode.IntLt:    return IntOp.get(op, V3Infix.Gt);    // (x < y) == (y > x)
			V3Opcode.IntGt:    return IntOp.get(op, V3Infix.Lt);    // (x > y) == (y < x)
			V3Opcode.IntLteq:  return IntOp.get(op, V3Infix.Gteq);  // (x <= y) == (y >= x)
			V3Opcode.IntGteq:  return IntOp.get(op, V3Infix.Lteq);  // (x >= y) == (y <= x)
		}
		return null;
	}
	def isU32(op: Operator) -> bool {
		// TODO: a hack to check if an arithmetic operator is unsigned 32-bits
		if (op.paramTypes.length < 1) return false;
		var t = op.paramTypes(0);
		if (!V3.isInt(t)) return false;
		var tt = V3.asInt(t);
		return tt.width == 32 && !tt.signed;
	}
}
