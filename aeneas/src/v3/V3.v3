// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component V3Kind {
	def VOID	= 0;
	def BOOL	= 1;
	def INT		= 2;
	def ARRAY	= 3;
	def COMPONENT	= 4;
	def CLASS	= 5;
	def CLOSURE	= 6;
	def TUPLE	= 7;
	def TYPE_PARAM	= 8;
	def TYPE_VAR	= 9;
	def FUNCREF	= 10;
	def ANYFUNC	= 11;
	def SET		= 12;
	def VARIANT	= 13;
	def ENUM	= 14;
	def ENUM_SET	= 15;

	new() {
		// prevent inconsistencies with Type infrastructure
		if (TYPE_VAR != TypeUtil.TYPE_VAR_KIND) return V3.fail("kind number does not match");
		if (TYPE_PARAM != TypeUtil.TYPE_PARAM_KIND) return V3.fail("kind number does not match");
	}
}
// Utilities related to the Virgil III source language, including common types, 
// type queries, name mangling, etc.
component V3 {
	def stringType      = V3Array.newType(Byte.TYPE);
	def stringTypeCon   = TypeUtil.aliasTypeCon("string", stringType);
	def stringArrayType = V3Array.newType(stringType);
	def voidArrayType   = V3Array.newType(Void.TYPE);

	// For performance and to avoid pre-allocating all the fixed-size integer types,
	// we use a custom lookup routine for the top level types.
	def lookupToplevelType(name: string) -> TypeCon {
		match(name[0]) {
			'A' => if (Strings.equal("Array", name)) return V3Array.TYPECON;
			'b' => {
				if (Strings.equal("bool", name)) return Bool.TYPE.typeCon;
				if (Strings.equal("byte", name)) return Byte.TYPE.typeCon;
			}
			'i' => {
				if (Strings.equal("int", name)) return Int.TYPE.typeCon;
				return Int.lookupFsi(name, true);
			}
			'l' => {
				if (Strings.equal("long", name)) return Long.TYPE.typeCon;
			}
			's' => {
				if (Strings.equal("string", name)) return stringTypeCon;
				if (Strings.equal("short", name)) return Int.getTypeCon(true, 16);
			}
			'u' => return Int.lookupFsi(name, false);
			'v' => if (Strings.equal("void", name)) return Void.TYPE.typeCon;
		}
		return null;
	}
	def isPolymorphicClass(ctype: Type) -> bool {
		return ctype != null && V3Class_TypeCon.?(ctype.typeCon) && ctype.typeCon.arity > 0;
	}
	def isClass(t: Type) -> bool { return t != null && V3Class_TypeCon.?(t.typeCon); }
	def isInt32(t: Type) -> bool {
		if (IntType.?(t)) {
			var tt = IntType.!(t);
			return tt.width < 32 || (tt.width, tt.signed) == (32, true);
		}
		return false;
	}
	def isLong(t: Type) -> bool {
		if (IntType.?(t)) {
			var tt = IntType.!(t);
			if (tt.width > 32) return tt.width < 64 || tt.signed; // not u64
		}
		return false;
	}
	// XXX: introduce bitWidth(t: Type, refWidth: int) -> int and use everywhere
	def isComponent(t: Type) -> bool { return t != null && V3Component_TypeCon.?(t.typeCon); }
	def isFunction(t: Type) -> bool { return t != null && Function_TypeCon.?(t.typeCon); }
	def isArray(t: Type) -> bool { return t != null && t.typeCon == V3Array.TYPECON; }
	def isVariant(t: Type) -> bool { return t != null && t.typeCon.kind == V3Kind.VARIANT; }
	def isTuple(t: Type) -> bool { return t != null && t.typeCon == Tuple.TYPECON; }
	def isString(t: Type) -> bool { return t == stringType; }
	def isPrimitiveArray(t: Type) -> bool {
		if (t.typeCon.kind == V3Kind.ARRAY) {
			match (t.nested.head.typeCon.kind) {
				V3Kind.INT, V3Kind.BOOL, V3Kind.VOID => return true;
			}
		}
		return false;
	}
	def classDecl(t: Type) -> VstClass {
		return ClassType.!(t).classDecl;
	}
	def componentDecl(t: Type) -> VstComponent {
		return V3Component_TypeCon.!(t.typeCon).componentDecl;
	}
	def asComponent(t: Type) -> V3Component_TypeCon {
		return V3Component_TypeCon.!(t.typeCon);
	}
	def isSigned(t: Type) -> bool {
		return IntType.?(t) && IntType.!(t).signed;
	}
	def getSyntheticVariantType(t: Type, vcase: VstCaseMember) -> Type {
		return vcase.decl.typeCon.create(t.nested);
	}
	def makeDefaultVariantRecord(prog: Program, t: Type) -> Record {
		var cases = ClassType.!(getRootType(t)).classDecl.cases;
		if (cases.length > 0) t = cases[0].decl.typeCon.create(t.nested);
		var len = prog.ir.makeIrClass(t).fields.length;
		return prog.newRecord(t, len);
	}
	def getVariantTag(t: Type) -> int {
		var tag = ClassType.!(t).classDecl.variantTag;
		return if(tag >= 0, tag);
	}
	def getVariantTagType(t: Type) -> IntType {
		return ClassType.!(getRootType(t)).classDecl.tagType;
	}
	def getEnumSetType(t: Type) -> IntType {
		return V3EnumSet_TypeCon.!(t.typeCon).intType;
	}
	def getRootType(t: Type) -> Type {
		while (true) {
			var s = getSuperType(t);
			if (s == null) return t;
			t = s;
		}
		return t;
	}
	def getSuperType(t: Type) -> Type {
		// inlined and optimized super type lookup
		return if(ClassType.?(t), ClassType.!(t).getSuperType());
	}
	def getTypeArgs(t: Type) -> TypeArgs {
		// inlined and optimized type arguments lookup
		if (t == null) return null;
		if (t.nested == null) return null;
		return if(ClassType.?(t), ClassType.!(t).getTypeArgs());
	}
	def mangleIrMember(m: IrMember) -> string {
		var buffer = m.render(StringBuffer.new());
		return Mangle.mangleB(buffer, StringBuffer.new()).toString();
	}
	def newRecordMap<T>() -> HashMap<Record, T> {
		return HashMap.new(Record.id, Record.==);
	}
	def renderResult(result: Result, vtype: Type, buf: StringBuffer) -> StringBuffer {
		if (buf == null) buf = StringBuffer.new();
		if (Exception.?(result)) {
			var except = Exception.!(result);
			if (except.msg != null) buf.format2("!%1: %2\n", except.error, except.msg);
			else buf.format1("!%1\n", except.error);

			for (list = except.trace; list != null; list = list.tail) {
				for (s = list.head; s != null; s = s.tail) {
					buf.format1("\t%1\n", s.render);
				}
			}
			return buf;
		}
		var val = Val.!(result);
		if (val == Values.BOTTOM) renderBottom(vtype, buf);
		else if (vtype == Byte.TYPE) renderByte(Byte.unbox(val), buf);
		else if (Box<int>.?(val)) buf.puti(Box<int>.!(val).val);
		else if (Box<long>.?(val)) buf.putl(Box<long>.!(val).val);
		else if (Box<bool>.?(val)) buf.appendBool(Box<bool>.!(val).val);
		else if (Record.?(val)) {
			var record = Record.!(val);
			buf.format2("#%1:%2", record.id, record.rtype.render);
		} else if (Tuple_Value.?(val)) {
			var vals = (Tuple_Value.!(val)).values;
			var list: List<Type> = null;
			if (vtype != null) list = vtype.nested;
			buf.putc('(');
			for (i < vals.length) {
				if (i > 0) buf.puts(", ");
				if (list != null) {
					renderResult(vals[i], list.head, buf);
					list = list.tail;
				} else {
					renderResult(vals[i], null, buf);
				}
			}
			buf.putc(')');
		} else if (Closure.?(val)) {
			var del = Closure.!(val);
			renderResult(del.val, null, buf);
			buf.putc(':');
			del.memberRef.render(buf);
		} else if (FuncVal.?(val)) {
			var func = FuncVal.!(val);
			buf.putc('&');
			func.memberRef.render(buf);
		} else if (Address<IrMethod>.?(val)) {
			var addr = Address<IrMethod>.!(val);
			addOffset(buf.format1("&%1", addr.val.renderLong), addr);
		} else if (Address<IrMtable>.?(val)) {
			var addr = Address<IrMtable>.!(val);
			addOffset(buf.format1("&mt(%1)", addr.val.render), addr);
		} else if (Address<Record>.?(val)) {
			var addr = Address<Record>.!(val);
			addOffset(buf.format1("&#%1", addr.val.id), addr);
		} else if (Address<IrField>.?(val)) {
			var addr = Address<IrField>.!(val);
			addOffset(buf.format1("&%1", addr.val.renderLong), addr);
		} else if (Address<string>.?(val)) {
			var addr = Address<string>.!(val);
			addOffset(buf.format1("&%1", addr.val), addr);
		} else if (CiRuntime_Address.?(val)) {
			var addr = CiRuntime_Address.!(val);
			addOffset(buf.format1("&CiRuntime.%1", addr.name), addr);
		} else if (Addr.?(val)) {
			var addr = Addr.!(val);
			addOffset(buf.putc('&'), addr);
		} else {
			buf.puts("<unknown value>");
		}
		return buf;
	}
	def renderVal(val: Val) -> string {
		return renderResult(val, null, null).toString();
	}
	def unboxIntegral(v: Val) -> int {
		if (v == null) return 0;
		if (Box<int>.?(v)) return Box<int>.!(v).val;
		if (Box<bool>.?(v)) return if(Bool.unbox(v), 1, 0);
		return fail("expected integral value");
	}
	def fail<T>(msg: string) -> T {
		var v: T;
		System.error(V3Exception.InternalError, msg);
		return v;
	}
	def fail1<T, A>(msg: string, p: A) -> T {
		return fail(Strings.format1(msg, p));
	}
	def unimplemented<T>() -> T {
		return fail("unimplemented");
	}
}
def addOffset(buf: StringBuffer, addr: Addr) {
	var name = if(addr.region == null, "data", addr.region.name);
	buf.format1("[%1", name);
	if (addr.offset < 0) buf.puts(" - ").puti(0 - addr.offset);
	if (addr.offset > 0) buf.puts(" + ").puti(addr.offset);
	buf.puts("]");
}
def renderByte(ch: byte, buf: StringBuffer) -> bool {
	buf.putc('\'').appendEscapedChar(ch).putc('\'');
	return true;
}
def renderBottom(vtype: Type, buf: StringBuffer) {
	if (vtype == null) {
		buf.puts("<null>");
		return;
	}
	var str: string;
	match (vtype.typeCon.kind) {
		V3Kind.VOID => str = "void";
		V3Kind.BOOL => str = "false";
		V3Kind.INT => str = "0";
		V3Kind.CLASS, V3Kind.ARRAY, V3Kind.CLOSURE => str = "null";
		V3Kind.COMPONENT => str = V3.asComponent(vtype).componentDecl.name();
		V3Kind.TUPLE => {
			buf.putc('(');
			for (list = vtype.nested; list != null; list = list.tail) {
				if (list != vtype.nested) buf.puts(", ");
				V3.renderResult(Values.BOTTOM, list.head, buf);
			}
			buf.putc(')');
		}
		V3Kind.VARIANT => {
			vtype.render(buf).puts(".null"); // TODO: render variant
		}
	}
	buf.puts(str);
}

// Constants for exception names
component V3Exception {
	def NullCheck     = "NullCheckException";
	def TypeCheck     = "TypeCheckException";
	def BoundsCheck   = "BoundsCheckException";
	def LengthCheck   = "LengthCheckException";
	def Unimplemented = "UnimplementedException";
	def DivideByZero  = "DivideByZeroException";
	def InternalError = "InternalError";
	def HeapOverflow  = "HeapOverflow";
}
