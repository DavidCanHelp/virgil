// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component V3Kind {
	def VOID	= 0;
	def BOOL	= 1;
	def BYTE	= 2;
	def INT		= 3;
	def ARRAY	= 4;
	def COMPONENT	= 5;
	def CLASS	= 6;
	def DELEGATE	= 7;
	def TUPLE	= 8;
	def TYPE_PARAM	= 9;
	def TYPE_VAR	= 10;
	def FUNCREF	= 11;

	new() {
		// prevent inconsistencies with Type infrastructure
		if (TYPE_VAR != TypeUtil.TYPE_VAR_KIND) return V3.fail("kind number does not match");
		if (TYPE_PARAM != TypeUtil.TYPE_PARAM_KIND) return V3.fail("kind number does not match");
	}
}
// Utilities related to the Virgil III source language, including common types, 
// type queries, name mangling, etc.
component V3 {
	def toplevelTypeEnv = TypeEnv.new(null, null);
	def stringType      = V3Array.newType(Byte.TYPE);
	def stringArrayType = V3Array.newType(stringType);
	def voidArrayType   = V3Array.newType(Void.TYPE);

	def CAST_TYPE_PARAMS  = List.new(TypeUtil.newTypeParam(Token.new("<builtin>", "T", 0, 0), TypeUtil.globalCache), null);
	def QUERY_TYPE_PARAMS = List.new(TypeUtil.newTypeParam(Token.new("<builtin>", "T", 0, 0), TypeUtil.globalCache), null);
	def INTPARAM          = List.new(Int.TYPE, null);

	new() {
		// add the basic types and the array constructor
		toplevelTypeEnv.store("int", Int.TYPE.typeCon);
		toplevelTypeEnv.store("bool", Bool.TYPE.typeCon);
		toplevelTypeEnv.store("byte", Byte.TYPE.typeCon);
		toplevelTypeEnv.store("void", Void.TYPE.typeCon);
		toplevelTypeEnv.store("Array", V3Array.TYPECON);

		// build a special type con for strings
		toplevelTypeEnv.store("string", TypeUtil.aliasTypeCon("string", stringType));
	}
	def isPolymorphicClass(ctype: Type) -> bool {
		return ctype != null && V3Class_TypeCon.?(ctype.typeCon) && ctype.typeCon.arity > 0;
	}
	def isClass(t: Type) -> bool { return t != null && V3Class_TypeCon.?(t.typeCon); }
	def isTypeParam(t: Type) -> bool { return TypeParam.?(t); }
	def isComponent(t: Type) -> bool { return t != null && V3Component_TypeCon.?(t.typeCon); }
	def isFunction(t: Type) -> bool { return t != null && Function_TypeCon.?(t.typeCon); }
	def isArray(t: Type) -> bool { return t != null && t.typeCon == V3Array.TYPECON; }
	def isTuple(t: Type) -> bool { return t != null && t.typeCon == Tuple.TYPECON; }
	def isString(t: Type) -> bool { return t == stringType; }
	def isPrimitiveArray(t: Type) -> bool {
		if (t.typeCon.kind == V3Kind.ARRAY) {
			match (t.nested.head.typeCon.kind) {
				V3Kind.BYTE, V3Kind.INT, V3Kind.BOOL, V3Kind.VOID: return true;
			}
		}
		return false;
	}
	def asClass(t: Type) -> V3Class_TypeCon {
		if (t == null) return null;
		return V3Class_TypeCon.!(t.typeCon);
	}
	def asComponent(t: Type) -> V3Component_TypeCon {
		if (t == null) return null;
		return V3Component_TypeCon.!(t.typeCon);
	}
	def getSuperType(ct: Type) -> Type {
		if (!isClass(ct)) return null;
		return asClass(ct).getSuperType(ct);
	}
	def getTypeArgs(t: Type) -> TypeArgs {
		if (isClass(t)) return V3Class_TypeCon.!(t.typeCon).getTypeArgs(t);
		return null;
	}
	def mangleTypeName(prefix: string, vtype: Type) -> string {
		var buffer = Strings.toBuffer(prefix);
		vtype.render(buffer);
		return Mangle.mangleB(buffer, StringBuffer.new()).toString();
	}
	def mangleIrSpec(irSpec: IrSpec) -> string {
		var buffer = irSpec.render(StringBuffer.new());
		return Mangle.mangleB(buffer, StringBuffer.new()).toString();
	}
	def mangleIrMember(m: IrMember) -> string {
		var buffer = m.render(StringBuffer.new());
		return Mangle.mangleB(buffer, StringBuffer.new()).toString();
	}
	def newRecordMap<T>() -> HashMap<Record, T> {
		return HashMap.new(Record.id, Record.==);
	}
	def valHash(v: Val) -> int {
		if (v == null) return 0;
		if (Box<int>.?(v)) return Box<int>.!(v).val;
		if (Record.?(v)) return Record.!(v).id;
		if (Box<bool>.?(v)) {
			if (Box<bool>.!(v).val) return 111111;
			return 0;
		}
		if (Box<byte>.?(v)) return Box<byte>.!(v).val;
		if (OpClosure.?(v)) {
			var opcl = OpClosure.!(v), op = opcl.op;
			return Arrays.hash(Arrays.hash(op.opcode, op.typeArgs, Type.hash), opcl.vals, valHash);
		}
		if (Delegate.?(v)) {
			var d = Delegate.!(v);
			return valHash(d.val) + d.memberRef.member.uid;
		}
		if (Tuple_Value.?(v)) {
			return Arrays.hash(22, Tuple_Value.!(v).values, valHash);
		}
		return -1;
	}
	def newProgram() -> Program {
		var prog = Program.new();
		var lang = V3Language.new(prog);
		prog.addLanguage(lang);
		return prog;
	}
	def renderResult(result: Result, buffer: StringBuffer) -> StringBuffer {
		return newProgram().renderResult(result, null, buffer);
	}
	def unboxIntegral(v: Val) -> int {
		if (v == null) return 0;
		if (Box<int>.?(v)) return Box<int>.!(v).val;
		if (Box<byte>.?(v)) return int.!(Box<byte>.!(v).val);
		if (Box<bool>.?(v)) return if(Bool.unbox(v), 1, 0);
		return fail("expected integral value");
	}
	def fail<T>(msg: string) -> T {
		var v: T;
		System.error(V3Exception.InternalError, msg);
		return v;
	}
	def fail1<T, A>(msg: string, p: A) -> T {
		return fail(Strings.format1(msg, p));
	}
}
// Rendering of values specific to Virgil III
class V3Language extends Language {
	def prog: Program;
	new(prog) { }

	def renderVal(val: Val, vtype: Type, buffer: StringBuffer) -> bool {
		if (val == Values.BOTTOM) return renderBottom(vtype, buffer);
		else if (Box<int>.?(val)) buffer.puti(Int.unbox(val));
		else if (Box<byte>.?(val)) renderByte(Byte.unbox(val), buffer);
		else if (Box<bool>.?(val)) buffer.appendBool(Bool.unbox(val));
		else if (Record.?(val)) {
			var record = Record.!(val);
			buffer.format2("#%1:%2", record.id, record.rtype.render);
		} else if (Tuple_Value.?(val)) {
			var vals = (Tuple_Value.!(val)).values;
			var list: List<Type> = null;
			if (vtype != null) list = vtype.nested;
			buffer.putc('(');
			for (i = 0; i < vals.length; i++) {
				if (i > 0) buffer.puts(", ");
				if (list != null) {
					prog.renderResult(vals(i), list.head, buffer);
					list = list.tail;
				} else {
					prog.renderResult(vals(i), null, buffer);
				}
			}
			buffer.putc(')');
		} else if (Delegate.?(val)) {
			var del = Delegate.!(val);
			prog.renderResult(del.val, null, buffer);
			buffer.putc(':');
			del.memberRef.render(buffer);
		} else if (FuncVal.?(val)) {
			var func = FuncVal.!(val);
			buffer.putc('&');
			func.memberRef.render(buffer);
		} else if (OpClosure.?(val)) {
			var opcl = OpClosure.!(val), v = opcl.vals;
			V3Op.renderInto(opcl.op, buffer);
			if (v.length > 0) {
				buffer.putc('{');
				for (i = 0; i < v.length; i++) {
					var j = opcl.indexMap(i);
					buffer.puti(j).putc('=');
					renderVal(v(i), opcl.op.paramTypes(j), buffer);
				}
				buffer.putc('}');
			}
		} else {
			return false;
		}
		return true;
	}
	def renderByte(ch: byte, buffer: StringBuffer) -> bool {
		buffer.putc('\'');
		if (ch <= '~' && ch >= ' ') {
			if (ch == '\'' || ch == '\"' || ch == '\\') buffer.putc('\\');
			buffer.putc(ch);
		} else {
			// append a hex representation
			buffer.putc('\\');
			buffer.putc('x');
			buffer.putc(Strings.hexMap(ch #>> 4));
			buffer.putc(Strings.hexMap(ch & 0xf));
		}
		buffer.putc('\'');
		return true;
	}
	def renderBottom(vtype: Type, buffer: StringBuffer) -> bool {
		if (vtype == null) {
			buffer.puts("<null>");
			return true;
		}
		var str: string;
		match (vtype.typeCon.kind) {
			V3Kind.VOID: str = "void";
			V3Kind.BYTE: str = "\'\\x00\'";
			V3Kind.BOOL: str = "false";
			V3Kind.INT: str = "0";
			V3Kind.CLASS, V3Kind.ARRAY, V3Kind.DELEGATE: str = "null";
			V3Kind.COMPONENT: str = V3.asComponent(vtype).componentDecl.name();
			V3Kind.TUPLE: {
				buffer.putc('(');
				for (list = vtype.nested; list != null; list = list.tail) {
					if (list != vtype.nested) buffer.puts(", ");
					prog.renderResult(Values.BOTTOM, list.head, buffer);
				}
				buffer.putc(')');
				return true;
			}
		} else {
			return false;
		}
		buffer.puts(str);
		return true;
	}
}
// Constants for exception names
component V3Exception {
	def NullCheck     = "NullCheckException";
	def TypeCheck     = "TypeCheckException";
	def BoundsCheck   = "BoundsCheckException";
	def LengthCheck   = "LengthCheckException";
	def Unimplemented = "UnimplementedException";
	def DivideByZero  = "DivideByZeroException";
	def ShiftCheck    = "ShiftCheckException";
	def InternalError = "InternalError";
	def HeapOverflow  = "HeapOverflow";
	def StackOverflow = "StackOverflow";
}
