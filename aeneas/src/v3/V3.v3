// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component V3Kind {
	def VOID	= 0;
	def BOOL	= 1;
	def INT		= 2;
	def ARRAY	= 3;
	def COMPONENT	= 4;
	def CLASS	= 5;
	def DELEGATE	= 6;
	def TUPLE	= 7;
	def TYPE_PARAM	= 8;
	def TYPE_VAR	= 9;
	def FUNCREF	= 10;
	def SET		= 11;
	def VARIANT	= 12;
	def ENUM	= 13;
	def ENUM_SET	= 14;

	new() {
		// prevent inconsistencies with Type infrastructure
		if (TYPE_VAR != TypeUtil.TYPE_VAR_KIND) return V3.fail("kind number does not match");
		if (TYPE_PARAM != TypeUtil.TYPE_PARAM_KIND) return V3.fail("kind number does not match");
	}
}
// Utilities related to the Virgil III source language, including common types, 
// type queries, name mangling, etc.
component V3 {
	def stringType      = V3Array.newType(Byte.TYPE);
	def stringTypeCon   = TypeUtil.aliasTypeCon("string", stringType);
	def stringArrayType = V3Array.newType(stringType);
	def voidArrayType   = V3Array.newType(Void.TYPE);

	// For performance and to avoid pre-allocating all the fixed-size integer types,
	// we use a custom lookup routine for the top level types.
	def lookupToplevelType(name: string) -> TypeCon {
		match(name(0)) {
			'A': if (Strings.equal("Array", name)) return V3Array.TYPECON;
			'b': {
				if (Strings.equal("bool", name)) return Bool.TYPE.typeCon;
				if (Strings.equal("byte", name)) return Byte.TYPE.typeCon;
			}
			'i': {
				if (Strings.equal("int", name)) return Int.TYPE.typeCon;
				return Int.lookupFsi(name, true);
			}
			'l': {
				if (Strings.equal("long", name)) return Int.getTypeCon(true, 64);
			}
			's': {
				if (Strings.equal("string", name)) return stringTypeCon;
				if (Strings.equal("short", name)) return Int.getTypeCon(true, 16);
			}
			'u': return Int.lookupFsi(name, false);
			'v': if (Strings.equal("void", name)) return Void.TYPE.typeCon;
		}
		return null;
	}
	def isPolymorphicClass(ctype: Type) -> bool {
		return ctype != null && V3Class_TypeCon.?(ctype.typeCon) && ctype.typeCon.arity > 0;
	}
	def isClass(t: Type) -> bool { return t != null && V3Class_TypeCon.?(t.typeCon); }
	def isInt32(t: Type) -> bool {
		if (IntType.?(t)) {
			var tt = IntType.!(t);
			return tt.width < 32 || (tt.width, tt.signed) == (32, true);
		}
		return false;
	}
	def isLong(t: Type) -> bool {
		if (IntType.?(t)) {
			var tt = IntType.!(t);
			if (tt.width > 32) return tt.width < 64 || tt.signed; // not u64
		}
		return false;
	}
	def isComponent(t: Type) -> bool { return t != null && V3Component_TypeCon.?(t.typeCon); }
	def isFunction(t: Type) -> bool { return t != null && Function_TypeCon.?(t.typeCon); }
	def isArray(t: Type) -> bool { return t != null && t.typeCon == V3Array.TYPECON; }
	def isVariant(t: Type) -> bool { return t != null && t.typeCon.kind == V3Kind.VARIANT; }
	def isTuple(t: Type) -> bool { return t != null && t.typeCon == Tuple.TYPECON; }
	def isString(t: Type) -> bool { return t == stringType; }
	def isPrimitiveArray(t: Type) -> bool {
		if (t.typeCon.kind == V3Kind.ARRAY) {
			match (t.nested.head.typeCon.kind) {
				V3Kind.INT, V3Kind.BOOL, V3Kind.VOID: return true;
			}
		}
		return false;
	}
	def classDecl(t: Type) -> VstClass {
		return ClassType.!(t).classDecl;
	}
	def componentDecl(t: Type) -> VstComponent {
		return V3Component_TypeCon.!(t.typeCon).componentDecl;
	}
	def asComponent(t: Type) -> V3Component_TypeCon {
		return V3Component_TypeCon.!(t.typeCon);
	}
	def isSigned(t: Type) -> bool {
		return IntType.?(t) && IntType.!(t).signed;
	}
	def getSyntheticVariantType(t: Type, vcase: VstVariantCaseMember) -> Type {
		return vcase.decl.typeCon.create(t.nested);
	}
	def makeDefaultVariantRecord(prog: Program, t: Type) -> Record {
		var classType = ClassType.!(getRootType(t));
		var c = classType.searchForVariantWithTag(0);
		if (c != null) t = c.decl.typeCon.create(t.nested);
		var len = prog.ir.makeIrClass(t).fields.length;
		return prog.newRecord(t, len);
	}
	def getVariantTag(t: Type) -> int {
		var tag = ClassType.!(t).classDecl.variantTag;
		return if(tag >= 0, tag);
	}
	def getVariantTagType(t: Type) -> IntType {
		return ClassType.!(getRootType(t)).classDecl.tagType;
	}
	def getRootType(t: Type) -> Type {
		while (true) {
			var s = getSuperType(t);
			if (s == null) return t;
			t = s;
		}
		return t;
	}
	def getSuperType(t: Type) -> Type {
		// inlined and optimized super type lookup
		return if(ClassType.?(t), ClassType.!(t).getSuperType());
	}
	def getTypeArgs(t: Type) -> TypeArgs {
		// inlined and optimized type arguments lookup
		if (t == null) return null;
		if (t.nested == null) return null;
		return if(ClassType.?(t), ClassType.!(t).getTypeArgs());
	}
	def mangleIrMember(m: IrMember) -> string {
		var buffer = m.render(StringBuffer.new());
		return Mangle.mangleB(buffer, StringBuffer.new()).toString();
	}
	def newRecordMap<T>() -> HashMap<Record, T> {
		return HashMap.new(Record.id, Record.==);
	}
	def newProgram() -> Program {
		var prog = Program.new();
		var lang = V3Language.new(prog);
		prog.addLanguage(lang);
		return prog;
	}
	def renderResult(result: Result, buffer: StringBuffer) -> StringBuffer {
		return newProgram().renderResult(result, null, buffer);
	}
	def unboxIntegral(v: Val) -> int {
		if (v == null) return 0;
		if (Box<int>.?(v)) return Box<int>.!(v).val;
		if (Box<bool>.?(v)) return if(Bool.unbox(v), 1, 0);
		return fail("expected integral value");
	}
	def fail<T>(msg: string) -> T {
		var v: T;
		System.error(V3Exception.InternalError, msg);
		return v;
	}
	def fail1<T, A>(msg: string, p: A) -> T {
		return fail(Strings.format1(msg, p));
	}
	def newComponent(name: string, where: string, typeCache: TypeCache) -> Type {
		var decl = VstComponent.new(Token.new(where, name, 0, 0), null);
		var typeCon = V3Component_TypeCon.new(decl, typeCache);
		decl.memberMap = Strings.newMap();
		return typeCon.create0();
	}
}
// Rendering of values specific to Virgil III
class V3Language(prog: Program) extends Language {
	def renderVal(val: Val, vtype: Type, buffer: StringBuffer) -> bool {
		if (val == Values.BOTTOM) return renderBottom(vtype, buffer);
		else if (vtype == Byte.TYPE) renderByte(Byte.unbox(val), buffer);
		else if (Box<int>.?(val)) buffer.puti(Box<int>.!(val).val);
		else if (Box<long>.?(val)) buffer.putl(Box<long>.!(val).val);
		else if (Box<bool>.?(val)) buffer.appendBool(Box<bool>.!(val).val);
		else if (Record.?(val)) {
			var record = Record.!(val);
			buffer.format2("#%1:%2", record.id, record.rtype.render);
		} else if (Tuple_Value.?(val)) {
			var vals = (Tuple_Value.!(val)).values;
			var list: List<Type> = null;
			if (vtype != null) list = vtype.nested;
			buffer.putc('(');
			for (i < vals.length) {
				if (i > 0) buffer.puts(", ");
				if (list != null) {
					prog.renderResult(vals(i), list.head, buffer);
					list = list.tail;
				} else {
					prog.renderResult(vals(i), null, buffer);
				}
			}
			buffer.putc(')');
		} else if (Closure.?(val)) {
			var del = Closure.!(val);
			prog.renderResult(del.val, null, buffer);
			buffer.putc(':');
			del.memberRef.render(buffer);
		} else if (FuncVal.?(val)) {
			var func = FuncVal.!(val);
			buffer.putc('&');
			func.memberRef.render(buffer);
		} else {
			return false;
		}
		return true;
	}
	def renderByte(ch: byte, buffer: StringBuffer) -> bool {
		buffer.putc('\'').appendEscapedChar(ch).putc('\'');
		return true;
	}
	def renderBottom(vtype: Type, buffer: StringBuffer) -> bool {
		if (vtype == null) {
			buffer.puts("<null>");
			return true;
		}
		var str: string;
		match (vtype.typeCon.kind) {
			V3Kind.VOID: str = "void";
			V3Kind.BOOL: str = "false";
			V3Kind.INT: str = "0";
			V3Kind.CLASS, V3Kind.ARRAY, V3Kind.DELEGATE: str = "null";
			V3Kind.COMPONENT: str = V3.asComponent(vtype).componentDecl.name();
			V3Kind.TUPLE: {
				buffer.putc('(');
				for (list = vtype.nested; list != null; list = list.tail) {
					if (list != vtype.nested) buffer.puts(", ");
					prog.renderResult(Values.BOTTOM, list.head, buffer);
				}
				buffer.putc(')');
				return true;
			}
			V3Kind.VARIANT: {
				vtype.render(buffer).puts(".null"); // TODO: render variant
				return true;
			}
		} else {
			return false;
		}
		buffer.puts(str);
		return true;
	}
}
// Constants for exception names
component V3Exception {
	def NullCheck     = "NullCheckException";
	def TypeCheck     = "TypeCheckException";
	def BoundsCheck   = "BoundsCheckException";
	def LengthCheck   = "LengthCheckException";
	def Unimplemented = "UnimplementedException";
	def DivideByZero  = "DivideByZeroException";
	def ShiftCheck    = "ShiftCheckException";
	def InternalError = "InternalError";
	def HeapOverflow  = "HeapOverflow";
	def StackOverflow = "StackOverflow";
}
