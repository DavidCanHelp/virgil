// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Representation of the "System" component which provides system-level
// functions like opening a file, performing IO, etc
component SystemModule {
	def system = Syscall_TypeCon.new("System");

	new() {
		system.add("chmod",	  chmod,	[V3.stringType, Int.TYPE], Void.TYPE);
		system.add("fileOpen",   fileOpen,	[V3.stringType, Bool.TYPE], Int.TYPE);
		system.add("fileClose",  fileClose,	Int.TYPE_ARRAY, Void.TYPE);
		system.add("fileRead",   fileRead,	Int.TYPE_ARRAY, Byte.TYPE);
		system.add("fileReadK",  fileReadK,	[Int.TYPE, V3.stringType, Int.TYPE, Int.TYPE], Int.TYPE);
		system.add("fileWriteK", fileWriteK,	[Int.TYPE, V3.stringType, Int.TYPE, Int.TYPE], Void.TYPE);
		system.add("fileLeft",   fileLeft,	Int.TYPE_ARRAY, Int.TYPE);
		system.add("fileLoad",   fileLoad,	[V3.stringType], V3.stringType);
		system.add("putc",       putc,		[Byte.TYPE], Void.TYPE);
		system.add("puti",       puti,		Int.TYPE_ARRAY, Void.TYPE);
		system.add("puts",       puts,		[V3.stringType], Void.TYPE);
		system.add("ln",	 ln,		TypeUtil.NO_TYPES, Void.TYPE);
		system.add("error",      error,		[V3.stringType, V3.stringType], Void.TYPE);
		system.add("ticksMs",    ticksMs,	Void.TYPE_ARRAY, Int.TYPE);
		system.add("ticksUs",    ticksUs,	Void.TYPE_ARRAY, Int.TYPE);
		system.add("ticksNs",    ticksNs,	Void.TYPE_ARRAY, Int.TYPE);
	}
	def install(prog: Program) {
		prog.typeEnv.add(system);
	}
	private def getSystemPortion(args: Arguments) -> SystemPortion {
		var prog = args.getProgram();
		var sys = prog.system;
		if (sys == null) prog.system = sys = SystemPortion.new();
		return sys;		
	}

	private def int(args: Arguments, index: int) -> int { return Int.unbox(args.getArg(index)); }
	private def byte(args: Arguments, index: int) -> byte { return Byte.unbox(args.getArg(index)); }
	private def bool(args: Arguments, index: int) -> bool { return Bool.unbox(args.getArg(index)); }
	private def string(args: Arguments, index: int) -> string { return Byte.unboxString(args.getArg(index)); }

	// @System.chmod
	def chmod(opName: string, args: Arguments) -> Result {
		System.chmod(string(args, 0), int(args, 1));
		return Values.BOTTOM;
	}
	// @System.fileOpen
	def fileOpen(opName: string, args: Arguments) -> Box<int> {
		var sys = getSystemPortion(args);
		var sysfd = System.fileOpen(string(args, 0), bool(args, 1));
		return Int.box(sys.acquireFileID(sysfd));
	}
	// @System.fileClose
	def fileClose(opName: string, args: Arguments) -> Val {
		var sys = getSystemPortion(args);
		var fd = int(args, 0);
		System.fileClose(sys.getSystemFileID(fd));
		sys.releaseFileID(fd);
		return Values.BOTTOM;
	}
	// @System.fileRead
	def fileRead(opName: string, args: Arguments) -> Val {
		var sys = getSystemPortion(args);
		return Byte.box(System.fileRead(sys.getSystemFileID(int(args, 0))));
	}
	// @System.fileWriteK
	def fileWriteK(opName: string, args: Arguments) -> Result {
		var start = int(args, 2), len = int(args, 3);
		if (start < 0) return args.throw(V3Exception.BoundsCheck, null);
		var array = string(args, 1);
		if (start > array.length) return args.throw(V3Exception.BoundsCheck, null);
		var end = u32.!(start) + u32.!(len);
		if (end > u32.!(array.length)) return args.throw(V3Exception.BoundsCheck, null);
		var sys = getSystemPortion(args);
		System.fileWriteK(sys.getSystemFileID(int(args, 0)), array, start, len);
		return Values.BOTTOM;
	}
	// @System.fileReadK
	def fileReadK(opName: string, args: Arguments) -> Result {
		var start = int(args, 2), len = int(args, 3);
		if (start < 0) return args.throw(V3Exception.BoundsCheck, null);
		var record = Record.!(args.getArg(1));
		if (record == null) return args.throw(V3Exception.NullCheck, null);
		if (start > record.values.length) return args.throw(V3Exception.BoundsCheck, null);
		var end = u32.!(start) + u32.!(len);
		if (end > u32.!(record.values.length)) return args.throw(V3Exception.BoundsCheck, null);
		var sys = getSystemPortion(args);
		var fd = sys.getSystemFileID(int(args, 0));
		for (i = start; i < end; i++) {
			var b = System.fileRead(fd);
			if (b == 0) return Int.box(i);  // TODO: eof encoded as byte #0
			record.values[i] = Byte.box(b);
		}
		return Int.box(len);
	}
	// @System.fileLoad
	def fileLoad(opName: string, args: Arguments) -> Record {
		var prog = args.getProgram();
		return Byte.boxString(System.fileLoad(string(args, 0)), prog);
	}
	// @System.fileLeft
	def fileLeft(opName: string, args: Arguments) -> Val {
		var sys = getSystemPortion(args);
		return Int.box(System.fileLeft(sys.getSystemFileID(int(args, 0))));
	}
	// @System.putc
	def putc(opName: string, args: Arguments) -> Val {
		Terminal.putc(byte(args, 0));
		return Values.BOTTOM;
	}
	// @System.puti
	def puti(opName: string, args: Arguments) -> Val {
		Terminal.puti(int(args, 0));
		return Values.BOTTOM;
	}
	// @System.puts
	def puts(opName: string, args: Arguments) -> Val {
		System.puts(string(args, 0));
		return Values.BOTTOM;
	}
	// @System.ln
	def ln(opName: string, args: Arguments) -> Val {
		Terminal.ln();
		return Values.BOTTOM;
	}
	// @System.error
	def error(opName: string, args: Arguments) -> Exception {
		var ekind = string(args, 0);
		var msg = string(args, 1);
		return args.throw(ekind, msg);
	}
	// @System.ticksMs
	def ticksMs(opName: string, args: Arguments) -> Val {
		return Int.box(System.ticksMs());
	}
	// @System.ticksUs
	def ticksUs(opName: string, args: Arguments) -> Val {
		return Int.box(System.ticksUs());
	}
	// @System.ticksNs
	def ticksNs(opName: string, args: Arguments) -> Val {
		return Int.box(System.ticksNs());
	}
}

class SystemPortion {
	def openFiles = Array<int>.new(128);
	new() { clear(); }
	def acquireFileID(sysfd: int) -> int {
		if (sysfd < 0) return -1;
		for (i < openFiles.length) {
			if (openFiles[i] == -1) {
				openFiles[i] = sysfd;
				return i;
			}
		}
		return -1;
	}
	def getSystemFileID(fd: int) -> int {
		if (fd < 0 || fd >= openFiles.length) return -1;
		return openFiles[fd];
	}
	def releaseFileID(fd: int) {
		if (fd >= 0 && fd < openFiles.length) openFiles[fd] = -1;
	}
	def closeAllFiles() {
		for (fd in openFiles) if (fd >= 0) System.fileClose(fd);
	}
	def clear() {
		for (i < openFiles.length) openFiles[i] = -1;
		openFiles[0] = 0;  // stdin
		openFiles[1] = 1;  // stdout
		openFiles[2] = 2;  // stderr
	}
}
