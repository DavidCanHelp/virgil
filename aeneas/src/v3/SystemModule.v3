// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Representation of the "System" component which provides system-level
// functions like opening a file, performing IO, etc
component SystemModule {
	private var ctype: Type;
	new() {
		ctype = V3.newComponent("System", "<builtin>", TypeUtil.globalCache);
		var cdecl = V3.asComponent(ctype).componentDecl;
		cdecl.memberMap = Strings.newMap();

		add("chmod",	  chmod,	[V3.stringType, Int.TYPE], Void.TYPE);
		add("fileOpen",   fileOpen,	[V3.stringType, Bool.TYPE], Int.TYPE);
		add("fileClose",  fileClose,	[Int.TYPE], Void.TYPE);
		add("fileRead",   fileRead,	[Int.TYPE], Byte.TYPE);
		add("fileWriteK", fileWriteK,	[Int.TYPE, V3.stringType, Int.TYPE, Int.TYPE], Void.TYPE);
		add("fileLeft",   fileLeft,	[Int.TYPE], Int.TYPE);
		add("fileLoad",   fileLoad,	[V3.stringType], V3.stringType);
		add("putc",       putc,		[Byte.TYPE], Void.TYPE);
		add("puti",       puti,		[Int.TYPE], Void.TYPE);
		add("puts",       puts,		[V3.stringType], Void.TYPE);
		add("ln",         ln,		TypeUtil.NO_TYPES, Void.TYPE);
		add("error",      error,	[V3.stringType, V3.stringType], Void.TYPE);
		add("ticksMs",    ticksMs,	[Void.TYPE], Int.TYPE);
		add("ticksUs",    ticksUs,	[Void.TYPE], Int.TYPE);
		add("ticksNs",    ticksNs,	[Void.TYPE], Int.TYPE);
	}
	private def add(name: string, func: (string, Arguments) -> Result, paramTypes: Array<Type>, returnType: Type) {
		// TODO: don't use the global operator registry
		V3Op.registerOp(ctype, name, V3Op.newSystemOp(name, paramTypes, returnType, func));
	}
	def install(compiler: Compiler) {
		compiler.prog.typeEnv.add(ctype.typeCon);
	}
	private def getSystemPortion(args: Arguments) -> SystemPortion {
		var prog = args.getProgram();
		var sys = prog.system;
		if (sys == null) prog.system = sys = SystemPortion.new(prog);
		return sys;		
	}

	private def int(args: Arguments, index: int) -> int { return Int.unbox(args.getArg(index)); }
	private def byte(args: Arguments, index: int) -> byte { return Byte.unbox(args.getArg(index)); }
	private def bool(args: Arguments, index: int) -> bool { return Bool.unbox(args.getArg(index)); }
	private def string(args: Arguments, index: int) -> string { return Byte.unboxString(args.getArg(index)); }

	// @System.chmod
	def chmod(opName: string, args: Arguments) -> Result {
		System.chmod(string(args, 0), int(args, 1));
		return Values.BOTTOM;
	}
	// @System.fileOpen
	def fileOpen(opName: string, args: Arguments) -> Box<int> {
		var sys = getSystemPortion(args);
		var sysfd = System.fileOpen(string(args, 0), bool(args, 1));
		return Int.box(sys.acquireFileID(sysfd));
	}
	// @System.fileClose
	def fileClose(opName: string, args: Arguments) -> Val {
		var sys = getSystemPortion(args);
		var fd = int(args, 0);
		System.fileClose(sys.getSystemFileID(fd));
		sys.releaseFileID(fd);
		return Values.BOTTOM;
	}
	// @System.fileRead
	def fileRead(opName: string, args: Arguments) -> Box<byte> {
		var sys = getSystemPortion(args);
		return Byte.box(System.fileRead(sys.getSystemFileID(int(args, 0))));
	}
	// @System.fileWriteK
	def fileWriteK(opName: string, args: Arguments) -> Val {
		var sys = getSystemPortion(args);
		System.fileWriteK(sys.getSystemFileID(int(args, 0)), string(args, 1), int(args, 2), int(args, 3));
		return Values.BOTTOM;
	}
	// @System.fileLoad
	def fileLoad(opName: string, args: Arguments) -> Record {
		var prog = args.getProgram();
		return Byte.boxString(System.fileLoad(string(args, 0)), prog);
	}
	// @System.fileLeft
	def fileLeft(opName: string, args: Arguments) -> Val {
		var sys = getSystemPortion(args);
		return Int.box(System.fileLeft(sys.getSystemFileID(int(args, 0))));
	}
	// @System.putc
	def putc(opName: string, args: Arguments) -> Val {
		// TODO: buffer the console output properly
		Terminal.putc(byte(args, 0));
		return Values.BOTTOM;
	}
	// @System.puti
	def puti(opName: string, args: Arguments) -> Val {
		// TODO: buffer the console output properly
		Terminal.puti(int(args, 0));
		return Values.BOTTOM;
	}
	// @System.puts
	def puts(opName: string, args: Arguments) -> Val {
		// TODO: buffer the console output properly
		System.puts(string(args, 0));
		return Values.BOTTOM;
	}
	// @System.ln
	def ln(opName: string, args: Arguments) -> Val {
		// TODO: buffer the console output properly
		Terminal.ln();
		return Values.BOTTOM;
	}
	// @System.error
	def error(opName: string, args: Arguments) -> Exception {
		var ekind = string(args, 0);
		var msg = string(args, 1);
		return args.throw(ekind, msg);
	}
	// @System.ticksMs
	def ticksMs(opName: string, args: Arguments) -> Val {
		return Int.box(System.ticksMs());
	}
	// @System.ticksUs
	def ticksUs(opName: string, args: Arguments) -> Val {
		return Int.box(System.ticksUs());
	}
	// @System.ticksNs
	def ticksNs(opName: string, args: Arguments) -> Val {
		return Int.box(System.ticksNs());
	}
}

class SystemPortion {
	def prog: Program;
	def openFiles = Array<int>.new(128);
	new(prog) {
		for (i = 0; i < openFiles.length; i++) {
			openFiles(i) = -1;
		}
	}
	def acquireFileID(sysfd: int) -> int {
		if (sysfd == -1) return -1;
		for (i = 0; i < openFiles.length; i++) {
			if (openFiles(i) == -1) {
				openFiles(i) = sysfd;
				return i;
			}
		}
		return -1;
	}
	def getSystemFileID(fd: int) -> int {
		if (fd < 0 || fd >= openFiles.length) return -1;
		return openFiles(fd);
	}
	def releaseFileID(fd: int) {
		if (fd >= 0 && fd < openFiles.length) openFiles(fd) = -1;
	}
	def closeAllFiles() {
		for (fd in openFiles) if (fd >= 0) System.fileClose(fd);
	}
}
