// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The type constructor for class types.
class V3Class_TypeCon extends TypeCon {
	def classDecl: VstClass;
	def typeArgsCache  = TypeUtil.newTypeMap<TypeArgs>(); // XXX: allocate lazily
	def superTypeCache = TypeUtil.newTypeMap<Type>(); // XXX: allocate lazily

	new(classDecl, typeCache: TypeCache) 
		: super(classDecl.name(), V3Kind.CLASS, Lists.length(classDecl.typeParams), typeCache) { }

	def getSuperType(classType: Type) -> Type {
		if (classDecl.superclass == null) return null;
		if (arity == 0) return classDecl.superclass.getType();
		var superType = superTypeCache.get(classType);
		if (superType == null) {
			superType = classDecl.superclass.getType().substitute(getTypeArgs(classType));
			superTypeCache.set(classType, superType);
		}
		return superType;
	}
	def getTypeArgs(classType: Type) -> TypeArgs {
		if (arity == 0) return null;
		var typeArgs = typeArgsCache.get(classType);
		if (typeArgs == null) {
			typeArgs = TypeArgs.new(classDecl.typeEnv, Lists.toArray(classType.nested));
			typeArgsCache.set(classType, typeArgs);
		}
		return typeArgs;
	}
}
