// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The type constructor for class types.
class V3Class_TypeCon extends TypeCon {
	def classDecl: VstClass;
	var typeArgsCache: HashMap<Type, TypeArgs>; // lazy cache for type arguments
	var superTypeCache: HashMap<Type, Type>;    // lazy cache for polymorphic super types

	new(classDecl, typeCache: TypeCache) 
		super(classDecl.name(), V3Kind.CLASS, Lists.length(classDecl.typeParams), typeCache) { }

	def lookupCachedSuperType(classType: Type) -> Type {
		if (superTypeCache != null) {
			var superType = superTypeCache.get(classType);
			if (superType != null) return superType; // cache hit
		} else {
			superTypeCache = TypeUtil.newTypeMap(); // allocate cache
		}
		var superType = classDecl.superclass.getType().substitute(lookupCachedTypeArgs(classType));
		superTypeCache.set(classType, superType);
		return superType;
	}
	def lookupCachedTypeArgs(classType: Type) -> TypeArgs {
		if (typeArgsCache != null) {
			var typeArgs = typeArgsCache.get(classType);
			if (typeArgs != null) return typeArgs; // cache hit
		} else {
			typeArgsCache = TypeUtil.newTypeMap(); // allocate cache
		}
		var typeArgs = TypeArgs.new(classDecl.typeEnv, Lists.toArray(classType.nested));
		typeArgsCache.set(classType, typeArgs);
		return typeArgs;
	}
}
