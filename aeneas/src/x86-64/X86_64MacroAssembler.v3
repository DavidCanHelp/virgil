// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Distinguishes an absolute address from an address that refers to a V3 entity.
class X86_64AddrRef extends X86_64Addr {
	def ref: Addr;
	new(base: X86_64Gpr, index: X86_64Gpr, scale: byte, ref)
		super(base, index, scale, 0x44332211) { }
}

// Adds additional functionality to the base X86-64 assembler, e.g. the
// ability to record references to addresses in the code.
class X86_64MacroAssembler extends X86_64Assembler {
	def mw: MachDataWriter;

	new(mw) super(mw) { }

	def recordAbs32(pos: int, addr: X86_64Addr) {
		if (!X86_64AddrRef.?(addr)) return;
		var ref = X86_64AddrRef.!(addr).ref;
		// TODO: add mode and add to MachDataWriter
	}
	def recordRel32(pos: int, delta: int, addr: X86_64Addr) {
		if (!X86_64AddrRef.?(addr)) return;
		var ref = X86_64AddrRef.!(addr).ref;
		// TODO: add mode and add to MachDataWriter
	}
	def recordAbs64(pos: int, addr: X86_64Addr) {
		if (!X86_64AddrRef.?(addr)) return;
		var ref = X86_64AddrRef.!(addr).ref;
		// TODO: add mode and add to MachDataWriter
	}
}

