// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Distinguishes an absolute address from an address that refers to a V3 entity.
class X86_64AddrRef extends X86_64Addr {
	def ref: Addr;
	new(base: X86_64Gpr, index: X86_64Gpr, scale: byte, ref)
		super(base, index, scale, 0x44332211) { }
}

def ABS32 = '\x99';
def REL32 = '\x88';

// Adds additional functionality to the base X86-64 assembler, particularly the
// functionality to record references to addresses in the code.
class X86_64MacroAssembler extends X86_64Assembler {
	def mw: MachDataWriter;
	var labelUses: List<(int, Label)>; // XXX: unify label uses with MachDataWriter?

	new(mw) super(mw) { }

	def recordAbs32(pos: int, addr: X86_64Addr) {
		if (!X86_64AddrRef.?(addr)) return;
		var ref = X86_64AddrRef.!(addr).ref;
		w.data[pos] = ABS32;
		mw.recordPatch(ref, pos);
	}
	def recordRel32(pos: int, delta: int, addr: X86_64Addr) {
		if (!X86_64AddrRef.?(addr)) return;
		if (delta != i8.view(delta)) return V3.fail("unexpectedly large relative delta");
		var ref = X86_64AddrRef.!(addr).ref;
		w.data[pos] = REL32;
		w.data[pos+1] = u8.view(delta);
		mw.recordPatch(ref, pos);
	}
	def recordAbs64(pos: int, addr: X86_64Addr) {
		if (!X86_64AddrRef.?(addr)) return;
		var ref = X86_64AddrRef.!(addr).ref;
		w.data[pos] = '\x77';
		mw.recordPatch(ref, pos);
	}
	def recordRelLabel32(pos: int, label: Label) {
		w.data[pos] = REL32;
		labelUses = List.new((pos, label), labelUses);
	}
	def recordAbsLabel32(pos: int, label: Label) {
		w.data[pos] = ABS32;
		labelUses = List.new((pos, label), labelUses);
	}
	def patch(addr: Addr, posAddr: int, absAddr: int) {
		match (w.data[w.pos]) {
			ABS32 => {
				w.put_b32(absAddr);
			}
			REL32 => {
				var delta = i8.view(w.data[w.pos + 1]);
				w.put_b32(absAddr - (posAddr + delta));
			}
			_ => {
				w.put_b64(absAddr);
			}
		}
	}
	def patchLabels() {
		for (l = labelUses; l != null; l = l.tail) {
			var u = l.head, pos = u.0, label = u.1;
			if (label.pos < 0) return V3.fail("unbound label"); // XXX: better error message
			if (w.data[pos] == REL32) {
				var delta = label.pos - (pos + 4);
				if (Aeneas.PRINT_MACH.val != VstMatcher.None) Terminal.put2("patch relative label ref @+%d -> +%d\n", pos, delta);
				w.at(pos).put_b32(delta);
			} else {
				var addr = mw.startAddr + label.pos;
				if (Aeneas.PRINT_MACH.val != VstMatcher.None) Terminal.put2("patch absolute label ref @+%d -> 0x%x\n", pos, addr);
				w.at(pos).put_b32(addr);
			}
		}
		labelUses = null;
	}
}

