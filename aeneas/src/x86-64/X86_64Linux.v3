// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def SPACE = AddressSpace.new("mem", false, 64, 8,
	Alignment.new(4096), Alignment.new(8));
def X86_64_LINUX_TARGET = Aeneas.registerTarget(
		LinuxTarget.new("x86-64-linux", SPACE, IntNormalizers.I64LE,
			X86_64LinuxBackend.new(_, _, _, _, false), ElfConst.EM_X86_64));
def X86_64_LINUX_TEST_TARGET = Aeneas.registerTarget(
		LinuxTarget.new("x86-64-linux-test", SPACE, IntNormalizers.I64LE,
			X86_64LinuxBackend.new(_, _, _, _, true), ElfConst.EM_X86_64));

// Provides the x86-64-specific logic for generating a Linux binary.
class X86_64LinuxBackend extends X86_64Backend {
	new(compiler: Compiler, prog: Program, mach: MachProgram, w: MachDataWriter,
		test: bool) super(compiler, prog, mach, w, test) { }
	def asm_exit_code(code: int) { // TODO(x86-64-linux)
	}
	def genTestOutput(frame: MachFrame) { // TODO(x86-64-linux)
	}
	def genSignalHandlerStub() { // TODO(x86-64-linux)
	}
	def genFatalStub(ex: string, addr: Addr) { // TODO(x86-64-linux)
	}
	def genSigHandlerInstall(signo: int, handler: Addr) { // TODO(x86-64-linux)
	}
}
