// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def INITIAL_BUF_SIZE = 300;

def Regs: X86_64RegSet;

// TODO: 64-bit object header, or just align?
// TODO: negative object headers
// TODO: 32-bit references

class X86_64Backend extends MachBackend {
	var asm: X86_64Assembler;
	def test: bool;

	def debugMach = Aeneas.PRINT_MACH.val != VstMatcher.None;
	var codegen: SsaX86_64Gen;

	// memory allocator configuration
	def allocStub: bool = Aeneas.RT_GC.get();
	def alwaysGc: bool = Aeneas.RT_TEST_GC.get();
	var objLoc: int;
	var sizeLoc: int;
	var allocStubAddr: Addr;
	var frame: MachFrame;
	var gcmeth: IrMethod;
	var kernel: X86KernelCallingConv;

	new(compiler: Compiler, prog: Program, mach: MachProgram, w: MachDataWriter, test)
		super(compiler, prog, mach, w) {

		asm = X86_64Assembler.new(w);
		if (allocStub) {
			// initialize locations based on calling convention to RiRuntime.gc()
			allocStubAddr = Address.new(mach.codeRegion, "alloc_stub");
			gcmeth = mach.runtime.getRiGc();
			if (gcmeth != null) {
				// call the RiRuntime.gc() method
				frame = getFrame(gcmeth.ssa);
				objLoc = frame.conv.calleeRet(0);
				sizeLoc = frame.conv.calleeParam(1); // param 0 = "this"
			} else {
				// there is no appropriate RiRuntime.gc() method
				objLoc = Regs.RAX;
				sizeLoc = Regs.RAX;
			}
		}
		codegen = SsaX86_64Gen.new(context, mach, asm, w);
	}
	def genMainEntry() { // TODO(x86-64)
		var main = prog.getMain().asMethod();
		var frame = getFrame(main.ssa);
		// initialize runtime if necessary
		genMainInit(frame);
		if (test) genTestInputs(main, frame);
		// call main
//TODO		asm.call_addr(mach.addrOfMethod(main));
		// write return value to stdout if this is a test
		if (test) genTestOutput(frame);
		// exit with the return value of main
		if (frame.conv.retLocs.length > 0) asm_exit_r(loc_gpr(frame, frame.conv.callerRet(0)));
		else return asm_exit_code(0);
	}
	def genAllocStub() { // TODO(x86-64)
	}
	def genCodeFromSsa() { // TODO(x86-64)
		codegen.generate(context.method, getFrame(context.method.ssa));
	}
	def genTestInputs(main: IrMethod, frame: MachFrame) { // TODO(x86-64)
		// "argc" is on the top of the stack on x86-linux
		asm.movq_r_m(X86_64Regs.RBX, X86_64Regs.RSP.indirect()); // load "argc"
		var params = main.ssa.params, conv = frame.conv;
		if (conv.overflow > 0) return V3.fail("test inputs overflow parameter registers");

		var vals = mach.runtime.parseTestInputs(prog, prog.ERROR, params.length - 1);
		var w = MachDataWriter.!(asm.w);

		for (i < conv.paramLocs.length) {
			var dest = loc_gpr(frame, conv.calleeParam(i));
			if (i == 0) {
				// load the component "this" pointer with NULL
				asm.movq_r_i(dest, 0);
				continue;
			}
			// load the register value from the table to follow
			def ABS_CONST = 0x99887766;
			asm.movd_r_m(dest, X86_64Addr.new(null, X86_64Regs.RBX, 4, ABS_CONST));
			var loadOffset = w.pos - 4;

			asm.jmpr(vals.length * 4); // jump over the table
			var tableAddr = w.posAddr();
			w.at(loadOffset).put_b32(tableAddr - 4).atEnd();
			// emit table of argument values
			for (v in vals) w.put_b32(V3.unboxIntegral(v[i - 1]));
		}
	}
	def genSigInstalls() {
		genSigHandlerInstall(8, mach.runtime.getFatalAddress(V3Exception.DivideByZero));
		genSigHandlerInstall(10, mach.runtime.getFatalAddress(V3Exception.NullCheck));
		genSigHandlerInstall(11, mach.runtime.getFatalAddress(V3Exception.NullCheck));
	}
	def genMainInit(frame: MachFrame) {
		// call RiRuntime.init() if it exists
		if (mach.runtime.ri_init >= 0) return genRiInit(frame);
		// if this is a test, install custom signal handlers
		if (test) return genSigInstalls();
		// TODO: remove compiler-generated initialization of args
		if (frame.conv.paramTypes.length <= 1) return; // don't bother, main doesn't use it
		// initialize arg array from OS-supplied argv and envp
		var argc = X86_64Regs.RBX, argp = X86_64Regs.RBX, argArray = X86_64Regs.RDX;
		var arrayType = V3Array.newType(mach.machType(V3.stringType));

		asm.movq_r_m(argc, X86_64Regs.RSP.indirect());
		asm.subq_r_i(argc, 1); // adjust for first arg
		asmArrayAlloc(arrayType, argArray, argc);
		asm.pushq_r(argArray); // save array on stack

		asm.leaq(argArray, argArray.plus(mach.getArrayElemOffset(arrayType)));
		asm.leaq(argp, X86_64Regs.RSP.plus(3 * mach.data.addressSize));

		// loop over individual arguments
		var loopStart = asm.pos();
		var str = X86_64Regs.RDI, strlen = X86_64Regs.RCX;

		// load the argument and test against null
		asm.movq_r_m(str, argp.indirect());
		asm.cmpq_r_i(str, 0);
		asm.j(X86_64Conds.Z, 0);
		var cmpPatch = asm.pos() - 1;

		// compute length of string by finding null byte
		asm.movq_r_i(strlen, -1);
		asm.repne().scasb(); // updates EDI and ECX, kills EAX
		asm.notq_r(strlen);
		asm.decq_r(strlen);

		// allocate a byte array of length strlen
		var argString = X86_64Regs.RDI;
		asmArrayAlloc(V3.stringType, argString, strlen);
		asm.movq_m_r(argArray.indirect(), argString); // write into arg array

		// copy data into array
		asm.leaq(X86_64Regs.RDI, argString.plus(mach.getArrayElemOffset(V3.stringType)));
		asm.movq_r_m(X86_64Regs.RSI, argp.indirect());
		asm.repne().movsb();

		// increment argp and argarray position
		asm.addq_r_i(argArray, 4);
		asm.addq_r_i(argp, 4);
		var offset = loopStart - (asm.pos() + 2);
		asm.jmpr(offset); // loop back to start

		var offset2 = asm.pos() - cmpPatch - 1;
		asm.w.at(cmpPatch).putb(offset2); // patch the branch that skips the loop
		asm.w.atEnd();
		asm.popq_r(loc_gpr(frame, frame.conv.callerParam(1)));
	}
	def genRiInit(frame: MachFrame) { // TODO(x86-64)
	}
	def asmArrayAlloc(arrayType: Type, dest: X86_64Gpr, len: X86_64Gpr) {
		var scale = mach.getArrayElemScale(arrayType), align = (scale % mach.data.addressSize) != 0;
		var adjust = if(align, mach.data.addressSize - 1, 0);
		asm.leaq(dest, X86_64Addr.new(null, len, scale, mach.getArrayElemOffset(arrayType) + adjust));
		if (align) asm.andq_r_i(dest, -1 ^ adjust);
		asmAlloc(dest);
		asm.movq_m_i(dest.indirect(), Int.unbox(mach.objectTag(arrayType)));
		asm.movq_m_r(dest.plus(mach.getArrayLengthOffset(arrayType)), len);
	}
	def asmAlloc(reg: X86_64Gpr) {
		// exchange-add with heap current pointer
//TODO		asm.xadd(X86Addrs.ABS_PATCH, reg);
		recordPatch(CiRuntimeModule.HEAP_CUR_LOC);
	}
	def recordPatch(addr: Addr) { // TODO(x86-64)
	}
	def getFrame(ssa: SsaGraph) -> MachFrame {
		var frame = MachFrame.new(X86_64VirgilCallConv.getForGraph(ssa));
		frame.frameSize = mach.data.addressSize;
		return frame;
	}
	def patchCodeAddr(w: DataWriter, a: Addr, posAddr: int, pos: int) {
		// TODO(x86-64)
		var abs = mach.absolute(a); // TODO: encode relative to position
		if (debugMach) {
			var buf = Strings.builderOf("patch-code @ ").putx(posAddr).puts(" <- ");
			V3.renderResult(a, null, buf);
			buf.puts(" = ").putx(abs);
			Terminal.putbln(buf);
		}
		if (w.data[pos] == 0x05) {
			// encode a RIP-relative address
			abs = abs - (posAddr + 4);
		}
		w.at(pos).put_b32(abs);
	}
	def loc_gpr(frame: MachFrame, loc: int) -> X86_64Gpr {
		var r = Regs.toGpr(loc);
		if (r == null) return V3.fail(Strings.format1("expected GPR, but got %s", frame.conv.regSet.identify(loc)));
		return r;
	}
	// Methods overridden for each OS target
	def genSigHandlerInstall(signo: int, handler: Addr);
	def asm_exit_r(r: X86_64Gpr);
	def asm_exit_code(code: int);
//	def asm_exit_rm(loc: X86_64Rm);
	def genTestOutput(frame: MachFrame);
}
