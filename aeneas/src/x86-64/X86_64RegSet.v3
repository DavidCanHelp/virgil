// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Register sets for X86_64, used in register allocation.
component X86_64MachRegs {
	def RAX = '\x01';
	def RCX = '\x02';
	def RDX = '\x03';
	def RBX = '\x04';
	def RSI = '\x05';
	def RDI = '\x06';
	def R8 = '\x07';
	def R9 = '\x08';
	def R10 = '\x09';
	def R11 = '\x0a';
	def R12 = '\x0b';
	def R13 = '\x0c';
	def R14 = '\x0d';
	def R15 = '\x0e';

	def XMM0 = '\x0f';
	def XMM1 = '\x10';
	def XMM2 = '\x11';
	def XMM3 = '\x12';
	def XMM4 = '\x13';
	def XMM5 = '\x14';
	def XMM6 = '\x15';
	def XMM7 = '\x16';
	def XMM8 = '\x17';
	def XMM9 = '\x18';
	def XMM10 = '\x19';
	def XMM11 = '\x1a';
	def XMM12 = '\x1b';
	def XMM13 = '\x1c';
	def XMM14 = '\x1d';
	def XMM15 = '\x1e';

	def COUNT = 0x1f;

	def RBP = '\x1f';
	def RAX_RDX = '\x20';
	def NOT_RDX = '\x21';
	def NOT_RCX = '\x22';
	def GPR_CLASS = '\x23';
	def SSE_CLASS = '\x24';
	def ALL = '\x25';
//TODO	def SCRATCH = X86_64Regs.RBP;
//TODO	def SSE_SCRATCH = X86_64Regs.XMM7;

	// XXX: enough spill slots to not use the 31st bit
	def CALLER_SPILL_START = 100000000;
	def CALLEE_SPILL_START = 200000000;

	var regs: MachRegSet;

	new() {
		var rarray = Array<Array<byte>>.new(ALL + 1);
		rarray[GPR_CLASS] = [RAX, RCX, RDX, RBX, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15];
		rarray[SSE_CLASS] = [XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6, XMM7, XMM8, XMM9, XMM10, XMM11, XMM12, XMM13, XMM14, XMM15];
		for (c in [rarray[GPR_CLASS], rarray[SSE_CLASS]]) {
			for (r in c) rarray[r] = [r];
		}

		rarray[XMM7] = []; // XXX: RBP and XMM7 are off limits because they're scratch
		rarray[RBP] = [];
		rarray[RAX_RDX] = [RAX, RDX];
		rarray[NOT_RDX] = [RAX, RBX, RCX, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15];
		rarray[NOT_RCX] = [RAX, RBX, RDX, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15];
		rarray[ALL] = Arrays.concat(rarray[GPR_CLASS], rarray[SSE_CLASS]);

		var rnames = Array<string>.new(rarray.length);
		rnames[RAX] = "rax";
		rnames[RBX] = "rbx";
		rnames[RCX] = "rcx";
		rnames[RDX] = "rdx";
		rnames[RSI] = "rsi";
		rnames[RDI] = "rdi";
		rnames[R8] = "r8";
		rnames[R9] = "r9";
		rnames[R10] = "r10";
		rnames[R11] = "r11";
		rnames[R12] = "r12";
		rnames[R13] = "r13";
		rnames[R14] = "r14";
		rnames[R15] = "r15";
		rnames[XMM0] = "xmm0";
		rnames[XMM1] = "xmm1";
		rnames[XMM2] = "xmm2";
		rnames[XMM3] = "xmm3";
		rnames[XMM4] = "xmm4";
		rnames[XMM5] = "xmm5";
		rnames[XMM6] = "xmm6";
		rnames[XMM7] = "xmm7";
		rnames[XMM8] = "xmm8";
		rnames[XMM9] = "xmm9";
		rnames[XMM10] = "xmm10";
		rnames[XMM11] = "xmm11";
		rnames[XMM12] = "xmm12";
		rnames[XMM13] = "xmm13";
		rnames[XMM14] = "xmm14";
		rnames[XMM15] = "xmm15";
		rnames[RBP] = "rbp";
		rnames[RAX_RDX] = "{rax,rdx}";
		rnames[NOT_RDX] = "{~rdx}";
		rnames[NOT_RCX] = "{~rcx}";
		rnames[GPR_CLASS] = "{gpr}";
		rnames[SSE_CLASS] = "{sse}";
		rnames[ALL] = "{all}";

		var rclasses = Array<byte>.new(2);
		rclasses[0] = GPR_CLASS;
		rclasses[1] = SSE_CLASS;

		// XXX: don't use RBP for scratch, use XMM?
		regs = MachRegSet.new(COUNT, rarray, rnames, rclasses, RBP, XMM7, CALLER_SPILL_START, CALLEE_SPILL_START);
	}

	def isSSEReg(loc: int) -> bool {
		return loc >= X86_64MachRegs.XMM0 && loc <= X86_64MachRegs.XMM7;
	}
}
// Defines the standard parameter and return registers for X86_64 calls between Virgil methods.
component X86_64VirgilCallConv {
	def R: X86_64MachRegs;
	def paramRegs = [R.RDI, R.RSI, R.RDX, R.RCX, R.R8, R.R9]; 			// System-V
	def retRegs = [R.RAX, R.RDX, R.RCX, R.RSI]; 					// System-V + 2
	def floatParamRegs = [R.XMM0, R.XMM1, R.XMM2, R.XMM3, R.XMM4, R.XMM5, R.XMM6];	// System-V - 1
	def floatRetRegs = [R.XMM0, R.XMM1];						// System-V

	private def compute(paramTypes: Array<Type>, returnTypes: Array<Type>) -> MachCallConv {
		// XXX: align spill slots to word boundary?
		// compute the locations of each parameter
		var spillStart = R.regs.spillStart;
		var ploc = Array<int>.new(paramTypes.length);
		var pspill = 0, iprm = 0, fprm = 0;
		for (i < ploc.length) {
			match (Regs.toRegClass(paramTypes[i])) {
				I32 => {
					if (iprm < paramRegs.length) ploc[i] = paramRegs[iprm++];
					else ploc[i] = spillStart + pspill++;
				}
				F32 => {
					if (fprm < floatParamRegs.length) ploc[i] = floatParamRegs[fprm++];
					else ploc[i] = spillStart + pspill++;
				}
				F64 => {
					if (fprm < floatParamRegs.length) ploc[i] = floatParamRegs[fprm++];
					else {
						ploc[i] = spillStart + pspill;
						pspill += 2;
					}
				}
				REF, I64 => {
					ploc[i] = spillStart + pspill;
					pspill += 2;
				}
			}
		}
		// compute locations of each return value
		var len = returnTypes.length;
		if (len == 0) len = 1;  // TODO: fix return count
		var rloc = Array<int>.new(len), rspill = 0;
		iprm = 0; fprm = 0;
		if (returnTypes.length != 0) {	// XXX: working around the return count
			for (i < rloc.length) {
				match (Regs.toRegClass(returnTypes[i])) {
					I32 => {
						if (iprm < retRegs.length) rloc[i] = retRegs[iprm++];
						else rloc[i] = spillStart + rspill++;
					}
					F32 => {
						if (fprm < floatRetRegs.length) rloc[i] = floatRetRegs[fprm++];
						else rloc[i] = spillStart + rspill++;
					}
					F64 => {
						if (fprm < floatRetRegs.length) rloc[i] = floatRetRegs[fprm++];
						else {
							rloc[i] = spillStart + rspill;
							rspill += 2;
						}
					}
					REF, I64 => {
						rloc[i] = spillStart + rspill;
						rspill += 2;
					}
				}
			}
		} else {
			rloc[0] = retRegs[0];
		}
		if (pspill > rspill) rspill = pspill;
		return MachCallConv.new(R.regs, paramTypes, ploc, returnTypes, rloc, rspill);
	}
	def getForGraph(graph: SsaGraph) -> MachCallConv {
		// XXX: cache calling conventions by type for SSA graph
		return compute(Arrays.map(graph.params, SsaParam.vtype), Tuple.toTypeArray(graph.returnType));
	}
	def getForFunc(funcRep: Mach_FuncRep) -> MachCallConv {
		if (funcRep.callConv != null) return funcRep.callConv;
		return funcRep.callConv = compute(funcRep.paramTypes, funcRep.returnTypes);
	}
}
