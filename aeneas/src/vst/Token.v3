// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The result of parsing an item, including its (decoded) value
class Parsed<T>(passed: bool, length: int, val: T) { }
// A parse file contains a fast mapping between byte offsets and lines
class ParsedFile {
	def fileName: string;
	var input: Array<byte>;
	var lineEnds: Vector<int>;
	new(fileName, input) {
		lineEnds = Vector<int>.new().grow(2 + input.length / 30);
	}
	def lineStartOffset(line: int) -> int {
		return if(line > 1, lineEnds[line - 2] + 1);
	}
	def lineEndOffset(line: int) -> int {
		if (line - 1 < lineEnds.length) return lineEnds[line - 1];
		for (i = lineStartOffset(line); i < input.length; i++) {
			if (input[i] == '\n') return i;
		}
		return input.length;
	}
	def extractLine(line: int) -> string {
		if (line == 0) return null;
		return Arrays.range(input, lineStartOffset(line), lineEndOffset(line));
	}
}
// A point in a file, including a start line and start column
class FilePoint(fileName: string, beginLine: int, beginColumn: int) {
	def rangeOf(len: int) -> FileRange {
		return FileRange.new(fileName, beginLine, beginColumn, beginLine, beginColumn + len);
	}
}
// A range within a file, including a start location and end location
class FileRange extends FilePoint  {
	def endLine: int;
	def endColumn: int;
	new(fileName: string, beginLine: int, beginColumn : int, endLine, endColumn) super(fileName, beginLine, beginColumn) { }
	def end() -> FilePoint {
		return FilePoint.new(fileName, endLine, endColumn);
	}
	def lastByte() -> FileRange {
		if (endColumn > beginColumn || endLine > beginLine) {
			return FileRange.new(fileName, endLine, endColumn -1, endLine, endColumn);
		}
		return end().rangeOf(1);
	}
}
// A sequence of characters with location information in a file
class Token extends FilePoint {
	def image: string;

	new(fileName: string, image, beginLine: int, beginColumn: int) 
		super(fileName, beginLine, beginColumn) { }

	def copy(image: string) -> Token {
		return Token.new(fileName, image, beginLine, beginColumn);
	}
	def range() -> FileRange {
		return rangeOf(image.length);
	}
}

