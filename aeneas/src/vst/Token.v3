// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The result of parsing an item, including its (decoded) value
class Parsed<T> {
	def passed: bool;		// true if the token was matched
	def length: int;		// length of match
	def val: T;			// value of match
	new(passed, length, val) { }
}
// A point in a file, including a start line and start column
class FilePoint {
	def fileName: string;
	def beginLine: int;
	def beginColumn: int;
	new(fileName, beginLine, beginColumn) { }
	def rangeOf(len: int) -> FileRange {
		return FileRange.new(fileName, beginLine, beginColumn, beginLine, beginColumn + len);
	}
	// extract the line from the file that contains this file point
	def extractLine(input: Array<byte>, lineEnds: Sequence<int>) -> string {
		if (input == null || lineEnds == null || beginLine == 0) return null;
		var start = 0;
		if (beginLine > 1) start = lineEnds.get(beginLine - 2) + 1;
		var end = start;
		while (end < input.length) {
			if (input(end) == '\n') break;
			end++;
		}
		return Arrays.range(input, start, end);
	}
}
// A range within a file, including a start location and end location
class FileRange extends FilePoint  {
	def endLine: int;
	def endColumn: int;
	new(fileName: string, beginLine: int, beginColumn : int, endLine, endColumn) : super(fileName, beginLine, beginColumn) { }
	def end() -> FilePoint {
		return FilePoint.new(fileName, endLine, endColumn);
	}
}
// A sequence of characters with location information in a file
class Token extends FilePoint {
	def image: string;
	var choice: int;

	new(fileName: string, image, beginLine: int, beginColumn: int) 
		: super(fileName, beginLine, beginColumn) { }

	def copy(image: string) -> Token {
		return Token.new(fileName, image, beginLine, beginColumn);
	}
	def range() -> FileRange {
		return rangeOf(image.length);
	}
}

