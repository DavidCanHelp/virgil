// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def U31_MAX_1: u32 = 0x80000000;
def U63_MAX_1: u64 = 0x8000000000000000;
def U32_CHAR_ZERO: u32 = '0';
def U32_MAX_DIV_10: u32 = 429496729;
def U32_MAX_MOD_10: u32 = 6;
def U64_MAX_DIV_10: u64 = 0x1999999999999999; // (18,446,744,073,709,551,616 / 10)
def U64_MAX_MOD_10: u32 = 6; // (18,446,744,073,709,551,616 % 10)
def U32_TYPE = Int.getType(false, 32);
def I32_TYPE = Int.getType(true, 32);
def U64_TYPE = Int.getType(false, 64);
def I64_TYPE = Int.getType(true, 64);
def MAX_DECIMAL_DIGITS = 18;

class NumberParser(input: Array<byte>, start: int) {
	var pos = start;
	var curByte: byte;
	var width: byte;
	var is_negative: bool;
	var is_float: bool;
	var is_hex: bool;
	var is_binary: bool;
	var is_octal: bool;
	var u_suffix: bool;
	var l_suffix: bool;
	var f_suffix: bool;
	var d_suffix: bool;
	var error_msg: string;
	var error_pos: int;
	var vtype: Type;
	var val: Val;
	new() {
		curByte = input[start];
	}
	def parse() -> bool {
		vtype = I32_TYPE;
		if (curByte == '-') {
			next();
			is_negative = true;
		}
		if (curByte == '0') {
			match (next()) {
				'x', 'X' => {
					next();
					is_hex = true;
					return parseHex();
				}
				'.' => {
					next();
					return parseFractional(pos-1, pos);
				}
				'e', 'E' => {
					next();
					return parseExponent(pos-1, pos, 0, 0);
				}
				'b', 'B' => {
					next();
					is_binary = true;
					return parseBin();
				}
				'0', '1', '2', '3', '4', '5', '6', '7' => {
					is_octal = true;
					return parseOct();
				}
				'8', '9' => return error("octal digit");
			} else {
				if (acceptFD()) {
					return evalFloat(1, 2, 0, 0, false, 0, 0);
				}
				if (is_negative) {
					is_float = true;
					vtype = Float.FLOAT64;
					return evalFloat(1, 2, 0, 0, false, 0, 0);
				}
				acceptUL();
				val = if(l_suffix, Box<long>.new(0L), Box<int>.new(0));
				return true;
			}
		}
		return parseDec();
	}
	def parseDec() -> bool {
		var s = pos;
		while (Char.isDecimal(curByte)) next();
		var end = pos;
		if (s == end) return error("decimal digit");
		if (end > s + 20) return error("decimal too large");
		match (curByte) {
			'.' => { next(); return parseFractional(s, end); }
			'e', 'E' => { next(); return parseExponent(s, end, 0, 0); }
		}
		if (acceptFD()) return evalFloat(s, end, 0, 0, false, 0, 0);
		acceptUL();
		if (l_suffix || end > s + 10) val = evalDecLong(s, end);
		else val = evalDecInt(s, end);
		return error_msg == null;
	}
	def parseHex() -> bool {
		var s = pos;
		while (Char.isHex(curByte)) next();
		var end = pos;
		width = byte.!(end - s);
		if (s == end) return error("hexadecimal digit");
		if (end > s + 16) return error("hexadecimal too large");
		acceptUL();
		if (l_suffix || end > s + 8) val = evalHex16(s, end);
		else val = evalHex8(s, end);
		return true;
	}
	def parseBin() -> bool {
		var s = pos;
		while (Char.isBinary(curByte)) next();
		var end = pos;
		width = byte.!(end - s);
		if (s == end) return error("binary digit");
		if (end > s + 64) return error("binary too large");
		acceptUL();
		if (l_suffix || end > s + 32) val = evalBin64(s, end);
		else val = evalBin32(s, end);
		return true;
	}
	def parseFractional(wstart: int, wend: int) -> bool {
		is_float = true;
		vtype = Float.FLOAT64;
		var fstart = pos;
		while (Char.isDecimal(curByte)) next();
		var fend = pos;
		match (curByte) {
			'e', 'E' => { next(); return parseExponent(wstart, wend, fstart, fend); }
		}
		acceptFD();
		return evalFloat(wstart, wend, fstart, fend, false, 0, 0);
	}
	def parseExponent(wstart: int, wend: int, fstart: int, fend: int) -> bool {
		is_float = true;
		vtype = Float.FLOAT64;
		var negexp = false;
		if (curByte == '+') next();
		else if (curByte == '-') {
			negexp = true;
			next();
		}
		var estart = pos;
		match (curByte) {
			'0' => next();
			'1', '2', '3', '4', '5', '6', '7', '8', '9' => while(Char.isDecimal(next()));
			_ => {
				error("expected decimal exponent");
				return false;
			}
		}
		var eend = pos;
		acceptFD();
		return evalFloat(wstart, wend, fstart, fend, negexp, estart, eend);
	}
	def acceptUL() -> bool {
		match (curByte) {
			'u', 'U' => {
				if (is_negative) error("negative unsigned literal");
				vtype = U32_TYPE;
				u_suffix = true;
				var c = next();
				if (c == 'l' || c == 'L') {
					next();
					vtype = U64_TYPE;
					return l_suffix = true;
				}
				return true;
			}
			'l', 'L' => {
				next();
				vtype = I64_TYPE;
				return l_suffix = true;
			}
		}
		return false;
	}
	def acceptFD() -> bool {
		match (curByte) {
			'f', 'F' => {
				is_float = true;
				f_suffix = true;
				vtype = Float.FLOAT32;
				return true;
			}
			'd', 'D' => {
				is_float = true;
				d_suffix = true;
				vtype = Float.FLOAT64;
				return true;
			}
		}
		return false;
	}
	def evalHex8(s: int, end: int) -> Val {
		var ival: int;
		while (s < end) ival = (ival << 4) | Char.hexValue(input[s++]);
		if (is_negative) ival = 0 - ival;
		return Box.new(ival);
	}
	def evalHex16(s: int, end: int) -> Val {
		var lval: long;
		while (s < end) lval = (lval << 4) | Char.hexValue(input[s++]);
		if (is_negative) lval = 0 - lval;
		return boxLong(lval);
	}
	def evalBin32(s: int, end: int) -> Val {
		var ival: int;
		while (s < end) ival = (ival << 1) | (input[s++] - '0');
		if (is_negative) ival = 0 - ival;
		return Box.new(ival);
	}
	def evalBin64(s: int, end: int) -> Val {
		var lval: long;
		while (s < end) lval = (lval << 1) | (input[s++] - '0');
		if (is_negative) lval = 0 - lval;
		return boxLong(lval);
	}
	def boxLong(v: long) -> Val {
		vtype = if(u_suffix, U64_TYPE, I64_TYPE);
		return Box.new(v);
	}
	def evalDecInt(s: int, end: int) -> Val {
		var ival = input[s++] - U32_CHAR_ZERO;
		if (end <= s + 8) {
			// fast case of 9 or fewer digits; cannot overflow
			while (s < end) {
				ival = ival * 10 + (input[s++] - U32_CHAR_ZERO);
			}
		} else {
			// 10 digits => could overflow
			var max = end - 1;
			while (s < max) {
				ival = ival * 10 + (input[s++] - U32_CHAR_ZERO);
			}
			// check last digit for potential overflow
			var d = input[s] - U32_CHAR_ZERO;
			if (ival >= U32_MAX_DIV_10) {
				if (ival > U32_MAX_DIV_10) return evalDecLong(s-9, end);
				if (d >= U32_MAX_MOD_10) return evalDecLong(s-9, end);
			}
			ival = ival * 10 + d;
		}
		if (is_negative) {
			// negate result if necessary; may overflow to long
			if (ival <= U31_MAX_1) return Int.box(0 - int.!(ival));
			else return boxLong(0 - long.!(ival));
		}
		if (!u_suffix && ival >= U31_MAX_1) {
			// overflow to long if a large positive number
			return boxLong(long.!(ival));
		}
		return Int.box(int.!(ival));
	}
	def evalDecLong(s: int, end: int) -> Val {
		var lval = u64.!(input[s++] - U32_CHAR_ZERO);
		if (end <= s + 18) {
			// fast case of 19 or fewer digits; cannot overflow
			while (s < end) {
				lval = lval * 10 + (input[s++] - U32_CHAR_ZERO);
			}
		} else {
			// 20 digits => could overflow
			var max = end - 1;
			while (s < max) {
				lval = lval * 10 + (input[s++] - U32_CHAR_ZERO);
			}
			// check last digit for potential overflow
			var d = input[s] - U32_CHAR_ZERO;
			if (lval >= U64_MAX_DIV_10) {
				if (lval > U64_MAX_DIV_10) return overflowDecimal();
				if (d >= U64_MAX_MOD_10) return overflowDecimal();
			}
			lval = lval * 10 + d;
		}
		if (is_negative) {
			// negate result if necessary; may overflow
			if (lval > U63_MAX_1) return overflowDecimal();
			return boxLong(0 - long.!(lval));
		} else if (!u_suffix) {
			// check overflow of positive long
			if (lval >= U63_MAX_1) return overflowDecimal();
		}
		return boxLong(long.!(lval));
	}
	def evalFloat(wstart: int, wend: int, fstart: int, fend: int,
		negexp: bool, estart: int, eend: int) -> bool {
		// compute the exponent
		var exp = 0;
		for (i = estart; i < eend; i++) {
			exp = exp * 10 + input[i] - '0';
			if (exp > 1000000) {
				val = evalAbsurdExponent(negexp);
				return true;
			}
		}
		if (negexp) exp = 0 - exp;
		// skip leading zeroes and the decimal point
		var i = wstart;
		while (i < fend) {
			var ch = input[i];
			if (ch > '0') break;
			i++;
		}
		// process up to MAX_DECIMAL_DIGITS
		var max = i + MAX_DECIMAL_DIGITS;
		if (max > fend) max = fend;
		var accum = 0ul;
		while (i < max) {
			var ch = input[i];
			if (ch == '.') { i++; continue; }
			accum = accum * 10 + ch - '0';
			i++;
		}
		// adjust exponent based on where decimal point was
		if (i < wend) exp += wend - i;	// didn't use all of whole part
		else if (i > fstart) exp -= i - fstart;	 // used some of the fractional digits

		if (exp > 309 || exp < -329) {
			val = evalAbsurdExponent(exp < 0);
			return true;
		}
		// TODO: compute floating point representation
		return true;
	}
	def evalAbsurdExponent(negexp: bool) -> Val {
		if (negexp) {
			if (is_negative) {
				return if(vtype == Float.FLOAT32, Float.F32_MINUS_ZERO, Float.F64_MINUS_ZERO);
			} else {
				return if(vtype == Float.FLOAT32, Float.F32_ZERO, Float.F64_ZERO);
			}
		} else {
			if (is_negative) {
				return if(vtype == Float.FLOAT32,
					Float.F32_MINUS_INFINITY,
					Float.F64_MINUS_INFINITY);
			} else {
				return if(vtype == Float.FLOAT32,
					Float.F32_INFINITY,
					Float.F64_INFINITY);
			}
		}
	}
	def overflowDecimal() -> Val {
		error("decimal too large");
		return null;
	}
	def parseOct() -> bool {
		error("invalid octal literal");
		while (Char.isOctal(curByte)) next();
		return false;
	}
	def next() -> byte {
		if (pos < (input.length - 1)) return curByte = input[++pos];
		pos = input.length;
		return curByte = '\x00';
	}
	def error(msg: string) -> bool {
		if (error_msg == null) {
			error_msg = msg;
			error_pos = pos;
		}
		return false;
	}
	def hasSuffix() -> bool {
		return u_suffix || l_suffix;
	}
}
