// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def U31_MAX_1 = u32.!(0x80000000);
def U32_TEN = u32.!(10);
def U32_CHAR_ZERO = u32.!('0');
def U32_NINE = u32.!(9);
def U32_MAX_DIV_10 = u32.!(429496729);
def U32_MAX_MOD_10 = u32.!(6);
def U64_UPPER_MAX_DIV_10 = u32.!(0x19999999); // (18,446,744,073,709,551,616 / 10) >> 32
def U64_LOWER_MAX_DIV_10 = u32.!(0x99999999); // (18,446,744,073,709,551,616 / 10) & 0xFFFFFFFF
def U64_LOWER_MAX_MOD_10 = u32.!(6); // (18,446,744,073,709,551,616 % 10)
def U32_TYPE = Int.getType(false, 32);
def I32_TYPE = Int.getType(true, 32);
def U64_TYPE = Int.getType(false, 64);
def I64_TYPE = Int.getType(true, 64);
class NewNumberParser(array: Array<byte>, start: int) {
	var pos = start;
	var curByte: byte;
	var is_negative: bool;
	var is_double: bool;
	var is_hex: bool;
	var is_binary: bool;
	var is_octal: bool;
	var u_suffix: bool;
	var l_suffix: bool;
	var error_msg: string;
	var error_pos: int;
	var vtype: Type;
	var val: Val;
	new() {
		curByte = array(start);
	}
	def parse() -> bool {
		vtype = I32_TYPE;
		if (curByte == '0') {
			match (next()) {
				'x', 'X': {
					next();
					is_hex = true;
					return parseHex();
				}
				'b', 'B': {
					next();
					is_binary = true;
					return parseBin();
				}
				'0', '1', '2', '3', '4', '5', '6', '7': {
					is_octal = true;
					return parseOct();
				}
				'8', '9': return error("octal digit");
			} else {
				acceptUL();
				val = if(l_suffix, Int64.box(0, 0), Int.box(0));
				return true;
			}
		}
		if (curByte == '-') {
			is_negative = true;
			next();
		}
		return parseDec();
	}
	def parseDec() -> bool {
		var s = pos;
		while (Char.isDecimal(curByte)) next();
		var end = pos;
		if (s == end) return error("decimal digit");
		if (end > s + 20) return error("decimal too large");
		acceptUL();
		if (l_suffix || end > s + 10) val = evalDecLong(s, end);
		else val = evalDecInt(s, end);
		return error_msg == null;
	}
	def parseHex() -> bool {
		var s = pos;
		while (Char.isHex(curByte)) next();
		var end = pos;
		if (s == end) return error("hexadecimal digit");
		if (end > s + 16) return error("hexadecimal too large");
		acceptUL();
		if (l_suffix || end > s + 8) val = evalHex16(s, end);
		else val = evalHex8(s, end);
		return true;
	}
	def parseBin() -> bool {
		var s = pos;
		while (Char.isBinary(curByte)) next();
		var end = pos;
		if (s == end) return error("binary digit");
		if (end > s + 64) return error("binary too large");
		acceptUL();
		if (l_suffix || end > s + 32) val = evalBin64(s, end);
		else val = evalBin32(s, end);
		return true;
	}
	def parseDouble(s: int) -> bool {
		return error("double literal");
	}
	def acceptUL() {
		match (curByte) {
			'u', 'U': {
				vtype = U32_TYPE;
				if (is_negative) error("negative unsigned literal");
				u_suffix = true;
				var c = next();
				if (c == 'l' || c == 'L') { next(); l_suffix = true; }
			}
			'l', 'L': { next(); l_suffix = true; }
		}
	}
	def evalHex8(s: int, end: int) -> Val {
		var ival: int;
		while (s < end) ival = (ival #<< 4) | Char.hexValue(array(s++));
		return Int.box(ival);
	}
	def evalHex16(s: int, end: int) -> Val {
		vtype = if(u_suffix, U64_TYPE, I64_TYPE);
		var lval = Int64.zero;
		while (s < end) lval = Int64.shiftin(lval, 4, Char.hexValue(array(s++)));
		return Int64.box(lval);
	}
	def evalBin32(s: int, end: int) -> Val {
		var ival: int;
		while (s < end) ival = (ival #<< 1) | (array(s++) - '0');
		return Int.box(ival);
	}
	def evalBin64(s: int, end: int) -> Val {
		vtype = if(u_suffix, U64_TYPE, I64_TYPE);
		var lval = Int64.zero;
		while (s < end) lval = Int64.shiftin(lval, 1, array(s++) - '0');
		return Int64.box(lval);
	}
	def evalDecInt(s: int, end: int) -> Val {
		var ival = array(s++) - U32_CHAR_ZERO;
		if (end <= s + 8) {
			// fast case of 9 or fewer digits; cannot overflow
			while (s < end) {
				ival = ival * U32_TEN + array(s++) - U32_CHAR_ZERO;
			}
		} else {
			// 10 digits => could overflow
			var max = end - 1;
			while (s < max) {
				ival = ival * U32_TEN + array(s++) - U32_CHAR_ZERO;
			}
			// check last digit for potential overflow
			var d = array(s) - U32_CHAR_ZERO;
			if (ival >= U32_MAX_DIV_10) {
				if (ival > U32_MAX_DIV_10) return evalDecLong(s-9, end);
				if (d >= U32_MAX_MOD_10) return evalDecLong(s-9, end);
			}
			ival = ival * U32_TEN + d;
		}
		if (is_negative) {
			// negate result if necessary; may overflow to long
			if (ival <= U31_MAX_1) return Int.box(0 - int.!(ival));
			return Int64.box(Int64.neg(0, int.!(ival)));
		}
		if (!u_suffix) {
			// overflow to long if a large positive number
			if (ival >= U31_MAX_1) return Int64.box(0, int.!(ival));
		}
		return Int.box(int.!(ival));
	}
	def evalDecLong(s: int, end: int) -> Val {
		vtype = if(u_suffix, U64_TYPE, I64_TYPE);
		var lval = (0, int.!(array(s++) - U32_CHAR_ZERO));
		if (end <= s + 18) {
			// fast case of 19 or fewer digits; cannot overflow
			while (s < end) {
				var d = array(s++) - U32_CHAR_ZERO;
				lval = Int64.addu32(Int64.mulu16(lval, u16.!(10)), d);
			}
		} else {
			// 20 digits => could overflow
			var max = end - 1;
			while (s < max) {
				var d = array(s++) - U32_CHAR_ZERO;
				lval = Int64.addu32(Int64.mulu16(lval, u16.!(10)), d);
			}
			// check last digit for potential overflow
			var d = array(s) - U32_CHAR_ZERO;
			if (u32.!(lval.0) >= U64_UPPER_MAX_DIV_10) {
				if (u32.!(lval.0) > U64_UPPER_MAX_DIV_10) return overflowDecimal();
				if (u32.!(lval.1) > U64_LOWER_MAX_DIV_10) return overflowDecimal();
				if (d > U64_LOWER_MAX_MOD_10) return overflowDecimal();
			}
			lval = Int64.addu32(Int64.mulu16(lval, u16.!(10)), d);
		}
		if (is_negative) {
			// negate result if necessary; may overflow
			if (Int64.ugt(lval, (0x80000000, 0))) return overflowDecimal();
			lval = Int64.neg(lval);
		}
		return Int64.box(lval);
	}
	def overflowDecimal() -> Val {
		error("decimal too large");
		return null;
	}
	def parseOct() -> bool {
		error("invalid octal literal");
		while (Char.isOctal(curByte)) next();
		return false;
	}
	def next() -> byte {
		if (pos < (array.length - 1)) return curByte = array(++pos);
		pos = array.length;
		return curByte = '\x00';
	}
	def error(msg: string) -> bool {
		if (error_msg == null) {
			error_msg = msg;
			error_pos = pos;
		}
		return false;
	}
	def hasSuffix() -> bool {
		return u_suffix || l_suffix;
	}
}
