// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A printer for VST classes and components that can be supplied an IR-specific
// method to print the representation of methods and fields.
class Printer {
	def printer: VstPrinter;

	new(printer) { }

	def printClass(cldecl: VstClass) {
		printVstCompound("class ", cldecl);
	}
	def printComponent(cdecl: VstComponent) {
		printVstCompound("component ", cdecl);
	}
	def printVstCompound(kind: string, compound: VstCompound) {
		Terminal.put(kind);
		Terminal.put(compound.name());
		printTypeParams(compound.typeEnv.typeParams);
		Terminal.put(" {\n");
		var list = compound.members;
		while (list != null) {
			printMember(list.head);
			list = list.tail;
		}
		Terminal.put("}\n");
	}
	def printMember(decl: VstMember) {
		if (VstField.?(decl)) printField(VstField.!(decl));
		else if (VstNew.?(decl)) printNew(VstNew.!(decl));
		else if (VstMethod.?(decl)) printMethod(VstMethod.!(decl));
	}
	def printMethod(mdecl: VstMethod) {
		space("method ");
		Terminal.put(mdecl.name());
		printTypeParams(mdecl.typeParams);
		Terminal.putc('(');
		printCommaList(mdecl.params, printParam);
		Terminal.putc(')');
		if (mdecl.rettype != null) {
			Terminal.put(" -> ");
			printTypeRef(mdecl.rettype);
		}
		printer.printVstMethod(mdecl);
	}
	def printNew(cdecl: VstNew) {
		space("new(");
		printCommaList(cdecl.params, printParam);
		Terminal.putc(')');
		printer.printVstMethod(cdecl);
	}
	def printParam(vdecl: ParamDecl) {
		Terminal.put(vdecl.name());
		if (vdecl.tref != null) {
			Terminal.put(": ");
			printTypeRef(vdecl.tref);
		}
	}
	def printField(fdecl: VstField) {
		if (fdecl.isReadOnly) space("def ");
		else space("var ");
		Terminal.put(fdecl.name());
		Terminal.put(": ");
		printTypeRef(fdecl.tref);
		printer.printVstField(fdecl);
	}
	def printTypeRef(tref: TypeRef) {
		Terminal.putb(tref.render(StringBuffer.new()));
	}
	def printCommaList<T>(list: List<T>, print: T -> void) {
		var prev = false;
		while (list != null) {
			if (prev) Terminal.put(", ");
			print(list.head);
			list = list.tail;
			prev = true;
		}
	}
	def printTypeParams(list: List<TypeParam>) {
		if (list != null) {
			Terminal.putc('<');
			printCommaList(list, printTypeParam);
			Terminal.putc('>');
		}
	}
	def printTypeParam(tparam: TypeParam) {
		Terminal.put(tparam.token.image);
	}
	def simple(name: string, indent: int) {
		enter(name, indent);
		exit();	
	}
	def enter(name: string, indent: int) {
		Terminal.ln();
		for (i = 0; i < indent; i++) space(null);
		Terminal.put("(");
		Terminal.put(name);
	}
	def space(str: string) {
		Terminal.put("    ");
		if (str != null) Terminal.put(str);
	}
	def exit() {
		Terminal.put(")");
	}
}

class VstPrinter extends VstVisitor<int, void> {
	var p: Printer;
	new() { p = Printer.new(this); }
	def printVstMethod(mdecl: VstMethod) {
		if (mdecl.body != null) {
			mdecl.body.accept(this, 2);
			Terminal.ln();
		} else {
			Terminal.put(");");
		}
	}
	def printVstField(fdecl: VstField) {
		printInit(fdecl.init);
	}
	def printInit(init: Expr) {
		if (init != null) {
			Terminal.put(" = ");
			init.accept(this, 2);
			Terminal.ln();
		} else {
			Terminal.put(";\n");
		}
	}
	def printProgram(prog: Program) {
		Lists.apply(prog.vst.getComponents(), p.printComponent);
		Lists.apply(prog.vst.getClasses(), p.printClass);
	}
	def visitIf(stmt: IfStmt, indent: int) {
		p.enter("IfStmt", indent);
		printExpr(stmt.cond, indent + 1);
		printStmt(stmt.tbranch, indent + 1);
		if (stmt.fbranch != null) printStmt(stmt.fbranch, indent + 1);
		p.exit();
	}
	def visitBlock(stmt: BlockStmt, indent: int) {
		p.enter("BlockStmt", indent);
		Lists.apply(stmt.stmts.list, printStmt(_, indent + 1));
		p.exit();
	}
	def visitWhile(stmt: WhileStmt, indent: int) {
		p.enter("WhileStmt", indent);
		printExpr(stmt.cond, indent + 1);
		printStmt(stmt.body, indent + 1);
		p.exit();
	}
	def visitFor(stmt: ForStmt, indent: int) {
		p.enter("ForStmt", indent);
		printVar(stmt.varDecl, indent + 1);
		printExpr(stmt.cond, indent + 1);
		printExpr(stmt.update, indent + 1);
		printStmt(stmt.body, indent + 1);
		p.exit();
	}
	def visitLocal(stmt: LocalStmt, indent: int) {
		p.enter("LocalStmt", indent);
		Lists.apply(stmt.vars, printVar(_, indent + 1));
		p.exit();
	}
	def visitBreak(stmt: BreakStmt, indent: int) {
		p.simple("BreakStmt", indent);
	}
	def visitContinue(stmt: ContinueStmt, indent: int) {
		p.simple("ContinueStmt", indent);
	}
	def visitExpr(stmt: ExprStmt, indent: int) {
		p.enter("ExprStmt", indent);
		printExpr(stmt.expr, indent + 1);
		p.exit();
	}
	def visitMatch(stmt: MatchStmt, indent: int) {
		p.enter("MatchStmt", indent);
		stmt.expr.accept(this, indent + 1);
		Lists.apply(stmt.cases.list, printCase(_, indent + 2));
		if (stmt.defcase != null) printCase(stmt.defcase, indent + 2);
		p.exit();
	}
	def visitEmpty(stmt: EmptyStmt, indent: int) {
		p.simple("EmptyStmt", indent);
	}
	def visitReturn(stmt: ReturnStmt, indent: int) {
		p.enter("ReturnStmt", indent);
		if (stmt.expr != null) printExpr(stmt.expr, indent + 1);
		p.exit();
	}
	def visitTuple(expr: TupleExpr, indent: int) {
		param("TupleExpr", null, expr.exprs.list, expr.exactType, expr.implicitType, indent);
	}
	def visitParamExpr(expr: ParamExpr, indent: int) {
		param("ParamExpr", null, null, expr.exactType, expr.implicitType, indent);
	}
	def visitArray(expr: ArrayExpr, indent: int) {
		param("ArrayExpr", null, expr.exprs.list, expr.exactType, expr.implicitType, indent);
	}
	def visitAutoExpr(expr: AutoExpr, indent: int) {
		param("AutoExpr", if(expr.post, "post", "pre"), List.new(expr.expr, null), expr.exactType, expr.implicitType, indent);
	}
	def visitIfExpr(expr: IfExpr, indent: int) {
		param("IfExpr", null, expr.exprs.list, expr.exactType, expr.implicitType, indent);
	}
	def visitVar(expr: VarExpr, indent: int) {
		if (expr.expr == null) param("VarExpr", expr.ident.name.image, null, expr.exactType, expr.implicitType, indent);
		else param("VarExpr", expr.ident.name.image, Lists.cons1(expr.expr), expr.exactType, expr.implicitType, indent);
	}
	def visitString(expr: StringExpr, indent: int) {
		param("StringExpr", expr.token.image, null, expr.exactType, expr.implicitType, indent);
	}
	def visitApp(expr: AppExpr, indent: int) {
		param("AppExpr", null, List.new(expr.func, expr.args.exprs.list), expr.exactType, expr.implicitType, indent);
	}
	def visitNot(expr: NotExpr, indent: int) {
		param("NotExpr", null, Lists.cons1(expr.expr), expr.exactType, expr.implicitType, indent);
	}
	def visitAssign(expr: AssignExpr, indent: int) {
		param("AssignExpr", null, Lists.cons2(expr.target, expr.expr), expr.exactType, expr.implicitType, indent);
	}
	def visitBinOp(expr: BinOpExpr, indent: int) {
		param("BinOpExpr", expr.op.image, Lists.cons2(expr.left, expr.right), expr.exactType, expr.implicitType, indent);
	}
	def visitLocalBinding(expr: VarExpr, ref: LocalBinding, indent: int) {
		visitVar(expr, indent);
	}
	def visitTypeBinding(expr: VarExpr, ref: TypeBinding, indent: int) {
		p.enter("TypeRef", indent);
		p.printTypeRef(ref.typeRef);
		p.exit();
	}
	def visitMemberBinding(expr: VarExpr, ref: MemberBinding, indent: int) {
		var list = if(ref.receiver != null, Lists.cons1(ref.receiver), null);
		param("MemberBinding", Strings.render(ref.member.render), list, expr.exactType, expr.implicitType, indent);
	}
	def visitOtherBinding(expr: VarExpr, ref: OtherBinding, indent: int) {
		p.enter("OtherBinding", indent);
		if (ref.receiver != null) printExpr(ref.receiver, indent + 1);
		p.exit();
	}
	def visitValueBinding(expr: VarExpr, ref: ValueBinding, indent: int) {
		var name = if(expr.ident == null, "", expr.ident.name.image);
		param("Value", name, null, expr.exactType, expr.implicitType, indent);
	}
	def printStmt(stmt: Stmt, indent: int) {
		stmt.accept(this, indent);
	}
	def printExpr(expr: Expr, indent: int) {
		expr.accept(this, indent);
	}
	def printCase(c: MatchCase, indent: int) {
		if (c.values == null) p.simple("DefCase", indent);
		else Lists.apply(c.values.list, printExpr(_, indent));
		printStmt(c.stmt, indent);
	}
	def printVar(vdecl: VarDecl, indent: int) {
		var buf = StringBuffer.new();
		if (vdecl.tref != null) buf.format2("\"%1\": %2", vdecl.name(), vdecl.tref.render);
		else buf.format1("\"%1\"", vdecl.name());
		p.enter(buf.toString(), indent);
		if (vdecl.init != null) printExpr(vdecl.init, indent + 1);
		p.exit();
	}
	def param(name: string, param: string, list: List<Expr>, exactType: Type, implicitType: Type, indent: int) {
		var buffer = StringBuffer.new();
		buffer.puts(name);
		if (param != null) buffer.format1(" \"%1\"", param);
		if (exactType != null) buffer.format1(": %1", exactType.render);
		if (implicitType != null) buffer.format1("[%1]", implicitType.render);
		p.enter(buffer.toString(), indent);
		Lists.apply(list, printExpr(_, indent + 1));
		p.exit();
	}
}
