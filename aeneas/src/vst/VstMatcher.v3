// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Matches VstMembers, e.g for tracing.
type VstMatcher {
	case None;
	case Some(patterns: List<VstPattern>);
	case All;

	def matches(m: VstMember) -> bool {
		match (this) {
			None => return false;
			Some(patterns) => {
				for (l = patterns; l != null; l = l.tail) {
					if (l.head.matches(m)) return true;
				}
				return false;
			}
			All => return true;
		}
	}
}
// Matches the container and the member name separately.
class VstPattern(container: string -> bool, member: string -> bool) {
	def matches(m: VstMember) -> bool {
		return (m != null 
			&& (m.receiver != null && container(m.receiver.name()))
			&& member(m.name()));
	}
}
component VstMatchers {
	// Parse multiple patterns separated by commas.
	def parse(pattern: string) -> VstMatcher {
		if (Strings.equal(pattern, "*")) return VstMatcher.All;
		var patterns: List<VstPattern>;
		var last = 0;
		for (i < pattern.length) {
			if (pattern[i] != ',') continue;
			patterns = List.new(parseCM(Arrays.range(pattern, last, i)), patterns);
			last = i + 1;
		}
		if (last != pattern.length) {
			patterns = List.new(parseCM(Arrays.range(pattern, last, pattern.length)), patterns);
		}
		return VstMatcher.Some(patterns);
	}
	// Parse Container.Member into a pattern.
	def parseCM(pattern: string) -> VstPattern {
		var matchContainer: string -> bool;
		var matchMember: string -> bool;
		for (i < pattern.length) {
			if (pattern[i] == '.') {
				matchContainer = parseGlob(Arrays.range(pattern, 0, i));
				matchMember = parseGlob(Arrays.range(pattern, i + 1, pattern.length));
			}
		}
		if (matchContainer == null) {
			matchContainer = matchAll;
			matchMember = parseGlob(pattern);
		}
		return VstPattern.new(matchContainer, matchMember);
	}
	// Parse a single global pattern and return a matching function.
	def parseGlob(pattern: string) -> string -> bool {
		for (c in pattern) {  // Search for special characters.
			if (c == '?' || c == '*') {
				if (Strings.equal(pattern, "*")) return matchAll;
				return GlobMatcher.new(pattern).matches;
			}
		}
		return Arrays.equal(pattern, _);  // No special characters, just compare.
	}
	// Matches all strings.
	def matchAll(s: string) -> bool {
		return true;
	}
}
// Matches an input string against a glob pattern containing ? and *
class GlobMatcher(pattern: string) {
	private def s1 = Vector<int>.new();
	private def s2 = Vector<int>.new();
	def matches(input: string) -> bool {
		var l1 = s1, l2 = s2;  // storage for lists of positions
		l1.length = 0;
		l2.length = 0;
		if (pattern.length == 0) return input.length == 0;  // empty pattern
		addState(0, l1);
		for (c in input) {
			// check whether there are any states left to advance
			if (l1.length == 0) return false;
			// advance current match states
			for (j < l1.length) advance(l1[j], c, l2);
			// swap lists for next iteration
			var t = l1;
			l1 = l2;
			l2 = t;
			t.length = 0;
		}
		for (i < l1.length) {
			// search for a state that is at the end of the pattern (accept)
			if (l1[i] == pattern.length) return true;
		}
		return false;
	}
	private def advance(pos: int, c: byte, vec: Vector<int>) {
		if (pos == pattern.length) return;
		var p = pattern[pos];
		if (p == '*') {  // skip all stars
			vec.put(pos);
			while (++pos < pattern.length) {
				if ((p = pattern[pos]) != '*') break;
			}
			if (pos == pattern.length) return vec.put(pos);
		}
		if (p == '?' || p == c) addState(pos + 1, vec);
	}
	private def addState(pos: int, vec: Vector<int>) {
		vec.put(pos);
		while (pos < pattern.length) {  // skip all stars
			if (pattern[pos] == '*') vec.put(++pos);
			else break;
		}
	}
}
