// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// matches members against a simplified glob-like syntax (wildcards ? and * are allowed)
class VstMatcher(all: bool, pattern: string) {
	var containerPattern: string;
	var memberPattern: string;

	new() {
		// parse the pattern into Container.Member patterns
		for (i < pattern.length) {
			if (pattern(i) == '.') {
				containerPattern = Arrays.range(pattern, 0, i);
				memberPattern = Arrays.range(pattern, i + 1, pattern.length);
			}
		}
		if (containerPattern == null) {
			containerPattern = "*";
			memberPattern = pattern;
		}
	}

	def matchMember(m: VstMember) -> bool {
		return all || (m != null 
			&& matches(containerPattern, m.container.name())
			&& matches(memberPattern, m.name()));
	}
}

def matches(pattern: string, input: string) -> bool {
	var l1 = Sequence<int>.new(), l2 = Sequence<int>.new();
	l1.add(0);
	for (c in input) {
		// no indexes left to explore
		if (l1.length == 0) return false;
		// check all possible pattern characters
		for (j < l1.length) advance(pattern, l1.get(j), c, l2);
		// swap lists for next iteration
		var t = l1;
		l1 = l2;
		l2 = t;
		t.length = 0;
	}
	return l1.length == 0 || pattern(l1.get(0)) == '*';
}

def advance(pattern: string, pos: int, c: byte, list: Sequence<int>) {
	var p = pattern(pos);
	if (p == '*') {
		list.add(pos);
		addNext(pattern, pos, list);
	} else if (p == '?') {
		addNext(pattern, pos, list);
	} else if (p == c) {
		addNext(pattern, pos, list);
	}
}

def addNext(pattern: string, pos: int, list: Sequence<int>) {
	if (pos < pattern.length - 1) list.add(pos + 1);
}
