// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Matches members against a simplified glob-like syntax.
class VstMatcher {
	def all: bool;
	private var matchContainer: string -> bool;
	private var matchMember: string -> bool;

	new(all, pattern: string) {
		// parse the pattern into Container.Member patterns
		for (i < pattern.length) {
			if (pattern[i] == '.') {
				matchContainer = StringMatchers.make(Arrays.range(pattern, 0, i));
				matchMember = StringMatchers.make(Arrays.range(pattern, i + 1, pattern.length));
			}
		}
		if (matchContainer == null) {
			matchContainer = StringMatchers.matchAll;
			matchMember = StringMatchers.make(pattern);
		}
	}
	def matches(m: VstMember) -> bool {
		return all || (m != null 
			&& (m.receiver != null && matchContainer(m.receiver.name()))
			&& matchMember(m.name()));
	}
}
// Helper routines for making string matchers.
component StringMatchers {
	def matchAll(s: string) -> bool {
		return true;
	}
	// Makes a matcher for a glob pattern.
	def make(pattern: string) -> string -> bool {
		for (c in pattern) {  // Search for special characters.
			if (c == '?' || c == '*') {
				if (Strings.equal(pattern, "*")) return matchAll;
				return GlobMatcher.new(pattern).matches;
			}
		}
		return Arrays.equal(pattern, _);  // No special characters, just compare.
	}
}
// Matches an input string against a glob pattern containing ? and *
class GlobMatcher(pattern: string) {
	private def s1 = Vector<int>.new();
	private def s2 = Vector<int>.new();
	def matches(input: string) -> bool {
		var l1 = s1, l2 = s2;  // storage for lists of positions
		l1.length = 0;
		l2.length = 0;
		if (pattern.length == 0) return input.length == 0;  // empty pattern
		addState(0, l1);
		for (c in input) {
			// check whether there are any states left to advance
			if (l1.length == 0) return false;
			// advance current match states
			for (j < l1.length) advance(l1[j], c, l2);
			// swap lists for next iteration
			var t = l1;
			l1 = l2;
			l2 = t;
			t.length = 0;
		}
		for (i < l1.length) {
			// search for a state that is at the end of the pattern (accept)
			if (l1[i] == pattern.length) return true;
		}
		return false;
	}
	private def advance(pos: int, c: byte, vec: Vector<int>) {
		if (pos == pattern.length) return;
		var p = pattern[pos];
		if (p == '*') {  // skip all stars
			vec.put(pos);
			while (++pos < pattern.length) {
				if ((p = pattern[pos]) != '*') break;
			}
			if (pos == pattern.length) return vec.put(pos);
		}
		if (p == '?' || p == c) addState(pos + 1, vec);
	}
	private def addState(pos: int, vec: Vector<int>) {
		vec.put(pos);
		while (pos < pattern.length) {  // skip all stars
			if (pattern[pos] == '*') vec.put(++pos);
			else break;
		}
	}
}
