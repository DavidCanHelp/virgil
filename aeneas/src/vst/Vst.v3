// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// the portion of the program represented as Vst syntax trees
class VstPortion {
	def prog: Program;

	var declList: List<Decl>;
	var classList: List<VstClass>;
	var componentList: List<VstComponent>;
	var numComponents: int;
	var numStrings: int;
	var mainMethod: VstMethod;

	new(prog) { }

	def addDecl(decl: Decl) {
		declList = List<Decl>.new(decl, declList);
		if (VstClass.?(decl)) classList = List<VstClass>.new(VstClass.!(decl), classList);
		if (VstComponent.?(decl)) {
			var compDecl = VstComponent.!(decl);
			componentList = List<VstComponent>.new(compDecl, componentList);
			compDecl.recordIndex = numComponents++;
		}
	}
	def getComponents() -> List<VstComponent> {
		return Lists.reverse(componentList); // in-order list of components
	}
	def getClasses() -> List<VstClass> {
		return Lists.reverse(classList); // in-order list of classes
	}
}
// a list of T's with a source range and several utility methods
class VstList<T> {
	def src: FileRange;
	def list: List<T>;
	private var len: int;
	private var array: Array<T>;
	new(src, list) { }
	def range() -> FileRange { return src; }
	def length() -> int {
		if (len == 0 && list != null) len = Lists.length(list);
		return len;
	}
	def apply(f: T -> void) { Lists.apply(list, f); }
	def asList() -> List<T> { return list; }
	def asArray() -> Array<T> {
		if (array == null) {
			array = Lists.toArray(list);
			len = array.length;
		}
		return array;
	}
	def mapList<R>(f: T -> R) -> List<R> { return Lists.map(list, f); }
	def mapArray<R>(f: T -> R) -> Array<R> { return Arrays.map(asArray(), f); }
}
// an identifier parameterized with T's
class VstIdent<T> {
	def name: Token;
	def params: VstList<T>;
	new(name, params) { }
	def list() -> List<T> {
		if (params != null) return params.list;
		return null;
	}
	def range() -> FileRange {
		var src = name.range();
		if (params != null) return FileRanges.add(src, params.src);
		return src;
	}
}
// Any kind of declaration that has a name
class Decl {
	def token: Token;
	new(token) { }
	def name() -> string { return token.image; }
}
// Parsed parameter
class ParamDecl extends VarDecl {
	var member: VstField;
	var index: int;
	new(token: Token, tref: TypeRef) : super(token, tref, null) { } 
}
// Parsed compound declaration
class VstCompound extends Decl {
	def typeParams: List<TypeParam>;
	var members: List<VstMember>;
	var typeCon: TypeCon;
	var typeEnv: TypeEnv;
	var memberMap: Map<string, VstMember>;
	var declType: Type;
	var numFields: int;
	var numMethods: int;
	var constructor: VstNew;
	var verifier: VstCompoundVerifier;

	new(name: Token, typeParams, members) : super(name) { }
	def getDeclaredType() -> Type {
		if (declType == null && typeCon != null) {
			declType = typeCon.create(Lists.map(typeParams, toType));
		}
		return declType;
	}
	def toType(typeParam: TypeParam) -> Type {
		return typeParam;
	}
}
// Parsed class
class VstClass extends VstCompound {
	def superclass: TypeRef;
	new(name: Token, typeParams: List<TypeParam>, superclass, members: List<VstMember>) : super(name, typeParams, members) { }
}
// Parsed component
class VstComponent extends VstCompound {
	var recordIndex: int;
	new(name: Token, members: List<VstMember>) : super(name, null, members) { }
}
// A member of a class or component
class VstMember extends Decl {
	def isPrivate: bool;
	var container: VstCompound;
	var index: int;
	var verifier: VstMemberVerifier;

	new(isPrivate, name: Token) : super(name) { }

	def getType() -> Type; // TODO: push this method down
	def getFullName() -> string {
		return Strings.format2("%1.%2", container.name(), name());
	}
}
// A method
class VstMethod extends VstMember {
	def typeParams: List<TypeParam>;
	def params: List<ParamDecl>;
	def rettype: TypeRef;
	def body: BlockStmt;

	var thisParam: ParamDecl;
	var typeEnv: TypeEnv;
	var root: VstMethod;
	var ftype: Type;
	var numNonSsa: int;
	var numParams: int;
	var numLoops: int;

	new(isPrivate: bool, name: Token, typeParams, params, rettype, body) : super(isPrivate, name) { }

	def getType() -> Type {
		if (ftype == null) {
			// XXX: refactor Lists.map(params, ParamDecl.vtype);
			var ptypes = Lists.map(params, TypeUtil.getParamType);
			var ptype = Tuple.newType(ptypes);
			ftype = Function.newType(ptype, rettype.getType());
		}
		return ftype;
	}
	def getFullName() -> string {
		return Strings.format2("%1.%2()", container.name(), name());
	}
}

class VstNew extends VstMethod {
	var superclause: SuperClause;
	var memberinits: List<VstField>;
	new(name: Token, params: List<ParamDecl>, superclause, body: BlockStmt) : 
		super(false, name, null, params, TypeUtil.typeRefOf(Void.TYPE), body) {
		this.superclause = superclause;
	}
}

class VstField extends VstMember {
	def isReadOnly: bool;
	def tref: TypeRef;
	def init: Expr;
	var vtype: Type;
	var initOrder: int;
	var typeChecked: bool;

	new(isPrivate: bool, isReadOnly, name: Token, tref, init) : super(isPrivate, name) { }
	def getType() -> Type { return vtype; }
}

class SuperClause {
	def point: FilePoint;
	def args: TupleExpr;
	var constructor: VstNew;
	new(point, args) { }
}

class VstVisitor<E, R> {
	def visitIf(stmt: IfStmt, env: E) -> R;
	def visitBlock(stmt: BlockStmt, env: E) -> R;
	def visitWhile(stmt: WhileStmt, env: E) -> R;
	def visitFor(stmt: ForStmt, env: E) -> R;
	def visitForeach(stmt: ForeachStmt, env: E) -> R;
	def visitLocal(stmt: LocalStmt, env: E) -> R;
	def visitBreak(stmt: BreakStmt, env: E) -> R;
	def visitContinue(stmt: ContinueStmt, env: E) -> R;
	def visitExpr(stmt: ExprStmt, env: E) -> R;
	def visitMatch(stmt: MatchStmt, env: E) -> R;
	def visitEmpty(stmt: EmptyStmt, env: E) -> R;
	def visitReturn(stmt: ReturnStmt, env: E) -> R;

	def visitTuple(expr: TupleExpr, env: E) -> R;
	def visitParamExpr(expr: ParamExpr, env: E) -> R;
	def visitAutoExpr(expr: AutoExpr, env: E) -> R;
	def visitArray(expr: ArrayExpr, env: E) -> R;
	def visitVar(expr: VarExpr, env: E) -> R;
	def visitString(expr: StringExpr, env: E) -> R;
	def visitApp(expr: AppExpr, env: E) -> R;
	def visitNot(expr: NotExpr, env: E) -> R;
	def visitAssign(expr: AssignExpr, env: E) -> R;
	def visitBinOp(expr: BinOpExpr, env: E) -> R;
	def visitIfExpr(expr: IfExpr, env: E) -> R;

	def visitValueBinding(expr: VarExpr, ref: ValueBinding, env: E) -> R;
	def visitLocalBinding(expr: VarExpr, ref: LocalBinding, env: E) -> R;
	def visitTypeBinding(expr: VarExpr, ref: TypeBinding, env: E) -> R;
	def visitMemberBinding(expr: VarExpr, ref: MemberBinding, env: E) -> R;
}

class VarDecl extends Decl {
	def tref: TypeRef;
	def init: Expr;
	var vtype: Type;
	var isReadOnly: bool;
	var ssa: VstSsaVar;

	new(name: Token, tref, init) : super(name) { }
}

class Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R;
	def range() -> FileRange;
}

class IfStmt extends Stmt {
	def start: FilePoint;
	def cond: Expr;
	def tbranch: Stmt;
	def fbranch: Stmt;

	new(start, cond, tbranch, fbranch) { }

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitIf(this, env); }
	def range() -> FileRange {
		var src = FileRanges.add(start, FileRanges.ofStmt(tbranch));
		if (fbranch != null) src = FileRanges.add(src, FileRanges.ofStmt(fbranch));
		return src;
	}
}

class BlockStmt extends Stmt {
	def stmts: VstList<Stmt>;
	new(stmts) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitBlock(this, env); }
	def range() -> FileRange { return stmts.range(); }
}

class WhileStmt extends Stmt {
	def start: FilePoint;
	def cond: Expr;
	def body: Stmt;
	var loopNum: int;		// loop number, computed by verifier

	new(start, cond, body) { }

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitWhile(this, env); }
	def range() -> FileRange { return FileRanges.add(start, FileRanges.ofStmt(body)); }
}

class ForStmt extends Stmt {
	def start: FilePoint;
	def varDecl: VarDecl;
	def cond: Expr;
	def update: Expr;
	def body: Stmt;
	var loopNum: int;		// loop number, computed by verifier
	new(start, varDecl, cond, update, body) {}
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitFor(this, env); }
	def range() -> FileRange { return FileRanges.add(start, FileRanges.ofStmt(body)); }
}

class ForeachStmt extends Stmt {
	def start: FilePoint;
	def varDecl: VarDecl;
	def expr: Expr;
	def body: Stmt;
	var loopNum: int;	// loop number, computed by verifier
	var loopVar: VstSsaVar;	// loop control variable
	new(start, varDecl, expr, body) {}
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitForeach(this, env); }
	def range() -> FileRange { return FileRanges.add(start, FileRanges.ofStmt(body)); }
}

class LocalStmt extends Stmt {
	def start: FilePoint;
	def vars: List<VarDecl>;
	new(start, vars) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitLocal(this, env); }
	def range() -> FileRange { return start.rangeOf(3); } // TODO: include the end of the last variable
}

class BreakStmt extends Stmt {
	def src: FileRange;
	new(src) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitBreak(this, env); }
	def range() -> FileRange { return src; }
}

class ExprStmt extends Stmt {
	def src: FileRange;
	def expr: Expr;
	new(src, expr) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitExpr(this, env); }
	def range() -> FileRange { return FileRanges.ofExpr(expr); }
}

class MatchStmt extends Stmt {
	def src: FilePoint;
	def expr: Expr;
	def cases: VstList<MatchCase>;
	def defcase: MatchCase;
	new(src, expr, cases, defcase) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitMatch(this, env); }
	def range() -> FileRange {
		var r = FileRanges.add(src, cases.range());
		if (defcase != null) r = FileRanges.add(r, defcase.range());
		return r;
	}
}

class MatchCase {
	def values: VstList<Expr>;
	def stmt: Stmt;
	var vals: List<Val>;
	new(values, stmt) { }
	def range() -> FileRange { return FileRanges.add(values.range(), FileRanges.ofStmt(stmt)); }
}

class ContinueStmt extends Stmt {
	def src: FileRange;
	new(src) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitContinue(this, env); }
	def range() -> FileRange { return src; }
}

class EmptyStmt extends Stmt {
	def point: FilePoint;
	new(point) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitEmpty(this, env); }
	def range() -> FileRange { return point.rangeOf(1); }
}

class ReturnStmt extends Stmt {
	def src: FileRange;
	def expr: Expr;
	new(src, expr) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitReturn(this, env); }
	def range() -> FileRange { return src; }
}

class Expr {
	var exactType: Type;
	var implicitType: Type;
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R;
	// range in the file covering the whole expression, e.g. >"e + e"<
	def range() -> FileRange;
	// point in the expression where execution happens, e.g. "e >+ e"
	def point() -> FilePoint { return range(); }
}

class TupleExpr extends Expr {
	def exprs: VstList<Expr>;
	var tref: TypeRef;
	var operator: Operator;
	new(exprs) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitTuple(this, env); }
	def range() -> FileRange { return exprs.range(); }
}

class ArrayExpr extends Expr {
	def exprs: VstList<Expr>;
	var tref: TypeRef;
	var operator: Operator;
	new(exprs) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitArray(this, env); }
	def range() -> FileRange { return exprs.range(); }
}

class VarExpr extends Expr {
	def expr: Expr;
	def dot: FilePoint;
	def ident: VstIdent<TypeRef>;
	var binding: Binding;
	new(expr, dot, ident) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R {
		if (binding != null) return binding.accept(v, this, env);
		else return v.visitVar(this, env);
	}
	def range() -> FileRange {
		if (expr != null) return FileRanges.add(FileRanges.ofExpr(expr), ident.range());
		return ident.range();
	}
	def point() -> FilePoint {
		if (dot != null) return dot;
		return ident.name;
	}
}

class ParamExpr extends Expr {
	def token: Token;
	var ptype: Type;
	var index: int;
	new(token) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitParamExpr(this, env); }
	def range() -> FileRange { return token.range(); }
}

class AutoExpr extends Expr {
	def token: Token;
	def expr: Expr;
	def op: Operator;
	def post: bool;
	new(token, expr, op, post) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitAutoExpr(this, env); }
	def range() -> FileRange { return FileRanges.add(FileRanges.ofExpr(expr), token.range()); }
}

class StringExpr extends Expr {
	def token: Token;
	def array: Array<byte>;
	var recordIndex: int;
	new(token, array) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitString(this, env); }
	def range() -> FileRange { return token.range(); }
}

class AppExpr extends Expr {
	def func: Expr;
	def args: TupleExpr;
	var partial: List<ParamExpr>;
	new(func, args) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitApp(this, env); }
	def range() -> FileRange { return FileRanges.add(FileRanges.ofExpr(func), args.range()); }
	def point() -> FilePoint { return args.range(); }
}

class NotExpr extends Expr {
	def not: FilePoint;
	def expr: Expr;
	new(not, expr) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitNot(this, env); }
	def range() -> FileRange { return FileRanges.add(not, FileRanges.ofExpr(expr)); }
}

class AssignExpr extends Expr {
	def target: Expr;
	def assign: FilePoint;
	def expr: Expr;
	new(target, assign, expr) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitAssign(this, env); }
	def range() -> FileRange {
		if (target == null) return assign.rangeOf(1);
		var r = FileRanges.ofExpr(target);
		if (expr != null) r = FileRanges.add(r, FileRanges.ofExpr(expr));
		return r;
	}
	def point() -> FilePoint { return assign; }
}

class BinOpExpr extends Expr {
	def left: Expr;
	def op: Token;
	var binop: Operator;
	def right: Expr;
	new(left, op, binop, right) { this.binop = binop; }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitBinOp(this, env); }
	def range() -> FileRange {
		if (left == null) return op.range();
		var r = FileRanges.ofExpr(left);
		if (right != null) r = FileRanges.add(r, FileRanges.ofExpr(right));
		return r;
	}
	def point() -> FilePoint { return op; }
}

class IfExpr extends Expr {
	def start: FilePoint;
	def exprs: VstList<Expr>;
	new(start, exprs) { }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitIfExpr(this, env); }
	def range() -> FileRange { return FileRanges.add(start, exprs.range()); }
	def point() -> FilePoint { return exprs.range(); }
}

class Binding {
	def boundType: Type;
	new(boundType) { }
	def isAssignable() -> bool { return false; }
	def accept<E, R>(v: VstVisitor<E, R>, ve: VarExpr, env: E) -> R;
}

class ValueBinding extends Binding {
	def token: Token;
	def val: Val;
	new(token, val, vtype: Type) : super(vtype) { }
	def accept<E, R>(v: VstVisitor<E, R>, ve: VarExpr, env: E) -> R { return v.visitValueBinding(ve, this, env); }
}

class LocalBinding extends Binding {
	def decl: VarDecl;
	new(decl) : super(decl.vtype) { }
	def isAssignable() -> bool { return !decl.isReadOnly; }
	def accept<E, R>(v: VstVisitor<E, R>, ve: VarExpr, env: E) -> R { return v.visitLocalBinding(ve, this, env); }
}

class TypeBinding extends Binding {
	def typeRef: TypeRef;
	new(typeRef) : super(typeRef.getType()) { }
	def accept<E, R>(v: VstVisitor<E, R>, ve: VarExpr, env: E) -> R { return v.visitTypeBinding(ve, this, env); }
}

class MemberBinding extends Binding {
	def thisExpr: Expr;
	def container: Type;
	def member: Member;
	new(thisExpr, container, member) : super(member.memberType) { }
	def isAssignable() -> bool { return member.writable; }
	def accept<E, R>(v: VstVisitor<E, R>, ve: VarExpr, env: E) -> R { return v.visitMemberBinding(ve, this, env); }
}
// Utility methods for dealing with file ranges
component FileRanges {
	def add(start: FilePoint, end: FileRange) -> FileRange {
		if (start == null) return end;
		if (end == null) {
			if (FileRange.?(start)) return FileRange.!(start);
			return start.rangeOf(0);
		}
		return FileRange.new(start.fileName, start.beginLine, start.beginColumn, end.endLine, end.endColumn);
	}
	def ofExpr(e: Expr) -> FileRange {
		if (e == null) return null;
		return e.range();
	}
	def ofStmt(s: Stmt) -> FileRange {
		if (s == null) return null;
		return s.range();
	}
}
