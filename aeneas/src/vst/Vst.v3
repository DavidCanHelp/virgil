// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// the portion of the program represented as Vst syntax trees
class VstPortion {
	var files: Array<VstFile>;	// all files, in order specified on command line
	var declList: List<Decl>;	// all declarations in reverse order
	var numComponents: int;		// total number of components
	var numStrings: int;		// total number of string constants
	var mainMethod: VstMethod;	// main method

	def addDecl(decl: Decl) {
		declList = List.new(decl, declList);
	}
	def getComponents() -> List<VstComponent> {
		return filterDecls<VstComponent>(); // in-order list of components
	}
	def getClasses() -> List<VstClass> {
		return filterDecls<VstClass>(); // in-order list of classes
	}
	private def filterDecls<T>() -> List<T> {
		var r: List<T>;
		for (l = declList; l != null; l = l.tail) {
			if (T.?(l.head)) r = List.new(T.!(l.head), r);
		}
		return r;
	}
}
// The result of parsing a file, including a line/offset map and declarations
class VstFile extends ParsedFile {
	var decls: List<Decl>;		// all declarations in order
	var synthetic: VstComponent;	// declaration for synthesized component
	new(fileName: string, input: Array<byte>) super(fileName, input) { }
}
// a list of T's with a source range and several utility methods
class VstList<T>(src: FileRange, list: List<T>) {
	private var len = if(list != null, -1);
	private var array: Array<T>;

	def range() -> FileRange { return src; }
	def first() -> T {
		if (list == null) { var n: T; return n; }
		return list.head;
	}
	def length() -> int {
		if (len < 0) len = Lists.length(list);
		return len;
	}
	def apply(f: T -> void) { Lists.apply(list, f); }
	def asArray() -> Array<T> {
		if (array == null) {
			array = Lists.toArray(list);
			len = array.length;
		}
		return array;
	}
	def mapList<R>(f: T -> R) -> List<R> { return Lists.map(list, f); }
	def mapArray<R>(f: T -> R) -> Array<R> { return Arrays.map(asArray(), f); }
}
// an identifier parameterized with T's
class VstIdent<T>(name: Token, kwClass: byte, params: VstList<T>) {
	def list() -> List<T> {
		if (params != null) return params.list;
		return null;
	}
	def range() -> FileRange {
		var src = name.range();
		if (params != null) return FileRanges.add(src, params.src);
		return src;
	}
	def parameterized() -> bool {
		return params != null;
	}
}
// Any kind of declaration that has a name
class Decl(token: Token) {
	def name() -> string { return token.image; }
	def render(buf: StringBuffer) -> StringBuffer {
		return buf.puts(token.image);
	}
}
// Parsed parameter
class ParamDecl extends VarDecl {
	var member: VstField;
	var index: int;
	new(token: Token, tref: TypeRef) super(token, tref, null) { } 
}
def NON_VARIANT = -2;
def ROOT_VARIANT = -1;
// Parsed compound declaration
class VstCompound extends Decl {
	def typeParams: List<TypeParam>;
	def params: VstList<ParamDecl>;
	def superclause: SuperClause;
	var members: List<VstMember>;
	var typeCon: TypeCon;
	var typeEnv: TypeEnv;
	var memberMap: HashMap<string, VstMember>;
	var declType: Type;
	var fullName: string;
	var numFields: int;
	var numMethods: int;
	var constructor: VstNew;
	var isSynthetic: bool;
	var isFileScope: bool;
	var verifier: VstCompoundVerifier;
	var variantTag = NON_VARIANT;

	new(name: Token, typeParams, params, superclause, members) super(name) {
		fullName = name.image;
	}
	def getDeclaredType() -> Type {
		if (declType == null && typeCon != null) {
			declType = typeCon.create(Lists.map(typeParams, Type.!<TypeParam>));
		}
		return declType;
	}
	def getParams() -> List<ParamDecl> {
		return if(params != null, params.list);
	}
	def isEnum() -> bool { return VstClass.?(this) && VstClass.!(this).kind == V3Kind.ENUM; }
	def isVariant() -> bool { return variantTag > NON_VARIANT; }
	def isVariantCase() -> bool { return variantTag >= 0; }
}
// Parsed "class X { ... }"
class VstClass extends VstCompound {
	def superclass: TypeRef;
	var kind = V3Kind.CLASS;
	var tagType: IntType;
	var cases: Array<VstCaseMember>;
	var enumSetTypeCon: V3EnumSet_TypeCon;
	new(name: Token, typeParams: List<TypeParam>, params: VstList<ParamDecl>, superclass, superclause: SuperClause, members: List<VstMember>) 
		super(name, typeParams, params, superclause, members) { }
}
// Parsed "component X { ... }"
class VstComponent extends VstCompound {
	var recordIndex: int;
	new(name: Token, members: List<VstMember>) super(name, null, null, null, members) { }
}
// A helper class for desugaring variants into VstClasses.
class VariantDesugaring(outer: VstIdent<TypeParam>) {
	def superclass = TypeRef.new(null, outer.name, Lists.map(outer.list(), TypeUtil.typeRefOfParam), null, null);
	var cases = Vector<VstCaseMember>.new();
	def synthesizeMembers(fileName: string, line: int, col: int) -> List<VstMember> {
		var tagToken = Token.new(fileName, "tag", line, col);
		var nameToken = Token.new(fileName, "name", line, col);
		var list: List<VstMember>;
		list = List.new(VstVariantTagMember.new(tagToken), list);
		list = List.new(VstVariantNameMember.new(nameToken), list);
		return list;
	}
	def synthesizeTopLevelClass(members: List<VstMember>) -> VstClass {
		var decl = VstClass.new(outer.name, outer.list(), null, null, null, members);
		decl.kind = V3Kind.VARIANT;
		decl.variantTag = ROOT_VARIANT;
		decl.tagType = getTagType(cases.length);
		decl.cases = cases.extract();
		for (c in decl.cases) c.decl.tagType = decl.tagType;
		return decl;
	}
	def synthesizeVariantCaseMember(id: VstIdent<void>, params: VstList<ParamDecl>, members: List<VstMember>) -> VstCaseMember {
		var synthetic = VstClass.new(id.name, outer.list(), params, superclass, null, members);
		var tag = cases.length;
		synthetic.kind = V3Kind.VARIANT;
		synthetic.variantTag = tag;
		synthetic.isSynthetic = true;
		var buf = StringBuffer.new().puts(superclass.token.image);
		buf.putc('.');
		synthetic.fullName = buf.puts(id.name.image).toString();
		var c = VstCaseMember.new(tag, id.name, synthetic, null);
		cases.add(c);
		return c;
	}
}
// compute the type of the tag based on the number of variants.
def getTagType(caseCount: int) -> IntType {
	var width = 1, exp = 2;
	while (exp < caseCount) {
		exp = exp << 1;
		width++;
	}
	return Int.getType(false, width);
}
// A member of a class or component
class VstMember extends Decl {
	def isPrivate: bool;
	var isSynthetic: bool;
	var container: VstCompound;
	var index: int;

	new(isPrivate, name: Token) super(name) { }

	def getType() -> Type;
	def renderLong(buf: StringBuffer) -> StringBuffer {
		if (!container.isFileScope) buf.puts(container.fullName).putc('.');
		return buf.puts(token.image);
	}
}
// Desugared case member from a variant.
class VstCaseMember extends VstMember {
	def tag: int;
	def decl: VstClass;
	def args: VstList<Expr>;
	new(tag, name: Token, decl, args) super(false, name) { }
	def getType() -> Type {
		return if(decl == null, container.declType, decl.declType);
	}
}
// Synthesized .tag member from a variant.
class VstVariantTagMember extends VstMember {
	new(name: Token) super(false, name) { }
	def getType() -> Type {
		return VstClass.!(container).tagType;
	}
}
// Synthesized .name member from a variant.
class VstVariantNameMember extends VstMember {
	new(name: Token) super(false, name) { }
	def getType() -> Type { return V3.stringType; }
}
// Helper for desugaring an enum into a class.
class VstEnumDesugaring(outer: VstIdent<void>, params: VstList<ParamDecl>) {
	def cases = Vector<VstCaseMember>.new();
	def synthesizeClass(members: List<VstMember>) -> VstClass {
		var decl = VstClass.new(outer.name, null, params, null, null, members);
		decl.kind = V3Kind.ENUM;
		decl.tagType = getTagType(cases.length);
		decl.cases = cases.extract();
		return decl;
	}
	def synthesizeMembers(fileName: string, line: int, col: int) -> List<VstMember> {
		var tagToken = Token.new(fileName, "tag", line, col);
		var nameToken = Token.new(fileName, "name", line, col);
		var list: List<VstMember>;
		list = List.new(VstVariantTagMember.new(tagToken), list);
		list = List.new(VstVariantNameMember.new(nameToken), list);
		return list;
	}
	def synthesizeEnumCase(id: VstIdent<void>, args: VstList<Expr>) -> VstCaseMember {
		var c = VstCaseMember.new(cases.length, id.name, null, args);
		cases.add(c);
		return c;
	}
}
// A method
class VstMethod extends VstMember {
	def typeParams: List<TypeParam>;
	var params: VstList<ParamDecl>;
	def rettype: TypeRef;
	def body: Stmt;

	var thisParam: ParamDecl;
	var typeEnv: TypeEnv;
	var root: VstMethod;
	var ftype: Type;
	var numNonSsa: int;
	var numParams: int;
	var numLoops: int;

	new(isPrivate: bool, name: Token, typeParams, params, rettype, body) super(isPrivate, name) { }

	def getType() -> Type {
		if (ftype == null) {
			// XXX: refactor Lists.map(params, ParamDecl.vtype);
			var ptypes = Lists.map(params.list, TypeUtil.getParamType);
			var ptype = Tuple.newType(ptypes);
			ftype = Function.newType(ptype, rettype.getType());
		}
		return ftype;
	}
	def isIndexed() -> bool {
		return token.image(0) == '[';  // an indexed get or set method
	}
}

class VstNew extends VstMethod {
	var superclause: SuperClause;
	var memberinits: List<VstField>;
	var initIndex = -2;
	new(name: Token, params: VstList<ParamDecl>, superclause, body: Stmt) : 
		super(false, name, null, params, TypeUtil.typeRefOf(Void.TYPE), body) {
		this.superclause = superclause;
	}
	def nontrivial() -> bool { return initIndex > -2; }
	def markNontrivial() { if (initIndex < -1) initIndex = -1; }
}

class VstField extends VstMember {
	def isReadOnly: bool;
	def tref: TypeRef;
	def init: Expr;
	var vtype: Type;
	var initOrder: int;
	var initEnv: MethodEnv;
	var synthetic: bool;
	var enumVals: Record;

	new(isPrivate: bool, isReadOnly, name: Token, tref, init) super(isPrivate, name) { }
	def getType() -> Type { return vtype; }
}

class SuperClause {
	def point: FilePoint;
	def args: TupleExpr;
	var constructor: VstNew;
	new(point, args) { }
}

class VstVisitor<E, R> {
	def visitIf(stmt: IfStmt, env: E) -> R;
	def visitBlock(stmt: BlockStmt, env: E) -> R;
	def visitWhile(stmt: WhileStmt, env: E) -> R;
	def visitFor(stmt: ForStmt, env: E) -> R;
	def visitForeach(stmt: ForeachStmt, env: E) -> R;
	def visitForLess(stmt: ForLessStmt, env: E) -> R;
	def visitLocal(stmt: LocalStmt, env: E) -> R;
	def visitBreak(stmt: BreakStmt, env: E) -> R;
	def visitContinue(stmt: ContinueStmt, env: E) -> R;
	def visitExpr(stmt: ExprStmt, env: E) -> R;
	def visitMatch(stmt: MatchStmt, env: E) -> R;
	def visitEmpty(stmt: EmptyStmt, env: E) -> R;
	def visitReturn(stmt: ReturnStmt, env: E) -> R;

	def visitTuple(expr: TupleExpr, env: E) -> R;
	def visitParamExpr(expr: ParamExpr, env: E) -> R;
	def visitAutoExpr(expr: AutoExpr, env: E) -> R;
	def visitArray(expr: ArrayExpr, env: E) -> R;
	def visitVar(expr: VarExpr, env: E) -> R;
	def visitLiteral(expr: Literal, env: E) -> R;
	def visitString(expr: StringExpr, env: E) -> R;
	def visitApp(expr: AppExpr, env: E) -> R;
	def visitIndex(expr: IndexExpr, env: E) -> R;
	def visitNot(expr: NotExpr, env: E) -> R;
	def visitBitwiseNeg(expr: BitwiseNegExpr, env: E) -> R;
	def visitAssign(expr: AssignExpr, env: E) -> R;
	def visitBinOp(expr: BinOpExpr, env: E) -> R;
	def visitIfExpr(expr: IfExpr, env: E) -> R;
}

class VarDecl extends Decl {
	def tref: TypeRef;
	var init: Expr;
	var vtype: Type;
	var isReadOnly: bool;
	var ssa: VstSsaVar;

	new(name: Token, tref, init) super(name) { }
}
// base class of statements
class Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R;
	def range() -> FileRange;
}
// if (cond) tbranch; else fbranch
class IfStmt(start: FilePoint, cond: Expr, tbranch: Stmt, fbranch: Stmt) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitIf(this, env); }
	def range() -> FileRange {
		var src = FileRanges.add(start, FileRanges.ofStmt(tbranch));
		if (fbranch != null) src = FileRanges.add(src, FileRanges.ofStmt(fbranch));
		return src;
	}
}
// { stmts }
class BlockStmt(stmts: VstList<Stmt>) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitBlock(this, env); }
	def range() -> FileRange { return stmts.range(); }
}
// while(cond) body
class WhileStmt(start: FilePoint, cond: Expr, body: Stmt) extends Stmt {
	var loopNum: int;		// loop number, computed by verifier

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitWhile(this, env); }
	def range() -> FileRange { return FileRanges.add(start, FileRanges.ofStmt(body)); }
}
// for(varDecl; cond; update) body
class ForStmt(start: FilePoint, varDecl: VarDecl, cond: Expr, update: Expr, body: Stmt) extends Stmt {
	var loopNum: int;		// loop number, computed by verifier

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitFor(this, env); }
	def range() -> FileRange { return FileRanges.add(start, FileRanges.ofStmt(body)); }
}
// for(varDecl in expr) body
class ForeachStmt(start: FilePoint, varDecl: VarDecl, expr: Expr, body: Stmt) extends Stmt {
	var loopNum: int;	// loop number, computed by verifier
	var loopVar: VstSsaVar;	// loop control variable

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitForeach(this, env); }
	def range() -> FileRange { return FileRanges.add(start, FileRanges.ofStmt(body)); }
}
// for(varDecl < expr) body
class ForLessStmt(start: FilePoint, varDecl: VarDecl, lt: Token, expr: Expr, body: Stmt) extends Stmt {
	var loopNum: int;	// loop number, computed by verifier

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitForLess(this, env); }
	def range() -> FileRange { return FileRanges.add(start, FileRanges.ofStmt(body)); }
}
// var|def vars
class LocalStmt(start: FilePoint, vars: List<VarDecl>) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitLocal(this, env); }
	def range() -> FileRange { return start.rangeOf(3); } // TODO: include the end of the last variable
}
// break;
class BreakStmt(src: FileRange) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitBreak(this, env); }
	def range() -> FileRange { return src; }
}
// expr;
class ExprStmt(src: FileRange, expr: Expr) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitExpr(this, env); }
	def range() -> FileRange { return FileRanges.ofExpr(expr); }
}
// match(expr) cases else defcase
class MatchStmt(src: FilePoint, expr: Expr, cases: VstList<MatchCase>) extends Stmt {
	var defcase: MatchCase;
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitMatch(this, env); }
	def range() -> FileRange {
		var r = FileRanges.add(src, cases.range());
		if (defcase != null) r = FileRanges.add(r, defcase.range());
		return r;
	}
}
// vals: stmt
class MatchCase(default: FilePoint, patterns: VstList<MatchPattern>, stmt: Stmt) {
	def range() -> FileRange { return FileRanges.add(patterns.range(), FileRanges.ofStmt(stmt)); }
}
// var(params)
class MatchPattern(expr: Expr, params: VstList<VarDecl>) {
	var variantCase: VstCaseMember;  // if this is a match on a variant case
	var val: Val;
	def decl() -> VstClass { return variantCase.decl; }
}
// continue;
class ContinueStmt(src: FileRange) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitContinue(this, env); }
	def range() -> FileRange { return src; }
}
// ;
class EmptyStmt(point: FilePoint) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitEmpty(this, env); }
	def range() -> FileRange { return point.rangeOf(1); }
}
// return expr;
class ReturnStmt(src: FileRange, expr: Expr) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitReturn(this, env); }
	def range() -> FileRange { return src; }
}
// base class of expressions
class Expr {
	var exactType: Type;
	var implicitType: Type;
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R;
	// range in the file covering the whole expression, e.g. >"e + e"<
	def range() -> FileRange;
	// point in the expression where execution happens, e.g. "e >+ e"
	def point() -> FilePoint { return range(); }
}
// (exprs)
class TupleExpr(exprs: VstList<Expr>) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitTuple(this, env); }
	def range() -> FileRange { return exprs.range(); }
}
// [exprs]
class ArrayExpr(exprs: VstList<Expr>) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitArray(this, env); }
	def range() -> FileRange { return exprs.range(); }
}
// var|literal
class VarExpr(expr: Expr, dot: FilePoint, ident: VstIdent<TypeRef>) extends Expr {
	var receiver: Expr;
	var varbind: VarBinding;

	def bind(r: Expr, b: VarBinding, t: Type) -> VarBinding {
		receiver = r;
		varbind = b;
		exactType = t;
		return b;
	}
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R {
		return v.visitVar(this, env);
	}
	def range() -> FileRange {
		if (expr != null) return FileRanges.add(FileRanges.ofExpr(expr), ident.range());
		return ident.range();
	}
	def point() -> FilePoint {
		if (dot != null) return dot;
		return ident.name;
	}
	def isAssignable() -> bool {
		match (varbind) {
			Local(decl): return !decl.isReadOnly;
			ObjectField(container, decl): return !decl.isReadOnly;
			ComponentField(decl): return !decl.isReadOnly;
			_: return false;
		}
	}
	def isLocal() -> bool {
		match (varbind) {
			Local: return true;
			_: return false;
		}
	}
}
// literal
class Literal extends Expr {
	def token: Token;
	var val: Val;
	new(token, val, t: Type) { exactType = t; }
	def range() -> FileRange { return token.range(); }
	def point() -> FilePoint { return token; }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R {
		return v.visitLiteral(this, env);
	}
}
// Binary|Decimal|Hex literals
class IntLiteral extends Literal {
	def lsuffix: bool;
	def usuffix: bool;
	new(token: Token, val: Val, t: Type, lsuffix, usuffix) super(token, val, t) { }
}
// 0b(0|1)*
class BinLiteral extends IntLiteral {
	def width: int;
	new(token: Token, val: Val, t: Type, lsuffix: bool, usuffix: bool, width) super(token, val, t, lsuffix, usuffix) { }
}
// [-](0...9)+
class DecLiteral extends IntLiteral {
	def negative: bool;
	new(token: Token, val: Val, t: Type, lsuffix: bool, usuffix: bool, negative) super(token, val, t, lsuffix, usuffix) { }
}
// 0x(0...9a...zA...Z)*
class HexLiteral extends IntLiteral {
	def width: int;
	new(token: Token, val: Val, t: Type, lsuffix: bool, usuffix: bool, width) super(token, val, t, lsuffix, usuffix) { }
}
// _
class ParamExpr(token: Token) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitParamExpr(this, env); }
	def range() -> FileRange { return token.range(); }
}
// x++|++x|x--|--x
class AutoExpr(token: Token, expr: Expr, infix: byte, post: bool) extends Expr {
	var op: Operator;
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitAutoExpr(this, env); }
	def range() -> FileRange { return FileRanges.add(FileRanges.ofExpr(expr), token.range()); }
}
// "string"
class StringExpr(token: Token, array: Array<byte>) extends Expr {
	var recordIndex: int;

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitString(this, env); }
	def range() -> FileRange { return token.range(); }
}
// func(args)
class AppExpr(func: Expr, args: TupleExpr) extends Expr {
	var boundMap: Array<int>;  // which expressions are bound for partial applications
	var target = func;
	var appbind: AppBinding;

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitApp(this, env); }
	def range() -> FileRange { return FileRanges.add(FileRanges.ofExpr(func), args.range()); }
	def point() -> FilePoint { return args.range(); }
	def isAssignable() -> bool {
		match (appbind) {
			ArrayElem: return true;
			_: return false;
		}
	}
}
// expr[arg]
class IndexExpr(expr: Expr, exprs: VstList<Expr>) extends Expr {
	var read: AppBinding.CallObjectMethod;
	var write: AppBinding.CallObjectMethod;
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitIndex(this, env); }
	def range() -> FileRange { return FileRanges.add(FileRanges.ofExpr(expr), exprs.range()); }
	def point() -> FilePoint { return exprs.range(); }
}
// !expr
class NotExpr(not: FilePoint, expr: Expr) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitNot(this, env); }
	def range() -> FileRange { return FileRanges.add(not, FileRanges.ofExpr(expr)); }
}
// ~expr
class BitwiseNegExpr(neg: FilePoint, expr: Expr) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitBitwiseNeg(this, env); }
	def range() -> FileRange { return FileRanges.add(neg, FileRanges.ofExpr(expr)); }
}
// expr [infix]= expr
class AssignExpr(target: Expr, infix: InfixOp, assign: FilePoint, expr: Expr) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitAssign(this, env); }
	def range() -> FileRange {
		if (target == null) return assign.rangeOf(1);
		var r = FileRanges.ofExpr(target);
		if (expr != null) r = FileRanges.add(r, FileRanges.ofExpr(expr));
		return r;
	}
	def point() -> FilePoint { return assign; }
}
// op
class InfixOp(token: Token, infix: byte, prec: byte, assign: bool) {
	var op: Operator;
}
// left op right
class BinOpExpr(left: Expr, op: InfixOp, right: Expr) extends Expr {
	def set(binop: Operator) -> BinOpExpr {
		op.op = binop;
		return this;
	}
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitBinOp(this, env); }
	def range() -> FileRange {
		if (left == null) return op.token.range();
		var r = FileRanges.ofExpr(left);
		if (right != null) r = FileRanges.add(r, FileRanges.ofExpr(right));
		return r;
	}
	def point() -> FilePoint { return op.token; }
}
// if(exprs)
class IfExpr(start: FilePoint, exprs: VstList<Expr>) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitIfExpr(this, env); }
	def range() -> FileRange { return FileRanges.add(start, exprs.range()); }
	def point() -> FilePoint { return exprs.range(); }
}
// The possible shapes that bindings can take for these expressions:
// "Type.name"
// "expr.name"
type VarBinding {
	case None;
	// read/write bindings
	case Local(decl: VarDecl);
	case ObjectField(container: Type, member: VstField);
	case ComponentField(member: VstField);
	// read-only bindings
	case Value(val: Val, vtype: Type);
	case Type(t: Type);
	case ObjectMethod(container: Type, member: VstMethod, typeArgs: TypeArgs);
	case ClassMethod(container: Type, member: VstMethod, typeArgs: TypeArgs);
	case ClassField(container: Type, member: VstField);
	case ClassNew(container: Type, member: VstNew, funcType: Type);
	case ComponentMethod(member: VstMethod, typeArgs: TypeArgs);
	case VariantCase(container: Type, member: VstCaseMember);
	case VariantField(container: Type, member: VstField);
	case EnumValue(member: VstCaseMember);
	case Inst(comp: Operator, facts: int);		// instantiate {comp}
	case Apply(comp: Operator, facts: int);		// apply {comp} to receiver
	case Partial(comp: Operator, facts: int);		// partially apply {comp} to receiver

	def none() -> bool { return this.tag == 0; }
	def ok() -> bool { return this.tag != 0; }
}
// The possible shapes that bindings can take for these expressions:
// "expr(expr*)"
// "expr(expr*) = expr"
// "expr.var(expr*)"
type AppBinding {
	case None;
	case ArrayElem(arrayType: Type);	// array(index)
	case CallClosure(t: Type);		// func(args)
	case CallComponentMethod(container: Type, member: VstMethod, typeArgs: TypeArgs);
	case CallObjectMethod(container: Type, member: VstMethod, typeArgs: TypeArgs);
	case CallClassMethod(container: Type, member: VstMethod, typeArgs: TypeArgs);
	case ClassNew(container: Type, member: VstNew);
	case Apply(comp: Operator, facts: int);
	case Partial(indexMap: Array<int>);	// func(args, _, args)

	def nullCheck() -> bool {
		match (this) {
			CallObjectMethod(container, member, typeArgs): {
				return container.typeCon.kind == V3Kind.CLASS;
			}
			_: return false;
		}
	}
}
// The result of looking up a member or an operator in a type or on a type.
type LookupResult {
	case None;
	case Value(vtype: Type, val: Val);
	case Inst(comp: Operator, typeParams: List<TypeParam>);
	case Partial(comp: Operator, typeParams: List<TypeParam>);  // partial application
	case Apply(comp: Operator, typeParams: List<TypeParam>, facts: int);
}
// Utility methods for dealing with file ranges
component FileRanges {
	def add(start: FilePoint, end: FileRange) -> FileRange {
		if (start == null) return end;
		if (end == null) {
			if (FileRange.?(start)) return FileRange.!(start);
			return start.rangeOf(0);
		}
		return FileRange.new(start.fileName, start.beginLine, start.beginColumn, end.endLine, end.endColumn);
	}
	def ofExpr(e: Expr) -> FileRange {
		if (e == null) return null;
		return e.range();
	}
	def ofStmt(s: Stmt) -> FileRange {
		if (s == null) return null;
		return s.range();
	}
}
// Operators that are treated as sugar and lowered immediately when generating SSA.
type VstOperator {
	case TypeCast;		// overloading resolved if possible
	case TypeQuery;		// overloading resolved if possible
	case NotEqual;		// desugared to !(a == b)

	case IntMixedEqual;	// desugared to multiple comparisons
	case IntMixedNotEqual;	// desugared to multiple comparisons
	case IntMixedLt;	// desugared to multiple comparisons
	case IntMixedLteq;	// desugared to multiple comparisons
	case IntGt;		// desugared to (b < a), may be mixed sign
	case IntGteq;		// desugared to (b <= a), may be mixed sign
	case IntBitwiseNeg;	// desugared to (-1 ^ a)

	case VariantGetName;	// desugared to ArrayGetElem(#names, VariantGetTag(x))

	case EnumGetParam(field: VstField);	// desugared to ArrayGetElem(#field, x)

	case EnumSetHas(vcase: VstCaseMember);	// desugared to (1 << k) & x != 0
	case EnumSetUnion;			// desugared to x | y
	case EnumSetIntersect;			// desugared to x & y
	case EnumSetSubtract;			// desugared to x & ~(x & y)
	case EnumSetSubset;			// desugared to x & y == x
	case EnumSetStrictSubset;
	case EnumSetSuperset;
	case EnumSetStrictSuperset;
}
