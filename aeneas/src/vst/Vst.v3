// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// the portion of the program represented as Vst syntax trees
class VstPortion(prog: Program) {
	var files: Array<VstFile>;
	var declList: List<Decl>;
	var classList: List<VstClass>;
	var componentList: List<VstComponent>;
	var numComponents: int;
	var numStrings: int;
	var mainMethod: VstMethod;

	def addDecl(decl: Decl) {
		declList = List<Decl>.new(decl, declList);
		if (VstClass.?(decl)) classList = List<VstClass>.new(VstClass.!(decl), classList);
		if (VstComponent.?(decl)) {
			var compDecl = VstComponent.!(decl);
			componentList = List<VstComponent>.new(compDecl, componentList);
			compDecl.recordIndex = numComponents++;
		}
	}
	def getComponents() -> List<VstComponent> {
		return Lists.reverse(componentList); // in-order list of components
	}
	def getClasses() -> List<VstClass> {
		return Lists.reverse(classList); // in-order list of classes
	}
}
// The result of parsing a file, including a line/offset map and declarations
class VstFile(fileName: string, ERROR: ErrorGen) {
	var input: Array<byte>;		// contents of file
	var lineEnds: Sequence<int>;	// line end indexes
	var decls: List<Decl>;		// all declarations in order
	var synthetic: VstComponent;	// declaration for synthesized component
}
// a list of T's with a source range and several utility methods
class VstList<T>(src: FileRange, list: List<T>) {
	private var len: int;
	private var array: Array<T>;

	def range() -> FileRange { return src; }
	def length() -> int {
		if (len == 0 && list != null) len = Lists.length(list);
		return len;
	}
	def apply(f: T -> void) { Lists.apply(list, f); }
	def asList() -> List<T> { return list; }
	def asArray() -> Array<T> {
		if (array == null) {
			array = Lists.toArray(list);
			len = array.length;
		}
		return array;
	}
	def mapList<R>(f: T -> R) -> List<R> { return Lists.map(list, f); }
	def mapArray<R>(f: T -> R) -> Array<R> { return Arrays.map(asArray(), f); }
}
// an identifier parameterized with T's
class VstIdent<T>(name: Token, params: VstList<T>) {
	def list() -> List<T> {
		if (params != null) return params.list;
		return null;
	}
	def range() -> FileRange {
		var src = name.range();
		if (params != null) return FileRanges.add(src, params.src);
		return src;
	}
}
// Any kind of declaration that has a name
class Decl(token: Token) {
	def name() -> string { return token.image; }
}
// Parsed parameter
class ParamDecl extends VarDecl {
	var member: VstField;
	var index: int;
	new(token: Token, tref: TypeRef) : super(token, tref, null) { } 
}
// Parsed compound declaration
class VstCompound extends Decl {
	def typeParams: List<TypeParam>;
	def params: VstList<ParamDecl>;
	def superclause: SuperClause;
	var members: List<VstMember>;
	var typeCon: TypeCon;
	var typeEnv: TypeEnv;
	var memberMap: Map<string, VstMember>;
	var declType: Type;
	var numFields: int;
	var numMethods: int;
	var constructor: VstNew;
	var isSynthetic: bool;
	var verifier: VstCompoundVerifier;

	new(name: Token, typeParams, params, superclause, members) : super(name) { }
	def getDeclaredType() -> Type {
		if (declType == null && typeCon != null) {
			declType = typeCon.create(Lists.map(typeParams, toType));
		}
		return declType;
	}
	def toType(typeParam: TypeParam) -> Type {
		return typeParam;
	}
	def getParams() -> List<ParamDecl> {
		return if(params != null, params.list);
	}
}
// Parsed class
class VstClass extends VstCompound {
	def superclass: TypeRef;
	new(name: Token, typeParams: List<TypeParam>, params: VstList<ParamDecl>, superclass, superclause: SuperClause, members: List<VstMember>) 
		: super(name, typeParams, params, superclause, members) { }
}
// Parsed component
class VstComponent extends VstCompound {
	var recordIndex: int;
	new(name: Token, members: List<VstMember>) : super(name, null, null, null, members) { }
}
// A member of a class or component
class VstMember extends Decl {
	def isPrivate: bool;
	var container: VstCompound;
	var index: int;

	new(isPrivate, name: Token) : super(name) { }

	def getType() -> Type;
	def render(buf: StringBuffer) -> StringBuffer {
		if (container != null && !container.isSynthetic) buf.puts(container.name()).putc('.');
		buf.puts(name());
		if (VstMethod.?(this)) buf.puts("()");
		return buf;
	}
}
// A method
class VstMethod extends VstMember {
	def typeParams: List<TypeParam>;
	var params: List<ParamDecl>;
	def rettype: TypeRef;
	def body: Stmt;

	var thisParam: ParamDecl;
	var typeEnv: TypeEnv;
	var root: VstMethod;
	var ftype: Type;
	var numNonSsa: int;
	var numParams: int;
	var numLoops: int;

	new(isPrivate: bool, name: Token, typeParams, params, rettype, body) : super(isPrivate, name) { }

	def getType() -> Type {
		if (ftype == null) {
			// XXX: refactor Lists.map(params, ParamDecl.vtype);
			var ptypes = Lists.map(params, TypeUtil.getParamType);
			var ptype = Tuple.newType(ptypes);
			ftype = Function.newType(ptype, rettype.getType());
		}
		return ftype;
	}
}

class VstNew extends VstMethod {
	var superclause: SuperClause;
	var memberinits: List<VstField>;
	var nontrivial: bool;
	new(name: Token, params: List<ParamDecl>, superclause, body: Stmt) : 
		super(false, name, null, params, TypeUtil.typeRefOf(Void.TYPE), body) {
		this.superclause = superclause;
	}
}

class VstField extends VstMember {
	def isReadOnly: bool;
	def tref: TypeRef;
	def init: Expr;
	var vtype: Type;
	var initOrder: int;
	var initEnv: MethodEnv;

	new(isPrivate: bool, isReadOnly, name: Token, tref, init) : super(isPrivate, name) { }
	def getType() -> Type { return vtype; }
}

class SuperClause {
	def point: FilePoint;
	def args: TupleExpr;
	var constructor: VstNew;
	new(point, args) { }
}

class VstVisitor<E, R> {
	def visitIf(stmt: IfStmt, env: E) -> R;
	def visitBlock(stmt: BlockStmt, env: E) -> R;
	def visitWhile(stmt: WhileStmt, env: E) -> R;
	def visitFor(stmt: ForStmt, env: E) -> R;
	def visitForeach(stmt: ForeachStmt, env: E) -> R;
	def visitLocal(stmt: LocalStmt, env: E) -> R;
	def visitBreak(stmt: BreakStmt, env: E) -> R;
	def visitContinue(stmt: ContinueStmt, env: E) -> R;
	def visitExpr(stmt: ExprStmt, env: E) -> R;
	def visitMatch(stmt: MatchStmt, env: E) -> R;
	def visitEmpty(stmt: EmptyStmt, env: E) -> R;
	def visitReturn(stmt: ReturnStmt, env: E) -> R;

	def visitTuple(expr: TupleExpr, env: E) -> R;
	def visitParamExpr(expr: ParamExpr, env: E) -> R;
	def visitAutoExpr(expr: AutoExpr, env: E) -> R;
	def visitArray(expr: ArrayExpr, env: E) -> R;
	def visitVar(expr: VarExpr, env: E) -> R;
	def visitString(expr: StringExpr, env: E) -> R;
	def visitApp(expr: AppExpr, env: E) -> R;
	def visitNot(expr: NotExpr, env: E) -> R;
	def visitAssign(expr: AssignExpr, env: E) -> R;
	def visitBinOp(expr: BinOpExpr, env: E) -> R;
	def visitIfExpr(expr: IfExpr, env: E) -> R;

	def visitValueBinding(expr: VarExpr, ref: ValueBinding, env: E) -> R;
	def visitLocalBinding(expr: VarExpr, ref: LocalBinding, env: E) -> R;
	def visitTypeBinding(expr: VarExpr, ref: TypeBinding, env: E) -> R;
	def visitMemberBinding(expr: VarExpr, ref: MemberBinding, env: E) -> R;
	def visitOtherBinding(expr: VarExpr, ref: OtherBinding, env: E) -> R;
}

class VarDecl extends Decl {
	def tref: TypeRef;
	def init: Expr;
	var vtype: Type;
	var isReadOnly: bool;
	var ssa: VstSsaVar;

	new(name: Token, tref, init) : super(name) { }
}
// base class of statements
class Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R;
	def range() -> FileRange;
}
// if (cond) tbranch; else fbranch
class IfStmt(start: FilePoint, cond: Expr, tbranch: Stmt, fbranch: Stmt) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitIf(this, env); }
	def range() -> FileRange {
		var src = FileRanges.add(start, FileRanges.ofStmt(tbranch));
		if (fbranch != null) src = FileRanges.add(src, FileRanges.ofStmt(fbranch));
		return src;
	}
}
// { stmts }
class BlockStmt(stmts: VstList<Stmt>) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitBlock(this, env); }
	def range() -> FileRange { return stmts.range(); }
}
// while(cond) body
class WhileStmt(start: FilePoint, cond: Expr, body: Stmt) extends Stmt {
	var loopNum: int;		// loop number, computed by verifier

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitWhile(this, env); }
	def range() -> FileRange { return FileRanges.add(start, FileRanges.ofStmt(body)); }
}
// for(varDecl; cond; update) body
class ForStmt(start: FilePoint, varDecl: VarDecl, cond: Expr, update: Expr, body: Stmt) extends Stmt {
	var loopNum: int;		// loop number, computed by verifier

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitFor(this, env); }
	def range() -> FileRange { return FileRanges.add(start, FileRanges.ofStmt(body)); }
}
// for(varDecl in expr) body
class ForeachStmt(start: FilePoint, varDecl: VarDecl, expr: Expr, body: Stmt) extends Stmt {
	var loopNum: int;	// loop number, computed by verifier
	var loopVar: VstSsaVar;	// loop control variable

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitForeach(this, env); }
	def range() -> FileRange { return FileRanges.add(start, FileRanges.ofStmt(body)); }
}
// var|def vars
class LocalStmt(start: FilePoint, vars: List<VarDecl>) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitLocal(this, env); }
	def range() -> FileRange { return start.rangeOf(3); } // TODO: include the end of the last variable
}
// break;
class BreakStmt(src: FileRange) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitBreak(this, env); }
	def range() -> FileRange { return src; }
}
// expr;
class ExprStmt(src: FileRange, expr: Expr) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitExpr(this, env); }
	def range() -> FileRange { return FileRanges.ofExpr(expr); }
}
// match(expr) cases else defcase
class MatchStmt(src: FilePoint, expr: Expr, cases: VstList<MatchCase>, defcase: MatchCase) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitMatch(this, env); }
	def range() -> FileRange {
		var r = FileRanges.add(src, cases.range());
		if (defcase != null) r = FileRanges.add(r, defcase.range());
		return r;
	}
}
// vals: stmt
class MatchCase(values: VstList<Expr>, stmt: Stmt) {
	var vals: List<Val>;

	def range() -> FileRange { return FileRanges.add(values.range(), FileRanges.ofStmt(stmt)); }
}
// continue;
class ContinueStmt(src: FileRange) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitContinue(this, env); }
	def range() -> FileRange { return src; }
}
// ;
class EmptyStmt(point: FilePoint) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitEmpty(this, env); }
	def range() -> FileRange { return point.rangeOf(1); }
}
// return expr;
class ReturnStmt(src: FileRange, expr: Expr) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitReturn(this, env); }
	def range() -> FileRange { return src; }
}
// base class of expressions
class Expr {
	var exactType: Type;
	var implicitType: Type;
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R;
	// range in the file covering the whole expression, e.g. >"e + e"<
	def range() -> FileRange;
	// point in the expression where execution happens, e.g. "e >+ e"
	def point() -> FilePoint { return range(); }
}
// (exprs)
class TupleExpr(exprs: VstList<Expr>) extends Expr {
	var tref: TypeRef;
	var operator: Operator;

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitTuple(this, env); }
	def range() -> FileRange { return exprs.range(); }
}
// [exprs]
class ArrayExpr(exprs: VstList<Expr>) extends Expr {
	var tref: TypeRef;
	var operator: Operator;

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitArray(this, env); }
	def range() -> FileRange { return exprs.range(); }
}
// var|literal
class VarExpr(expr: Expr, dot: FilePoint, ident: VstIdent<TypeRef>) extends Expr {
	var binding: Binding;

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R {
		if (binding != null) return binding.accept(v, this, env);
		else return v.visitVar(this, env);
	}
	def range() -> FileRange {
		if (expr != null) return FileRanges.add(FileRanges.ofExpr(expr), ident.range());
		return ident.range();
	}
	def point() -> FilePoint {
		if (dot != null) return dot;
		return ident.name;
	}
}
// _
class ParamExpr(token: Token) extends Expr {
	var ptype: Type;
	var index: int;

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitParamExpr(this, env); }
	def range() -> FileRange { return token.range(); }
}
// x++|++x|x--|--x
class AutoExpr(token: Token, expr: Expr, op: Operator, post: bool) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitAutoExpr(this, env); }
	def range() -> FileRange { return FileRanges.add(FileRanges.ofExpr(expr), token.range()); }
}
// "string"
class StringExpr(token: Token, array: Array<byte>) extends Expr {
	var recordIndex: int;

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitString(this, env); }
	def range() -> FileRange { return token.range(); }
}
// func(args)
class AppExpr(func: Expr, args: TupleExpr) extends Expr {
	var partial: List<ParamExpr>;

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitApp(this, env); }
	def range() -> FileRange { return FileRanges.add(FileRanges.ofExpr(func), args.range()); }
	def point() -> FilePoint { return args.range(); }
}
// !expr
class NotExpr(not: FilePoint, expr: Expr) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitNot(this, env); }
	def range() -> FileRange { return FileRanges.add(not, FileRanges.ofExpr(expr)); }
}
// expr = expr
class AssignExpr(target: Expr, assign: FilePoint, expr: Expr) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitAssign(this, env); }
	def range() -> FileRange {
		if (target == null) return assign.rangeOf(1);
		var r = FileRanges.ofExpr(target);
		if (expr != null) r = FileRanges.add(r, FileRanges.ofExpr(expr));
		return r;
	}
	def point() -> FilePoint { return assign; }
}
// left op right
class BinOpExpr(left: Expr, op: Token, right: Expr) extends Expr {
	var binop: Operator;

	def set(binop: Operator) -> BinOpExpr {
		this.binop = binop;
		return this;
	}
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitBinOp(this, env); }
	def range() -> FileRange {
		if (left == null) return op.range();
		var r = FileRanges.ofExpr(left);
		if (right != null) r = FileRanges.add(r, FileRanges.ofExpr(right));
		return r;
	}
	def point() -> FilePoint { return op; }
}
// if(exprs)
class IfExpr(start: FilePoint, exprs: VstList<Expr>) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitIfExpr(this, env); }
	def range() -> FileRange { return FileRanges.add(start, exprs.range()); }
	def point() -> FilePoint { return exprs.range(); }
}

class Binding {
	def kind: byte;
	var receiver: Expr;
	def boundType: Type;
	new(kind, receiver, boundType) { }
	def isAssignable() -> bool { return false; }
	def accept<E, R>(v: VstVisitor<E, R>, ve: VarExpr, env: E) -> R;
}

class ValueBinding extends Binding {
	def token: Token;
	def val: Val;
	new(token, val, vtype: Type) : super(VstBinding.VALUE, null, vtype) { }
	def accept<E, R>(v: VstVisitor<E, R>, ve: VarExpr, env: E) -> R { return v.visitValueBinding(ve, this, env); }
}

class LocalBinding(decl: VarDecl) extends Binding(VstBinding.LOCAL, null, decl.vtype) {
	def isAssignable() -> bool { return !decl.isReadOnly; }
	def accept<E, R>(v: VstVisitor<E, R>, ve: VarExpr, env: E) -> R { return v.visitLocalBinding(ve, this, env); }
}

class TypeBinding(typeRef: TypeRef) extends Binding(VstBinding.TYPE, null, typeRef.getType()) {
	def accept<E, R>(v: VstVisitor<E, R>, ve: VarExpr, env: E) -> R { return v.visitTypeBinding(ve, this, env); }
}

class MemberBinding extends Binding {
	def container: Type;
	def member: VstMember;
	var typeArgs: TypeArgs;
	def isWritable: bool;
	new(kind: byte, container, receiver: Expr, member, boundType: Type, isWritable) : super(kind, receiver, boundType) { }
	def isAssignable() -> bool { return isWritable; }
	def accept<E, R>(v: VstVisitor<E, R>, ve: VarExpr, env: E) -> R { return v.visitMemberBinding(ve, this, env); }
}

class OtherBinding extends Binding {
	def container: Type;
	def member: Member;
	new(receiver: Expr, container, member) : super(VstBinding.OTHER, receiver, member.memberType) { }
	def isAssignable() -> bool { return member.writable; }
	def accept<E, R>(v: VstVisitor<E, R>, ve: VarExpr, env: E) -> R { return v.visitOtherBinding(ve, this, env); }
	def genRead(receiver: SsaInstr, env: SsaBuilder) -> SsaInstr;
	def genWrite(receiver: SsaInstr, val: SsaInstr, env: SsaBuilder) -> SsaInstr;
	def genApply(receiver: SsaInstr, env: SsaBuilder, args: Array<SsaInstr>) -> SsaInstr;
}

// Utilities and constants related to bindings
component VstBinding {
	def LOCAL		= '\x00';
	def VALUE		= '\x01';
	def TYPE		= '\x02';
	def OBJECT_METHOD	= '\x03';
	def OBJECT_FIELD	= '\x04';
	def CLASS_METHOD	= '\x05';
	def CLASS_FIELD		= '\x06';
	def CLASS_NEW		= '\x07';
	def COMPONENT_METHOD	= '\x08';
	def COMPONENT_FIELD	= '\x09';
	def OTHER		= '\x0A';
}

// Utility methods for dealing with file ranges
component FileRanges {
	def add(start: FilePoint, end: FileRange) -> FileRange {
		if (start == null) return end;
		if (end == null) {
			if (FileRange.?(start)) return FileRange.!(start);
			return start.rangeOf(0);
		}
		return FileRange.new(start.fileName, start.beginLine, start.beginColumn, end.endLine, end.endColumn);
	}
	def ofExpr(e: Expr) -> FileRange {
		if (e == null) return null;
		return e.range();
	}
	def ofStmt(s: Stmt) -> FileRange {
		if (s == null) return null;
		return s.range();
	}
}
