// Copyright 2017 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Maps names to variable declarations.
def INITIAL = 8;
class SuperfastEnvironment {
	private var keys = Array<string>.new(INITIAL);
	private var vars = Array<VarDecl>.new(INITIAL);
	private var hash = Array<int>.new(INITIAL);
	private var next = Array<int>.new(INITIAL);
	private var table = Array<int>.new(INITIAL);
	private var count: int;

	new() { reset(); }
	def reset() {
		count = 0;
		var t = table;
		for (i < t.length) t[i] = -1;
	}
	def enterScope() -> int {
		return count;
	}
	def exitScope(prev: int) {
		// Remove entries back to front.
		var mask = keys.length - 1;
		for (i = count - 1; i >= prev; i--) {
			var hm = hash[i] & mask;
			table[hm] = next[i];
		}
		count = prev;
	}
	def lookupVar(name: string, limit: int) -> VarDecl {
		if (count == 0) return null; // PERF: empty
		if (count == 1 && limit == 0) { // PERF: only one key
			if (Strings.equal(name, keys[0])) return vars[0];
		}		
		// Search hash chains, starting at the head for {hash(name)}
		var mask = keys.length - 1;
		var h = Strings.hash(name), hm = h & mask;
		for (i = table[hm]; i >= limit; i = next[i]) {
			if (hash[i] == h) {
				if (Strings.equal(keys[i], name)) return vars[i];
			}
		}
		return null;
	}
	def bindVar(name: string, v: VarDecl) {
		// Insert a new entry at the end.
		if (count == keys.length) grow();
		var i = count++;
		var h = Strings.hash(name), hm = h & (table.length - 1);
		keys[i] = name;
		vars[i] = v;
		hash[i] = h;
		// Add to the next of the hash chain.
		next[i] = table[hm];
		table[hm] = i;
	}
	private def grow() {
		// Grow storage for internal arrays.
		var nlength = keys.length * 2;
		keys = Arrays.grow(keys, nlength);
		vars = Arrays.grow(vars, nlength);
		hash = Arrays.grow(hash, nlength);
		next = Array.new(nlength);
		// Rebuild the hash chains.
		var nt = Array<int>.new(nlength), ot = table;
		for (i < nt.length) nt[i] = -1;
		var c = count, mask = nlength - 1;
		for (i < c) {
			var h = hash[i], hm = h & mask;
			next[i] = nt[hm];
			nt[hm] = i;
		}
		table = nt;
	}
}
// The old environment uses a stack of HashMaps.
class OldEnvironment(verifier: VstCompoundVerifier) {
	private var envStack = Array<Map<string, VarDecl>>.new(3);
	private var envDepth = 0;
	def enterScope() {
		if (envDepth == envStack.length) envStack = Arrays.grow(envStack, envStack.length * 2);
		envStack[envDepth++] = null;
	}
	def exitScope() {
		envDepth--;
	}
	def bindVar(varDecl: VarDecl) {
		var map = envStack[envDepth - 1];
		if (map == null) {
			map = Strings.newMap();
			envStack[envDepth - 1] = map;
		} else if (map[varDecl.token.image] != null) {
			verifier.VarDeclError(varDecl, Strings.format1("variable \"%1\" redefined", varDecl.token.image));
		}
		map[varDecl.token.image] = varDecl;
		varDecl.ssa = VstSsaVar.new(); // XXX: move to VstSsaBuilder
	}
	def lookupVar(expr: VarExpr) -> VarDecl {
		var i = expr.ident, token = i.name, name = token.image;
		var binding: VarBinding;
		// lookup up a local variable or parameter
		for (j = envDepth - 1; j >= 0; j--) {
			var map = envStack[j];
			if (map != null) {
				var varDecl = map[name];
				if (varDecl != null) return varDecl;
			}
		}
		return null;
	}
}
// The new environment uses the superfast implementation.
class NewEnvironment(verifier: VstCompoundVerifier) {
	var stack = Array<int>.new(5);
	var depth = 0;
	var impl = SuperfastEnvironment.new();
	def enterScope() {
		if (depth == stack.length) stack = Arrays.grow(stack, stack.length * 2);
		var count = impl.enterScope();
		stack[depth++] = count;
	}
	def exitScope() {
		impl.exitScope(stack[--depth]);
	}
	def bindVar(varDecl: VarDecl) {
		var name = varDecl.token.image;
		if (impl.lookupVar(name, stack[depth - 1]) != null) {
			verifier.VarDeclError(varDecl, Strings.format1("variable \"%1\" redefined", varDecl.token.image));
		}
		impl.bindVar(name, varDecl);
		varDecl.ssa = VstSsaVar.new(); // XXX: move to VstSsaBuilder
	}
	def lookupVar(expr: VarExpr) -> VarDecl {
		return impl.lookupVar(expr.ident.name.image, 0);
	}
}
// What the new (reusable) environment will look like.
class VstEnvironment(verifier: VstCompoundVerifier) extends SuperfastEnvironment {
	var scopeStart = 0;
	def bindVarDecl(varDecl: VarDecl) {
		var name = varDecl.token.image;
		if (lookupVar(name, scopeStart) != null) {
			verifier.VarDeclError(varDecl, Strings.format1("variable \"%1\" redefined", varDecl.token.image));
		}
		bindVar(name, varDecl);
		varDecl.ssa = VstSsaVar.new(); // XXX: move to VstSsaBuilder
	}
}
