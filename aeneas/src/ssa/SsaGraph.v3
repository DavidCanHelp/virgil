// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Represents a graph of SSA code.
// Canonicalizes constants, contains parameters, etc.
class SsaGraph(params: Array<SsaParam>, returnType: Type) {
	def startBlock = SsaBlock.new();
	// XXX: add a list of non-primitive values to speed up applyVals() ?
	var valCache: PartialMap<(Type, Val), SsaValue>;
	var voidVal: SsaValue;
	var trueVal: SsaValue;
	var falseVal: SsaValue;
	var zeroVal: SsaValue;
	var oneVal: SsaValue;
	var twoVal: SsaValue;
	var fourVal: SsaValue;
	var markGen: int;		// marking generation

	def isMultiBlock() -> bool {
		return startBlock.succ.length > 0;
	}
	def intConst(v: int) -> SsaValue {
		match (v) {
			0: return zeroConst();
			1: return oneConst();
			2: return twoConst();
			4: return fourConst();
		}
		return getConst(Int.TYPE, Int.box(v), Facts.intFacts(v));
	}
	def boolConst(v: bool) -> SsaValue {
		return if(v, trueConst(), falseConst());
	}
	def trueConst() -> SsaValue {
		return if(trueVal != null, trueVal, trueVal = newSsaValue(Bool.TYPE, Bool.TRUE, Facts.V_NON_ZERO));
	}
	def falseConst() -> SsaValue {
		return if(falseVal != null, falseVal, falseVal = newSsaValue(Bool.TYPE, Bool.FALSE, Facts.V_ZERO));
	}
	def zeroConst() -> SsaValue {
		return if(zeroVal != null, zeroVal, zeroVal = newSsaValue(Int.TYPE, null, Facts.V_DEFAULT));
	}
	def oneConst() -> SsaValue {
		return if(oneVal != null, oneVal, oneVal = newSsaValue(Int.TYPE, Int.ONE, Facts.V_NON_ZERO | Facts.V_NON_NEGATIVE));
	}
	def twoConst() -> SsaValue {
		return if(twoVal != null, twoVal, twoVal = newSsaValue(Int.TYPE, Int.TWO, Facts.V_NON_ZERO | Facts.V_NON_NEGATIVE));
	}
	def fourConst() -> SsaValue {
		return if(fourVal != null, fourVal, fourVal = newSsaValue(Int.TYPE, Int.FOUR, Facts.V_NON_ZERO | Facts.V_NON_NEGATIVE));
	}
	def nullConst(t: Type) -> SsaValue {
		match (t.typeCon.kind) {
			V3Kind.BOOL: return falseConst();
			V3Kind.INT: return zeroConst();
			V3Kind.VOID: return nop();
		}
		return getConst(t, null, Facts.V_DEFAULT);
	}
	def valConst(t: Type, v: Val) -> SsaValue {
		if (v == null) return nullConst(t);
		if (Box<bool>.?(v)) return boolConst(Box<bool>.!(v).val);
		if (Box<int>.?(v)) return intConst(Box<int>.!(v).val);
		if (Record.?(v)) return getConst(Record.!(v).rtype, v, Facts.V_NON_ZERO);
		return getConst(t, v, 0);
	}
	def nop() -> SsaValue {
		return if(voidVal != null, voidVal, voidVal = newSsaValue(Void.TYPE, null, Facts.V_ZERO));
	}
	def bfBlocks() -> Array<SsaBlock> {
		var queue = Sequence<SsaBlock>.new().grow(10); // TUNABLE: queue size
		var mark = ++markGen;
		queue.add(startBlock);
		startBlock.mark = mark;
		// do breadth-first walk over all reachable blocks
		for (i < queue.length) {
			addSuccessors(queue.get(i), queue, mark);
		}
		for (i < queue.length) {
			queue.get(i).mark = 0;
		}
		return queue.extract();
	}
	def applyVals(f: ((Type, Val), SsaValue) -> void) {
		if (valCache != null) valCache.apply(f);
	}
	def addSuccessors(block: SsaBlock, queue: Sequence<SsaBlock>, mark: int) {
		for (e in block.succ) {
			var b = e.dest;
			if (b != null && b.mark != mark) {
				queue.add(b);
				b.mark = mark;
			}
		}
	}
	private def getConst(t: Type, v: Val, facts: int) -> SsaValue {
		if (valCache == null) {
			valCache = HashMap.new(hash, equal);
			var r = newSsaValue(t, v, facts);
			valCache.set((t, v), r);
			return r;
		} else {
			var r = valCache.get(t, v);
			if (r == null) {
				r = newSsaValue(t, v, facts);
				valCache.set((t, v), r);
			}
			return r;
		}
	}
	private def hash(t: Type, v: Val) -> int {
		return t.hash + Values.hash(v);
	}
	private def equal(a: (Type, Val), b: (Type, Val)) -> bool {
		return a.0 == b.0 && Values.equal(a.1, b.1);
	}
	private def newSsaValue(t: Type, v: Val, facts: int) -> SsaValue {
		var instr = SsaValue.new(t, v);
		instr.facts = facts;
		return instr;
	}
	def applyValues(f: SsaValue -> void) {
		if (voidVal != null) f(voidVal);
		if (trueVal != null) f(trueVal);
		if (falseVal != null) f(falseVal);
		if (zeroVal != null) f(zeroVal);
		if (oneVal != null) f(oneVal);
		if (twoVal != null) f(twoVal);
		if (fourVal != null) f(fourVal);
		if (valCache != null) valCache.apply(applyValue(f, _, _));
	}
	private def applyValue(f: SsaValue -> void, key: (Type, Val), i: SsaValue) {
		f(i);
	}
}
