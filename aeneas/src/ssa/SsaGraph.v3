// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def CACHE_SIZE = 7;
def VOID_ENTRY = SsaValueCacheEntry.new(0, Void.TYPE, null, Facts.V_ZERO);
def TRUE_ENTRY = SsaValueCacheEntry.new(1, Bool.TYPE, Bool.TRUE, Facts.V_NON_ZERO);
def FALSE_ENTRY = SsaValueCacheEntry.new(2, Bool.TYPE, Bool.FALSE, Facts.V_ZERO);
def ZERO_ENTRY = SsaValueCacheEntry.new(3, Int.TYPE, null, Facts.V_DEFAULT);
def ONE_ENTRY = SsaValueCacheEntry.new(4, Int.TYPE, Int.ONE, Facts.intFacts(1));
def TWO_ENTRY = SsaValueCacheEntry.new(5, Int.TYPE, Int.TWO, Facts.intFacts(2));
def FOUR_ENTRY = SsaValueCacheEntry.new(6, Int.TYPE, Int.FOUR, Facts.intFacts(4));

class SsaValueCacheEntry(index: byte, vtype: Type, val: Val, facts: int) {
	def get(graph: SsaGraph) -> SsaValue {
		var v: SsaValue;
		if (graph.values != null) {
			v = graph.values(index);
			if (v != null) return v;
		}
		return graph.newSsaValue(index, vtype, val, facts);
	}
}


// Represents a graph of SSA code.
// Canonicalizes constants, contains parameters, etc.
class SsaGraph(params: Array<SsaParam>, returnType: Type) {
	def startBlock = SsaBlock.new();
	// XXX: add a list of non-primitive values to speed up applyVals() ?
	var values: Array<SsaValue>;
	var valuesPos = CACHE_SIZE;
	var valueMap: HashMap<(Type, Val), int>;
	var markGen: int;		// marking generation

	def isMultiBlock() -> bool {
		return startBlock.succ.length > 0;
	}
	def intConst(v: int) -> SsaValue {
		match (v) {
			0: return ZERO_ENTRY.get(this);
			1: return ONE_ENTRY.get(this);
			2: return TWO_ENTRY.get(this);
			4: return FOUR_ENTRY.get(this);
		}
		return getConst(Int.TYPE, Int.box(v), Facts.intFacts(v));
	}
	def boolConst(v: bool) -> SsaValue {
		return if(v, trueConst(), falseConst());
	}
	def trueConst() -> SsaValue {
		return TRUE_ENTRY.get(this);
	}
	def falseConst() -> SsaValue {
		return FALSE_ENTRY.get(this);
	}
	def zeroConst() -> SsaValue {
		return ZERO_ENTRY.get(this);
	}
	def oneConst() -> SsaValue {
		return ONE_ENTRY.get(this);
	}
	def twoConst() -> SsaValue {
		return TWO_ENTRY.get(this);
	}
	def fourConst() -> SsaValue {
		return FOUR_ENTRY.get(this);
	}
	def nullConst(t: Type) -> SsaValue {
		match (t.typeCon.kind) {
			V3Kind.BOOL: return falseConst();
			V3Kind.INT: {
				if (t == Int.TYPE) return zeroConst();
				if (V3.asInt(t).width <= 32) return zeroConst();
				// XXX: long value ugliness
			}
			V3Kind.VOID: return nop();
		}
		return getConst(t, null, Facts.V_DEFAULT);
	}
	def valConst(t: Type, v: Val) -> SsaValue {
		if (v == null) return nullConst(t);
		if (Box<bool>.?(v)) return boolConst(Box<bool>.!(v).val);
		if (Box<int>.?(v)) return intConst(Box<int>.!(v).val);
		if (Record.?(v)) return getConst(Record.!(v).rtype, v, Facts.V_NON_ZERO);
		return getConst(t, v, 0);
	}
	def nop() -> SsaValue {
		return VOID_ENTRY.get(this);
	}
	def bfBlocks() -> Array<SsaBlock> {
		var queue = Vector<SsaBlock>.new().grow(10); // TUNABLE: queue size
		var mark = ++markGen;
		queue.add(startBlock);
		startBlock.mark = mark;
		// do breadth-first walk over all reachable blocks
		for (i < queue.length) {
			addSuccessors(queue.get(i), queue, mark);
		}
		for (i < queue.length) {
			queue.get(i).mark = 0;
		}
		return queue.extract();
	}
	def addSuccessors(block: SsaBlock, queue: Vector<SsaBlock>, mark: int) {
		for (e in block.succ) {
			var b = e.dest;
			if (b != null && b.mark != mark) {
				queue.add(b);
				b.mark = mark;
			}
		}
	}
	private def getConst(t: Type, v: Val, facts: int) -> SsaValue {
		if (valueMap != null) {
			// search using the hashmap if there is one.
			var index = valueMap.get(t, v);
			if (index >= 0) {
				var vi = values(index);
				if (vi != null) return vi;
			}
		} else if (values != null) {
			// linear search of existing values.
			for (i = CACHE_SIZE; i < values.length; i++) {
				var vi = values(i);
				if (vi != null && vi.vtype == t && Values.equal(vi.val, v)) return vi;
			}
		}
		return newSsaValue(valuesPos++, t, v, facts);
	}
	private def hash(t: Type, v: Val) -> int {
		return t.hash + Values.hash(v);
	}
	private def equal(a: (Type, Val), b: (Type, Val)) -> bool {
		return a.0 == b.0 && Values.equal(a.1, b.1);
	}
	def newSsaValue(index: int, t: Type, v: Val, facts: int) -> SsaValue {
		if (values == null) {
			// Allocate new values array.
			values = Array.new(CACHE_SIZE + 4);
		} else if (valuesPos == values.length) {
			// Overflow of values array.
			if (valueMap != null) {
				// Allocate hashmap on first grow.
				valueMap = HashMap.new(hash, equal);
				for (i < values.length) {
					var v = values(i);
					if (v != null) valueMap.set((v.vtype, v.val), i);
				}
			}
			values = Arrays.grow(values, values.length * 2);
		}
		if (valueMap != null) valueMap.set((t, v), index);
		var instr = SsaValue.new(t, v);
		instr.facts = facts;
		values(index) = instr;
		return instr;
	}
}
