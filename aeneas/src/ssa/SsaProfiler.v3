// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class SsaTreeProfiler extends TreeProfiler<SsaIntFrame> {
	def matcher: VstMatcher;

	new(compiler: Compiler, matcher) {
		compiler.ssaMon = onGen;
	}
	// instrument the entry instruction and each return instruction
	def onGen(memberRef: IrSpec) {
		var meth = memberRef.asMethod();
		if (!matcher.matches(meth.source)) return;
		var graph = meth.ssa;
		for (b in graph.bfBlocks(null)) {
			for (i = b.next; i != b; i = i.next) {
				match (i) {
					x: SsaReturn => SsaTreeProfilerRetProbe.new(this).insertBefore(x);
					x: SsaThrow => SsaTreeProfilerRetProbe.new(this).insertBefore(x);
					_ => ;
				}
			}
		}
		SsaTreeProfilerEntryProbe.new(this).insertBefore(graph.startBlock.next);
	}
}
private class SsaTreeProfilerEntryProbe(profiler: SsaTreeProfiler) extends SsaProbe {
	def fire(i: SsaInterpreter) {
		var time = System.ticksUs();
		var topFrame = i.frame;
		if (topFrame != profiler.curNode.frame) {
			profiler.onEntry(topFrame.spec.asMethod(), time);
		}
	}
	def dup() -> SsaTreeProfilerEntryProbe {
		return SsaTreeProfilerEntryProbe.new(profiler);
	}
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("tree-profile-call probe");
	}
}
private class SsaTreeProfilerRetProbe(profiler: SsaTreeProfiler) extends SsaProbe {
	def fire(i: SsaInterpreter) {
		profiler.onRet(System.ticksUs());
	}
	def dup() -> SsaTreeProfilerRetProbe {
		return SsaTreeProfilerRetProbe.new(profiler);
	}
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("tree-profile-return probe");
	}
}

