// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Ssa items that can be placed into a block's linked list, including the
// basic block itself, instructions in the block, and the end.
class SsaLink {
	def uid: int = UID.next++;	// unique identification number
	var prev: SsaLink;
	var next: SsaLink;
	var mark: int = -1;		// fast mapping of instr->int
	var facts: int;			// computed dataflow facts
	def clearMark() { this.mark = -1; }
	def checkFact(mask: int) -> bool { return (facts & mask) == mask; }
	def setFact(mask: int) -> SsaLink { facts = facts | mask; return this; }
	def insertBefore(t: SsaLink) {
		var p = t.prev;
		if (p != null) {
			p.next = this;
			this.prev = p;
		}
		t.prev = this;
		next = t;
	}
	def remove() {
		if (prev != null) prev.next = next;
		if (next != null) next.prev = prev;
		prev = next = null;
	}
}
// An instruction that produces a value, including dataflow facts and usages
class SsaInstr extends SsaLink {
	var inputs: Array<SsaDfEdge>;	// inputs to this instruction, if any
	var useList: SsaDfEdge;		// list of uses of this instruction
	var instrVal: SsaInstr;		// fast mapping of instr->instr

	// constructor allocates and initializes dataflow edges
	new(a: Array<SsaInstr>) {
		setInputs(a);
	}
	// transform an array of instructions into dataflow edges
	def setInputs(a: Array<SsaInstr>) {
		if (inputs != null) kill(); // kill previous edges
		if (a != null && a.length > 0) {
			// initialize dataflow edges
			var d = Array<SsaDfEdge>.new(a.length);
			for (i < d.length) {
				d(i) = SsaDfEdge.new(this, a(i));
			}
			inputs = d;
		} else {
			inputs = Ssa.NO_DF_EDGES;
		}
	}
	// replace this instruction with the specified instruction in all uses
	def replace(replacement: SsaInstr) {
		if (replacement == this) return; // nothing to do
		while (useList != null) {
			// update() has the side-effect of removing the use from this useList
			useList.update(replacement);
		}
	}
	// kill this instruction and remove it from the use lists of each input
	def kill() {
		for (j < inputs.length) inputs(j).update(null);
	}
	def input0() -> SsaInstr { return inputs(0).dest; }
	def input1() -> SsaInstr { return inputs(1).dest; }
	def opcode() -> int { return -1; }
	def getType() -> Type;
	def unbox<T>() -> T {
		var d: T, val = SsaValue.!(this).val;
		return if(val == null, d, Box<T>.!(val).val);
	}
	def setFact(mask: int) -> SsaInstr { facts = facts | mask; return this; }
}
// Representation of a dataflow edge
class SsaDfEdge extends Edge<SsaInstr> {
	new(src: SsaInstr, dst: SsaInstr) super(src, dst) { }
	def getListHead(dest: SsaInstr) -> SsaDfEdge { return dest.useList; }
	def setListHead(dest: SsaInstr, e: Edge<SsaInstr>) { dest.useList = SsaDfEdge.!(e); }
	def isOnlyEdge() -> bool { return next == null && dest.useList == this; }
	def getDest() -> SsaInstr { return dest; }
}
// Representation of a control flow edge
class SsaCfEdge extends Edge<SsaBlock> {
	new(src: SsaBlock, dst: SsaBlock) super(src, dst) { }
	def getListHead(dest: SsaBlock) -> Edge<SsaBlock> { return dest.predList; }
	def setListHead(dest: SsaBlock, e: Edge<SsaBlock>) { dest.predList = SsaCfEdge.!(e); }
	def isOnlyEdge() -> bool { return next == null && dest.predList == this; }
}
// A parameter to this function
class SsaParam(index: int, vtype: Type) extends SsaInstr(null) {
	def getType() -> Type { return vtype; }
}
// An application of an operator
class SsaApplyOp extends SsaInstr {
	def source: Source;
	def op: Operator;
	new(source, op, a: Array<SsaInstr>) super(a) { }
	def opcode() -> int { return op.opcode; }
	def getType() -> Type { return op.resultType; }
}
// A constant value, such as int #0
class SsaValue(vtype: Type, val: Val) extends SsaInstr(null) {
	def getType() -> Type { return vtype; }
}
// A phi, representing a merge in the dataflow
class SsaPhi extends SsaInstr {
	def vtype: Type;
	def block: SsaBlock;
	new(vtype, block, a: Array<SsaInstr>) super(a) { }
	def getType() -> Type { return vtype; }
}
// State for phis in a basic block
class SsaPhis(block: SsaBlock) {
	def phiInstrs = Vector<SsaPhi>.new();
	def phiEdges = Vector<SsaCfEdge>.new();

	def newPhi(t: Type, args: Array<SsaInstr>) -> SsaPhi {
		if (args.length != phiEdges.length) return V3.fail("number of values for phi doesn\'t make edge count");
		var phi = SsaPhi.new(t, block, args);
		phiInstrs.add(phi);
		return phi;
	}
}
// A basic block
class SsaBlock extends SsaLink {
	var phis: SsaPhis;
	var succ: Array<SsaCfEdge> = Ssa.NO_CF_EDGES;
	var predList: SsaCfEdge;
	new() {
		next = this;
		prev = this;
	}
	def pred() -> Edge<SsaBlock> { return predList; }
	def newEdgeTo(succ: SsaBlock) -> SsaCfEdge { return SsaCfEdge.new(this, succ); }
	def lastSucc() -> SsaCfEdge { return succ(succ.length - 1); }
	def prepend(i: SsaInstr) {
		i.insertBefore(next);
	}
	def append(i: SsaLink) {
		i.insertBefore(if(SsaEnd.?(prev), prev, this));
	}
	def appendN(i: SsaLink) {
		if (i == null) return;
		var last = this.prev;
		last.next = i;
		i.prev = last;
		last = i;
		while (last.next != null) last = last.next;
		last.next = this;
		this.prev = last;
	}
	def end() -> SsaEnd {
		return if(SsaEnd.?(prev), SsaEnd.!(prev));
	}
	def empty() -> bool {
		return next == this || SsaEnd.?(next);
	}
	def countDown(limit: int) -> int {
		var i = next;
		while (limit-- >= 0) {
			if (i == this) return limit;
			i = i.next;
		}
		return -1;
	}
	def count() -> int {
		var c = 0;
		for (i = next; i != this; i = i.next) c++;
		return c;
	}
}
// The endpoint of a block
class SsaEnd extends SsaInstr {
	def block: SsaBlock;
	new(block, a: Array<SsaInstr>) super(a) { }
	def getType() -> Type { return Void.TYPE; }
}
// A throw of an exception
class SsaThrow extends SsaEnd {
	def source: Source;
	def exception: string;
	new(source, block: SsaBlock, exception) super(block, null) { }
}
// A return of values from a method
class SsaReturn extends SsaEnd {
	new(block: SsaBlock, a: Array<SsaInstr>) super(block, a) { }
}
// A two-way branch on a boolean.
class SsaIf extends SsaEnd {
	new(block: SsaBlock, cond: SsaInstr) super(block, [cond]) { }
	def trueBlock() -> SsaBlock { return block.succ(0).dest; }
	def falseBlock() -> SsaBlock { return block.succ(1).dest; }
	def findSucc(v: Val) -> SsaCfEdge { return block.succ(if(Bool.unbox(v), 0, 1)); }
}
// A table-based switch statement.
class SsaSwitch extends SsaEnd {
	def keyType: Type;
	def minValue: int;
	def maxValue: int;
	new(block: SsaBlock, keyType, minValue, maxValue, cond: SsaInstr) super(block, [cond]) { }
	def findSucc(v: Val) -> SsaCfEdge {
		var iv = Int.unbox(v);
		if (iv < minValue || iv > maxValue) return block.succ(block.succ.length - 1);
		return block.succ(iv - minValue);
	}
	def default() -> SsaCfEdge { return block.succ(block.succ.length - 1); }
	def size() -> int { return block.succ.length; }
}
// A goto
class SsaGoto extends SsaEnd {
	new(block: SsaBlock) super(block, null) { }
	def target() -> SsaBlock { return block.succ(0).dest; }
}
// Utility methods for dealing with the SSA representation
component Ssa {
	def NO_INSTRS: Array<SsaInstr> = [];
	def NO_DF_EDGES: Array<SsaDfEdge> = [];
	def NO_CF_EDGES: Array<SsaCfEdge> = [];
	def TRUE_ARRAY: Array<Val> = [Bool.TRUE];
	def NULL_ARRAY: Array<Val> = [null];

	def newMap<T>() -> PartialMap<SsaInstr, T> {
		return HashMap<SsaInstr, T>.new(SsaInstr.uid, SsaInstr.==);
	}
	def newBlockMap<T>() -> PartialMap<SsaBlock, T> {
		return HashMap<SsaBlock, T>.new(SsaBlock.uid, SsaBlock.==);
	}
	def isTrueConst(i: SsaInstr) -> bool {
		return SsaValue.?(i) && Bool.unbox(SsaValue.!(i).val);
	}
	def isFalseConst(i: SsaInstr) -> bool {
		return SsaValue.?(i) && !Bool.unbox(SsaValue.!(i).val);
	}
	def inputs(x: SsaInstr) -> Array<SsaInstr> {
		var r = Array<SsaInstr>.new(x.inputs.length);
		for (i < r.length) r(i) = x.inputs(i).dest;
		return r;
	}
	// find the edge number of an input edge in the list of edges
	def findIncomingPhiEdge(p: SsaPhis, edge: SsaCfEdge, context: SsaContext) -> int {
		for (j < p.phiEdges.length) {
			if (p.phiEdges.get(j) == edge) return j;
		}
		context.fail(Strings.format2("no input phi edge for successor B%1 -> B%2", edge.src.uid, edge.dest.uid));
		return 0;
	}
}
