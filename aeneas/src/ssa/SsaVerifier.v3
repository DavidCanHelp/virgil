// Copyright 2016 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class SsaGraphVerifier(context: SsaContext) {
	def verifyBlock(block: SsaBlock) {
		context.block = block;

		// Verify that if the block is empty, it points to itself in a cycle.
		if (block.next == block) {
			check(block.prev == block, "block.next == block but block.prev != block", block);
			return;
		}
		// Otherwise, check the last instruction is an end.
		check(SsaEnd.?(block.prev), "block.prev @%1 is not an SsaEnd", block.prev);
		// Gather the instructions in the block.
		var mark = context.graph.markGen++;
		var vector = Vector<SsaLink>.new();
		for (i: SsaLink = block; true; i = i.next) {
			check(i != null, "null link in block", i);
			if (i == null) break;
			if (i.mark >= mark) {
				check(i == block, "block head should complete cycle, instead @%1 did", i);
				break;
			}
			i.mark = context.graph.markGen++;
			vector.add(i);
		}
		// Verify the forward and backward directions of the links.
		for (i < vector.length) {
			var instr = vector.get(i), prev: SsaLink;
			if (i > 0) prev = vector.get(i - 1);
			else prev = vector.get(vector.length - 1);
			check(prev == instr.prev, "backward link integrity @%1", instr);
			check(prev.next == instr, "forward link integrity @%1", prev);
		}
		// Verify the dataflow references direction.
		for (i < vector.length) {
			var instr = vector.get(i);
			var inputs: Array<SsaDfEdge>;
			if (SsaInstr.?(instr)) inputs = SsaInstr.!(instr).inputs;
			else if (SsaEnd.?(instr)) inputs = SsaEnd.!(instr).inputs;
			else inputs = [];
			for (x in inputs) {
				check(x.dest.mark < instr.mark, "dataflow edge direction", instr);
			}
		}
	}
	def check(cond: bool, msg: string, i: SsaLink) {
		var p = SsaPrinter.new(context.prog);
		p.printBlock(context.block);
		if (!cond) context.fail1(msg, if(i == null, -1, i.uid));
	}
}