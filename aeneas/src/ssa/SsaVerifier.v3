// Copyright 2016 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def newMap<T>() -> HashMap<SsaLink, T> {
	return HashMap<SsaLink, T>.new(SsaLink.uid, SsaLink.==);
}
class SsaGraphVerifier(prog: Program, graph: SsaGraph) {
	def context = SsaContext.new(null, prog);
	def seen = newMap<bool>();
	def blocks = Vector<SsaBlock>.new();
	def instrs = Vector<SsaLink>.new();
	def marks = newMap<int>();
	var markGen = 1;
	var allowCriticalEdges = true;

	def verify() {
		context.graph = graph;
		// Mark constants.
		if (graph.values != null) {
			for (v in graph.values) {
				if (v != null) {
					instrs.put(v);
					marks[v] = instrs.length;
				}
			}
		}
		// Mark parameters.
		for (p in graph.params) checkAndMark(p);

		// Traverse blocks in breadth-first order.
		var seen = newMap<bool>();
		seen[graph.startBlock] = true;
		blocks.put(graph.startBlock);
		for (i = 0; i < blocks.length; i++) {
			var block = blocks[i];
			verifyBlock(block);
			for (s in block.succs()) {
				var d = s.dest;
				if (seen[d]) continue;
				seen[d] = true;
				blocks.put(d);
			}
		}

		// Check that all links point to marked nodes.
		for (j < instrs.length) {
			var i = instrs[j];
			var inputs = Ssa.NO_DF_EDGES;
			if (SsaInstr.?(i)) inputs = SsaInstr.!(i).inputs;
			for (e in inputs) {
				check(marks[e.dest] > 0, "instr @%d references unreachable input", i);
			}
		}

		// TODO: quality warnings: check for references from dead nodes to live nodes.
		if (false) for (j < instrs.length) {
			var i = instrs[j];
			if (!SsaInstr.?(i)) continue;
			for (l: Edge<SsaInstr> = SsaInstr.!(i).useList; l != null; l = l.next) {
				check(marks[l.src] == 0, "instr @%d used by dead instruction", i);
			}
		}
	}
	def checkAndMark(i: SsaLink) {
		check(!i.facts.O_KILLED, "@%d has been marked as killed", i);
		check(marks[i] == 0, "@%d is already marked", i);
		instrs.put(i);
		marks[i] = instrs.length;
	}
	def verifyBlock(block: SsaBlock) {
		context.block = block;
		checkAndMark(block);

		// Verify that no predecessors are null.
		for (p in block.preds) {
			check(p != null, "null predecessor", block);
			check(p.dest == block, "predecessor has wrong destination", block);
		}
		// Verify that if the block is empty, it points to itself in a cycle.
		if (block.next == block) {
			check(block.prev == block, "block.next == block but block.prev != block", block);
			return;
		}
		// Otherwise, check the last instruction is an end.
		check(SsaEnd.?(block.prev), "block.prev @%d is not an SsaEnd", block.prev);
		// Gather the instructions in the block.
		var start = instrs.length;
		for (i: SsaLink = block; true; i = i.next) {
			check(i != null, "null link in block", i);
			if (i == null) break;
			if (marks[i] > 0) {
				check(i == block, "block head should complete cycle, instead @%d did", i);
				break;
			}
			checkAndMark(i);
		}
		// Verify the forward and backward directions of the links.
		for (i = start; i < instrs.length; i++) {
			var instr = instrs[i], prev: SsaLink;
			if (i > start) prev = instrs[i - 1];
			else prev = instrs[instrs.length - 1];
			check(prev == instr.prev, "backward link integrity @%d", instr);
			check(prev.next == instr, "forward link integrity @%d", prev);
		}
		// Verify the instructions in the block.
		var nonphi = false;
		for (i = start; i < instrs.length; i++) {
			match (instrs[i]) {
				x: SsaPhi => {
					check(!nonphi, "phi @%d is preceded by non-phi instruction", x);
					verifyPhi(block, x);
				}
				x: SsaInstr => {
					verifyInstr(x);
					nonphi = true;
				}
				x: SsaEnd => {
					verifyEnd(x);
					check(i == instrs.length - 1, "end @%d is in middle of block", x);
					nonphi = true;
				}
				_ => nonphi = true;
			}
		}
		// Verify the control edges.
		var end = block.end();
		if (end == null) {
			context.fail1("no end found for block #%d", block.uid);
			return;
		}
		for (s in end.succs) {
			check(s.dest != null, "control edge has null destination", block);
			var found = false;
			for (i < s.dest.preds.length) {
				var p = s.dest.preds[i];
				if (p == s) {
					found = true;
					check(i == s.desti, "control edge at wrong index in #%d.preds", s.dest);
					break;
				}
				if (!allowCriticalEdges) {
					check(end.succs.length <= 1 || s.dest.preds.length <= 1, "critical edge found ->#%d", s.dest);
				}
			}
			check(found, "control edge not found in #%d.preds", s.dest);
		}
	}
	def verifyPhi(block: SsaBlock, phi: SsaPhi) {
		check(phi.inputs.length == block.preds.length, "phi @%d has the wrong number of inputs", phi);
	}
	def verifyInstr(instr: SsaInstr) {
		for (x in instr.inputs) {
			check(marks[x.dest] < marks[instr], "input does not dominate @%d", instr);
		}
	}
	def verifyEnd(end: SsaEnd) {
		for (x in end.inputs) {
			check(marks[x.dest] < marks[end], "input does not dominate @%d", end);
		}
	}
	def check(cond: bool, msg: string, i: SsaLink) {
		if (cond) return;
		var p = SsaPrinter.new();
		if (context.block != null) p.printBlock(context.block);
		context.fail1(msg, if(i == null, -1, i.uid));
	}
}
