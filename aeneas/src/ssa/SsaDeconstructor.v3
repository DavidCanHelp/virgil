// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A helper class in deconstructing SSA form into virtual registers
class SsaDeconstructor {
	def context: SsaContext;
	def allocate: (SsaInstr, Type) -> int; // XXX: manage virtual registers internally?
	def moveIR: (Type, SsaInstr, int) -> void;
	def moveRR: (Type, int, int) -> void;
	var mapped: List<SsaInstr>;
	new(context, allocate, moveIR, moveRR) { }
	// generate moves as necessary from phi inputs to phis
	def genSsaMoves(block: SsaBlock) {
		var valMoves: List<(SsaInstr, SsaPhi)>;
		var tmpMap: PartialMap<SsaInstr, int>;
		// iterate over successor edges
		var succs = block.succ, max = succs.length;
		for (i < max) {
			var edge = succs(i), p = edge.dest.phis;
			if (p == null) continue; // no phis
			var edgeNum = Ssa.findIncomingPhiEdge(p, edge, context);
			// iterate over the phis in the successor
			for (j < p.phiInstrs.length) {
				var phi = p.phiInstrs.get(j), val = phi.inputs(edgeNum).dest;
				if (phi == val) continue; // no-op move
				if (tmpMap == null) tmpMap = Ssa.newMap();
				tmpMap.set(phi, -1);
				valMoves = List.new((val, phi), valMoves);
			}
		}
		// add temporary moves
		if (tmpMap != null) {
			for (l = valMoves; l != null; l = l.tail) {
				var val = l.head.0;
				if (tmpMap.get(val) < 0) { // using a phi that has been assigned to
					var t = val.getType(), tmp = allocate(null, t);
					moveIR(t, val, tmp);
					tmpMap.set(val, tmp);
				}
			}
		}
		// add phi moves
		for (l = valMoves; l != null; l = l.tail) {
			var val = l.head.0;
			if (tmpMap != null && tmpMap.has(val)) moveRR(val.getType(), tmpMap.get(val), mapReg(l.head.1));
			else moveIR(val.getType(), val, mapReg(l.head.1));
		}
	}
	// map an instruction to a virtual register, allocating one if necessary
	def mapReg(i: SsaInstr) -> int {
		if (i.mark >= 0) return i.mark;
		return set(i, allocate(i, i.getType()));
	}
	// set the virtual register associated with an instruction
	def set(i: SsaInstr, vreg: int) -> int {
		if (i.mark < 0) mapped = List.new(i, mapped);
		return i.mark = vreg;
	}
	// clear all Vreg mappings
	def clear() {
		Lists.apply(mapped, SsaInstr.clearMark);
		mapped = null;
	}
}
