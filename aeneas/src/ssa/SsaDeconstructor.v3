// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A helper class in deconstructing SSA form into virtual registers
class SsaDeconstructor {
	def context: SsaContext;
	def allocate: (SsaInstr, Type) -> u31; // XXX: manage virtual registers internally?
	def moveIR: (Type, SsaInstr, int) -> void;
	def moveRR: (Type, int, int) -> void;
	def marker = SsaInternalMarker.new();

	new(context, allocate, moveIR, moveRR) { }

	def reset() {
		marker.reset(context.graph);
	}

	// generate moves as necessary from phi inputs to phis
	def genSsaMoves(block: SsaBlock) {
		var valMoves: List<(SsaInstr, SsaPhi)>;
		var tmpMap: PartialMap<SsaInstr, int>;
		// iterate over successor edges
		var succs = block.succs(), max = succs.length;
		for (i < max) {
			var edge = succs[i], next = edge.dest.next;
			while (true) {
				if (!SsaPhi.?(next)) break;
				var phi = SsaPhi.!(next), edgeNum = edge.desti;
				next = phi.next;
				var val = phi.inputs[edgeNum].dest;
				if (phi == val) continue; // no-op move
				if (tmpMap == null) tmpMap = Ssa.newMap();
				tmpMap[phi] = -1;
				valMoves = List.new((val, phi), valMoves);
			}
		}
		// add temporary moves
		if (tmpMap != null) {
			for (l = valMoves; l != null; l = l.tail) {
				var val = l.head.0;
				if (tmpMap[val] < 0) { // using a phi that has been assigned to
					var t = val.getType(), tmp = allocate(null, t);
					moveIR(t, val, tmp);
					tmpMap[val] = tmp;
				}
			}
		}
		// add phi moves
		for (l = valMoves; l != null; l = l.tail) {
			var val = l.head.0;
			if (tmpMap != null && tmpMap.has(val)) moveRR(val.getType(), tmpMap[val], mapReg(l.head.1));
			else moveIR(val.getType(), val, mapReg(l.head.1));
		}
	}
	// map an instruction to a virtual register, allocating one if necessary
	def mapReg(i: SsaInstr) -> int {
		var mark = marker.getMark(i);
		if (mark < 0) {
			mark = allocate(i, i.getType());
			marker.setMark(i, u31.!(mark));
		}
		return mark;
	}
	def setReg(i: SsaInstr, reg: u31) {
		marker.setMark(i, reg);
	}
}
