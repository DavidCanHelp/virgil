// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Performs optimizations on loops.
// 1. eliminate rendundant bounds checks for induction variables.
// 2. XXX eliminate redundant null checks.
// 3. XXX loop rotation (move loop test condition to end of loop)
// 4. XXX loop-invariant code motion (move code out of loops)
// 5. XXX loop peeling (copy first iteration of loop)
// 6. XXX induction variable simplifications
// 7. XXX remove useless loops
class SsaLoopOptimizer {
	def graph: SsaGraph;
	def header: SsaBlock;	// start of loop (ends with loop condition)
	def loopBody: SsaBlock; // first block of loop body
	def loopEnd: SsaBlock;  // first block outside of loop
	def headerMark = ++graph.markGen;
	def bodyMark = ++graph.markGen;
	def gvn = Gvn.new(graph);
	new(graph, header, loopBody, loopEnd) {}
	def optimize() {
		// XXX: optimize phis in header first
		// XXX: pull loop-invariant code out of header
		var c = findLoopControl(), cond = c.0, condTrue = c.1;
		var ivs = findLinearIvs();
		for (l = ivs; l != null; l = l.tail) {
			var iv = l.head;
			if (cond != null) tryBoundingIv(iv, cond, condTrue);
			if (iv.boundOp != null) optBoundedIv(iv);
		}
	}
	def tryBoundingIv(iv: SsaLinearIv, cond: SsaInstr, condTrue: bool) {
		var opcode = cond.opcode();
		if (opcode == Opcode.IntLt.tag ||
		    opcode == Opcode.IntLteq.tag ||
		    opcode == Opcode.IntGt.tag ||
		    opcode == Opcode.IntGteq.tag) {
			if (cond.input0() == iv.phi) boundIvInequality(iv, SsaApplyOp.!(cond).op, condTrue, cond.input1());
			if (cond.input1() == iv.phi) boundIvInequality(iv, V3Op.commute(SsaApplyOp.!(cond).op), condTrue, cond.input0());
		}
	}
	def boundIvInequality(iv: SsaLinearIv, op: Operator, condTrue: bool, bound: SsaInstr) {
		if (condTrue) iv.boundOp = op;
		else iv.boundOp = V3Op.inverse(op);
		iv.bound = bound;
	}
	// identify the control condition of the loop
	def findLoopControl() -> (SsaInstr, bool) {
		var e = header.end();
		if (SsaIf.?(e)) {
			var sw = SsaIf.!(e);
			if (sw.trueBlock() == loopBody) return (sw.input0(), true);
			if (sw.falseBlock() == loopBody) return (sw.input0(), false);
		}
		return (null, false);
	}
	// find simple induction variables of the form v = phi(v, v + N, v + N)
	def findLinearIvs() -> List<SsaLinearIv> {
		var list: List<SsaLinearIv>;
		if (header.phis == null) return null;
		var phis = header.phis.phiInstrs;
		for (i < phis.length) {
			list = matchIv(phis.get(i), list);
		}
		return list;
	}
	// find a linear induction variable
	def matchIv(phi: SsaPhi, prev: List<SsaLinearIv>) -> List<SsaLinearIv> {
		var init: SsaInstr, step: Box<int>;
		for (i in phi.inputs) {
			var pi = i.dest;
			if (hasInput(pi, phi)) {
				// check increment matches in each induction
				var n = gvn.matchInc(pi);
				if (n == null) step = null;
				else if (step == null) step = n;
				else if (step.val != n.val) return prev;
			} else if (init != null) {
				if (pi != null) return prev;
			} else {
				init = pi;
			}
		}
		if (init == null || step == null) return prev;
		return List.new(SsaLinearIv.new(phi, init, step.val), prev);
	}
	// check whether x has i as one of its inputs
	def hasInput(x: SsaInstr, i: SsaInstr) -> bool {
		for (xi in x.inputs) {
			if (xi.dest == i) return true;
		}
		return false;
	}
	// optimize uses of a bounded linear induction variable
	def optBoundedIv(iv: SsaLinearIv) {
		if (iv.step > 0) {
			// XXX: what about uses before the condition is checked?
			iv.phi.setFact(iv.init.facts & iv.bound.facts & Facts.V_NON_NEGATIVE);
		}
		markHeader(headerMark); // XXX: only mark header once?
		for (u: Edge<SsaInstr> = iv.phi.useList; u != null; u = u.next) {
			var use = u.src;
			if (use.mark != headerMark) optBoundedIvUse(iv, use);
		}
		markHeader(-1);
	}
	def optBoundedIvUse(iv: SsaLinearIv, use: SsaInstr) {
		var opcode = use.opcode();
		// XXX: optimize inequalities, especially MachOp.opUgteq
		if (opcode == Opcode.BoundsCheck.tag ||
		    opcode == Opcode.ArrayGetElem.tag ||
		    opcode == Opcode.ArraySetElem.tag) {
			if (use.input1() == iv.phi) optBoundsCheck(iv, use, use.input0());
		}
	}
	def optBoundsCheck(iv: SsaLinearIv, use: SsaInstr, array: SsaInstr) {
		match(iv.boundOp.opcode) {
			IntLt: {
				if (iv.step < 0) return; // must be counting up
				if (!iv.init.checkFact(Facts.V_NON_NEGATIVE)) return; // init must be >= 0
				if (gvn.lteqArrayLength(iv.bound, array)) use.setFact(Facts.O_SAFE_BOUNDS);
			}
			IntGteq, IntGt: {
				if (iv.step > 0) return; // must be counting down
				if (!iv.bound.checkFact(Facts.V_NON_NEGATIVE)) return; // bound must be >= 0
				if (gvn.ltArrayLength(iv.init, array)) use.setFact(Facts.O_SAFE_BOUNDS);
			}
			_: ;
		}
	}
	// mark instructions in header, not in body or after loop end
	def markHeader(mark: int) {
		markBlocks(header, [loopBody, loopEnd], mark);
	}
	// mark instructions in body, not in header or after loop end
	def markBody(mark: int) {
		markBlocks(loopBody, [header, loopEnd], mark);
	}
	// mark all the blocks up to but not including [end] with the given mark
	def markBlocks(block: SsaBlock, end: Array<SsaBlock>, mark: int) {
		for (e in end) if (block == e) return; // reached an end block
		if (block.mark == mark) return; // already marked
		block.mark = mark;
		markBlockInstrs(block, mark); // mark phis and instructions block
		for (s in block.succ) markBlocks(s.dest, end, mark); // recursively mark successors
	}
	// mark all the instructions in a block with a given mark
	def markBlockInstrs(block: SsaBlock, mark: int) {
		for (i = block.next; i != block; i = i.next) i.mark = mark;
		if (block.phis == null) return;
		var phis = block.phis.phiInstrs;
		for (i < phis.length) phis.get(i).mark = mark;
	}
}
// an induction variable "x = I + N * i" with optional bound of the form
// x <op> bound, e.g. x < a.length, x >= 3, etc
class SsaLinearIv {
	def phi: SsaPhi;	// x
	def init: SsaInstr;	// I
	def step: int;		// N
	var boundOp: Operator;	// operator of bound (e.g. V3Op.opIntLt)
	var bound: SsaInstr;	// value of bound
	new(phi, init, step) {}
}
