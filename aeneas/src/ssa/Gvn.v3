// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Support for global value numbering of a given SSA graph, and provides
// subroutines for other optimization phases that match on SSA nodes.
class Gvn(graph: SsaGraph) {
	// check if {a} and {b} are gvn-equivalent
	def equal(a: SsaInstr, b: SsaInstr) -> bool {
		if (a == b) return true;
		if ((a.facts & b.facts & Facts.O_PURE) == 0) return false;
		if (SsaApplyOp.?(a)) {
			var aa = SsaApplyOp.!(a);
			if (SsaApplyOp.?(b)) return equalApply(aa, SsaApplyOp.!(b));
		}
		return false;
	}
	// check if {a} and {b} are a load of the same constant component field
	def sameGlobal(a: SsaInstr, b: SsaInstr) -> bool {
		if (a.opcode() != V3Opcode.ComponentGetField) return false;
		if (!a.checkFact(Facts.F_VALUE)) return false;
		if (b.opcode() != V3Opcode.ComponentGetField) return false;
		return SsaApplyOp.!(a).op.equals(SsaApplyOp.!(b).op);
	}
	def equalApply(a: SsaApplyOp, b: SsaApplyOp) -> bool {
		if (!a.op.equals(b.op)) return false;
		if (a.inputs.length != b.inputs.length) return false;
		for (i < a.inputs.length) {
			if (!equal(a.inputs(i).dest, b.inputs(i).dest)) return false;
		}
		return true;
		// XXX: commutative relations
		// XXX: initialized component fields
		// XXX: strip away TypeSubsume
		// XXX: ArrayGetLength(ArrayAlloc(v))
	}
	// check if {index} is always less than or equal to the length of {array}
	def lteqArrayLength(index: SsaInstr, array: SsaInstr) -> bool {
		return eqArrayLength(index, array) || ltArrayLength(index, array);
	}
	// check if {index} is always less than the length of {array}
	def ltArrayLength(index: SsaInstr, array: SsaInstr) -> bool {
		var inc = matchInc(index);  // XXX: long constants
		if (inc != null && inc.val < 0) { // match x - K
			// check if x is equal to the array length
			var len = index.input0();
			if (SsaValue.?(len)) len = index.input1();
			return eqArrayLength(len, array);
		}
		return false;
	}
	// check if {index} is always equal to the length of {array}
	def eqArrayLength(index: SsaInstr, array: SsaInstr) -> bool {
		if (index.opcode() == V3Opcode.ArrayGetLength) {
			var index_array = index.input0();
			return equal(index_array, array) || sameGlobal(index_array, array);
		}
		if (array.opcode() == V3Opcode.ArrayAlloc) return equal(array.input0(), index);
		if (SsaValue.?(array)) {
			var a = SsaValue.!(array).val;
			if (a != null) {
				var i = matchInt(index);
				return i != null && i.val == Record.!(a).values.length;
			}
		}
		return false;
	}
	// match an add(x, K), add(K, x) or sub(x, K) and return K
	def matchInc(e: SsaInstr) -> Box<int> {
		match (e.opcode()) {
			V3Opcode.IntAdd: {
				if (SsaValue.?(e.input0())) return matchInt(e.input0());
				if (SsaValue.?(e.input1())) return matchInt(e.input1());
			}
			V3Opcode.IntSub: {
				if (SsaValue.?(e.input1())) {
					var i = matchInt(e.input1());
					if (i != null) return Int.box(0 - i.val);
				}
			}
		}
		return null;
	}
	// match an integer constant or a long constant that fits into an integer
	def matchInt(i: SsaInstr) -> Box<int> { // XXX: move this utility elsewhere
		var x = SsaValue.!(i).val;
		if (x == null) return Box.new(0);
		if (Box<int>.?(x)) return Box<int>.!(x);
		if (Box<(int, int)>.?(x)) {
			var v = Box<(int, int)>.!(x).val;
			if (v.0 == 0 || (v.0 == -1 && v.1 < 0)) return Box.new(v.1);
		}
		return null;
	}
}
