// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Translates SSA-form IR into IC code, which is more suitable for interpretation.
class SsaIcGen(context: SsaContext) {
	def blockInfo = LazyMap<SsaBlock, SsaIcBlock>.new(SsaBlock.uid, SsaBlock.==, SsaIcBlock.new);
	def code = Vector<IcInstr>.new();
	var ssaDecon: SsaDeconstructor;
	var switches: List<(Array<SsaCfEdge>, IcSwitch)>;
	var branches: List<(SsaBlock, IcBranch)>;
	var stack = Stack<SsaIcBlock>.new();
	var numRegs: int;
	var voidReg: int;

	new() {
		ssaDecon = SsaDeconstructor.new(context, allocReg, moveIR, moveRR);
	}
	def generate() -> IcMethod {
		assignParams();
		assignValues();
		stack.push(blockInfo.get(context.graph.startBlock));
		while (!stack.empty()) {
			var info = stack.pop();
			if (!info.generated) genBlock(info);
		}
		Lists.apply(branches, patchBranch);
		Lists.apply(switches, patchSwitch);
		ssaDecon.clear();
		return IcMethod.new(context.spec, code.extract(), context.graph.params.length, numRegs);
	}
	def patchBranch(target: SsaBlock, br: IcBranch) {
		// patch the target of the goto
		br.target = blockInfo.get(target).codeStart;
	}
	def patchSwitch(s: Array<SsaCfEdge>, m: IcSwitch) {
		// patch the targets of the match
		for (i < m.targets.length) {
			m.targets(i) = blockInfo.get(s(i).dest).codeStart;
		}
	}
	def genInstr(block: SsaBlock, i: SsaInstr) {
		// generate code for a single instruction
		if (SsaApplyOp.?(i)) {
			// generate an apply instruction
			var apply = SsaApplyOp.!(i), args = Arrays.map(apply.inputs, genRef);
			if (apply.op.opcode == Opcode.TypeSubsume) {
				i.mark = args(0); // subsume is a no-op in ic code; map to same register
			} else {
				code.add(Ic.newApply(ssaDecon.mapReg(i), apply.op, args, apply.source));
			}
		} else if (SsaIf.?(i)) {
			// generate a switch
			var ii = SsaIf.!(i);
			genIf(genRef(ii.inputs(0)), block);
		} else if (SsaGoto.?(i)) {
			// generate a goto
			genJump(blockInfo.get(SsaGoto.!(i).target()));
		} else if (SsaReturn.?(i)) {
			// generate a return
			var ret = SsaReturn.!(i), args = Arrays.map(ret.inputs, genRef);
			if (args.length == 0) code.add(IcRet.new(voidReg));
			else if (args.length == 1) code.add(IcRet.new(args(0)));
			else {
				var reg = newTmp();
				code.add(Ic.newApply(reg, V3Op.newTupleCreate(context.spec.getReturnType()), args, null));
				code.add(IcRet.new(reg));
			}
		} else if (SsaThrow.?(i)) {
			// generate a throw
			var t = SsaThrow.!(i);
			code.add(IcThrow.new(t.exception, t.source));
		} else if (SsaSwitch.?(i)) {
			var sw = SsaSwitch.!(i);
			var m = IcSwitch.new(genRef(i.inputs(0)), sw.minValue, Array<int>.new(block.succ.length));
			code.add(m);
			switches = List.new((block.succ, m), switches);
			for (i = block.succ.length - 1; i >= 0; i--) {
				var s = block.succ(i), tInfo = blockInfo.get(s.dest);
				if (!tInfo.generated) push(s);
			}
		}
		// don't generate code for params, constants, or phis
	}
	def genIf(key: int, block: SsaBlock) {
		var tInfo = blockInfo.get(block.succ(0).dest);
		var fInfo = blockInfo.get(block.succ(1).dest);
		if (tInfo.generated) {
			// generate a simple branch to true target
			code.add(IcBranch.new(false, true, key).set(tInfo.codeStart));
			genJump(fInfo);
		} else {
			// generate a simple branch to false target
			var br = IcBranch.new(false, false, key);
			branches = List.new((fInfo.block, br), branches);
			push(block.succ(1));
			code.add(br);
			genJump(tInfo);
		}
	}
	def genJump(info: SsaIcBlock) {
		if (info.generated) {
			// code has already been generated for this block, just go there
			code.add(IcBranch.new(true, true, 0).set(info.codeStart));
		} else {
			// don't generate code, push the block so it is generated next
			stack.push(info);
			info.queued = true;
		}
	}
	def genBlock(b: SsaIcBlock) {
		// mark start of code and mark block
		b.codeStart = code.length;
		b.generated = true;
		b.queued = true;
		var block = b.block;
		for (i = block.next; i != block; i = i.next) {
			if (SsaEnd.?(i)) ssaDecon.genSsaMoves(block);
			if (SsaInstr.?(i)) genInstr(block, SsaInstr.!(i));
		}
	}
	def genRef(ref: SsaDfEdge) -> int {
		return ssaDecon.mapReg(ref.dest);
	}
	def newTmp() -> int {
		return numRegs++;
	}
	def allocReg(i: SsaInstr, t: Type) -> int {
		return numRegs++;
	}
	def assignParams() {
		// assign registers for parameters
		for (p in context.graph.params) {
			ssaDecon.set(p, p.index);
		}
		numRegs = numRegs + context.graph.params.length;
	}
	def assignValues() {
		// assign registers for all (global) constants
		voidReg = newTmp();
		code.add(IcValue.new(voidReg, null));
		if (context.graph.values != null) {
			for (v in context.graph.values) {
				if (v != null) assignVal(v);
			}
		}
	}
	def assignVal(i: SsaValue) {
		if (i.val == null) {
			// just use the voidReg
			ssaDecon.set(i, voidReg);
			return;
		}
		// assign a register for a constant
		ssaDecon.set(i, numRegs);
		// generate code to load the value at the very beginning
		code.add(IcValue.new(numRegs++, i.val));
	}
	def moveIR(t: Type, i: SsaInstr, dst: int) {
		code.add(IcMove.new(dst, ssaDecon.mapReg(i)));
	}
	def moveRR(t: Type, src: int, dst: int) {
		code.add(IcMove.new(dst, src));
	}
	def push(block: SsaCfEdge) {
		var info = blockInfo.get(block.dest);
		if (!info.queued) {
			stack.push(info);
			info.queued = true;
		}
	}
}
// information about a block that is being translated to Ic code
class SsaIcBlock(block: SsaBlock) {
	var queued: bool;
	var generated: bool;
	var codeStart: int;
}
