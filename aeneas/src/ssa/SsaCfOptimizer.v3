// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Performs control flow optimizations on a completed SsaGraph.
class SsaCfOptimizer(context: SsaContext) {
	def mark = ++context.graph.markGen;
	def queue = Vector<SsaBlock>.new();

	def optimize() {
		// visit all the blocks of the graph
		// 1. reduce phis with identical inputs
		// 2. merge straight-line blocks (may introduce critical edges)
		// 3. optimize diamond-if patterns arising from if(a && b) patterns
		// 4. XXX iteratively reduce/fold code
		// 5. XXX collapse if-chains into switches, esp if(T.?(e)) ...
		// 6. XXX remove useless branches
		queueBlock(context.graph.startBlock);
		for (i < queue.length) optBlock(queue.get(i));
	}
	def queueBlock(block: SsaBlock) {
		if (block.mark < mark) {
			block.mark = mark;
			queue.add(block);
		}
	}
	def optBlock(block: SsaBlock) {
		if (block.checkFact(Facts.O_KILLED)) return;
		if (block.phis != null) {
			optPhis(block);
		}
		for (s in block.succ) {
			while (optEdge(s)) ; // optimize each edge
		}
		var end = block.end();
		if (SsaIf.?(end)) {
			optIf(SsaIf.!(end));
		}
		for (s in block.succ) {
			if (s.dest != null) queueBlock(s.dest);
		}
	}
	def optPhis(block: SsaBlock) {
		// attempt to optimize the phis in this block
		var phis = block.phis.phiInstrs;
		for (i = 0; i < phis.length; ()) {
			if (optPhi(phis.get(i))) phis.removeAt(i);
			else i++;
		}
		if (phis.length == 0) block.phis = null; // no phis left
	}
	def optPhi(phi: SsaPhi) -> bool {
		var inputs = phi.inputs;
		if (inputs.length == 0) return true; // phi has no remaining inputs
		var i0 = inputs(0).dest;
		if (i0 == null || phi.useList == null) {
			// one of the inputs is dead, or the phi is unused
			killInstr(phi);
			return true;
		}
		var facts = i0.facts, reduce = true;
		for (i in inputs) {
			var d = i.dest;
			if (d != phi) {
				facts = facts & d.facts;
				if (d != i0) reduce = false;
			}
		}
		if (reduce) {
			phi.replace(i0); // the phi can be replaced by its (one) input
			return true;
		} else {
			phi.setFact(facts); // phi facts are the intersection of all input facts
			return false;
		}
	}
	def optIf(sw: SsaIf) {
		var e = sw.inputs(0), v = e.dest;
		if (SsaApplyOp.?(v)) {
			var cond = SsaApplyOp.!(v);
			if (cond.op.opcode == V3Opcode.TypeQuery) {
				// propagate type query success on true successor
				var queryTypes = cond.op.typeArgs;
				applyDominatorOptForInput0(cond.input0(), sw.block.succ(0), optFoldCast(_, queryTypes));
			} else if (cond.op.opcode == V3Opcode.Equal) {
				tryPropagatingCmpNonZero(cond, sw.block.succ(0), sw.block.succ(1));
				tryBuildingSwitch(sw, cond.op.typeArgs(0), cond);
			} else if (cond.op.opcode == V3Opcode.NotEqual) {
				tryPropagatingCmpNonZero(cond, sw.block.succ(1), sw.block.succ(0));
			}
			return;
		}

		// match and simplify a control flow pattern where the input to a switch
		// is the merge of a previous branch; e.g. this occurs in if(a && b)
		if (!e.isOnlyEdge()) return; // condition is used elsewhere as well
		if (!sw.block.empty()) return; // block is not empty
		if (!SsaPhi.?(v)) return; // branch condition is not a phi
		var phi = SsaPhi.!(v);
		if (phi.block != sw.block) return; // phi is in a different block
		if (sw.block.phis.phiInstrs.length > 1) return; // other phis in this block

		// search for and remove inputs to the phi that are constants
		var ivec = Vector<SsaInstr>.new(), evec = Vector<SsaCfEdge>.new();
		var inputs = phi.inputs, edges = sw.block.phis.phiEdges;
		for (i < inputs.length) {
			var input = inputs(i), edge = edges.get(i);
			if (SsaValue.?(input.dest)) {
				// redirect incoming edge to outgoing edge
				var succ = sw.findSucc(SsaValue.!(input.dest).val);
				edge.update(succ.dest);
				addEdge(succ, edge);
				optEdge(edge);
				input.update(null); // kill the use of the value
			} else {
				ivec.add(input.dest);
				evec.add(edge);
			}
		}

		if (ivec.length == phi.inputs.length) return; // no updates
		if (ivec.length == 0) return killBlock(sw.block); // no predecessors remain
		if (ivec.length == 1) {
			e.update(ivec.get(0)); // only one input remains
			sw.block.phis = null;  // phi is now dead
			optEdge(sw.block.predList);
			return;
		}
		// more than one input to this phi is remaining, build a new phi
		var newPhis = SsaPhis.new(sw.block);
		newPhis.phiEdges.addN(evec.extract());
		var newPhi = newPhis.newPhi(phi.getType(), ivec.extract());
		e.update(newPhi);
		sw.block.phis = newPhis;
	}
	def tryPropagatingCmpNonZero(cmp: SsaApplyOp, eqEdge: SsaCfEdge, neEdge: SsaCfEdge) {
		var left = cmp.input0(), right = cmp.input1();
		if (left.checkFact(Facts.V_NON_ZERO)) {
			return applyDominatorOptForInput0(right, eqEdge, optNullCheck);
		}
		if (left.checkFact(Facts.V_ZERO)) {
			return applyDominatorOptForInput0(right, neEdge, optNullCheck);
		}
		if (right.checkFact(Facts.V_NON_ZERO)) {
			return applyDominatorOptForInput0(left, eqEdge, optNullCheck);
		}
		if (right.checkFact(Facts.V_ZERO)) {
			return applyDominatorOptForInput0(left, neEdge, optNullCheck);
		}
	}
	def matchSwitchCmp(key: SsaInstr, block: SsaBlock) -> SwitchCmp {
		// XXX: match V3Opcode.NotEqual, commute constants, etc.
		var end = block.end();
		if (!SsaIf.?(end)) return null;
		var i = SsaIf.!(end);
		var edge = i.inputs(0);
		if (!edge.isOnlyEdge()) return null;
		var cmp = edge.dest;
		if (cmp.opcode() != V3Opcode.Equal) return null;
		if (cmp.inputs(0).dest != key) return null;
		var r = cmp.inputs(1).dest;
		if (!SsaValue.?(r)) return null;
		return SwitchCmp.new(Int.unbox(SsaValue.!(r).val), cmp, i, i.block.succ(0), i.block.succ(1));
	}
	def verifySwitchCmpBlock(cmp: SwitchCmp, block: SsaBlock) -> bool {
		for (i = block.next; i != block; i = i.next) {
			if (i != cmp.cmp && i != cmp.end) return false;
		}
		return true;
	}
	def tryBuildingSwitch(sw: SsaIf, t: Type, cmp: SsaInstr) {
		if (!context.compiler.EmitSwitch) return;
		if (!V3.isInt32(t)) return;
		var key = cmp.input0();
		var cmp = matchSwitchCmp(key, sw.block);
		if (cmp == null) return;
		var vec = Vector<SwitchCmp>.new();
		vec.add(cmp);
		// add switch case candidates to the list.
		while (true) {
			if (!cmp.fSucc.isOnlyEdge()) break;
			var block = cmp.fSucc.dest;
			cmp = matchSwitchCmp(key, block);
			if (cmp == null) break;
			if (!verifySwitchCmpBlock(cmp, block)) break;
			vec.add(cmp);
		}

		// determine if building a table would be profitable.
		if (vec.length < 4) return;  // not enough cases.
		var min = Int.MAX_VALUE, max = Int.MIN_VALUE;
		for (i < vec.length) {
			var v = vec.get(i).val;
			if (v < min) min = v;
			if (v > max) max = v;
		}
		var diff = u32.!(max - min) + 1;
		if (diff > vec.length * 2) return; // table would be less than 50% full.
		if (diff > int.max) return;  // table would be too large.
		var size = int.!(diff);
		var table = Array<SsaCfEdge>.new(size);
		// build dispatch table.
		for (i = vec.length - 1; i >= 0; i--) {
			var c = vec.get(i), index = c.val - min;
			var p = table(index);
			if (p != null) removeEdge(p);
			table(index) = c.tSucc;
		}
		// build array of successor edges.
		var succ = Array<SsaCfEdge>.new(size + 1);
		var dmerge: SsaBlock;
		for (i < size) {
			var e = table(i);
			if (e == null) {  // hole in the table; go to default
				if (dmerge == null) dmerge = SsaBlock.new();
				succ(i) = SsaCfEdge.new(sw.block, dmerge);
			} else {
				succ(i) = SsaCfEdge.new(sw.block, e.dest);
				replaceEdge(e, succ(i));
			}
		}
		// set up default edge.
		var defedge = vec.get(vec.length - 1).fSucc;
		if (dmerge != null) {
			succ(size) = SsaCfEdge.new(sw.block, dmerge);
			var goto = SsaCfEdge.new(dmerge, defedge.dest);
			dmerge.append(SsaGoto.new(dmerge));
			dmerge.succ = [goto];
			replaceEdge(defedge, goto);
		} else {
			succ(size) = SsaCfEdge.new(sw.block, defedge.dest);
			replaceEdge(defedge, succ(size));
		}

		// Remove the ifs and comparisons from the end of the blocks.
		for (i < vec.length) {
			var c = vec.get(i);
			c.end.kill();
			c.end.remove();
			c.cmp.kill();
			c.cmp.remove();
		}

		// Replace the first if with a switch.
		sw.block.append(SsaSwitch.new(sw.block, key.getType(), min, max, key));
		sw.block.succ = succ;
	}
	def killBlock(block: SsaBlock) {
		if (block.checkFact(Facts.O_KILLED)) return;
		block.setFact(Facts.O_KILLED);
		// recursively kill this block and its successor blocks
		for (i = block.next; SsaInstr.?(i); i = i.next) {
			killInstr(SsaInstr.!(i));
		}
		// kill the phi instructions in this block
		if (block.phis != null) {
			var phis = block.phis.phiInstrs;
			for (i < phis.length) {
				killInstr(phis.get(i));
			}
		}
		// kill the outgoing control flow edges
		for (s in block.succ) {
			var d = s.dest;
			if (d != null) {
				removeEdge(s);
				if (d.predList == null) killBlock(d);
			}
		}
	}
	def killInstr(i: SsaInstr) {
		i.kill();
		i.setFact(Facts.O_KILLED);
		// TODO: recursively kill any the inputs that are now dead
	}
	def optEdge(edge: SsaCfEdge) -> bool {
		var src = edge.src, dest = edge.dest;
		if (dest == null) return false; // edge may have already been optimized away
		if (!edge.isOnlyEdge()) return false; // destination has more than one predecessor
		if (src.succ.length > 1) {
			// try to skip the destination block
			if (dest.succ.length != 1) return false;	// doesn't end with a goto
			if (!dest.empty()) return false;		// is not empty
			var destdest = dest.succ(0).dest;
			if (destdest.phis != null) return false;	// has phis
			simplifyPhis(dest);
			edge.update(destdest);				// redirect edge
			killBlock(dest);				// try to kill the destination
			return true;
		}
		// Kill the end of the previous block
		var end = src.end();
		end.kill();
		end.remove();

		// Move destination instructions into source
		simplifyPhis(dest);
		end = dest.end();
		end.next = null;
		end.remove();
		src.appendN(dest.next);
		// Create a new end for the source
		if (SsaGoto.?(end)) {
			var oedge = dest.succ(0), nedge = SsaCfEdge.new(src, oedge.dest);
			src.succ = [nedge];
			src.append(SsaGoto.new(src));
			replaceEdge(oedge, nedge);
		} else if (SsaThrow.?(end)) {
			var throw = SsaThrow.!(end);
			src.succ = [];
			src.append(SsaThrow.new(throw.source, src, throw.exception));
		} else if (SsaReturn.?(end)) {
			var ret = SsaReturn.!(end);
			src.succ = [];
			src.append(SsaReturn.new(src, Ssa.inputs(ret)));
		} else if (SsaIf.?(end)) {
			var sw = SsaIf.!(end);
			src.succ = Array.new(dest.succ.length);
			for (i < src.succ.length) {
				var oedge = dest.succ(i), nedge = SsaCfEdge.new(src, oedge.dest);
				src.succ(i) = nedge;
				replaceEdge(oedge, nedge);
			}
			src.append(SsaIf.new(src, sw.input0()));
		}
		end.kill();
		edge.update(null);
		return true;
	}
	def addEdge(abEdge: SsaCfEdge, xbEdge: SsaCfEdge) {
		// add a new edge X -> B, using A's input to each phi as X's input
		var dest = abEdge.dest, phis = dest.phis;
		if (dest.phis != null) {
			var index = Ssa.findIncomingPhiEdge(phis, abEdge, context);
			phis.phiEdges.add(xbEdge);
			for (i < phis.phiInstrs.length) {
				// for each phi, add a new input corresponding to this edge
				var phi = phis.phiInstrs.get(i);
				var input = phi.inputs(index).dest;
				phi.inputs = Arrays.append(SsaDfEdge.new(phi, input), phi.inputs);
			}
		}
	}
	def replaceEdge(abEdge: SsaCfEdge, xbEdge: SsaCfEdge) {
		// replace the old edge A -> B with a new edge X -> B
		if (xbEdge.dest == null || abEdge.dest == null) {
			context.fail1("replaceEdge #%1 with null destination", xbEdge.src.uid);
			return;
		}
		var dest = abEdge.dest, phis = dest.phis;
		if (phis != null) {
			var index = Ssa.findIncomingPhiEdge(phis, abEdge, context);
			phis.phiEdges.set(index, xbEdge);
		}
		xbEdge.update(dest);
		abEdge.update(null);
	}
	def removeEdge(edge: SsaCfEdge) {
		if (edge.dest == null) return;
		var phis = edge.dest.phis;
		if (phis != null) {
			// remove the edge from the incoming phi edges
			var index = Ssa.findIncomingPhiEdge(phis, edge, context);
			phis.phiEdges.remove(edge);
			for (i < phis.phiInstrs.length) {
				// for each phi, remove the corresponding input
				var phi = phis.phiInstrs.get(i), inputs = phi.inputs;
				inputs(index).update(null); // kill the DF edge
				Arrays.removeIndex(inputs, index); // compact input array
				phi.inputs = Arrays.range(phi.inputs, 0, inputs.length - 1);
			}
		}
		edge.update(null);
	}
	def simplifyPhis(block: SsaBlock) {
		if (block.phis != null) {
			// replace all phis with their first input value
			var phis = block.phis.phiInstrs;
			for (i < phis.length) {
				var phi = phis.get(i);
				phi.replace(phi.input0());
				killInstr(phi);
			}
			block.phis = null;
		}
	}
	// fold away a type cast if dominated by a type query that evaluates to true
	def optFoldCast(i: SsaInstr, queryTypes: Array<Type>) -> SsaInstr {
		if (i.opcode() == V3Opcode.TypeCast) {
			// fold away a type cast
			var cast = SsaApplyOp.!(i), castTypes = cast.op.typeArgs;
			if (TypeSystem.isSubtype(queryTypes(1), castTypes(1))) {
				return SsaApplyOp.new(cast.source, V3Op.newTypeSubsume(castTypes(0), castTypes(1)), [i.input0()]);
			} else {
				i.setFact(Facts.O_NO_NULL_CHECK);
			}
		}
		return optNullCheck(i);
	}
	// eliminate a null check on this instruction
	def optNullCheck(i: SsaInstr) -> SsaInstr {
		match (i.opcode()) {
			V3Opcode.NullCheck,
			V3Opcode.BoundsCheck,
			V3Opcode.ArrayGetElem,
			V3Opcode.ArraySetElem,
			V3Opcode.ArrayGetLength,
			V3Opcode.TypeCast,
			V3Opcode.TypeQuery,
			V3Opcode.ClassGetMethod,
			V3Opcode.ClassGetVirtual,
			V3Opcode.CallMethod,
			V3Opcode.CallClassVirtual,
			V3Opcode.ClassGetField,
			V3Opcode.ClassSetField: {
				i.setFact(Facts.O_NO_NULL_CHECK);
			}
		}
		return i;
	}
	// apply the function "f" to every dominated instruction i where i.input0() == obj
	def applyDominatorOptForInput0(obj: SsaInstr, edge: SsaCfEdge, f: SsaInstr -> SsaInstr) {
		if (!edge.isOnlyEdge()) return;
		var block = edge.dest;
		// search this block for instructions to optimize
		// XXX: employ useList and domination numbers to only inspect instructions
		// that use this value
		for (l = block.next; l != block; l = l.next) {
			if (!SsaInstr.?(l)) continue;
			var i = SsaInstr.!(l);
			if (i.inputs.length < 1) continue; // instr doesn't involve obj
			if (i.input0() != obj) continue; // instr doesn't involve obj
			var ni = f(i);
			if (ni != i) {
				ni.insertBefore(i);
				i.remove();
				i.replace(ni);
				l = ni;
			}
		}
		// XXX: propagate the fact to blocks dominated by this block
	}
}
class SwitchCmp(val: int, cmp: SsaInstr, end: SsaIf, tSucc: SsaCfEdge, fSucc: SsaCfEdge) { }
