// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Performs control flow optimizations on a completed SsaRegion.
class SsaCfOptimizer {
	def region: SsaRegion;
	def ERROR: ErrorGen;
	def mark = ++region.markGen;
	def queue = Sequence<SsaBlock>.new();
	def printer = SsaPrinter.new(null);
	def debug = false;
	new(region, ERROR) { }
	def optimize() {
		// visit all the blocks of the region
		// 1. reduce phis with identical inputs
		// 2. merge straight-line blocks (avoiding critical edges)
		// 3. optimize diamond-if patterns arising from if(a && b) patterns
		// 4. iteratively reduce/fold code
		// 5. try to remove bounds checks from induction variables
		queueBlock(region.startBlock);
		for (i = 0; i < queue.length; i++) optBlock(queue.get(i));
	}
	def queueBlock(block: SsaBlock) {
		if (block.mark < mark) {
			block.mark = mark;
			queue.add(block);
		}
	}
	def optBlock(block: SsaBlock) {
		if (block.end == null || block.end.checkFact(Facts.O_KILLED)) return;
		for (s in block.succ) {
			while (optEdge(s)) ; // optimize each edge
		}
		if (SsaSwitch.?(block.end)) optDoubleDiamond(SsaSwitch.!(block.end));
		// XXX: optimize the phis of this block
		for (s in block.succ) {
			if (s.dest != null) queueBlock(s.dest);
		}
	}
	def optDoubleDiamond(sw: SsaSwitch) {
		// match and simplify a control flow pattern where the input to a switch
		// is the merge of a previous branch; e.g. this occurs in if(a && b)
		if (debug) Terminal.puts("optDiamond ");
		if (debug) printer.printBlockHeader(sw.block);
		var e = sw.inputs(0), v = e.dest;
		if (!SsaPhi.?(v)) return; // branch condition is not a phi
		if (!e.isOnlyEdge()) return; // phi is used elsewhere as well
		if (sw.block.instrs.length > 0) return; // block is not empty
		var phi = SsaPhi.!(v);
		if (phi.block != sw.block) return; // phi is in a different block
		if (sw.block.phis.phiInstrs.length > 1) return; // other phis in this block

		// search for and remove inputs to the phi that are constants
		var iseq = Sequence<SsaInstr>.new(), eseq = Sequence<SsaCfEdge>.new();
		var inputs = phi.inputs, edges = sw.block.phis.phiEdges;
		for (i = 0; i < inputs.length; i++) {
			var input = inputs(i), edge = edges.get(i);
			if (SsaValue.?(input.dest)) {
				// redirect incoming edge to outgoing edge
				var succ = sw.findSucc(SsaValue.!(input.dest).val);
				edge.update(succ.dest);
				addEdge(succ, edge);
				optEdge(edge);
				input.update(null); // kill the use of the value
			} else {
				iseq.add(input.dest);
				eseq.add(edge);
			}
		}

		if (iseq.length == phi.inputs.length) return; // no updates
		if (iseq.length == 0) return killBlock(sw.block); // no predecessors remain
		if (iseq.length == 1) {
			e.update(iseq.get(0)); // only one input remains
			sw.block.phis = null;  // phi is now dead
			optEdge(sw.block.predList);
			return;
		}
		// more than one input to this phi is remaining, build a new phi
		var newPhis = SsaPhis.new(sw.block);
		newPhis.phiEdges.addN(eseq.extract());
		var newPhi = newPhis.newPhi(phi.getType(), iseq.extract());
		e.update(newPhi);
		sw.block.phis = newPhis;
	}
	def killBlock(block: SsaBlock) {
		if (debug) Terminal.puts("killBlock ");
		if (debug) printer.printBlockHeader(block);
		if (block.end == null || block.end.checkFact(Facts.O_KILLED)) return;
		killInstr(block.end);
		// recursively kill this block and its successor blocks
		for (i = 0; i < block.instrs.length; i++) {
			killInstr(block.instrs.get(i));
		}
		// kill the phi instructions in this block
		if (block.phis != null) {
			var phis = block.phis.phiInstrs;
			for (i = 0; i < phis.length; i++) {
				killInstr(phis.get(i));
			}
		}
		// kill the outgoing control flow edges
		for (s in block.succ) {
			var d = s.dest;
			if (d != null) {
				removeEdge(s);
				if (d.predList == null) killBlock(d);
			}
		}
	}
	def killInstr(i: SsaInstr) {
		i.kill();
		i.setFact(Facts.O_KILLED);
		// TODO: recursively kill any the inputs that are now dead
	}
	def optEdge(edge: SsaCfEdge) -> bool {
		var src = edge.src, dest = edge.dest;
		if (dest == null) return false; // edge may have already been optimized away
		if (debug) Terminal.puts("optEdge");
		if (debug) printer.printCfEdge(edge);
		if (debug) Terminal.ln();
		if (!edge.isOnlyEdge()) return false; // destination has more than one predecessor
		if (src.succ.length > 1) {
			// try to skip the destination block
			if (dest.succ.length != 1) return false;	// doesn't end with a goto
			if (dest.instrs.length > 0) return false;	// is not empty
			var destdest = dest.succ(0).dest;
			if (destdest.phis != null) return false;	// has phis
			simplifyPhis(dest);
			edge.update(destdest);				// redirect edge
			killBlock(dest);				// try to kill the destination
			return true;
		}
		// merge the destination block into the source
		simplifyPhis(dest);
		// copy instructions from destination to source
		for (i = 0; i < dest.instrs.length; i++) {
			src.instrs.add(dest.instrs.get(i));
		}
		dest.instrs.length = 0;
		// kill source end (should be a goto or a single result switch)
		killInstr(src.end);
		src.end = null;
		if (SsaGoto.?(dest.end)) {
			var oedge = dest.succ(0), nedge = SsaCfEdge.new(src, oedge.dest);
			src.succ = [nedge];
			src.end = SsaGoto.new(src);
			replaceEdge(oedge, nedge);
		} else if (SsaThrow.?(dest.end)) {
			var throw = SsaThrow.!(dest.end);
			src.succ = [];
			src.end = SsaThrow.new(throw.source, src, throw.exception);
		} else if (SsaReturn.?(dest.end)) {
			var ret = SsaReturn.!(dest.end);
			src.succ = [];
			src.end = SsaReturn.new(src, SsaUtil.inputs(ret));
		} else if (SsaSwitch.?(dest.end)) {
			var sw = SsaSwitch.!(dest.end);
			src.succ = Array.new(dest.succ.length);
			for (i = 0; i < src.succ.length; i++) {
				var oedge = dest.succ(i), nedge = SsaCfEdge.new(src, oedge.dest);
				src.succ(i) = nedge;
				replaceEdge(oedge, nedge);
			}
			src.end = SsaSwitch.new(src, sw.vtype, sw.inputs(0).dest, sw.vals);
		}
		edge.update(null);
		killBlock(dest);
		return true;
	}
	def addEdge(abEdge: SsaCfEdge, xbEdge: SsaCfEdge) {
		// add a new edge X -> B, using A's input to each phi as X's input
		if (debug) Terminal.puts("addEdge ");
		if (debug) printer.printCfEdge(xbEdge);
		if (debug) Terminal.puts(", prev = ");
		if (debug) printer.printCfEdge(abEdge);
		if (debug) Terminal.ln();
		var dest = abEdge.dest, phis = dest.phis;
		if (dest.phis != null) {
			var index = SsaUtil.findIncomingPhiEdge(phis, abEdge, ERROR);
			phis.phiEdges.add(xbEdge);
			for (i = 0; i < phis.phiInstrs.length; i++) {
				// for each phi, add a new input corresponding to this edge
				var phi = phis.phiInstrs.get(i);
				var input = phi.inputs(index).dest;
				phi.inputs = Arrays.append(SsaDfEdge.new(phi, input), phi.inputs);
			}
		}
	}
	def replaceEdge(abEdge: SsaCfEdge, xbEdge: SsaCfEdge) {
		// replace the old edge A -> B with a new edge X -> B
		if (debug) Terminal.puts("replaceEdge ");
		if (debug) printer.printCfEdge(abEdge);
		if (debug) Terminal.puts(" with ");
		if (debug) printer.printCfEdge(xbEdge);
		if (debug) Terminal.ln();
		if (xbEdge.dest == null || abEdge.dest == null) {
			ERROR.fail(Strings.format1("replaceEdge #%1 with null destination", xbEdge.src.uid));
			return;
		}
		var dest = abEdge.dest, phis = dest.phis;
		if (phis != null) {
			var index = SsaUtil.findIncomingPhiEdge(phis, abEdge, ERROR);
			phis.phiEdges.set(index, xbEdge);
		}
		xbEdge.update(dest);
		abEdge.update(null);
	}
	def removeEdge(edge: SsaCfEdge) {
		if (edge.dest == null) return;
		if (debug) Terminal.puts("removeEdge ");
		if (debug) printer.printCfEdge(edge);
		if (debug) Terminal.ln();
		var phis = edge.dest.phis;
		if (phis != null) {
			// remove the edge from the incoming phi edges
			var index = SsaUtil.findIncomingPhiEdge(phis, edge, ERROR);
			phis.phiEdges.remove(edge);
			for (i = 0; i < phis.phiInstrs.length; i++) {
				// for each phi, remove the corresponding input
				var phi = phis.phiInstrs.get(i), inputs = phi.inputs;
				inputs(index).update(null); // kill the DF edge
				Arrays.removeIndex(inputs, index); // compact input array
				phi.inputs = Arrays.range(phi.inputs, 0, inputs.length - 1);
			}
		}
		edge.update(null);
	}
	def simplifyPhis(block: SsaBlock) {
		if (debug) Terminal.puts("simplifyPhis ");
		if (debug) printer.printBlockHeader(block);
		if (block.phis != null) {
			// replace all phis with their first input value
			var phis = block.phis.phiInstrs;
			for (i = 0; i < phis.length; i++) {
				var phi = phis.get(i);
				phi.replace(phi.inputs(0).dest);
				killInstr(phi);
			}
			block.phis = null;
		}
	}
}
