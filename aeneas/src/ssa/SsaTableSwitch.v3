// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utilities for converting switches over integral types into sorted tables and
// table lookups
component SsaSwitchUtil {
	// compute a sorted table of (val, edge) pairs
	def computeSortedTable(i: SsaEnd) -> SsaSortedTable {
		return null;
	}
	// compute a (dense) lookup table from value to edge
	def computeLookupTable(i: SsaEnd, minSize: int) -> SsaLookupTable {
		return null;
	}
}
// Represents a lookup table mapping values in a small range to branch targets
class SsaLookupTable(
		switch: SsaEnd,				// original switch instruction
		minValue: int,				// minimum value, inclusive
		targets: Array<SsaCfEdge>,		// corresponding targets for each val
		default: SsaCfEdge) {			// default target
	def size = targets.length;			// number of entries in the table
	def maxValue = minValue + size - 1;		// maximum value, inclusive
}
// Represents a sorted table of (value, target) mappings
class SsaSortedTable(switch: SsaEnd, pairs: Array<(int, SsaCfEdge)>, default: SsaCfEdge) {
	def size = pairs.length;
}
