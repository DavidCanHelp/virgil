// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A reusable context containing the compiler, the program, optimization settings, current
// method, and current block during the processing of SSA code. Also useful for generating
// internal error messages that contain context (e.g. when an SSA invariant is violated)
// which helps in debugging the compiler.
class SsaContext(compiler: Compiler, prog: Program) {
	def ERROR = prog.ERROR;
	var spec: IrSpec;
	var method: IrMethod;
	var graph: SsaGraph;
	var block: SsaBlock;

	def enterSpec(s: IrSpec) -> SsaContext {
		spec = s;
		return enterMethod(s.asMethod());
	}
	def enterMethod(m: IrMethod) -> SsaContext {
		method = m;
		graph = if(m != null, m.ssa);
		block = if(graph != null, graph.startBlock);
		return this;
	}
	def fail(msg: string) {
		// XXX: render SSA of failing method/block by default?
		var buf = StringBuffer.new();
		if (block != null) buf.format1("near block #%1 ", block.uid);
		if (method != null) method.renderLong(buf.puts("in ")).puts(": ");
		buf.puts(msg);
		prog.ERROR.fail(buf.toString());
	}
	def printSsa(phase: string) {
		var p = compiler.printMatcher;
		if (p != null && p.matchMember(method.source)) {
			var render = if(spec != null, spec.render, method.renderLong);
			SsaPrinter.new(prog).printGraph(phase, render, method.ssa);
		}
		var s = compiler.statsMatcher;
		if (s != null && s.matchMember(method.source)) {
			var render = if(spec != null, spec.render, method.renderLong);
			SsaPrinter.new(prog).printStats(phase, render, method.ssa);
		}
	}
}
