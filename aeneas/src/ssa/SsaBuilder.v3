// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def PURE_LOAD = Facts.O_NO_NULL_CHECK | Facts.O_PURE;
def ZERO_NON_ZERO = Facts.V_ZERO | Facts.V_NON_ZERO;
def ABOVE_BELOW_ZERO = Facts.V_NON_ZERO | Facts.V_NON_NEGATIVE | Facts.V_BELOW_ZERO;

def checkNoTypeVarsInOp(op: Operator) {
	for (t in op.typeArgs) checkNoTypeVars(t);
	for (t in op.paramTypes) checkNoTypeVars(t);
	checkNoTypeVars(op.resultType);
}
def checkNoTypeVars(t: Type) {
	if (t.hasTypeVars()) return V3.fail("no type vars allowed");
}
def checkInputs(inputs: Array<SsaInstr>) {
	for (i in inputs) if (i == null) return V3.fail("null input");
}
def checkEdges(edges: Array<SsaDfEdge>) {
	for (e in edges) if (e.dest == null) return V3.fail("null input");
}

// Support class for constructing SSA instruction-by-instruction.
class SsaBuilder {
	var block: SsaBlock;
	var end: bool;
	def context: SsaContext;
	def graph: SsaGraph;
	var source: Source;
	var nonNullObj: SsaInstr;
	var nullChecks: PartialMap<SsaInstr, SsaInstr>;

	new(context, graph, block) { }

	// General methods.
	def addApply(source: Source, op: Operator, args: Array<SsaInstr>) -> SsaInstr {
		if (Debug.PARANOID) { checkNoTypeVarsInOp(op); checkInputs(args); }
		if (end) return null;
		var i = SsaApplyOp.new(source, op, args);
		i.setFact(Operators.facts(op.opcode));
		block.append(i);
		return i;
	}
	def addThrow(source: Source, ex: string) -> SsaInstr {
		if (end) return block.end();
		block.succ = Ssa.NO_CF_EDGES;
		end = true;
		var t = SsaThrow.new(source, ex);
		block.append(t);
		return t;
	}
	def addInstr(i: SsaInstr) -> SsaInstr {
		if (Debug.PARANOID) {
			checkNoTypeVars(i.getType());
			if (SsaApplyOp.?(i)) {
				var apply = SsaApplyOp.!(i);
				checkNoTypeVarsInOp(apply.op);
				checkEdges(apply.inputs);
			}
		}
		if (!end) block.append(i);
		return i;
	}
	def addGoto(target: SsaBlock) {
		if (end) return;
		end = true;
		block.succ = [SsaCfEdge.new(block, target)];
		block.append(SsaGoto.new());
	}
	def addReturn(vals: Array<SsaInstr>) {
		if (Debug.PARANOID) { checkInputs(vals); }
		if (end) return;
		end = true;
		block.succ = Ssa.NO_CF_EDGES;
		block.append(SsaReturn.new(vals));
	}
	def addPhi(t: Type, vals: Array<SsaInstr>) -> SsaInstr {
		if (Debug.PARANOID) { checkInputs(vals); }
		if (block.phis == null) {
			block.phis = SsaPhis.new(block);
			for (l = block.predList; l != null; l = SsaCfEdge.!(l.next)) {
				block.phis.phiEdges.add(l);
			}
		}
		return block.phis.newPhi(t, vals);
	}

	// Language-specific methods.
	def ir() -> IrPortion { return context.prog.ir; }

	// sets the source position that will apply to subsequent instructions
	def at(source: Source) -> SsaBuilder {
		this.source = source;
		return this;
	}
	def addIf(cond: SsaInstr, tblock: SsaBlock, fblock: SsaBlock) {
		if (Debug.PARANOID) { checkInputs([cond]); }
		if (end) return;
		if (SsaValue.?(cond)) {
			// fold if(#k)
			return addGoto(if(cond.unbox<bool>(), tblock, fblock));
		}
		if (SsaApplyOp.?(cond)) {
			// if(!op) t else f => if(op) f else t
			if (SsaApplyOp.!(cond).op.opcode == Opcode.BoolNot) return addIf(cond.input0(), fblock, tblock);
			// XXX: optimize if(x == true|false) and if(x != true|false)
		}
		end = true;
		block.succ = [block.newEdgeTo(tblock), block.newEdgeTo(fblock)];
		block.append(SsaIf.new(cond));
	}
	def addIfEqual(x: SsaInstr, y: SsaInstr, tblock: SsaBlock, fblock: SsaBlock) {
		if (end) return;
		addIf(opEqual(x.getType(), x, y), tblock, fblock);
	}
	def opEqualOf(op: Operator, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return opEqual(op.typeArgs(0), x, y);
	}
	def opNotEqualOf(op: Operator, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return opNotEqual(op.typeArgs(0), x, y);
	}
	// x == y
	def opEqual(t: Type, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return graph.trueConst();
		if (SsaValue.?(x)) {
			if (SsaValue.?(y)) return bk(Values.equal(v(x), v(y))); // fold
			var t = x; x = y; y = t; // K == y == y == K
		}
		var and = x.facts & y.facts, or = x.facts | y.facts;
		if (0 != (and & Facts.V_ZERO)) return graph.trueConst(); // 0 == 0 == true
		if (ZERO_NON_ZERO == (or & ZERO_NON_ZERO)) return graph.falseConst(); // 0 == nonzero == false
		if (ABOVE_BELOW_ZERO == (or & ABOVE_BELOW_ZERO)) return graph.falseConst(); // neg == pos == false
		return add(V3Op.newEqual(t), [x, y], 0);
	}
	// x != y
	def opNotEqual(t: Type, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return graph.falseConst();
		if (SsaValue.?(x)) {
			if (SsaValue.?(y)) return bk(!Values.equal(v(x), v(y))); // fold
			var t = x; x = y; y = t; // K != y == y != K
		}
		var and = x.facts & y.facts, or = x.facts | y.facts;
		if (0 != (and & Facts.V_ZERO)) return graph.falseConst(); // 0 != 0 == false
		if (ZERO_NON_ZERO == (or & ZERO_NON_ZERO)) return graph.trueConst(); // 0 != nonzero == true
		if (ABOVE_BELOW_ZERO == (or & ABOVE_BELOW_ZERO)) return graph.trueConst(); // neg != pos == true
		return add(V3Op.newNotEqual(t), [x, y], 0);
	}
	// x && y
	def opBoolAnd(op: Operator, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return x; // x && x == x
		if (SsaValue.?(x)) {
			if (bv(x)) return y; // true && y == y
			else return x;       // false && y == false
		} else if (SsaValue.?(y)) {
			if (bv(y)) return x; // x && true == x
			else return y;       // x && false == false
		}
		return add(op, [x, y], 0);
	}
	// x || y
	def opBoolOr(op: Operator, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y) return x; // x || x == x
		if (SsaValue.?(x)) {
			if (bv(x)) return x; // true || y == true
			else return y;       // false || y == y
		} else if (SsaValue.?(y)) {
			if (bv(y)) return y; // x || true == true
			else return x;       // x || false == x
		}
		return add(op, [x, y], 0);
	}
	// !x
	def opBoolNot(x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) return graph.boolConst(!bv(x)); // fold !K
		if (SsaApplyOp.?(x)) {
			var ax = SsaApplyOp.!(x), op = ax.op;
			if (op.opcode == Opcode.BoolNot) return ax.input0(); // !(!x) == x
			if ((op = V3Op.inverse(op)) != null) return add(op, [ax.input0(), ax.input1()], 0);
		}
		return add(V3Op.opBoolNot, [x], 0);
	}
	// TypeCast<F, T>(x)
	def opTypeCast(ft: Type, tt: Type, x: SsaInstr) -> SsaInstr {
		if (ft == tt) return x; // fold TypeCast<T, T>
		if (tt == x.getType()) return x; // fold TypeCast<F, T>(x: T)
		var cast = TypeSystem.newTypeCast(ft, tt);
		if (SsaValue.?(x)) cast = cast.eval(ft, tt, SsaValue.!(x).val);

		match (cast.approx) {
			CastOp.TRUE: return x; // fold TypeCast
			CastOp.FALSE: {
				return addThrow(source, V3Exception.TypeCheck); // fold TypeCast
			}
			CastOp.TRUE_X_NULL: {
				// TypeCast -> ConditionalThrow(x == null)
				var cmp = opEqual(ft, x, graph.nullConst(ft));
				opConditionalThrow(V3Exception.TypeCheck, cmp);
				return x;
			}
			CastOp.FALSE_X_NULL: {
				// TypeCast -> ConditionalThrow(x != null)
				var cmp = opNotEqual(ft, x, graph.nullConst(ft));
				opConditionalThrow(V3Exception.TypeCheck, cmp);
				return graph.nullConst(tt);
			}
			CastOp.VALUE: {
				return graph.valConst(tt, cast.result);
			}
			CastOp.INT_CONVERSION: {
				return opIntConvert0(ft, tt, x);
			}
			CastOp.ENUM_TO_SET: {
				return V3EnumSet_TypeCon.!(tt.typeCon).genEnumToSet(x, this);
			}
		}
		var facts = if(x.checkFact(Facts.V_NON_ZERO), Facts.O_NO_NULL_CHECK);
		return add(V3Op.newTypeCast(ft, tt), [x], facts);
	}
	def opIntConvert0(from: Type, to: Type, x: SsaInstr) -> SsaInstr {
		return opIntConvert(V3Op.newIntConvert(from, to), x);
	}
	def opIntConvert(op: Operator, x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) { // fold an int conversion
			var val = SsaValue.!(x).val, tt = op.typeArgs(1);
			if (val == null) return graph.nullConst(tt);
			var r = IntOp.evalConversion(op.typeArgs(0), tt, val);
			if (r.approx == CastOp.TRUE) return graph.valConst(tt, val);
			if (r.approx == CastOp.VALUE) return graph.valConst(tt, r.result);
		}
		var facts = 0;
		if (!IntType.!(op.resultType).signed) facts |= Facts.V_NON_NEGATIVE;
		return add(op, [x], facts);
	}
	// TypeQuery<F, T>(x)
	def opTypeQuery(ft: Type, tt: Type, x: SsaInstr) -> SsaInstr {
		var cast = TypeSystem.newTypeQuery(ft, tt);
		if (SsaValue.?(x)) cast = cast.eval(ft, tt, SsaValue.!(x).val);

		if (cast.approx == CastOp.TRUE) return graph.trueConst();
		if (cast.approx == CastOp.FALSE) return graph.falseConst();
		if (cast.approx == CastOp.TRUE_X_NULL) return opNotEqual(ft, x, graph.nullConst(ft));
		var facts = if(x.checkFact(Facts.V_NON_ZERO), Facts.O_NO_NULL_CHECK);
		return add(V3Op.newTypeQuery(ft, tt), [x], facts);
	}
	// TypeSubsume<F, T>(x)
	def opTypeSubsume(ft: Type, tt: Type, x: SsaInstr) -> SsaInstr {
		if (ft == tt) return x; // fold TypeSubsume<T, T>(x)
		if (tt == x.getType()) return x; // fold TypeSubsume<F, T>(x: T)
		match (tt.typeCon.kind) {
			V3Kind.CLASS: {
				if (ft == Null.TYPE) return graph.nullConst(tt);
				if (TypeSystem.isSubtype(ft, tt)) return x; // remove redundant subsume of class
			}
			V3Kind.INT: {
				if (ft.typeCon.kind != V3Kind.VARIANT && ft.typeCon.kind != V3Kind.ENUM) return opTypeCast(ft, tt, x);
			}
			V3Kind.TUPLE: {
				return opTypeCast(ft, tt, x);
			}
			V3Kind.ENUM_SET: {
				return V3EnumSet_TypeCon.!(tt.typeCon).genEnumToSet(x, this);
			}
		}
		if (SsaValue.?(x)) return graph.valConst(tt, v(x)); // fold TypeSubsume(K)
		return add(V3Op.newTypeSubsume(ft, tt), [x], x.facts);
	}
	def opArrayAlloc(arrayType: Type, x: SsaInstr) -> SsaInstr {
		var facts = if (x.checkFact(Facts.V_NON_NEGATIVE), Facts.O_NO_LENGTH_CHECK);
		return add(V3Op.newArrayAlloc(arrayType), [x], facts);
	}
	def opArrayInit(arrayType: Type, x: Array<SsaInstr>) -> SsaInstr {
		return add(V3Op.newArrayInit(arrayType, x.length), x, Facts.V_NON_ZERO);
	}
	def opArrayGetElem(arrayType: Type, facts: int, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (Facts.O_SAFE_BOUNDS != (facts & Facts.O_SAFE_BOUNDS)) facts = foldBoundsCheck(x, y);
		return addImplicitNullCheck(V3Op.newArrayGetElem(arrayType), [x, y], facts);
	}
	def opArraySetElem(arrayType: Type, facts: int, x: SsaInstr, y: SsaInstr, z: SsaInstr) -> SsaInstr {
		if (Facts.O_SAFE_BOUNDS != (facts & Facts.O_SAFE_BOUNDS)) facts = foldBoundsCheck(x, y);
		return addImplicitNullCheck(V3Op.newArraySetElem(arrayType), [x, y, z], facts);
	}
	private def foldBoundsCheck(x: SsaInstr, y: SsaInstr) -> int {
		if (isZero(x)) {
			// array is null
			addThrow(source, V3Exception.NullCheck);
		} else if (SsaValue.?(y)) {
			// array index is a constant
			var index = iv(y), length = -1;
			if (index < 0) {
				addThrow(source, V3Exception.BoundsCheck);
				return 0;
			}
			if (SsaValue.?(x)) length = rv(x).values.length;
			var opcode = x.opcode();
			if (opcode == Opcode.ArrayAlloc.tag) {
				var leninstr = x.input0();
				if (SsaValue.?(leninstr)) length = iv(leninstr);
			} else if (opcode == Opcode.ArrayInit.tag) {
				length = SsaApplyOp.!(x).op.attr<int>();
			}
			if (length >= 0) {
				if (index >= length) addThrow(source, V3Exception.BoundsCheck);
				else return Facts.O_SAFE_BOUNDS;
			}
		} else if (context.compiler.PartialBoundsChecks && SsaValue.?(x)) {
			// array is a constant
			var array = rv(x);
			var op = V3Op.newConditionalThrow(V3Exception.BoundsCheck);
			var gteqop = Int.getType(false, 32).lookupInfix0(V3Infix.Gteq);
			add(op, [add(gteqop, [y, ik(array.values.length)], 0)], 0); // partially fold bounds check
			return Facts.O_SAFE_BOUNDS;
		}
		return 0;
	}
	// ArrayGetLength<T>(x)
	def opArrayGetLength(arrayType: Type, x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) { // fold ArrayGetLength(K)
			var r = rv(x);
			if (r == null) return addThrow(source, V3Exception.NullCheck);
			return ik(r.values.length);
		}
		var xc = x.opcode();
		if (xc == Opcode.ArrayInit.tag) return ik(x.inputs.length); // fold ArrayGetLength(ArrayInit)
		if (xc == Opcode.ArrayAlloc.tag) return SsaApplyOp.!(x).input0(); // fold ArrayGetLength(ArrayAlloc)
		var facts = implicitNullCheck(x, Facts.O_FOLDABLE, Facts.O_PURE);
		return add(V3Op.newArrayGetLength(arrayType), [x], facts);
	}
	// ClassAlloc[new](args)
	def opClassAlloc(m: IrSpec, x: Array<SsaInstr>) -> SsaInstr {
		// XXX: fold constant class allocations (e.g. closures)
		if (V3.isVariant(m.container) && !m.container.open()) {
			// try folding a variant allocation.
			for (a in x) if (!SsaValue.?(a)) return addClassAlloc(m, x);
			return foldVariantAlloc(m, x);
		}
		return addClassAlloc(m, x);
	}
	private def foldVariantAlloc(m: IrSpec, x: Array<SsaInstr>) -> SsaInstr {
		var size = x.length;
		var ic = ir().makeIrClass(m.container);
		var expected = ic.fields.length;
		if (expected != size) return addClassAlloc(m, x);
		var r = context.prog.newRecord(m.container, size);
		ic.setFact(Facts.C_HEAP);
		for (i < size) r.values(i) = SsaValue.!(x(i)).val;
		return graph.valConst(m.container, r);
	}
	private def addClassAlloc(m: IrSpec, x: Array<SsaInstr>) -> SsaInstr {
		if (m.member == null) return add(V3Op.newEmptyClassAlloc(m.container), Ssa.NO_INSTRS, Facts.V_NON_ZERO);
		return add(V3Op.newClassAlloc(m), x, Facts.V_NON_ZERO);
	}
	// ClassGetField[f](x)
	def opClassGetField(f: IrSpec, x: SsaInstr) -> SsaInstr {
		// fold ClassGetField[C.f](x) if C.f is a constant
		var facts = implicitNullCheck(x, f.member.facts, 0);
		var k = fieldConst(f);
		if (k != null) {
			addExplicitNullCheck(x, facts);
			return k;
		}

		// fold ClassGetField[C.f](x == zero)
		if (isZero(x)) return opClassGetFieldNull(f);

		if (f.member.isConst()) { // fold ClassGetField[C.f](K) if C.f is init-only
			f.member.setFact(Facts.X_LIVE);  // XXX: this is not the right place for liveness analysis
			if (SsaValue.?(x)) return graph.valConst(f.getFieldType(), rv(x).values(f.member.index));
			else if ((facts & Facts.O_NO_NULL_CHECK) != 0) facts = facts | Facts.O_PURE;
		}

		return add(V3Op.newClassGetField(f), [x], facts);
	}
	// ClassGetField[f](null)
	def opClassGetFieldNull(f: IrSpec) -> SsaInstr {
		if (V3.isVariant(f.container)) return graph.nullConst(f.getFieldType());
		else return addThrow(source, V3Exception.NullCheck);
	}
	def implicitNullCheck(x: SsaInstr, facts: int, extra: int) -> int {
		if (V3.isVariant(x.getType())) return facts;
		if (isNonNull(x)) return facts | Facts.O_NO_NULL_CHECK | extra;
		if (isZero(x)) {
			addThrow(source, V3Exception.NullCheck);
			return 0;
		}
		setNonNull(x);
		return facts;
	}
	// ClassSetField[f](x, v)
	def opClassSetField(f: IrSpec, x: SsaInstr, v: SsaInstr, init: bool) -> SsaInstr {
		var facts = implicitNullCheck(x, 0, 0);
		return add(if(init, V3Op.newClassInitField(f), V3Op.newClassSetField(f)), [x, v], facts);
	}
	// ClassGetMethod[m](x)
	def opClassGetMethod(m: IrSpec, x: SsaInstr) -> SsaInstr {
		var facts = implicitNullCheck(x, Facts.O_FOLDABLE, Facts.O_PURE);
		if (SsaValue.?(x)) {
			var obj = rv(x);
			if (!m.isPolymorphic()) {
				// fold ClassGetMethod(K)
				addExplicitNullCheck(x, facts);
				return graph.valConst(m.getBoundType(), Closure.new(obj, m));
			}
		}
		return add(V3Op.newClassGetMethod(m), [x], facts);
	}
	// ClassGetVirtual[m](x)
	def opClassGetVirtual(m: IrSpec, x: SsaInstr) -> SsaInstr {
		var dv = devirtualize(m, x);
		if (dv != null) return opClassGetMethod(dv, x);
		var facts = implicitNullCheck(x, Facts.O_FOLDABLE, Facts.O_PURE);
		return add(V3Op.newClassGetVirtual(m), [x], facts);
	}
	// ClassGetVirtFunc[m](x)
	def opClassGetVirtFunc(m: IrSpec, x: SsaInstr) -> SsaInstr {
		var dv = devirtualize(m, x);
		if (dv != null) return graph.valConst(dv.getFuncType(), FuncVal.new(dv));
		var facts = implicitNullCheck(x, Facts.O_FOLDABLE, Facts.O_PURE);
		return add(V3Op.newClassGetVirtFunc(m), [x], facts);
	}
	// Init[new]
	def opInit(meth: IrMethod) -> SsaInstr {
		return add(V3Op.newInit(meth), Ssa.NO_INSTRS, 0);
	}
	// ComponentGetField[f](x)
	def opComponentGetField(f: IrSpec, x: SsaInstr) -> SsaInstr {
		var k = fieldConst(f); // fold constant fields
		if (k != null) return k;
		var facts = if(f.member.isConst(), Facts.F_VALUE);
		return add(V3Op.newComponentGetField(f), [x], facts);
	}
	// ComponentSetField[f](x, v)
	def opComponentSetField(f: IrSpec, x: SsaInstr, v: SsaInstr) -> SsaInstr {
		// XXX: remove dead writes
		return add(V3Op.newComponentSetField(f), [x, v], 0);
	}
	// ComponentGetMethod[m](x)
	def opComponentGetMethod(m: IrSpec, x: SsaInstr) -> SsaInstr {
		// XXX: fold constant ComponentGetMethod
		return add(V3Op.newComponentGetMethod(m), [x], 0);
	}
	// (x, y)
	def opTupleCreate(tupleType: Type, x: Array<SsaInstr>) -> SsaInstr {
		// XXX: fold (K, K)
		return add(V3Op.newTupleCreate(tupleType), x, 0);
	}
	// e.N
	def opTupleGetElem(tupleType: Type, i: int, x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) {
			var val = Tuple_Value.!(v(x)), t = Lists.get(tupleType.nested, i);
			return graph.valConst(t, if(val != null, val.values(i), null)); // fold K.N
		} else if (x.opcode() == Opcode.TupleCreate.tag) {
			return SsaApplyOp.!(x).inputs(i).dest; // reduce (e, e, ...).N
		}
		return add(V3Op.newTupleGetElem(tupleType, i), [x], 0);
	}
	// NullCheck(x)
	def opNullCheck(rtype: Type, x: SsaInstr) -> SsaInstr {
		if (V3.isVariant(rtype)) return null;
		if (isNonNull(x)) return null;
		if (isZero(x)) return addThrow(source, V3Exception.NullCheck);
		setNonNull(x);
		return add(V3Op.newNullCheck(x.getType()), [x], 0);
	}
	def addExplicitNullCheck(x: SsaInstr, facts: int) {
		if (0 == (facts & Facts.O_NO_NULL_CHECK)) {
			var t = x.getType();
			if (!V3.isVariant(t)) add(V3Op.newNullCheck(t), [x], 0);
		}
	}
	private def isNonNull(x: SsaInstr) -> bool {
		if (x == nonNullObj) return true;
		if (isNonZero(x)) return true;
		if (isZero(x)) return false;
		if (context.compiler.DisableNullChecks) return true;
		if (nullChecks != null) return nullChecks.has(x);
		return false;
	}
	private def setNonNull(x: SsaInstr) {
		if (nonNullObj == x) return;
		if (nonNullObj != null) {
			if (nullChecks == null) {
				nullChecks = Ssa.newMap();
				nullChecks.set(nonNullObj, nonNullObj);
			}
			nullChecks.set(x, x);
		}
		nonNullObj = x;
	}
	// BoundsCheck(array, index)
	def opBoundsCheck(rtype: Type, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		var facts = foldBoundsCheck(x, y);
		if (0 != (facts & Facts.O_NO_BOUNDS_CHECK)) {
			if (0 == (facts & Facts.O_NO_NULL_CHECK)) opNullCheck(x.getType(), x);
			return null;
		}
		return add(V3Op.newBoundsCheck(rtype), [x, y], 0);
	}
	// CallMethod[m](args)
	def opCallMethod(m: IrSpec, x: Array<SsaInstr>) -> SsaInstr {
		recordDirectCall(m);
		var facts = if(m.member.checkFact(Facts.O_PURE), Facts.O_PURE);
		var op = V3Op.newCallMethod(m);
		if (m.container.typeCon.kind == V3Kind.CLASS) {
			return addImplicitNullCheck(op, x, facts);
		} else {
			return add(op, x, facts | Facts.O_NO_NULL_CHECK | Operators.facts(op.opcode));
		}
	}
	// CallClassVirtual[m](args)
	def opCallClassVirtual(m: IrSpec, x: Array<SsaInstr>) -> SsaInstr {
		var dv = devirtualize(m, x(0));
		if (dv != null) return opCallMethod(dv, x); // devirtualize call virtual method
		var facts = if(m.member.checkFact(Facts.O_PURE), Facts.O_PURE);
		var op = V3Op.newCallClassVirtual(m);
		if (m.container.typeCon.kind == V3Kind.CLASS) {
			return addImplicitNullCheck(op, x, facts);
		} else {
			return add(op, x, facts | Operators.facts(op.opcode));
		}
	}
	// CallClosure(args)
	def opCallClosure(ftype: Type, x: Array<SsaInstr>) -> SsaInstr {
		var m = x(0);
		if (SsaValue.?(m)) {
			var d = Closure.!(v(m));
			if (d == null) return addThrow(source, V3Exception.NullCheck);
			if (V3.isComponent(d.memberRef.container)) {
				// CallClosure(K) -> CallMethod
				var nx = Arrays.range(x, 1, x.length);
				return opCallMethod(d.memberRef, nx);
			} else if (V3.isClass(d.memberRef.container)) {
				// CallClosure(K) -> CallMethod
				var nx = Arrays.replace0(graph.valConst(d.memberRef.container, d.val), x);
				return opCallMethod(d.memberRef, nx);
			}
		}
		var opcode = m.opcode();
		if (opcode == Opcode.ClassGetMethod.tag) {
			// CallClosure(GetClassMethod) -> CallMethod
			var nx = Arrays.replace0(m.input0(), x);
			return opCallMethod(extractIrSpec(m), nx);
		}
		if (opcode == Opcode.ClassGetVirtual.tag) {
			// CallClosure(GetClassVirtual) -> CallClassVirtual
			var nx = Arrays.replace0(m.input0(), x);
			return opCallClassVirtual(extractIrSpec(m), nx);
		}
		if (opcode == Opcode.ComponentGetMethod.tag) {
			// CallClosure(GetComponentMethod) -> CallMethod
			var nx = Arrays.range(x, 1, x.length);
			return opCallMethod(extractIrSpec(m), nx);
		}
		return addImplicitNullCheck(V3Op.newCallClosure(ftype), x, 0);
	}
	// CallFunction(args)
	def opCallFunction(x: Array<SsaInstr>) -> SsaInstr {
		var m = x(0), facts = 0;
		if (SsaValue.?(m)) {
			var d = FuncVal.!(v(m));
			if (d == null) return addThrow(source, V3Exception.NullCheck);
			if (V3.isComponent(d.memberRef.container)) {
				// CallFunction(K) -> CallMethod
				return opCallMethod(d.memberRef, Arrays.range(x, 2, x.length));
			} else if (V3.isClass(d.memberRef.container)) {
				// CallFunction(K) -> CallMethod
				return opCallMethod(d.memberRef, Arrays.range(x, 1, x.length));
			}
		}
		return addImplicitNullCheck(V3Op.newCallFunction(m.getType()), x, facts);
	}
	// CreateClosure[m](x)
	def opCreateClosure(m: IrSpec, x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) {
			// fold CreateClosure(K)
			if (!m.isPolymorphic()) return graph.valConst(m.getBoundType(), Closure.new(v(x), m));
		}
		return add(V3Op.newCreateClosure(m, x.getType()), [x], 0);
	}
	// ConditionalThrow(exception, cond)
	def opConditionalThrow(ex: string, x: SsaInstr) -> SsaInstr {
		if (SsaValue.?(x)) {
			if (bv(x)) return addThrow(source, ex);
			else return graph.nop();
		}
		return add(V3Op.newConditionalThrow(ex), [x], 0);
	}
	def v(y: SsaInstr) -> Val {
		return SsaValue.!(y).val;
	}
	def iv(y: SsaInstr) -> int {
		return V3.unboxIntegral(SsaValue.!(y).val);
	}
	def rv(y: SsaInstr) -> Record {
		return Record.!(SsaValue.!(y).val);
	}
	def bv(y: SsaInstr) -> bool {
		return y.unbox<bool>();
	}
	def ik(i: int) -> SsaInstr {
		return graph.intConst(i);
	}
	def bk(b: bool) -> SsaInstr {
		return graph.boolConst(b);
	}
	def add(op: Operator, args: Array<SsaInstr>, facts: int) -> SsaInstr {
		if (end) return unreachable(op.resultType);
		var i = SsaApplyOp.new(source, op, args).setFact(facts | Operators.facts(op.opcode));
		block.append(i);
		return i;
	}
	def addImplicitNullCheck(op: Operator, args: Array<SsaInstr>, facts: int) -> SsaInstr {
		if (end) return unreachable(op.resultType);
		var receiver = args(0);
		if (isZero(receiver)) {
			// fold null check to throw.
			return addThrow(source, V3Exception.NullCheck);
		}
		var i = SsaApplyOp.new(source, op, args).setFact(facts | Operators.facts(op.opcode));
		block.append(i);
		return setFactsIfNonNull(receiver, i, Facts.O_NO_NULL_CHECK);
	}
	def opIntAdd(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return opIntInfix(V3Infix.Add, x, y);
	}
	def opIntAnd(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return opIntInfix(V3Infix.And, x, y);
	}
	def opIntMul(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return opIntInfix(V3Infix.Mul, x, y);
	}
	def opIntLt(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return opIntInfix(V3Infix.Lt, x, y);
	}
	def opIntGteq(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return opIntInfix(V3Infix.Gteq, x, y);
	}
	def opIntInfix(infix: byte, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		var op = Int.TYPE.lookupInfix0(infix);
		return OperatorOf<V3OpSyntax>.!(op).attribute.builder(this, op, x, y);
	}
	// set the given facts if the receiver is non-null or previous implict/explicit
	// record this instruction as a previous implicit null check for the receiver
	def setFactsIfNonNull(receiver: SsaInstr, check: SsaInstr, facts: int) -> SsaInstr {
		if (isNonNull(receiver)) check.setFact(facts);
		else setNonNull(receiver);
		return check;
	}
	def fieldConst(f: IrSpec) -> SsaInstr {
		// XXX: move optimization of field reads using VstField to VstSsaGen
		var sf = VstField.!(IrField.!(f.member).source);
		if (sf == null) return null;
		if (sf.isReadOnly) {
			f.member.setFact(Facts.X_LIVE);  // XXX: not the right place for liveness marking
			if (Literal.?(sf.init)) {
				var lit = Literal.!(sf.init);
				// TODO: gross hack to get around implicit convertibles
				var const = graph.valConst(lit.exactType, lit.val);
				var ftype = f.getFieldType();
				if (lit.exactType != ftype) return opTypeCast(lit.exactType, ftype, const);
				else return const;
			}
		}
		return null;
	}
	def devirtualize(m: IrSpec, x: SsaInstr) -> IrSpec {
		if (!m.member.checkFact(Facts.M_OVERRIDDEN)) {
			return m; // CHA devirtualization
		} else if (SsaValue.?(x) && rv(x) != null) {
			return ir().resolveMethodImpl(rv(x).rtype, m); // devirtualize K
		} else if (x.opcode() == Opcode.ClassAlloc.tag) {
			return ir().resolveMethodImpl(SsaApplyOp.!(x).op.typeArgs(0), m); // devirtualize ClassAlloc
		}
		return null;
	}
	def extractIrSpec(i: SsaInstr) -> IrSpec {
		return V3Op.extractIrSpec(SsaApplyOp.!(i).op);
	}
	def isZero(x: SsaInstr) -> bool {
		return 0 != (x.facts & Facts.V_ZERO);
	}
	def isNonZero(x: SsaInstr) -> bool {
		return 0 != (x.facts & Facts.V_NON_ZERO);
	}
	def unreachable(t: Type) -> SsaInstr {
		return graph.nullConst(t);
	}
	def fold2(op: Operator, x: Val, y: Val) -> SsaInstr {
		var args = FoldingArguments.new(op.typeArgs, [x, y]);
		var r = op.evaluate(args);
		if (Exception.?(r)) {
			var ex = Exception.!(r);
			return addThrow(source, ex.error);
		}
		return graph.valConst(op.resultType, Val.!(r));
	}
	def recordDirectCall(spec: IrSpec) {
		// overridden in VstSsaEnv
	}
}
// Arguments used to fold operators during optimization
class FoldingArguments extends Arguments {
	def types: Array<Type>;
	def args: Array<Val>;

	new(types, args) { }

	def numArgs() -> int { return args.length; }
	def getArg(i: int) -> Val { return args(i); }
	def getType(i: int) -> Type { return types(i); }
	def getTypes() -> Array<Type> { return types; }
	def throw(ex: string, msg: string) -> Exception {
		return Exception.new(ex, msg, null);
	}
}
