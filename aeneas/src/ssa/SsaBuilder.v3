// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A helper class that can be used in construction of a new basic block.
class SsaBuilder {
	var block: SsaBlock;
	var end: bool;

	new(block) { }

	def addApply(source: Source, op: Operator, args: Array<SsaInstr>) -> SsaInstr {
		if (end) return null;
		var i = SsaApplyOp.new(source, op, args);
		block.append(i);
		return i;
	}
	def addThrow(source: Source, ex: string) -> SsaInstr {
		if (end) return block.end();
		block.succ = Ssa.NO_CF_EDGES;
		end = true;
		var t = SsaThrow.new(source, block, ex);
		block.append(t);
		return t;
	}
	def addInstr(i: SsaInstr) -> SsaInstr {
		if (!end) block.append(i);
		return i;
	}
	def addIf(cond: SsaInstr, tblock: SsaBlock, fblock: SsaBlock) {
		if (end) return;
		end = true;
		block.succ = [block.newEdgeTo(tblock), block.newEdgeTo(fblock)];
		block.append(SsaIf.new(block, cond));
	}
	def addGoto(target: SsaBlock) {
		if (end) return;
		end = true;
		block.succ = [SsaCfEdge.new(block, target)];
		block.append(SsaGoto.new(block));
	}
	def addReturn(vals: Array<SsaInstr>) {
		if (end) return;
		end = true;
		block.succ = Ssa.NO_CF_EDGES;
		block.append(SsaReturn.new(block, vals));
	}
	def addPhi(t: Type, vals: Array<SsaInstr>) -> SsaInstr {
		if (block.phis == null) {
			block.phis = SsaPhis.new(block);
			for (l = block.predList; l != null; l = SsaCfEdge.!(l.next)) {
				block.phis.phiEdges.add(l);
			}
		}
		return block.phis.newPhi(t, vals);
	}
}
