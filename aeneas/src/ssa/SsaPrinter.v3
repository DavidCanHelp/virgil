// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility to print SSA code.
// XXX: use StringBuffer internally instead of directly writing to Terminal
class SsaPrinter {
	def prog: Program;
	new(prog) { }
	def printRegion(region: SsaRegion) {
		printBlocks(region.bfBlocks());
	}
	def printBlocks(blocks: Array<SsaBlock>) {
		for (b in blocks) printBlock(b);
		for (b in blocks) b.clearMark();
	}
	def printBlockHeader(block: SsaBlock) {
		indent(1);
		Terminal.puts("block ");
		Terminal.blue("#%1 ", block.uid);
		if (block.phis != null) {
			block.phis.phiEdges.apply(printCfEdge);
		}
		Terminal.ln();
	}
	def printBlock(block: SsaBlock) {
		printBlockHeader(block);
		if (block.phis != null) block.phis.phiInstrs.apply(printInstrLn);
		block.instrs.apply(printInstrLn);
		if (block.end != null) printEnd(block.end);
	}
	def printCfEdge(e: SsaCfEdge) {
		Terminal.puts(" ");
		Terminal.blue("#%1", e.src.uid);
		Terminal.puts("->");
		printDest(e);
	}
	def printInstr(i: SsaInstr) {
		if (i == null) {
			Terminal.puts("<null>");
			return;
		}
		Terminal.cyan("@%1", i.uid);
		var name = "<unknown>";
		var extra: string;
		
		if (SsaParam.?(i)) {
			name = "param ";
			extra = StringBuffer.new().puti(SsaParam.!(i).index).toString();
		} else if (SsaApplyOp.?(i)) {
			name = "apply ";
			extra = V3Op.renderOp(SsaApplyOp.!(i).op);
		} else if (SsaValue.?(i)) {
			name = "value ";
			extra = prog.render(SsaValue.!(i).val);
		} else if (SsaPhi.?(i)) {
			name = "phi   ";
		} else if (SsaThrow.?(i)) {
			name = "throw ";
			extra = SsaThrow.!(i).exception;
		} else if (SsaReturn.?(i)) {
			name = "ret   ";
		} else if (SsaSwitch.?(i)) {
			name = "sw    ";
		} else if (SsaGoto.?(i)) {
			name = "goto  ";
		}
		Terminal.puts(":");
		Terminal.puts(name);
		if (extra != null) Terminal.green("[%1] ", extra);
		var args = i.inputs;
		for (j = 0; j < args.length; j++) {
			if (j > 0) Terminal.puts(", ");
			printRef(args(j));
		}
		Terminal.putc(' ');
		printFacts(i.facts);
	}
	def printInstrLn(i: SsaInstr) {
		indent(2);
		printInstr(i);
		Terminal.ln();
	}
	def printEnd(end: SsaEnd) {
		printInstrLn(end);
		var succ = end.block.succ;
		if (SsaSwitch.?(end)) {
			var sw = SsaSwitch.!(end);
			for (i = 0; i < sw.vals.length; i++) {
				indent(3);
				Terminal.puts(prog.render(sw.vals(i)));
				Terminal.puts(" => ");
				printDest(succ(i));
				Terminal.ln();
			}
			indent(3);
			Terminal.puts("=> ");
			printDest(succ(sw.vals.length));
			Terminal.ln();
		} else if (SsaGoto.?(end)) {
			indent(3);
			Terminal.puts("=> ");
			printDest(succ(0));
			Terminal.ln();
		}
	}
	def printRef(i: SsaDfEdge) {
		if (i == null || i.dest == null) {
			Terminal.red("<null>", 0);
		} else if (SsaValue.?(i.dest)) {
			Terminal.green("#%1", prog.render(SsaValue.!(i.dest).val));
		} else if (SsaParam.?(i.dest)) {
			Terminal.cyan("$%1", SsaParam.!(i.dest).index);
		} else {
			Terminal.cyan("@%1", i.dest.uid);
		}
	}
	def indent(i: int) {
		while (i-- >= 0) Terminal.tab();
	}
	def printFacts(facts: int) {
		if (facts != 0) {
			var buf = Strings.toBuffer("[").puts(Terminal.CTRL_YELLOW);
			Facts.renderFacts(buf, facts);
			Terminal.putb(buf.puts(Terminal.CTRL_DEFAULT).putc(']'));
		}
	}
	def printDest(edge: SsaCfEdge) {
		if (edge.dest == null) Terminal.red("null", 0);
		else Terminal.blue("#%1", edge.dest.uid);
	}
}
