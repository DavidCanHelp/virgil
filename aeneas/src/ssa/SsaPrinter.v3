// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility to print SSA code.
class SsaPrinter(prog: Program) {
	def buf = TerminalBuffer.new();

	def printGraph(phase: string, render: StringBuffer -> StringBuffer, graph: SsaGraph) {
		if (phase != null) render(buf.puts(phase).puts(" SSA for: ")).ln();
		if (graph == null) buf.puts("\t\t<null>\n");
		else printBlocks(graph.bfBlocks());
		flush();
	}
	def printStats(phase: string, render: StringBuffer -> StringBuffer, graph: SsaGraph) {
		if (phase != null) render(buf.puts(phase).puts(" SSA stats for: "));
		var blocks = graph.bfBlocks();
		buf.format1(" -- %1 blocks", blocks.length);
		for (b in blocks) {
			buf.format1(" %1", b.instrs.length);
		}
		ln();
		flush();
	}
	def printBlocks(blocks: Array<SsaBlock>) {
		for (b in blocks) printBlock(b);
		for (b in blocks) b.clearMark();
	}
	def printBlockHeader(block: SsaBlock) {
		indent(1);
		buf.puts("block ");
		putid(block.uid);
		if (block.phis != null) {
			block.phis.phiEdges.apply(printCfEdge);
		}
		ln();
	}
	def printBlock(block: SsaBlock) {
		printBlockHeader(block);
		if (block.phis != null) block.phis.phiInstrs.apply(printInstrLn);
		block.instrs.apply(printInstrLn);
		if (block.end != null) printEnd(block.end);
	}
	def printCfEdge(e: SsaCfEdge) {
		buf.sp();
		putid(e.src.uid);
		buf.puts("->");
		printDest(e);
	}
	def printInstr(i: SsaInstr) {
		if (i == null) return putnull();
		cyan("@%1", i.uid);
		buf.putc(':');
		
		// XXX: clean this up when typecase is available
		if (SsaParam.?(i)) {
			buf.puts("param ");
			buf.green().puti(SsaParam.!(i).index).sp().end();
		} else if (SsaApplyOp.?(i)) {
			V3Op.renderInto(SsaApplyOp.!(i).op, buf);
			buf.sp();
		} else if (SsaValue.?(i)) {
			buf.puts("value ");
			buf.green();
			prog.renderResult(SsaValue.!(i).val, i.getType(), buf);
			buf.end().sp();
		} else if (SsaPhi.?(i)) {
			buf.puts("phi   ");
		} else if (SsaReturn.?(i)) {
			buf.puts("ret   ");
		} else if (SsaSwitch.?(i)) {
			buf.puts("sw    ");
		} else if (SsaGoto.?(i)) {
			buf.puts("goto  ");
		} else if (SsaThrow.?(i)) {
			buf.puts("throw ");
			buf.green().puts(SsaThrow.!(i).exception).sp().end();
		}
		var args = i.inputs;
		for (j < args.length) {
			if (j > 0) buf.puts(", ");
			printRef(args(j));
		}
		buf.sp();
		printFacts(i.facts);
	}
	def printInstrLn(i: SsaInstr) {
		indent(2);
		printInstr(i);
		ln();
	}
	def printEnd(end: SsaEnd) {
		printInstrLn(end);
		var succ = end.block.succ;
		if (SsaSwitch.?(end)) {
			var sw = SsaSwitch.!(end);
			for (i < sw.vals.length) {
				indent(3);
				prog.renderResult(sw.vals(i), null, buf);
				buf.puts(" => ");
				printDest(succ(i));
				ln();
			}
			indent(3);
			buf.puts("=> ");
			printDest(succ(sw.vals.length));
			ln();
		} else if (SsaGoto.?(end)) {
			indent(3);
			buf.puts("=> ");
			printDest(succ(0));
			ln();
		}
	}
	def printRef(i: SsaDfEdge) {
		if (i == null || i.dest == null) {
			putnull();
		} else if (SsaValue.?(i.dest)) {
			buf.green().putc('#');
			prog.renderResult(SsaValue.!(i.dest).val, null, buf);
			buf.end();
		} else if (SsaParam.?(i.dest)) {
			cyan("$%1", SsaParam.!(i.dest).index);
		} else {
			cyan("@%1", i.dest.uid);
		}
	}
	def indent(i: int) {
		while (i-- >= 0) buf.putc('\t');
	}
	def printFacts(facts: int) {
		if (facts != 0) {
			buf.putc('[').puts(Terminal.CTRL_YELLOW);
			Facts.renderFacts(buf, facts);
			buf.puts(Terminal.CTRL_DEFAULT).putc(']');
		}
	}
	def printDest(edge: SsaCfEdge) {
		if (edge.dest == null) putnull();
		else putid(edge.dest.uid);
	}
	def putid(id: int) {
		buf.blue().putc('#').puti(id).end();
	}
	def cyan(fmt: string, a: int) {
		buf.cyan().format1(fmt, a).end();
	}
	def green<T>(fmt: string, a: T) {
		buf.green().format1(fmt, a).end();
	}
	def putnull() {
		buf.red().puts("null").end();
	}
	def ln() {
		buf.ln();
		if (buf.length > 1000) {
			// for performance, buffer the output up to 1000 characters
			Terminal.putb(buf);
			buf.reset();
		}
	}
	def flush() {
		if (buf.length > 0) Terminal.putb(buf);
	}
}
