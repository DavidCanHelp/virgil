// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Performs load/store optimizations on a completed SsaGraph.
class SsaLoadOptimizer(context: SsaContext) {
	var pure = SsaLoadedFields.new();
	var impure = SsaLoadedFields.new();
	var any = false;

	def optimize() -> bool {
		// visit all the blocks of the graph, removing redundant loads.
		for (block in context.graph.bfBlocks()) optBlock(block);
		return any;
	}
	def optBlock(block: SsaBlock) {
		pure.length = 0;
		impure.length = 0;
		var i = block.next;
		while (SsaApplyOp.?(i)) {
			var instr = SsaApplyOp.!(i);
			var next = instr.next;
			var repl = optInstr(instr);
			if (repl != null) {
				any = true;
				instr.replace(repl);
				instr.remove();
			}
			i = next;
		}
	}
	def optInstr(apply: SsaApplyOp) -> SsaInstr {
		match (apply.op.opcode) {
			ClassAlloc: {
				if (memberOf(apply) != null) impure.length = 0;
			}
			// XXX: ClassGetMethod, ClassGetVirtual for monomorphic methods.
			ClassGetField: return load(apply.input0(), apply);
			ComponentGetField: return load(null, apply);
			ClassInitField: {
				var obj = apply.input0(), f = fieldOf(apply);
				pure.add(obj, f, apply.input1());
			}
			ClassSetField: return store(apply.input0(), apply);
			ComponentSetField: return store(null, apply);
			ComponentInit,
			CallMethod,
			CallClassVirtual,
			CallClosure,
			CallFunction,
			SystemOp: impure.length = 0;
			_: ;
		}
		return null;
	}
	def load(obj: SsaInstr, apply: SsaApplyOp) -> SsaInstr {
		if (apply.useList == null && apply.checkFact(Facts.O_NO_NULL_CHECK)) {
			apply.replace(null);
			return context.graph.zeroConst();  // XXX: recursively delete dead code
		}
		var m = memberOf(apply), val = find(obj, m);
		if (val != null) return val;
		if (m.isConst() || IrMethod.?(m)) pure.add(obj, m, apply);
		else impure.add(obj, m, apply);
		return null;
	}
	def store(obj: SsaInstr, apply: SsaApplyOp) -> SsaInstr {
		var f = fieldOf(apply);
		impure.kill(f);
		impure.add(obj, f, apply.input1());
		return null;
	}
	def find(o: SsaInstr, f: IrMember) -> SsaInstr {
		var v = pure.find(o, f);
		return if(v == null, impure.find(o, f), v);
	}
	def fieldOf(apply: SsaApplyOp) -> IrField {
		return IrField.!(apply.op.attr<IrMember>());
	}
	def memberOf(apply: SsaApplyOp) -> IrMember {
		return apply.op.attr<IrMember>();
	}
}
// Analysis data for tracking the loaded fields.
class SsaLoadedFields {
	var array = Array<(SsaInstr, IrMember, SsaInstr)>.new(4);
	var length = 0;
	def add(obj: SsaInstr, f: IrMember, val: SsaInstr) {
		if (length == array.length) array = Arrays.grow(array, array.length * 2);
		array(length++) = (obj, f, val);
	}
	def find(obj: SsaInstr, f: IrMember) -> SsaInstr {
		for (i < length) {
			var t = array(i);
			if (t.0 == obj && t.1 == f) return t.2;
		}
		return null;
	}
	def kill(f: IrField) {
		var i = 0;
		for (j < length) {
			var t = array(j);
			if (t.1 != f) {
				if (i != j) array(i) = t;
				i++;
			}
		}
		length = i;
	}
}
