// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Performs load/store optimizations on a completed SsaRegion.
class SsaLoadOptimizer(context: SsaContext) {
	var pure = SsaLoadedFields.new();
	var impure = SsaLoadedFields.new();
	var any = false;

	def optimize() -> bool {
		// visit all the blocks of the region, removing redundant loads.
		for (block in context.region.bfBlocks()) optBlock(block);
		return any;
	}
	def optBlock(block: SsaBlock) {
		pure.length = 0;
		impure.length = 0;
		var i = 0;
		for (j < block.instrs.length) {
			var instr = block.instrs.get(j);
			var repl = optInstr(instr);
			if (repl == null) {
				if (i != j) block.instrs.set(i, instr);
				i++;
			} else {
				any = true;
				instr.replace(repl);
			}
		}
		block.instrs.length = i;
	}
	def optInstr(i: SsaInstr) -> SsaInstr {
		var apply = SsaApplyOp.!(i);
		match (apply.op.opcode) {
			V3Opcode.ClassAlloc: {
				if (memberOf(apply) != null) impure.length = 0;
			}
			// XXX: ClassGetMethod, ClassGetVirtual for monomorphic methods.
			V3Opcode.ClassGetField: return load(apply.inputs(0).dest, apply);
			V3Opcode.ComponentGetField: return load(null, apply);
			V3Opcode.ClassInitField: {
				var obj = apply.inputs(0).dest, f = fieldOf(apply);
				pure.add(obj, f, apply.inputs(1).dest);
			}
			V3Opcode.ClassSetField: return store(apply.inputs(0).dest, apply);
			V3Opcode.ComponentSetField: return store(null, apply);
			V3Opcode.ComponentInit,
			V3Opcode.CallMethod,
			V3Opcode.CallClassVirtual,
			V3Opcode.CallDelegate,
			V3Opcode.CallFunction,
			V3Opcode.SystemOp: impure.length = 0;
		}
		return null;
	}
	def load(obj: SsaInstr, apply: SsaApplyOp) -> SsaInstr {
		if (apply.useList == null && apply.checkFact(Facts.O_NO_NULL_CHECK)) {
			apply.replace(null);
			return context.region.zeroConst();  // XXX: recursively delete dead code
		}
		var m = memberOf(apply), val = find(obj, m);
		if (val != null) return val;
		if (m.isConst() || IrMethod.?(m)) pure.add(obj, m, apply);
		else impure.add(obj, m, apply);
		return null;
	}
	def store(obj: SsaInstr, apply: SsaApplyOp) -> SsaInstr {
		var f = fieldOf(apply);
		impure.kill(f);
		impure.add(obj, f, apply.inputs(1).dest);
		return null;
	}
	def find(o: SsaInstr, f: IrMember) -> SsaInstr {
		var v = pure.find(o, f);
		return if(v == null, impure.find(o, f), v);
	}
	def fieldOf(apply: SsaApplyOp) -> IrField {
		return IrField.!(apply.op.attr<IrMember>());
	}
	def memberOf(apply: SsaApplyOp) -> IrMember {
		return apply.op.attr<IrMember>();
	}
}
// Analysis data for tracking the loaded fields.
class SsaLoadedFields {
	var array = Array<(SsaInstr, IrMember, SsaInstr)>.new(4);
	var length = 0;
	def add(obj: SsaInstr, f: IrMember, val: SsaInstr) {
		if (length == array.length) array = Arrays.grow(array, array.length * 2);
		array(length++) = (obj, f, val);
	}
	def find(obj: SsaInstr, f: IrMember) -> SsaInstr {
		for (i < length) {
			var t = array(i);
			if (t.0 == obj && t.1 == f) return t.2;
		}
		return null;
	}
	def kill(f: IrField) {
		var i = 0;
		for (j < length) {
			var t = array(j);
			if (t.1 != f) {
				if (i != j) array(i) = t;
				i++;
			}
		}
		length = i;
	}
}
