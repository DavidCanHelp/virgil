// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// All dataflow fact types are tracked by bits in the "facts" field of SsaInstrs.
// This component collects together the definition of the meanings of those bits
component SsaFacts {
	// table of fact names
	def factNames = Array<string>.new(32);
	var numFacts = 0;
	// properties of values
	def V_CONST		= fact("V_CONST");
	def V_ZERO		= fact("V_ZERO");
	def V_NON_ZERO		= fact("V_NON_ZERO");
	def V_ABOVE_ZERO	= fact("V_ABOVE_ZERO");
	def V_BELOW_ZERO	= fact("V_BELOW_ZERO");
	def V_NON_NEGATIVE	= fact("V_NON_NEGATIVE");
	// properties for operators
	def O_PURE		= fact("O_PURE");
	def O_FOLDABLE		= fact("O_FOLDABLE");
	def O_COMMUTATIVE	= fact("O_COMMUTATIVE");
	def O_FLIPPABLE		= fact("O_FLIPPABLE");
	def O_ASSOCIATIVE	= fact("O_ASSOCIATIVE");
	def O_REDUCIBLE		= fact("O_REDUCIBLE");
	def O_NO_SHIFT_CHECK	= fact("O_NO_SHIFT_CHECK");
	def O_NO_NULL_CHECK	= fact("O_NO_NULL_CHECK");
	def O_NO_BOUNDS_CHECK	= fact("O_NO_BOUNDS_CHECK");
	def O_NO_ZERO_CHECK	= fact("O_NO_ZERO_CHECK");
	def O_NO_LENGTH_CHECK	= fact("O_NO_LENGTH_CHECK");
	// properties for calls
//	def C_NO_GC_SAFEPOINTS	= fact("C_NO_GC_SAFEPOINTS");
//	def C_NO_ESCAPE		= fact("C_NO_ESCAPE");	
//	def C_NO_STACK_OVERFLOW	= fact("C_NO_STACK_OVERFLOW");	

	private def fact(name: string) -> int {
		factNames(numFacts) = name;
		numFacts = numFacts + 1;
		return 1 #<< (numFacts - 1);
	}
}
