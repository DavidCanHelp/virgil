// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Information about a basic block
class SsaBlockInfo(block: SsaBlock) {
	var loop: SsaLoopInfo;// loop information, if this block is a loop header
	var start: int = -1;	// start position of code belonging to this block
	var end: int = -1;	// end position of code belonging to this block
	def clearMark() { block.mark = -1; }
}
// Information about a loop
class SsaLoopInfo(index: int) {
	var start: int;	// start of block interval containing loop blocks
	var end: int;		// end of block interval containing loop blocks
	var depth: int;	// loop depth
	var exits: List<SsaCfEdge>; // edges leaving loop
}
// Computes an optimal ordering of basic blocks for an SSA region,
// e.g. for use in linear scan register allocation, code generation,
// or dataflow analysis.
class SsaBlockOrder(region: SsaRegion) {
	var order: Sequence<SsaBlockInfo>;
	var loops: Sequence<SsaLoopInfo>;
	private var count: int;
	private var list: List<SsaBlock>;
	private var loopEdges: List<SsaCfEdge>;

	def computeOrder() -> Sequence<SsaBlockInfo> {
		if (order != null) return order;
		var start = region.startBlock;
		if (start.succ.length == 0) {
			// single block region.
			start.mark = 0;
			return order = Sequences.of1(SsaBlockInfo.new(start));
		}
		// number the blocks in reverse postorder
		number(start);
		if (loopEdges != null) return computeOrderWithLoops();
		else return setBlockOrder(list);
	}
	// post-number a block recursively
	private def number(s: SsaBlock) {
		s.mark = -2;
		var succ = s.succ;
		for (i = succ.length - 1; i >= 0; i--) {
			var e = succ(i), d = e.dest;
			// check for loop edge
			if (d.mark == -2) loopEdges = List.new(e, loopEdges);
			else if (d.mark == -1) number(d);
		}
		s.mark = count++;
		list = List.new(s, list);
	}
	private def computeOrderWithLoops() -> Sequence<SsaBlockInfo> {
		return order = SsaLoopOrder.new(this, count).computeOrder(loopEdges);
	}
	// clear all marks on all blocks
	def clear() {
		if (order == null) return;
		order.apply(SsaBlockInfo.clearMark);
	}
	def isImmediatelyAfter(a: SsaBlock, b: SsaBlock) -> bool {
		return (a.mark + 1) == b.mark;
	}
	def isInLoop(a: SsaBlock, loop: int) -> bool {
		var l = loops.get(loop), m = a.mark;
		return m >= l.start && m < l.end;
	}
	private def setBlockOrder(list: List<SsaBlock>) -> Sequence<SsaBlockInfo> {
		var array = Array<SsaBlockInfo>.new(count);
		for (i = 0; i < count; i++) {
			list.head.mark = i;
			array(i) = SsaBlockInfo.new(list.head);
			list = list.tail;
		}
		this.list = null;
		this.loopEdges = null;
		return order = Sequences.ofN(array);
	}
	def print() {
		var buf = StringBuffer.new();
		for (i = 0; i < order.length; i++) {
			var b = order.get(i).block;
			buf.reset();
			if (loops != null) {
				for (j = 0; j < loops.length; j++) {
					if (isInLoop(b, j)) buf.puts("| ");
					else buf.puts("  ");
				}
			}
			buf.putc('#').puti(b.uid).putc('.').puti(b.mark);
			for (j = 0; j < b.succ.length; j++) {
				var d = b.succ(j).dest;
				if (j == 0) buf.puts(" -> ");
				else buf.puts(", ");
				buf.putc('#').puti(d.uid).putc('.').puti(d.mark);
			}
			Terminal.putbln(buf);
		}
	}
}
// Used internally below to recursively output and number the nodes
class SsaLoopNode {
	def loop: SsaLoopInfo;
	def start: List<SsaLoopNode>;
	def end: List<SsaLoopNode>;
	def block: SsaBlock;
	new(loop, start, end, block) { }
	def output(order: Sequence<SsaBlockInfo>) {
		if (block != null) {
			// output a single block.
			block.mark = order.length;
			order.add(SsaBlockInfo.new(block));
		} else {
			// recursively output blocks
			loop.start = order.length;
			for (l = start; l != end; l = l.tail) l.head.output(order);
			loop.end = order.length;
			order.get(loop.start).loop = loop;
		}
	}
}
// A more complex algorithm for computing the block order when the region has loops.
// Note this algorithm will not work for regions that have irreducible loops.
class SsaLoopOrder {
	def order: SsaBlockOrder;
	def count: int;
	def loopHeaders = Array<SsaLoopInfo>.new(count);
	def bitmap = BitMatrix.new(1, count);
	var list: List<SsaLoopNode>;
	var number: int;

	new(order, count) {
		order.loops = Sequence.new();
	}

	def computeOrder(loopEdges: List<SsaCfEdge>) -> Sequence<SsaBlockInfo> {
		// first mark all blocks in all loops
		var loopNum = Array<int>.new(count);
		for (l = loopEdges; l != null; l = l.tail) {
			var s = l.head.src, d = l.head.dest;
			var loop = newLoop(d);
			setLoop(d, loop);
			markLoopBlocks(s, d, loop);
		}
		// now perform a loop-aware depth-first traversal
		number = count;
		numberBlock(order.region.startBlock, null);
		var blocks = Sequence<SsaBlockInfo>.new().grow(count);
		Lists.apply(list, SsaLoopNode.output(_, blocks));
		return blocks;
	}
	def markLoopBlocks(s: SsaBlock, h: SsaBlock, loop: SsaLoopInfo) {
		// iterate backwards, marking all blocks as inside this loop
		if (inLoop(s, loop)) return; // already marked
		if (s == h) return; // stop at loop header
		setLoop(s, loop);
		for (l = s.pred(); l != null; l = l.next) markLoopBlocks(l.src, h, loop);
	}
	def numberBlock(s: SsaBlock, loop: SsaLoopInfo) {
		if (setMark(s)) return;
		var newLoop = loopHeaders(s.mark);
		if (newLoop != null) numberLoop(s, newLoop, loop);
		else numberSucc(s, loop);
	}
	def numberLoop(s: SsaBlock, newLoop: SsaLoopInfo, loop: SsaLoopInfo) {
		var oldList = list; // keep track of nodes added from this loop
		numberSucc(s, newLoop);
		var newList = list;
		list = oldList; // "pop" loop nodes off stack
		if (loop == null) {
			// process edges leaving this loop to the nonloop part
			for (l = newLoop.exits; l != null; l = l.tail) numberBlock(l.head.dest, null);
		} else {
			// process any edges exiting the inner loop but still in outer loop
			for (l = newLoop.exits; l != null; l = l.tail) {
				var e = l.head;
				if (inLoop(e.dest, loop)) numberBlock(e.dest, loop);
				else loop.exits = List.new(e, loop.exits);
			}
		}
		// push a single node that represents the entire loop
		list = List.new(SsaLoopNode.new(newLoop, newList, oldList, null), list);
	}
	def numberSucc(s: SsaBlock, loop: SsaLoopInfo) {
		var succ = s.succ;
		if (loop == null) {
			// visit each successor
			for (i = succ.length - 1; i >= 0; i--) numberBlock(succ(i).dest, loop);
		} else {
			// visit only successors that are in this loop
			for (i = succ.length - 1; i >= 0; i--) {
				var e = succ(i);
				if (inLoop(e.dest, loop)) numberBlock(e.dest, loop);
				else loop.exits = List.new(e, loop.exits);
			}
		}
		list = List.new(SsaLoopNode.new(null, null, null, s), list);
	}
	def newLoop(h: SsaBlock) -> SsaLoopInfo {
		// get or create the loop information given the header block
		var loop = loopHeaders(h.mark);
		if (loop == null) {
			loop = SsaLoopInfo.new(order.loops.length);
			bitmap.grow(loop.index + 2);
			order.loops.add(loop);
			loopHeaders(h.mark) = loop;
		}
		return loop;
	}
	def setLoop(a: SsaBlock, loop: SsaLoopInfo) {
		// mark a block as inside a given loop
		bitmap.set(loop.index + 1, a.mark);
	}
	def inLoop(a: SsaBlock, loop: SsaLoopInfo) -> bool {
		// check whether a block is inside a given loop
		return bitmap.get(loop.index + 1, a.mark);
	}
	def setMark(a: SsaBlock) -> bool {
		// set the mark on a block, return true if it was already marked
		return bitmap.set(0, a.mark);
	}
	def printBitmap() {
		Terminal.put("  marked: ");
		printBits(0);
		Terminal.ln();
		for (j = 0; j < order.loops.length; j++) {
			Terminal.put1("  loop %1: ", j);
			printBits(j);
			Terminal.ln();
		}
	}
	def printBits(row: int) {
		var base = (row + 1) * bitmap.width, bits = bitmap.bits;
		for (i = 0; i < count; i++) {
			var index = base + (i #>> 5), mask = 1 #<< (i & 0b11111);
			var set = (bits(index) & mask) != 0;
			if (set) Terminal.putc('X');
			else Terminal.putc('.');
		}
	}
}
