// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// RiRuntime provides the platform-dependent runtime hooks called by the compiler
// to implement signal handling (and therefore exception handling), GC, and
// initialization of the runtime environment.
component RiRuntime {
	def SIGFPE  = 8;
	def SIGBUS  = 10;
	def SIGSEGV = 11;
	def sw: RiStackWalker;
	var gcInit: void -> void;
	var gcCollect: (int, Pointer, Pointer) -> Pointer;
	// initialize runtime system from supplied arguments and return remaining args
	def init(argc: int, argp: Pointer, envp: Pointer) -> Array<string> {
		// install handler for SIGFPE, SIGBUS, and SIGSEGV
		RiOs.installHandler(SIGFPE);
		RiOs.installHandler(SIGBUS);
		RiOs.installHandler(SIGSEGV);

		if (gcInit != null) gcInit();
		if (argp == Pointer.NULL) return null;

		// convert argc, argp into an Array<string> for main
		argp = argp.add(Pointer.SIZE); // ignore first arg
		argc--;                        // ignore first arg
		var args = Array<string>.new(argc);
		for (i = 0; i < argc; i++) {
			args(i) = toString(argp.add(i * Pointer.SIZE).load<Pointer>());
		}
		return args;
	}
	// handle a signal generated by the program
	def signal(signum: int, siginfo: Pointer, ucontext: Pointer) {
		var ip = RiOs.getIp(ucontext), sp = RiOs.getSp(ucontext);
		match (signum) {
			SIGFPE: return fatalException("DivideByZeroException", null, ip, sp);
			SIGBUS, SIGSEGV: {
				if (ip.gteq(CiRuntime.EX_START) && ip.lt(CiRuntime.EX_END)) {
					// IP lies in exception region, use exception entry
					var exEntry = CiRuntime.EX_TABLE.add(ip.sub(CiRuntime.EX_START));
					var frameWords = sw.printExEntry(exEntry, true);
					sw.printStack(RiOs.callerFrame(ip, sp, frameWords));
					return RiOs.exit(255);
				} else {
					if (ip == Pointer.NULL) {
						// assume an indirect call to null, generate NCE
						ip = sp.load<Pointer>().add(-1); // return address is on stack
						sp = sp.add(Pointer.SIZE); // skip return address
					}
					// should be a source entry at this IP
					return fatalException("NullCheckException", null, ip, sp);
				}
			}
			// XXX: SIGILL -> *bad*
			// XXX: SIGQUIT -> stacktrace + quit
			// XXX: SIGKILL -> stacktrace + quit
			// XXX: SIGPROF -> take profiling sample
		}
		System.err.puts("UnexpectedSignal: ").puti(signum).ln();
		sw.printStack(ip, sp);
		RiOs.exit(255);
	}
	// perform GC and allocate requested bytes or generate !HeapOverflowError
	def gc(size: int, ip: Pointer, sp: Pointer) -> Pointer {
		ip = ip.add(-1); // TODO: platform-dependent adjust of caller ip
		if (gcCollect != null) {
			// call the installed collector
			return gcCollect(size, ip, sp);
		} else {
			fatalException("HeapOverflow", "no garbage collector installed", ip, sp);
			return Pointer.NULL; // unreachable
		}
	}
	// convert a null-terminated string pointer to a byte array
	private def toString(p: Pointer) -> string {
		for (e = p; true; e = e.add(1)) {
			if (e.load<byte>() == '\x00') {
				var len = e.sub(p), str = Array<byte>.new(len);
				for (i = 0; i < len; i++) str(i) = p.add(i).load<byte>();
				return str;
			}
		}
		return null; // unreachable
	}
	def fatalException(ex: string, msg: string, ip: Pointer, sp: Pointer) {
		System.err.putc('!').puts(ex);
		if (msg != null) System.err.puts(": ").puts(msg).ln();
		else System.err.ln();
		sw.printStack(ip, sp);
		RiOs.exit(255);
	}
}
// Encapsulates logic relating to walking the stack for printing exceptions
component RiStackWalker {
	new() {
		System.printStack = printStack;
	}
	def printStack(ip: Pointer, sp: Pointer) {
		while (true) {
			var sourceEntry = RiTables.findSource(ip);
			if (sourceEntry == Pointer.NULL) break;
			var frameWords = printSourceEntry(ip, sourceEntry);
			var t = RiOs.callerFrame(ip, sp, frameWords);
			ip = t.0; sp = t.1;
		}
		System.err.ln();
	}
	def printLoc(ip: Pointer) -> int {
		if (ip.lt(CiRuntime.CODE_START) || ip.gteq(CiRuntime.CODE_END)) {
			System.err.puts("unknown\n");
			return 0;
		}
		var sourceEntry = RiTables.findSource(ip);
		if (sourceEntry == Pointer.NULL) {
			var methodEntry = RiTables.findMethod(ip);
			if (methodEntry != Pointer.NULL) return printMethodEntry(methodEntry, 0, 0);
			System.err.puts("unknown\n");
			return 0;
		} else {
			return printSourceEntry(ip, sourceEntry);
		}
	}
	def printSourceEntry(ip: Pointer, sourceEntry: Pointer) -> int {
		var entry = sourceEntry.load<int>() #>> RiTables.PAGE_SHIFT;
		if ((entry & 0x80000) != 0) {
			// | 20                  0 |
			// | 1:1 0:1   extended:18 |
			// | 1:1 1:1 framewords:18 |
			if ((entry & 0x40000) != 0) {
				var exEntry = CiRuntime.EX_TABLE.add(RiTables.EX_ENTRY_SIZE * (entry & 0x3FFF));
				return printExEntry(exEntry, false);
			} else {
				return entry & 0x3FFFF;
			}
		} else {
			// | 20              0 |
			// | 0:1 line:11 col:8 |
			var line = entry #>> 8, col = entry & 0xFF;
			var methodEntry = RiTables.findMethod(ip);
			return printMethodEntry(methodEntry, line, col);			
		}
	}
	def printExEntry(exEntry: Pointer, printException: bool) -> int {
		// | 32             ex0            0 || 16      ex1      0 |
		// | FFFFF:20      ex:4     0:4 fw:4 ||    framewords:16   |
		// | FFFFF:20      ex:4 count:4 fw:4 ||    framewords:16   | ...
		// | meth:20       ex:4        col:8 ||       line:16      |
		var ex0 = exEntry.load<int>(), ex1 = exEntry.add(4).load<int>() & 0xFFFF;
		var meth = ex0 #>> 12;
		if (printException) {
			var ex = (ex0 #>> 8) & 0xF;
			System.err.putc('!').putz(CiRuntime.EX_STRINGS.add(Pointer.SIZE * ex).load<Pointer>()).ln();
		}
		if (meth == 0xFFFFF) {
			var count = (ex0 #>> 4) & 0xF;
			// multiple entries
			for (i = 1; i < count; i++) {
				printExEntry(exEntry.add(i * RiTables.EX_ENTRY_SIZE), false);
			}
			return ex1;
		} else {
			// method + exception + line + col
			var col = ex0 & 0xFF, line = ex1;
			return printMethodEntry(CiRuntime.SRC_METHODS_TABLE.add(4 * meth), line, col);
		}
	}
	def printMethodEntry(methodEntry: Pointer, line: int, col: int) -> int {
                // | 32           meth0           0 || 32         meth1         0 |
		// | framewords:12 name:8 offset:12 || name:16           class:16 |
		var meth0 = methodEntry.load<int>();
		var meth1 = extendedMethodEntry(methodEntry).load<int>();
		var nameOffset = (((meth0 #>> 12) & 0xFF) #<< 16) | (meth1 #>> 16);
		var methName = CiRuntime.SRC_STRINGS.add(nameOffset);
		var classOffset = 8 * (meth1 & 0xFFFF);
		var classEntry = CiRuntime.SRC_CLASS_TABLE.add(classOffset);
		printFrame(classEntry, methName, line, col);
		var frameWords = meth0 #>> 20;
		return frameWords;
	}
	private def extendedMethodEntry(methodEntry: Pointer) -> Pointer {
		var extTable = CiRuntime.SRC_METHODS_TABLE_END;
		return extTable.add(methodEntry.sub(CiRuntime.SRC_METHODS_TABLE));
	}
	def printFrame(classEntry: Pointer, methName: Pointer, line: int, col: int) {
                // | 32         0 || 32        0 |
		// | className:32 || fileName:32 |
		var className = CiRuntime.SRC_STRINGS.add(classEntry.load<int>());
		System.err.puts("\tin ").putz(className).putc('.').putz(methName).puts("() [");
		var fileName = CiRuntime.SRC_STRINGS.add(classEntry.add(4).load<int>());
		System.err.putz(fileName);
		if (line > 0) {
			System.err.puts(" @ ").puti(line).putc(':').puti(col);
		}
		System.err.puts("]\n");
	}
}
// Runtime tables are exposed by the compiler as values in a "CiRuntime" component.
// This component provides utilities to the rest of the runtime to traverse these
// tables and serves to separate them from encoding details.
component RiTables {
	def REF_SIZE      = 4;    // XXX: platform-dependent reference size
	def INT_SIZE      = 4;
	def PAGE_SIZE     = 4096; // XXX: page size from compiler
	def PAGE_SHIFT    = 12;
	def PAGE_MASK     = 0xFFF;
	def EX_ENTRY_SIZE = 6;    // XXX: ex entry size from compiler

	def findSource(ip: Pointer) -> Pointer {
		return exactMatch(searchTable(CiRuntime.SRC_POINTS_PAGES, CiRuntime.SRC_POINTS_TABLE, ip));
	}
	def findMethod(ip: Pointer) -> Pointer {
		var r = searchTable(CiRuntime.SRC_METHODS_PAGES, CiRuntime.SRC_METHODS_TABLE, ip);
		if (r.0.lt(CiRuntime.SRC_METHODS_TABLE)) return Pointer.NULL;
		return r.0;
	}
	def exactMatch(p: Pointer, q: Pointer) -> Pointer {
		return if(p == q, p, Pointer.NULL);
	}
	// perform a binary search on a table, returning pointers (p, q) to adjacent entries
	// with p.ip <= ip <= q.ip || p == null && q == null
	// assumes 4-byte entries with lower #PAGE_SHIFT bits indicating the page offset
	def searchTable(pageTable: Pointer, table: Pointer, ip: Pointer) -> (Pointer, Pointer) {
		var none = (Pointer.NULL, Pointer.NULL);
		if (ip.lt(CiRuntime.CODE_START)) return none; // out of code range
		if (ip.gteq(CiRuntime.CODE_END)) return none; // out of code range

		var code_offset = ip.sub(CiRuntime.CODE_START);
		var key_offset = code_offset & PAGE_MASK;
		var code_page = code_offset #>> PAGE_SHIFT;
		var start_p = loadPage(pageTable, code_page);
		var end_p = loadPage(pageTable, code_page + 1);
		// binary search for the entry
		while (start_p.lt(end_p)) {
			var diff = (end_p.sub(start_p) / 2) & 0xFFFFFFFC;
			var mid_p = start_p.add(diff);
			var offset = mid_p.load<int>() & PAGE_MASK;
			if (offset < key_offset) {
				if (start_p == mid_p) return (start_p, end_p);
				else start_p = mid_p;
			} else if (offset == key_offset) {
				return (mid_p, mid_p);
			} else {
				end_p = mid_p;
			}
		}
		return (start_p.add(-4), end_p); // start_p == end_p
	}
	def loadPage(pageTable: Pointer, num: int) -> Pointer {
		return pageTable.add(num * Pointer.SIZE).load<Pointer>();
	}
	def codePages() -> int {
		return (CiRuntime.CODE_END.sub(CiRuntime.CODE_START) + PAGE_SIZE - 1) / PAGE_SIZE;
	}
}
