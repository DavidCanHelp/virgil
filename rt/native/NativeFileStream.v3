// Copyright 2019 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// a closure for a file descriptor, e.g. to make STDERR easier to use
class NativeFileStream(out: (int, Pointer, int) -> int, fd: int) {
	def iobuf = Array<byte>.new(11);
	// print an integer to this stream
	def puti(i: int) -> this {
		if (i == 0) {
                	putc('0');
                        return;
                }
		var negative = true;
		if (i > 0) {
			negative = false;
			i = 0 - i;
		}
		var pos = 11;
		while (i != 0) { // XXX: use pointer loop instead?
			var digit = byte.!('0' - i % 10);
			iobuf[--pos] = digit;
			i = i / 10;
		}
		if (negative) iobuf[--pos] = '-';
		out(fd, Pointer.atContents(iobuf) + pos, 11 - pos);
	}
	// print a string to this stream
	def puts(str: string) -> this {
		out(fd, Pointer.atContents(str), str.length);
	}
	// print a single character to this stream
	def putc(ch: byte) -> this {
		iobuf[0] = ch;
		out(fd, Pointer.atContents(iobuf), 1);
	}
	// print a pointer e.g. (0xFF00AB02) to this stream
	def putp(p: Pointer) -> this {
		// XXX: print 64-bit pointers
		var val = p - Pointer.NULL;
		iobuf[0] = '0';
		iobuf[1] = 'x';
		hexChar(2, val >>> 28);
		hexChar(3, val >>> 24);
		hexChar(4, val >>> 20);
		hexChar(5, val >>> 16);
		hexChar(6, val >>> 12);
		hexChar(7, val >>> 8);
		hexChar(8, val >>> 4);
		hexChar(9, val);
		out(fd, Pointer.atContents(iobuf), 10);
	}
	private def hexChar(index: int, val: int) {
		var v = val & 0xF;
		iobuf[index] = byte.!(if(v > 9, 'A' + v - 10, '0' + v));
	}
	// print a zero-terminated string to this stream
	def putz(p: Pointer) -> this {
		for (len = 0; true; len++) {
			if ((p + len).load<byte>() == '\x00') {
				out(fd, p, len);
                                break;
			}
		}
	}
	def ln() -> this {
		putc('\n');
	}
}
