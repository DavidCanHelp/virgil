// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// defines constants associated with Linux system calls.
component LinuxConst {
	// standard file descriptors
	def STDIN  = 0;
	def STDOUT = 1;
	def STDERR = 2;

	// maximum length of a path
	def MAXPATHLEN = 1024;

	// "errno" error codes from the kernel
	def EPERM  	= error(1, "Operation not permitted");
	def ENOENT	= error(2, "No such file or directory");
	def ESRCH	= error(3, "No such process");
	def EINTR	= error(4, "Interrupted system call");
	def EIO		= error(5, "I/Oerror");
	def ENXIO	= error(6, "No such device or address");
	def E2BIG	= error(7, "Argument list too long");
	def ENOEXEC	= error(8, "Exec formaterror");
	def EBADF	= error(9, "Bad file number");
	def ECHILD	= error(10, "No child processes");
	def EAGAIN	= error(11, "Try again");
	def ENOMEM	= error(12, "Out of memory");
	def EACCES	= error(13, "Permission denied");
	def EFAULT	= error(14, "Bad address");
	def ENOTBLK	= error(15, "Block device required");
	def EBUSY	= error(16, "Device or resource busy");
	def EEXIST	= error(17, "File exists");
	def EXDEV	= error(18, "Cross-device link");
	def ENODEV	= error(19, "No such device");
	def ENOTDIR	= error(20, "Not a directory");
	def EISDIR	= error(21, "Is a directory");
	def EINVAL	= error(22, "Invalid argument");
	def ENFILE	= error(23, "File table overflow");
	def EMFILE	= error(24, "Too many open files");
	def ENOTTY	= error(25, "Not a typewriter");
	def ETXTBSY	= error(26, "Text file busy");
	def EFBIG	= error(27, "File too large");
	def ENOSPC	= error(28, "No space left on device");
	def ESPIPE	= error(29, "Illegal seek");
	def EROFS	= error(30, "Read-only file system");
	def EMLINK	= error(31, "Too many links");
	def EPIPE	= error(32, "Broken pipe");
	def EDOM	= error(33, "Math argument out of domain of func");
	def ERANGE	= error(34, "Math result not representable");

	// constants associated with open()
	def O_RDONLY	= 0;      // open read-only
	def O_WRONLY	= 1;      // open write-only
	def O_RDWR	= 2;      // open read-write
	def O_NONBLOCK  = 0x0800; // no delay
	def O_APPEND    = 0x0400; // set append mode
	def O_SYNC      = 0x1000; // synch I/O file integrity
	def O_ASYNC     = 0x2000; // signal pgrp when data ready
	def O_CREAT     = 0x0040; // create if nonexistent
	def O_TRUNC     = 0x0200; // truncate to zero length
	def O_EXCL      = 0x0080; // error if already exists
	def O_NOCTTY    = 0x0100; // don't assign controlling terminal

	// constants for lseek
	def SEEK_SET = 0;
	def SEEK_CUR = 1;
	def SEEK_END = 2;

	// word offset of st_size in statbuf
	def STAT_BUF_SIZE = 22;
	def STAT_WOFF_ST_SIZE = 5;

	def error(val: int, description: string) -> int {
		// TODO: record the description in a table
		return val;
	}
}
