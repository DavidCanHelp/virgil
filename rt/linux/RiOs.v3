// x86-linux target-specific runtime routines.
component RiOs {
//	def sigaction_buf = [2, 0, 0, 0];
	def installHandler(signum: int) {
		// fill out sigaction struct
//		var sigbuf = Pointer.atContents(sigaction_buf);
//		sigbuf.add(4).store(CiRuntime.signalStub);
		// install handler
		Linux.signal(signum, CiRuntime.signalStub);
	}
	def getIp(ucontext: Pointer) -> Pointer {
		return ucontext.add(0x1c).load<Pointer>().add(0x34).load<Pointer>();
	}
	def getSp(ucontext: Pointer) -> Pointer {
		return ucontext.add(0x1c).load<Pointer>().add(0x28).load<Pointer>();
	}
	// advance the ip and sp from the current frame to the caller's frame
	def callerFrame(ip: Pointer, sp: Pointer, frameWords: int) -> (Pointer, Pointer) {
		sp = sp.add((1 + frameWords) * Pointer.SIZE);
		ip = sp.add(0 - Pointer.SIZE).load<Pointer>().add(-1);
		return (ip, sp);
	}
	// exit with the given return code
	def exit(code: int) {
	        Linux.exit(code);
	}
}
