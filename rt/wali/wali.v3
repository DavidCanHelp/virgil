// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

//type syscall_result(v: u64) #unboxed;
//type size_t(v: u32) #unboxed;
//type mode_t(v: i32) #unboxed;
//type off_t(v: i64) #unboxed;
type nfds_t(v: u32) #unboxed;
type socklen_t(v: u32) #unboxed;
type clockid_t(v: i32) #unboxed;
type uid_t(v: i32) #unboxed;
type pid_t(v: i32) #unboxed;
type gid_t(v: i32) #unboxed;

import component wali {
	/// Syscall methods
	// [0] read(int, void*, u32)
	def SYS_read(fd: i32, a2: Pointer/*<void>*/, a3: u32) -> u64;
	// [1] write(int, void*, u32)
	def SYS_write(fd: i32, a2: Pointer/*<void>*/, a3: u32) -> u64;
	// [2] open(char*, int, i32)
	def SYS_open(path: Pointer/*<char>*/, path_len: i32, a3: i32) -> u64;
	// [3] close(int)
	def SYS_close(fd: i32) -> u64;
	// [4] stat(char*, struct stat*)
	def SYS_stat(path: Pointer/*<char>*/, buf: Pointer/*<struct-stat>*/) -> u64;
	// [5] fstat(int, struct stat*)
	def SYS_fstat(fd: i32, a2: Pointer/*<struct-stat>*/) -> u64;
	// [6] lstat(char*, struct stat*)
	def SYS_lstat(path: Pointer/*<char>*/, a2: Pointer/*<struct-stat>*/) -> u64;
	// [7] poll(struct pollfd*, nfds_t, int)
	def SYS_poll(a1: Pointer/*<struct-pollfd>*/, a2: nfds_t, a3: i32) -> u64;
	// [8] lseek(int, i64, int)
	def SYS_lseek(fd: i32, a2: i64, a3: i32) -> u64;
	// [9] mmap(void*, u32, int, int, int, i64)
	def SYS_mmap(addr: Pointer/*<void>*/, a2: u32, a3: i32, a4: i32, a5: i32, a6: i64) -> u64;
	// [10] mprotect(void*, u32, int)
	def SYS_mprotect(addr: Pointer/*<void>*/, a2: u32, a3: i32) -> u64;
	// [11] munmap(void*, u32)
	def SYS_munmap(addr: Pointer/*<void>*/, a2: u32) -> u64;
	// [12] brk(void*)
	def SYS_brk(addr: Pointer/*<void>*/) -> u64;
	// [13] rt_sigaction(int, struct sigaction*, struct sigaction*, u32)
	def SYS_rt_sigaction(a1: i32, a2: Pointer/*<struct-sigaction>*/, a3: Pointer/*<struct-sigaction>*/, a4: u32) -> u64;
	// [14] rt_sigprocmask(int, sigset_t*, sigset_t*, u32)
	def SYS_rt_sigprocmask(a1: i32, a2: Pointer/*<sigset_t>*/, a3: Pointer/*<sigset_t>*/, a4: u32) -> u64;
	// [15] rt_sigreturn(long)
	def SYS_rt_sigreturn(a1: i64) -> u64;
	// [16] ioctl(int, int, char*)
	def SYS_ioctl(fd: i32, a2: i32, a3: Pointer/*<char>*/) -> u64;
	// [17] pread64(int, char*, u32, i64)
	def SYS_pread64(fd: i32, a2: Pointer/*<char>*/, a3: u32, a4: i64) -> u64;
	// [18] pwrite64(int, char*, u32, i64)
	def SYS_pwrite64(fd: i32, a2: Pointer/*<char>*/, a3: u32, a4: i64) -> u64;
	// [19] readv(int, struct iovec*, int)
	def SYS_readv(fd: i32, a2: Pointer/*<struct-iovec>*/, a3: i32) -> u64;
	// [20] writev(int, struct iovec*, int)
	def SYS_writev(fd: i32, a2: Pointer/*<struct-iovec>*/, a3: i32) -> u64;
	// [21] access(char*, int)
	def SYS_access(a1: Pointer/*<char>*/, a2: i32) -> u64;
	// [22] pipe(int*)
	def SYS_pipe(a1: Pointer/*<int>*/) -> u64;
	// [23] select(int, fd_set*, fd_set*, fd_set*, struct timeval*)
	def SYS_select(a1: i32, a2: Pointer/*<fd-set>*/, a3: Pointer/*<fd-set>*/, a4: Pointer/*<fd-set>*/, a5: Pointer/*<struct-timeval>*/) -> u64;
	// [24] sched_yield()
	def SYS_sched_yield() -> u64;
	// [25] mremap(void*, u32, u32, int, void*)
	def SYS_mremap(a1: Pointer/*<void>*/, a2: u32, a3: u32, a4: i32, a5: Pointer/*<void>*/) -> u64;
	// [26] msync(void*, u32, int)
	def SYS_msync(a1: Pointer/*<void>*/, a2: u32, a3: i32) -> u64;
	// [28] madvise(void*, u32, int)
	def SYS_madvise(a1: Pointer/*<void>*/, a2: u32, a3: i32) -> u64;
	// [32] dup(int)
	def SYS_dup(fd: i32) -> u64;
	// [33] dup2(int, int)
	def SYS_dup2(a1: i32, a2: i32) -> u64;
	// [35] nanosleep(struct timespec*, struct timespec*)
	def SYS_nanosleep(a1: Pointer/*<struct-timespec>*/, a2: Pointer/*<struct-timespec>*/) -> u64;
	// [37] alarm(int)
	def SYS_alarm(a1: i32) -> u64;
	// [38] setitimer(int, struct itimerval*, struct itimerval*)
	def SYS_setitimer(a1: i32, a2: Pointer/*<struct-itimerval>*/, a3: Pointer/*<struct-itimerval>*/) -> u64;
	// [39] getpid()
	def SYS_getpid() -> u64;
	// [41] socket(int, int, int)
	def SYS_socket(a1: i32, a2: i32, a3: i32) -> u64;
	// [42] connect(int, struct sockaddr*, socklen_t)
	def SYS_connect(a1: i32, a2: Pointer/*<struct-sockaddr>*/, a3: socklen_t) -> u64;
	// [43] accept(int, struct sockaddr*, socklen_t*)
	def SYS_accept(a1: i32, a2: Pointer/*<struct-sockaddr>*/, a3: Pointer/*<socklen-t>*/) -> u64;
	// [44] sendto(int, void*, u32, int, struct sockaddr*, socklen_t)
	def SYS_sendto(a1: i32, a2: Pointer/*<void>*/, a3: u32, a4: i32, a5: Pointer/*<struct-sockaddr>*/, a6: socklen_t) -> u64;
	// [45] recvfrom(int, void*, u32, int, struct sockaddr*, socklen_t*)
	def SYS_recvfrom(a1: i32, a2: Pointer/*<void>*/, a3: u32, a4: i32, a5: Pointer/*<struct-sockaddr>*/, a6: Pointer/*<socklen_t>*/) -> u64;
	// [46] sendmsg(int, struct msghdr*, int)
	def SYS_sendmsg(a1: i32, a2: Pointer/*<struct-msghdr>*/, a3: i32) -> u64;
	// [47] recvmsg(int, struct msghdr*, int)
	def SYS_recvmsg(a1: i32, a2: Pointer/*<struct-msghdr>*/, a3: i32) -> u64;
	// [48] shutdown(int, int)
	def SYS_shutdown(a1: i32, a2: i32) -> u64;
	// [49] bind(int, struct sockaddr*, socklen_t)
	def SYS_bind(a1: i32, a2: Pointer/*<struct-sockaddr>*/, a3: socklen_t) -> u64;
	// [50] listen(int, int)
	def SYS_listen(a1: i32, a2: i32) -> u64;
	// [51] getsockname(int, struct sockaddr*, socklen_t*)
	def SYS_getsockname(a1: i32, a2: Pointer/*<struct-sockaddr>*/, a3: Pointer/*<socklen_t>*/) -> u64;
	// [52] getpeername(int, struct sockaddr*, socklen_t*)
	def SYS_getpeername(a1: i32, a2: Pointer/*<struct-sockaddr>*/, a3: Pointer/*<socklen_t>*/) -> u64;
	// [53] socketpair(int, int, int, int*)
	def SYS_socketpair(a1: i32, a2: i32, a3: i32, a4: Pointer/*<int>*/) -> u64;
	// [54] setsockopt(int, int, int, void*, socklen_t)
	def SYS_setsockopt(a1: i32, a2: i32, a3: i32, a4: Pointer/*<void>*/, a5: socklen_t) -> u64;
	// [55] getsockopt(int, int, int, void*, socklen_t*)
	def SYS_getsockopt(a1: i32, a2: i32, a3: i32, a4: Pointer/*<void>*/, a5: Pointer/*<socklen_t>*/) -> u64;
	// [57] fork()
	def SYS_fork() -> u64;
	// [59] execve(char*, char*, char*)
	def SYS_execve(a1: Pointer/*<char>*/, a2: Pointer/*<char>*/, a3: Pointer/*<char>*/) -> u64;
	// [60] exit(int)
	def SYS_exit(a1: i32) -> u64;
	// [61] wait4(pid_t, int*, int, struct rusage*)
	def SYS_wait4(a1: pid_t, a2: Pointer/*<int>*/, a3: i32, a4: Pointer/*<struct-rusage>*/) -> u64;
	// [62] kill(pid_t, int)
	def SYS_kill(a1: pid_t, a2: i32) -> u64;
	// [63] uname(struct utsname*)
	def SYS_uname(a1: Pointer/*<struct-utsname>*/) -> u64;
	// [72] fcntl(int, int, int)
	def SYS_fcntl(a1: i32, a2: i32, a3: i32) -> u64;
	// [73] flock(int, int)
	def SYS_flock(a1: i32, a2: i32) -> u64;
	// [74] fsync(int)
	def SYS_fsync(a1: i32) -> u64;
	// [75] fdatasync(int)
	def SYS_fdatasync(a1: i32) -> u64;
	// [77] ftruncate(int, i64)
	def SYS_ftruncate(a1: i32, a2: i64) -> u64;
	// [78] getdents(int, struct dirent*, int)
	def SYS_getdents(a1: i32, a2: Pointer/*<struct-dirent>*/, a3: i32) -> u64;
	// [79] getcwd(char*, u32)
	def SYS_getcwd(a1: Pointer/*<char>*/, a2: u32) -> u64;
	// [80] chdir(char*)
	def SYS_chdir(a1: Pointer/*<char>*/) -> u64;
	// [81] fchdir(int)
	def SYS_fchdir(a1: i32) -> u64;
	// [82] rename(char*, char*)
	def SYS_rename(a1: Pointer/*<char>*/, a2: Pointer/*<char>*/) -> u64;
	// [83] mkdir(char*, i32)
	def SYS_mkdir(a1: Pointer/*<char>*/, a2: i32) -> u64;
	// [84] rmdir(char*)
	def SYS_rmdir(a1: Pointer/*<char>*/) -> u64;
	// [86] link(char*, char*)
	def SYS_link(a1: Pointer/*<char>*/, a2: Pointer/*<char>*/) -> u64;
	// [87] unlink(char*)
	def SYS_unlink(a1: Pointer/*<char>*/) -> u64;
	// [88] symlink(char*, char*)
	def SYS_symlink(a1: Pointer/*<char>*/, a2: Pointer/*<char>*/) -> u64;
	// [89] readlink(char*, char*, u32)
	def SYS_readlink(a1: Pointer/*<char>*/, a2: Pointer/*<char>*/, a3: u32) -> u64;
	// [90] chmod(char*, i32)
	def SYS_chmod(a1: Pointer/*<char>*/, a2: i32) -> u64;
	// [91] fchmod(int, i32)
	def SYS_fchmod(a1: i32, a2: i32) -> u64;
	// [92] chown(char*, uid_t, gid_t)
	def SYS_chown(a1: Pointer/*<char>*/, a2: uid_t, a3: gid_t) -> u64;
	// [93] fchown(int, uid_t, gid_t)
	def SYS_fchown(a1: i32, a2: uid_t, a3: gid_t) -> u64;
	// [95] umask(i32)
	def SYS_umask(a1: i32) -> u64;
	// [97] getrlimit(int, struct rlimit*)
	def SYS_getrlimit(a1: i32, a2: Pointer/*<struct-rlimit>*/) -> u64;
	// [98] getrusage(int, struct rusage*)
	def SYS_getrusage(a1: i32, a2: Pointer/*<struct-rusage>*/) -> u64;
	// [99] sysinfo(struct sysinfo*)
	def SYS_sysinfo(a1: Pointer/*<struct-sysinfo>*/) -> u64;
	// [102] getuid()
	def SYS_getuid() -> u64;
	// [104] getgid()
	def SYS_getgid() -> u64;
	// [105] setuid(uid_t)
	def SYS_setuid(a1: uid_t) -> u64;
	// [106] setgid(gid_t)
	def SYS_setgid(a1: gid_t) -> u64;
	// [107] geteuid()
	def SYS_geteuid() -> u64;
	// [108] getegid()
	def SYS_getegid() -> u64;
	// [109] setpgid(pid_t, pid_t)
	def SYS_setpgid(a1: pid_t, a2: pid_t) -> u64;
	// [110] getppid()
	def SYS_getppid() -> u64;
	// [112] setsid()
	def SYS_setsid() -> u64;
	// [113] setreuid(uid_t, uid_t)
	def SYS_setreuid(a1: uid_t, a2: uid_t) -> u64;
	// [114] setregid(gid_t, gid_t)
	def SYS_setregid(a1: gid_t, a2: gid_t) -> u64;
	// [115] getgroups(u32, gid_t*)
	def SYS_getgroups(a1: u32, a2: Pointer/*<gid_t>*/) -> u64;
	// [116] setgroups(u32, gid_t*)
	def SYS_setgroups(a1: u32, a2: Pointer/*<gid_t>*/) -> u64;
	// [117] setresuid(uid_t, uid_t, uid_t)
	def SYS_setresuid(a1: uid_t, a2: uid_t, a3: uid_t) -> u64;
	// [119] setresgid(gid_t, gid_t, gid_t)
	def SYS_setresgid(a1: gid_t, a2: gid_t, a3: gid_t) -> u64;
	// [121] getpgid(pid_t)
	def SYS_getpgid(a1: pid_t) -> u64;
	// [124] getsid(pid_t)
	def SYS_getsid(a1: pid_t) -> u64;
	// [127] rt_sigpending(sigset_t*, u32)
	def SYS_rt_sigpending(a1: Pointer/*<sigset_t>*/, a2: u32) -> u64;
	// [130] rt_sigsuspend(sigset_t*, u32)
	def SYS_rt_sigsuspend(a1: Pointer/*<sigset_t>*/, a2: u32) -> u64;
	// [131] sigaltstack(stack_t*, stack_t*)
	def SYS_sigaltstack(a1: Pointer/*<stack_t>*/, a2: Pointer/*<stack_t>*/) -> u64;
	// [132] utime(char*, struct utimbuf*)
	def SYS_utime(a1: Pointer/*<char>*/, a2: Pointer/*<struct-utimbuf>*/) -> u64;
	// [137] statfs(char*, struct statfs*)
	def SYS_statfs(a1: Pointer/*<char>*/, a2: Pointer/*<struct-statfs>*/) -> u64;
	// [138] fstatfs(int, struct statfs*)
	def SYS_fstatfs(a1: i32, a2: Pointer/*<struct-statfs>*/) -> u64;
	// [160] setrlimit(int, struct rlimit*)
	def SYS_setrlimit(a1: i32, a2: Pointer/*<struct-rlimit>*/) -> u64;
	// [161] chroot(char*)
	def SYS_chroot(a1: Pointer/*<char>*/) -> u64;
	// [186] gettid()
	def SYS_gettid() -> u64;
	// [200] tkill(int, int)
	def SYS_tkill(a1: i32, a2: i32) -> u64;
	// [202] futex(int*, int, int, struct timespec*, int*, int)
	def SYS_futex(a1: Pointer/*<int>*/, a2: i32, a3: i32, a4: Pointer/*<struct-timespec>*/, a5: Pointer/*<int>*/, a6: i32) -> u64;
	// [217] getdents64(int, struct dirent*, int)
	def SYS_getdents64(a1: i32, a2: Pointer/*<struct-dirent>*/, a3: i32) -> u64;
	// [218] set_tid_address(int*)
	def SYS_set_tid_address(a1: Pointer/*<int>*/) -> u64;
	// [221] fadvise(int, i64, i64, int)
	def SYS_fadvise(a1: i32, a2: i64, a3: i64, a4: i32) -> u64;
	// [228] clock_gettime(clockid_t, struct timespec*)
	def SYS_clock_gettime(a1: clockid_t, a2: Pointer/*<struct-timespec>*/) -> u64;
	// [229] clock_getres(clockid_t, struct timespec*)
	def SYS_clock_getres(a1: clockid_t, a2: Pointer/*<struct-timespec>*/) -> u64;
	// [230] clock_nanosleep(clockid_t, int, struct timespec*, struct timespec*)
	def SYS_clock_nanosleep(a1: clockid_t, a2: i32, a3: Pointer/*<struct-timespec>*/, a4: Pointer/*<struct-timespec>*/) -> u64;
	// [231] exit_group(int)
	def SYS_exit_group(a1: i32) -> u64;
	// [233] epoll_ctl(int, int, int, struct epoll_event*)
	def SYS_epoll_ctl(a1: i32, a2: i32, a3: i32, a4: Pointer/*<struct-epoll-event>*/) -> u64;
	// [257] openat(int, char*, int, i32)
	def SYS_openat(a1: i32, a2: Pointer/*<char>*/, a3: i32, a4: i32) -> u64;
	// [258] mkdirat(int, char*, i32)
	def SYS_mkdirat(a1: i32, a2: Pointer/*<char>*/, a3: i32) -> u64;
	// [260] fchownat(int, char*, uid_t, gid_t, int)
	def SYS_fchownat(a1: i32, a2: Pointer/*<char>*/, a3: uid_t, a4: gid_t, a5: i32) -> u64;
	// [262] fstatat(int, char*, struct stat*, int)
	def SYS_fstatat(a1: i32, a2: Pointer/*<char>*/, a3: Pointer/*<struct-stat>*/, a4: i32) -> u64;
	// [263] unlinkat(int, char*, int)
	def SYS_unlinkat(a1: i32, a2: Pointer/*<char>*/, a3: i32) -> u64;
	// [265] linkat(int, char*, int, char*, int)
	def SYS_linkat(a1: i32, a2: Pointer/*<char>*/, a3: i32, a4: Pointer/*<char>*/, a5: i32) -> u64;
	// [266] symlinkat(char*, int, char*)
	def SYS_symlinkat(a1: Pointer/*<char>*/, a2: i32, a3: Pointer/*<char>*/) -> u64;
	// [267] readlinkat(int, char*, char*, u32)
	def SYS_readlinkat(a1: i32, a2: Pointer/*<char>*/, a3: Pointer/*<char>*/, a4: u32) -> u64;
	// [268] fchmodat(int, char*, i32, int)
	def SYS_fchmodat(a1: i32, a2: Pointer/*<char>*/, a3: i32, a4: i32) -> u64;
	// [269] faccessat(int, char*, int, int)
	def SYS_faccessat(a1: i32, a2: Pointer/*<char>*/, a3: i32, a4: i32) -> u64;
	// [270] pselect6(int, fd_set*, fd_set*, fd_set*, struct timespec*, void*)
	def SYS_pselect6(a1: i32, a2: Pointer/*<fd-set>*/, a3: Pointer/*<fd-set>*/, a4: Pointer/*<fd-set>*/, a5: Pointer/*<struct-timespec>*/, a6: Pointer/*<void>*/) -> u64;
	// [271] ppoll(struct pollfd*, nfds_t, struct timespec*, sigset_t*, u32)
	def SYS_ppoll(a1: Pointer/*<struct-pollfd>*/, a2: nfds_t, a3: Pointer/*<struct-timespec>*/, a4: Pointer/*<sigset_t>*/, a5: u32) -> u64;
	// [280] utimensat(int, char*, struct timespec*, int)
	def SYS_utimensat(a1: i32, a2: Pointer/*<char>*/, a3: Pointer/*<struct-timespec>*/, a4: i32) -> u64;
	// [281] epoll_pwait(int, struct epoll_event*, int, int, sigset_t*, u32)
	def SYS_epoll_pwait(a1: i32, a2: Pointer/*<struct-epoll-event>*/, a3: i32, a4: i32, a5: Pointer/*<sigset_t>*/, a6: u32) -> u64;
	// [284] eventfd(int)
	def SYS_eventfd(a1: i32) -> u64;
	// [288] accept4(int, struct sockaddr*, socklen_t*, int)
	def SYS_accept4(a1: i32, a2: Pointer/*<struct-sockaddr>*/, a3: Pointer/*<socklen_t>*/, a4: i32) -> u64;
	// [290] eventfd2(int, int)
	def SYS_eventfd2(a1: i32, a2: i32) -> u64;
	// [291] epoll_create1(int)
	def SYS_epoll_create1(a1: i32) -> u64;
	// [292] dup3(int, int, int)
	def SYS_dup3(a1: i32, a2: i32, a3: i32) -> u64;
	// [293] pipe2(int*, int)
	def SYS_pipe2(a1: Pointer/*<int>*/, a2: i32) -> u64;
	// [302] prlimit64(int, int, struct rlimit*, struct rlimit*)
	def SYS_prlimit64(a1: i32, a2: i32, a3: Pointer/*<struct-rlimit>*/, a4: Pointer/*<struct-rlimit>*/) -> u64;
	// [316] renameat2(int, char*, int, char*, int)
	def SYS_renameat2(a1: i32, a2: Pointer/*<char>*/, a3: i32, a4: Pointer/*<char>*/, a5: i32) -> u64;
	// [318] getrandom(void*, u32, int)
	def SYS_getrandom(a1: Pointer/*<void>*/, a2: u32, a3: i32) -> u64;
	// [332] statx(int, char*, int, int, struct statx*)
	def SYS_statx(a1: i32, a2: Pointer/*<char>*/, a3: i32, a4: i32, a5: Pointer/*<struct-statx>*/) -> u64;
	// [439] faccessat2(int, char*, int, int)
	def SYS_faccessat2(a1: i32, a2: Pointer/*<char>*/, a3: i32, a4: i32) -> u64;

	// Startup
	"__call_ctors" def call_ctors();
	// Cleanup
	"__call_dtors" def call_dtors();
	"__proc_exit" def proc_exit(status: i32);
	// Environment variables
	"__get_init_envfile" def get_init_envfile(filepath: Pointer/*<char>*/, pathsize: u32) -> bool;
	// Get number of CL arguments
	"__cl_get_argc" def cl_get_argc() -> u32;
	// Get size of a specific CL argument
	"__cl_get_argv_len" def cl_get_argv_len(arg_idx: u32) -> u32;
	// Copy the contents of a specific CL argument
	"__cl_copy_argv" def cl_copy_argv(argv_addr: Pointer/*<char>*/, arg_idx: u32) -> u32;
}
