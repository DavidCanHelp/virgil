// x86-linux target-specific runtime routines.
component RiOs {
	def installHandler(signum: int) {
		// install handler
		Linux.syscall(LinuxConst.SYS_signal, (signum, CiRuntime.signalStub));
	}
	def getIp(ucontext: Pointer) -> Pointer {
		return (ucontext + 52).load<Pointer>();
	}
	def getSp(ucontext: Pointer) -> Pointer {
		return (ucontext + 24).load<Pointer>();
	}
	// Get the access address from a siginfo.
	def getAccessAddress(siginfo: Pointer, ucontext: Pointer) -> Pointer {
		return Pointer.NULL; // TODO
	}
	// advance the ip and sp from the current frame to the caller's frame
	def callerFrame(ip: Pointer, sp: Pointer, frameWords: int) -> (Pointer, Pointer) {
		sp = sp + (1 + frameWords) * Pointer.SIZE;
		ip = (sp + (0 - Pointer.SIZE)).load<Pointer>() + -1;
		return (ip, sp);
	}
	// exit with the given return code
	def exit(code: int) {
	        Linux.syscall(LinuxConst.SYS_exit, code);
	}
	// initialize stack red zone for handling stack overflow
	def initStackRedZone() {
		// TODO
	}
}
