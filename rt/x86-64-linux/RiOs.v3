// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Callbacks for RiRuntime to do x86-64-linux logic for handling signals and walking
// stack frames.
component RiOs {
	private def sigactionbuf: Array<long> = [
		0,		// sa_handler
		0x04000000,	// sa_flags
		0,		// sa_restorer
		0		// sa_mask
	];
	// Install the {CiRuntime.signalStub}, which calls an RiRuntime routine, for {signum}.
	def installHandler(signum: int) {
		sigactionbuf[0] = CiRuntime.signalStub - Pointer.NULL;
		sigactionbuf[2] = CiRuntime.signalRestorer - Pointer.NULL;
		Linux.syscall(LinuxConst.SYS_rt_sigaction, (signum, Pointer.atContents(sigactionbuf), 0, 8));
	}
	// Get the instruction pointer from a ucontext.
	def getIp(ucontext: Pointer) -> Pointer {
		return (ucontext + 168).load<Pointer>();
	}
	// Get the stack pointer from a ucontext.
	def getSp(ucontext: Pointer) -> Pointer {
		return (ucontext + 160).load<Pointer>();
	}
	// Get the frame pointer from a ucontext.
	def getFp(ucontext: Pointer) -> Pointer {
		return (ucontext + 120).load<Pointer>();
	}
	// Advance the instruction pointer and stack pointer from the current frame to the caller's frame.
	def callerFrame(ip: Pointer, sp: Pointer, frameWords: int) -> (Pointer, Pointer) {
		sp = sp + (1 + frameWords) * Pointer.SIZE;
		ip = (sp + (0 - Pointer.SIZE)).load<Pointer>() + -1;
		return (ip, sp);
	}
	// Exit with the given return code.
	def exit(code: int) {
	        Linux.syscall(LinuxConst.SYS_exit, code);
	}
}
