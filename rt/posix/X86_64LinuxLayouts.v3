// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// All data structure layouts for X86-64 linux kernel calls.
// Empirically derived from C declarations in headers.

layout struct statbuf for "x86-64-linux" {
	+0W	st_dev:		u64;
	+1W	st_ino:		u64;
	+2W	st_mode:	u64;
	+3W	st_nlink:	u64;
	+28B	st_uid:		u32;
	+32B	st_gid:		u32;
	+6W	st_size:	u64;
	+7W	st_blksize:	u64;
	+8W	st_blocks:	u64;
	+9W	st_atim:	inline timespec;
	+11W	st_mtim:	inline timespec;
	+13W	st_ctim:	inline timespec;
	=144B
}

layout struct sigaction for "x86-64-linux" {
	+0W	sa_handler:	Pointer;
	+1W	sa_mask:	inline sigset;
	+17W	sa_flags:	u32;
	+18W	sa_restorer:	Pointer;
	=152B
}

layout struct iovec for "x86-64-linux" {
	+0W	iov_base:	Pointer;
	+1W	iov_len:	u64;
	=2W
}

layout struct pollfd for "x86-64-linux" {
	+0W	fd:		u32;
	+4B	events:		u16;
	+6B	revents:	u16;
	=1W
}

layout struct shmid_ds for "x86-64-linux" {
	+0W	shm_perm:	inline ipc_perm;
	+6W	shm_segsz:	u64;
	+7W	shm_atime:	u64;
	+8W	shm_dtime:	u64;
	+9W	shm_ctime:	u64;
	+10W	shm_cpid:	u32;
	+84B	shm_lpid:	u32;
	+11W	shm_nattch:	inline shmatt;
	=14W
}

layout struct timespec for "x86-64-linux" {
	+0W	tv_sec:		u64;
	+1W	tv_nsec:	u64;
	=2W
}

layout struct timeval for "x86-64-linux" {
	+0W	tv_sec;
	+1W	tv_usec;
	=2W
}

layout struct itimerval for "x86-64-linux" {
	+0W	it_interval:	inline timeval;
	+2W	it_value:	inline timeval;
	=4W
}

layout struct sockaddr for "x86-64-linux" {
	=2W	// TODO: members of sockaddr
}

layout struct msghdr for "x86-64-linux" {
	+0W	msg_name:	Pointer;
	+1W	msg_namelen:	u64;
	+2W	msg_iov:	Pointer<iovec>;
	+3W	msg_iovlen:	u64;
	+4W	msg_control:	Pointer;
	+5W	msg_controllen:	u64;
	+6W	msg_flags:	u32;
	=7W
}

layout struct sembuf for "x86-64-linux" {
	+0W	sem_num:	u16;
	+2B	sem_op:		u16;
	+4B	sem_flg:	u16;
	=6B
}

layout struct msgbuf(K: u32) for "x86-64-linux" {
	+0W	mtype:	u32;
	+1W	mtext:	byte[K];
	=1W + K
}

layout struct dirent(K: u32) for "x86-64-linux" {
	+0W	d_ino:		u32;
	+1W	d_off:		u32;
	+2W	d_reclen:	u32;
	+18B	d_type:		byte;
	+19B	d_name:		byte[K];
	+19B+K	d_zero:		byte = 0;
	=19B+K+1
}

layout struct timezone for "x86-64-linux" {
	+0W	tz_minuteswest:	u32;
	+4B	tz_dsttime:	u32;
	=1W
}

layout struct siginfo for "x86-64-linux" {
	+0W	si_signo:	u32;
	+4B	si_errno:	u32;
	+1W	si_code:	u64;
	+2W	si_pid;
	+2W	si_timerid;
	+2W	si_addr;
	+2W	si_band;
	+2W	si_call_addr;
	+3W	si_status;
	+3W	si_value;
	+3W	si_int;
	+3W	si_fd;
	+3W	si_addr_lsb;
	+3W	si_ptr;
	+3W	si_syscall;
	+4W	si_utime;
	+4W	si_lower;
	+4W	si_pkey;
	+5W	si_stime;
	+5W	si_upper;
	+20B	si_uid;
	+20B	si_overrun;
	+28B	si_arch;
	=16W
}

layout struct utimbuf for "x86-64-linux" {
	+0W	actime:		u64;
	+1W	modtime:	u64;
	=2W
}

layout struct ustat for "x86-64-linux" {
	+0W	f_tfree:	u64;
	+1W	f_tinode:	u64;
	+2W	f_fname:	byte[6];
	+22B	f_fpack:	byte[6];
	=4W
}

layout struct statfs for "x86-64-linux" {
	+0W	f_type:		u64;
	+1W	f_bsize:	u64;
	+2W	f_blocks:	u64;
	+3W	f_bfree:	u64;
	+4W	f_bavail:	u64;
	+5W	f_files:	u64;
	+6W	f_ffree:	u64;
	+7W	f_fsid:		u64;
	+8W	f_namelen:	u64;
	+9W	f_frsize:	u64;
	+10W	f_flags:	u64;
	=15W
}

layout struct sched_param for "x86-64-linux" {
	+0W	sched_priority:		u32;
	=4B
}

layout struct rlimit for "x86-64-linux" {
	+0W	rlim_cur: u64;
	+1W	rlim_max: u64;
	=2W
}

layout struct pt_regs for "x86-64-linux" { // TODO
}

layout struct iocb for "x86-64-linux" {
	+0W	aio_data:	u64;
	+1W	aio_key:	u32;
	+12B	aio_rw_flags:	u32;
	+2W	aio_lio_opcode:	u16;
	+18B	aio_reqprio:	i16;
	+20B	aio_fildes:	u32;
	+3W	aio_buf:	u64;
	+4W	aio_nbytes:	u64;
	+5W	aio_offset:	i64;
	+7W	aio_flags:	u32;
	+60B	aio_resfd:	u32;
	=8W
}

layout struct sigevent for "x86-64-linux" {
	+0W	sigev_value:			u64; // TODO
	+1W	sigev_signo:			u32;
	+12B	sigev_notify:			u32;
	+2W	sigev_notify_function:		Pointer;
	+3W	sigev_notify_attributes:	Pointer;
	=8W
}

layout struct itimerspec for "x86-64-linux" {
	+0W	it_interval:	inline timespec;
	+2W	it_value:	inline timespec;
	=4W
}

layout struct epoll_event for "x86-64-linux" {
	+0W	events:		u32;
	+4B	ptr:		Pointer;
	+4B	fd:		u32;
	+4B	data:		u64;
	=12B
}

layout struct kexec_segment for "x86-64-linux" {
	+0W	buf:	Pointer;
	+1W	bufsz:	u64;
	+2W	mem:	Pointer;
	+3W	memsz:	u64;
	=4W
}

layout struct rusage for "x86-64-linux" {
	+0W	ru_utime:	inline timeval;
	+2W	ru_stime:	inline timeval;
	+4W	ru_maxrss:	u64;
	+5W	ru_ixrss:	u64;
	+6W	ru_idrss:	u64;
	+7W	ru_isrss:	u64;
	+8W	ru_minflt:	u64;
	+9W	ru_majflt:	u64;
	+10W	ru_nswap:	u64;
	+11W	ru_inblock:	u64;
	+12W	ru_oublock:	u64;
	+13W	ru_msgsnd:	u64;
	+14W	ru_msgrcv:	u64;
	+15W	ru_nsignals:	u64;
	+16W	ru_nvcsw:	u64;
	+17W	ru_nivcsw:	u64;
	=18W
}

layout struct robust_list_head for "x86-64-linux" {
	+0W	list:			Pointer;
	+1W	futex_offset:		u64;
	+2W	list_op_pending:	Pointer;
}

layout struct file_handle(K: u32) for "x86-64-linux" {
	+0W	handle_bytes:	u32;
	+4B	handle_type:	u32;
	+1W	f_handle:	byte[K];
	=1W+K
}

layout struct mmsghdr for "x86-64-linux" {
	+0W	msg_hdr:	inline msghdr;
	+7W	msg_len:	u32;
	=8W
}

layout struct sched_attr for "x86-64-linux" {
	+0W	size:		u32;
	+4B	sched_policy:	u32;
	+1W	sched_flags:	u64;
	+2W	sched_nice:	i32;
	+20B	sched_priority:	u32;
	+3W	sched_runtime:	u64;
	+4W	sched_deadline:	u64;
	+5W	sched_period:	u64;
	=6W
}

layout struct ucontext for "x86-64-linux" {
	+120B	rbp: u64;
	+160B	rsp: u64;
	+168B	rip: u64;
	=936
}
