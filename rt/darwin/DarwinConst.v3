// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// defines constants associated with Darwin system calls.
component DarwinConst {
	// standard file descriptors
	def STDIN  = 0;
	def STDOUT = 1;
	def STDERR = 2;

	// maximum length of a path
	def MAXPATHLEN = 1024;

	// "errno" error codes from the kernel
	def EPERM		= error(1, "Operation not permitted");
	def ENOENT		= error(2, "No such file or directory");
	def ESRCH		= error(3, "No such process");
	def EINTR		= error(4, "Interrupted system call");
	def EIO			= error(5, "Input/output error");
	def ENXIO		= error(6, "Device not configured");
	def E2BIG		= error(7, "Argument list too long");
	def ENOEXEC		= error(8, "Exec format error");
	def EBADF		= error(9, "Bad file descriptor");
	def ECHILD		= error(10, "No child processes");
	def EDEADLK		= error(11, "Resource deadlock avoided");
	def ENOMEM		= error(12, "Cannot allocate memory");
	def EACCES		= error(13, "Permission denied");
	def EFAULT		= error(14, "Bad address");
	def ENOTBLK		= error(15, "Block device required");
	def EBUSY		= error(16, "Device / Resource busy");
	def EEXIST		= error(17, "File exists");
	def EXDEV		= error(18, "Cross-device link");
	def ENODEV		= error(19, "Operation not supported by device");
	def ENOTDIR		= error(20, "Not a directory");
	def EISDIR		= error(21, "Is a directory");
	def EINVAL		= error(22, "Invalid argument");
	def ENFILE		= error(23, "Too many open files in system");
	def EMFILE		= error(24, "Too many open files");
	def ENOTTY		= error(25, "Inappropriate ioctl for device");
	def ETXTBSY		= error(26, "Text file busy");
	def EFBIG		= error(27, "File too large");
	def ENOSPC		= error(28, "No space left on device");
	def ESPIPE		= error(29, "Illegal seek");
	def EROFS		= error(30, "Read-only file system");
	def EMLINK		= error(31, "Too many links");
	def EPIPE		= error(32, "Broken pipe");
	def EDOM		= error(33, "Numerical argument out of domain");
	def ERANGE		= error(34, "Result too large");
	def EAGAIN		= error(35, "Resource temporarily unavailable");
	def EWOULDBLOCK		= error(EAGAIN, "Operation would block");
	def EINPROGRESS		= error(36, "Operation now in progress");
	def EALREADY		= error(37, "Operation already in progress");
	def ENOTSOCK		= error(38, "Socket operation on non-socket");
	def EDESTADDRREQ	= error(39, "Destination address required");
	def EMSGSIZE		= error(40, "Message too long");
	def EPROTOTYPE		= error(41, "Protocol wrong type for socket");
	def ENOPROTOOPT		= error(42, "Protocol not available");
	def EPROTONOSUPPORT	= error(43, "Protocol not supported");
	def ESOCKTNOSUPPORT	= error(44, "Socket type not supported");
	def ENOTSUP		= error(45, "Operation not supported");
	def EOPNOTSUPP		= error(ENOTSUP, "Operation not supported on socket");
	def EPFNOSUPPORT	= error(46, "Protocol family not supported");
	def EAFNOSUPPORT	= error(47, "Address family not supported by protocol family");
	def EADDRINUSE		= error(48, "Address already in use");
	def EADDRNOTAVAIL	= error(49, "Can\'t assign requested address");
	def ENETDOWN		= error(50, "Network is down");
	def ENETUNREACH		= error(51, "Network is unreachable");
	def ENETRESET		= error(52, "Network dropped connection on reset");
	def ECONNABORTED	= error(53, "Software caused connection abort");
	def ECONNRESET		= error(54, "Connection reset by peer");
	def ENOBUFS		= error(55, "No buffer space available");
	def EISCONN		= error(56, "Socket is already connected");
	def ENOTCONN		= error(57, "Socket is not connected");
	def ESHUTDOWN		= error(58, "Can\'t send after socket shutdown");
	def ETOOMANYREFS	= error(59, "Too many references: can\'t splice");
	def ETIMEDOUT		= error(60, "Operation timed out");
	def ECONNREFUSED	= error(61, "Connection refused");
	def ELOOP		= error(62, "Too many levels of symbolic links");
	def ENAMETOOLONG	= error(63, "File name too long");
	def EHOSTDOWN		= error(64, "Host is down");
	def EHOSTUNREACH	= error(65, "No route to host");
	def ENOTEMPTY		= error(66, "Directory not empty");
	def EPROCLIM		= error(67, "Too many processes");
	def EUSERS		= error(68, "Too many users");
	def EDQUOT		= error(69, "Disc quota exceeded");
	def ESTALE		= error(70, "Stale NFS file handle");
	def EREMOTE		= error(71, "Too many levels of remote in path");
	def EBADRPC		= error(72, "RPC struct is bad");
	def ERPCMISMATCH	= error(73, "RPC version wrong");
	def EPROGUNAVAIL	= error(74, "RPC prog. not avail");
	def EPROGMISMATCH	= error(75, "Program version wrong");
	def EPROCUNAVAIL	= error(76, "Bad procedure for program");
	def ENOLCK		= error(77, "No locks available");
	def ENOSYS		= error(78, "Function not implemented");
	def EFTYPE		= error(79, "Inappropriate file type or format");
	def EAUTH		= error(80, "Authentication error");
	def ENEEDAUTH		= error(81, "Need authenticator");
	def EPWROFF		= error(82, "Device power is off");
	def EDEVERR		= error(83, "Device error, e.g. paper out");
	def EOVERFLOW		= error(84, "Value too large to be stored in data type");
	def EBADEXEC		= error(85, "Bad executable");
	def EBADARCH		= error(86, "Bad CPU type in executable");
	def ESHLIBVERS		= error(87, "Shared library version mismatch");
	def EBADMACHO		= error(88, "Malformed Macho file");
	def ECANCELED		= error(89, "Operation canceled");
	def EIDRM		= error(90, "Identifier removed");
	def ENOMSG		= error(91, "No message of desired type   ");
	def EILSEQ		= error(92, "Illegal byte sequence");
	def ENOATTR		= error(93, "Attribute not found");
	def EBADMSG		= error(94, "Bad message");
	def EMULTIHOP		= error(95, "Reserved");
	def ENODATA		= error(96, "No message available on STREAM");
	def ENOLINK		= error(97, "Reserved");
	def ENOSR		= error(98, "No STREAM resources");
	def ENOSTR		= error(99, "Not a STREAM");
	def EPROTO		= error(100, "Protocol error");
	def ETIME		= error(101, "STREAM ioctl timeout");
	def ENOPOLICY		= error(103, "No such policy registered");
	def ELAST		= error(103, ""); // largest errorno

	// constants associated with open()
	def O_RDONLY	= 0;       // open read-only
	def O_WRONLY	= 1;       // open write-only
	def O_RDWR	= 2;       // open read-write
	def O_NONBLOCK	= 0x0004;  // no delay
	def O_APPEND	= 0x0008;  // set append mode
	def O_SYNC	= 0x0080;  // synch I/O file integrity
	def O_SHLOCK	= 0x0010;  // open with shared file lock
	def O_EXLOCK	= 0x0020;  // open with exclusive file lock
	def O_ASYNC	= 0x0040;  // signal pgrp when data ready
	def O_NOFOLLOW	= 0x0100;  // don't follow symlinks
	def O_CREAT	= 0x0200;  // create if nonexistant
	def O_TRUNC	= 0x0400;  // truncate to zero length
	def O_EXCL	= 0x0800;  // error if already exists
	def O_EVTONLY	= 0x8000;  // descriptor requested for event notifications only
	def O_NOCTTY	= 0x20000; // don't assign controlling terminal

	def SEEK_SET = 0; // constants for lseek
	def SEEK_CUR = 1;
	def SEEK_END = 2;

	def STAT_ST_SIZE = 12; // offset of st_size in statbuf

	def error(val: int, description: string) -> int {
		// TODO: record the description in a table
		return val;
	}
}
