// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implementation of the "System" component for darwin, using the underlying
// Darwin methods.

// XXX: not thread-safe
// XXX: use on-stack storage for small IO buffers
// XXX: what about GC moving arrays during IO operations?
component System {
	// @thread-local @static buffer for gettimeofday
	var timeval = Array<int>.new(2);
	// @thread-local @static buffer for fstat
	var statbuf = Array<int>.new(32);
	// @thread-local @lazy buffer for path that don't have space for a null
	var pathbuf = Array<byte>.new(100);
	// the standard output stream
	def out = DarwinFileStream.new(DarwinConst.STDOUT);
	// the standard input stream
	def err = DarwinFileStream.new(DarwinConst.STDERR);
	// the method that can print a stack trace
	var printStack: (Pointer, Pointer) -> void;
	
	// change the permissions of a file
	def chmod(fileName: string, mode: int) {
		Darwin.syscall(DarwinConst.SYS_chmod, (pathName(fileName), mode));
	}
	// open a file
	def fileOpen(fileName: string, read: bool) -> int {
		var mode = if(read, DarwinConst.O_RDONLY, DarwinConst.O_WRONLY | DarwinConst.O_TRUNC | DarwinConst.O_CREAT);
		var t = Darwin.syscall(DarwinConst.SYS_open, (pathName(fileName), mode, 420));
		return if ((t.2 & 1) == 0, t.0, -1);
	}
	// close a file
	def fileClose(fd: int) {
		Darwin.syscall(DarwinConst.SYS_close, fd);
	}
	// read a single byte from a file
	def fileRead(fd: int) -> byte {
		var t = Darwin.syscall(DarwinConst.SYS_read, (fd, Pointer.atContents(out.iobuf), 1));
		return if((t.2 & 1) == 0, out.iobuf(0));
	}
	// write some bytes to the file
	def fileWriteK(fd: int, data: Array<byte>, offset: int, len: int) {
		// TODO: bounds check this access
		var buf = Pointer.atContents(data) + offset;
		Darwin.syscall(DarwinConst.SYS_write, (fd, buf, len));
	}
	// calculate bytes remaining to be read from file
	def fileLeft(fd: int) -> int {
		// XXX: is there a cheaper way to tell the number of available bytes?
		var offset = Darwin.syscall(DarwinConst.SYS_lseek, (fd, (0, 0), DarwinConst.SEEK_CUR)).0;
		var end = Darwin.syscall(DarwinConst.SYS_lseek, (fd, (0, 0), DarwinConst.SEEK_END)).0;
		Darwin.syscall(DarwinConst.SYS_lseek, (fd, (offset, 0), DarwinConst.SEEK_SET));
		return end - offset;
	}
	// load a file into a byte array
	def fileLoad(fileName: string) -> Array<byte> {
		var path = pathName(fileName);
		if ((Darwin.syscall(DarwinConst.SYS_stat, (path, Pointer.atContents(statbuf))).2 & 1) == 1) return null;
		var t = Darwin.syscall(DarwinConst.SYS_open, (path, DarwinConst.O_RDONLY, 0));
		if ((t.2 & 1) == 1) return null;
		var fd = t.0, buf = Array<byte>.new(statbuf(DarwinConst.STAT_ST_SIZE));
		if ((Darwin.syscall(DarwinConst.SYS_read, (fd, Pointer.atContents(buf), buf.length)).2 & 1) == 1) return null;
		Darwin.syscall(DarwinConst.SYS_close, fd);
		return buf;
	}
	// print a character to standard out
	def putc(ch: byte) {
		out.putc(ch);
	}
	// print an integer (in decimal) to standard out
	def puti(i: int) {
		out.puti(i);
	}
	// print a string (as bytes) to standard out
	def puts(str: string) {
		out.puts(str);
	}
	// prints a newline character to standard out
	def ln() {
		out.ln();
	}
	// output an error, stacktrace, and exit
	def error(ex: string, msg: string) {
		err.putc('!').puts(ex).puts(": ").puts(msg).putc('\n');
		if (printStack != null) printStack(CiRuntime.callerIp() + -1, CiRuntime.callerSp());
		Darwin.syscall(DarwinConst.SYS_exit, 254);
	}
	// get ticks in milliseconds
	def ticksMs() -> int {
		var t = Darwin.syscall(DarwinConst.SYS_gettimeofday, (Pointer.atContents(timeval), Pointer.NULL));
		return t.0 * 1000 + t.1 / 1000;
	}
	// get ticks in microseconds
	def ticksUs() -> int {
		var t = Darwin.syscall(DarwinConst.SYS_gettimeofday, (Pointer.atContents(timeval), Pointer.NULL));
		return t.0 * 1000000 + t.1;
	}
	// get ticks in nanoseconds
	def ticksNs() -> int {
		var t = Darwin.syscall(DarwinConst.SYS_gettimeofday, (Pointer.atContents(timeval), Pointer.NULL));
		return t.1 * 1000;
	}
	// get a zero-terminated pathname, allocating if necessary
	private def pathName(fileName: string) -> Pointer {
		if ((fileName.length & 3) == 0) {
			// no extra space on the end of the array for the null byte
			if (pathbuf.length <= fileName.length) pathbuf = Array.new(fileName.length + 5);
			for (i < fileName.length) pathbuf(i) = fileName(i);
			pathbuf(fileName.length) = '\x00';
			return Pointer.atContents(pathbuf);
		}
		return Pointer.atContents(fileName);
	}
}
// a closure for a file descriptor, e.g. to make STDERR easier to use
class DarwinFileStream {
	def fd: int;
	def iobuf = Array<byte>.new(11); // XXX: use a shared global IO buffer?
	new(fd) { }
	// print an integer to this stream
	def puti(i: int) -> DarwinFileStream {
		if (i == 0) return putc('0');
		var negative = true;
		if (i > 0) {
			negative = false;
			i = 0 - i;
		}
		var pos = 11;
		while (i != 0) { // XXX: use pointer loop instead?
			var digit = byte.!('0' - i % 10);
			iobuf(--pos) = digit;
			i = i / 10;
		}
		if (negative) iobuf(--pos) = '-';
		Darwin.syscall(DarwinConst.SYS_write, (fd, Pointer.atContents(iobuf) + pos, 11 - pos));
		return this;
	}
	// print a string to this stream
	def puts(str: string) -> DarwinFileStream {
		Darwin.syscall(DarwinConst.SYS_write, (fd, Pointer.atContents(str), str.length));
		return this;
	}
	// print a single character to this stream
	def putc(ch: byte) -> DarwinFileStream {
		iobuf(0) = ch;
		Darwin.syscall(DarwinConst.SYS_write, (fd, Pointer.atContents(iobuf), 1));
		return this;
	}
	// print a pointer e.g. (0xFF00AB02) to this stream
	def putp(p: Pointer) -> DarwinFileStream {
		// XXX: print 64-bit pointers
		var val = p - Pointer.NULL;
		iobuf(0) = '0';
		iobuf(1) = 'x';
		hexChar(2, val >>> 28);
		hexChar(3, val >>> 24);
		hexChar(4, val >>> 20);
		hexChar(5, val >>> 16);
		hexChar(6, val >>> 12);
		hexChar(7, val >>> 8);
		hexChar(8, val >>> 4);
		hexChar(9, val);
		Darwin.syscall(DarwinConst.SYS_write, (fd, Pointer.atContents(iobuf), 10));
		return this;
	}
	private def hexChar(index: int, val: int) {
		var v = val & 0xF;
		iobuf(index) = byte.!(if(v > 9, 'A' + v - 10, '0' + v));
	}
	// print a zero-terminated string to this stream
	def putz(p: Pointer) -> DarwinFileStream {
		for (len = 0; true; len++) {
			if ((p + len).load<byte>() == '\x00') {
				Darwin.syscall(DarwinConst.SYS_write, (fd, p, len));
				return this;
			}
		}
		return this;
	}
	def ln() -> DarwinFileStream {
		putc('\n');
		return this;
	}
}
