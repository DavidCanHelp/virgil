//@execute 0=11; 1=11; 2=11; 3=11
class Func {
	def do<A, B>(a: A) -> B;
}
class Cast1 extends Func {
	def do<A, B>(a: A) -> B { return B.!(a); }
}
class Tuple(f: Func) extends Func {
	def do<A, B>(a: A) -> B {
		return f.do<(A, A), (B, B)>(a, a).0;
	}
}
class TupleVoidL(f: Func) extends Func {
	def do<A, B>(a: A) -> B {
		return f.do<(A, A), (B, void)>(a, a).0;
	}
}
class TupleVoidR(f: Func) extends Func {
	def do<A, B>(a: A) -> B {
		return f.do<(A, A), (void, B)>(a, a).1;
	}
}
class Mid(f: Func) extends Func {
	def do<A, B>(a: A) -> B {
		return f.do<(A, A, A), (void, B, void)>(a, a, a).1;
	}
}
class ComboTester(f: Func) extends Func {
	def combs = [
		f,
		Tuple.new(f),
		TupleVoidL.new(f),
		TupleVoidR.new(f),
		Mid.new(f)
	];
	def do<A, B>(a: A) -> B {
		var expected = f.do<A, B>(a);
		for (g in combs) {
			var result = g.do<A, B>(a);
			if (result != expected) var x = 1 / 0; // crash if not equal
		}
		return expected;
	}
}
def doVoidRec<T>(depth: int, f: Func, a: T) {
	ComboTester.new(f).do<T, void>(a);
	if (depth <= 0) return;
	for (cons in [Tuple.new, TupleVoidL.new, TupleVoidR.new, Mid.new]) {
		doVoidRec(depth - 1, ComboTester.new(cons(f)), a);
	}
}
def main(a: int) -> int {
	var x = doVoidRec(a, Cast1.new(), 33);
	return 11;
}