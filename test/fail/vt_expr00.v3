//@execute 0=0; 1=5; 2=3; 3=3; 4=8; 5=0; 6=6; 7=11; 8=-3
type Expr {
	case Int(x: int);
	case Add(a: Expr, b: Expr);
	case Sub(a: Expr, b: Expr);
}
def eval(e: Expr) -> int {
	match (e) {
		Int(x): return x;
		Add(x, y): return eval(x) + eval(y);
		Sub(x, y): return eval(x) - eval(y);
	}
}
def main(a: int) -> int {
	var e: Expr;
	match (a % 3) {
		0: e = Expr.Int(a);
		1: e = Expr.Add(Expr.Int(a), Expr.Int(4));
		2: e = Expr.Sub(Expr.Int(5), Expr.Int(a));
	}
	return eval(e);
}
