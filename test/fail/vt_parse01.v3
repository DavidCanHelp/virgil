//@execute 0=true; 1=true; 2=true; 3=true; 4=true; 5=true; 6=true; 7=true; 8=!BoundsCheckException
type Parsed<T> {
	case Fail(len: int);
	case Pass(len: int, val: T);
}
// parse a positive decimal integer starting at {a(pos)}
def parse(a: Array<byte>, pos: int) -> Parsed<int> {
	var v0 = a(pos), passed = true;
	if (v0 == '0') {
		var p1 = pos + 1;
		if (p1 == a.length || a(p1) < '0' || a(p1) > '9') return Parsed.Pass(1, 0);
		passed = false;
	} else if (v0 < '0' || v0 > '9') {
		return Parsed<int>.Fail(0);
	}
	var max = a.length, accum = v0 - int.!('0'), i = pos + 1;
	while (i < max) {
		var d = a(i) - '0';
		if (d < 0 || d > 9) break;
		accum = accum * 10 + d;
		if (accum < 0) passed = false; // overflow
		i++;
	}
	return if(passed, Parsed.Pass(i - pos, accum), Parsed.Fail(i - pos));
}
def assert() -> Array<bool> {
	return [
		parse("78", 0) == Parsed.Pass(2, 78),
		parse("-9", 0) == Parsed<int>.Fail(0),
		parse("99a", 0) == Parsed.Pass(2, 99),
		parse("99999999999999", 1) == Parsed<int>.Fail(13),
		parse("xx78", 2) == Parsed.Pass(2, 78),
		parse("ii-9", 2) == Parsed<int>.Fail(0),
		parse("09a", 0) == Parsed<int>.Fail(2),
		parse("0a", 0) == Parsed.Pass(1, 0)
	];
}
def m = assert();
def main(a: int) -> bool {
	var x = m(a), y = assert()(a);
	return x == y && x;
}