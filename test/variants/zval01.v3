//@execute = 451

type Value(ref: RefVal, bits: u64) #unboxed {
}
class RefVal { }
// Tags are for primitive values
class Tag extends RefVal { }
class IntTag extends Tag { }
class PosIntTag extends IntTag { }
class NegIntTag extends IntTag { }

component Values {
	def BOTTOM: Value;

	def NEGATIVE_TAG = NegIntTag.new();
	def POSITIVE_TAG = PosIntTag.new();

	def box_i32(v: i32) -> Value {
		if (v == 0) return BOTTOM;
		if (v < 0) return Value(NEGATIVE_TAG, u64.view(v));
		return Value(POSITIVE_TAG, u64.view(v));
	}
	def do_ii_i(r: Array<Value>, f: (i32, i32) -> i32) {
		r[0] = box_i32(f(i32.view(r[0].bits), i32.view(r[1].bits)));
	}
}

def main() -> int {
	var a = Values.box_i32(11), b = Values.box_i32(44);
	var v = [a, b];
	for (i < 10) {
		Values.do_ii_i(v, int.+);
	}
	return int.view(v[0].bits);

}
