//@execute 0=42; 1=42; 2=42; 5=42; 20=42
//@heap-size=20000
type List<T> {
	case None;
	case One(head: T);
	case More(head: T, tail: List<T>);
}

def make<T>(v: T, len: int) -> List<T> {
	if (len <= 0) return List<T>.None;
	if (len == 1) return List<T>.One(v);
	return List<T>.More(v, make(v, len - 1));
}

def check<T>(v: T, list: List<T>) -> int {
	var l = list, i = -1;
	while (true) {
		match (l) {
			None => return 0;
			One(head) => {
				if (head != v) return i;
				return 0;
			}
			More(head, tail) => {
				if (head != v) return i;
				l = tail;
			}
		}
		i--;
	}
	return 0;
}

def main(a: int) -> int {
	{
		var r = check<byte>(37, make<byte>(37, a));
		if (r != 0) return r;
	}
	{
		var r = check<u32>(335557777u, make<u32>(335557777u, a));
		if (r != 0) return r;
	}
	{
		var r = check<u64>(14444335557777uL, make<u64>(14444335557777uL, a));
		if (r != 0) return r;
	}
	return 42;
}
