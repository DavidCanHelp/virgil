//@execute 0=1; 1=10; 2=20; 3=10; 4=20; 5=!BoundsCheckException
type X {
	case None;
	case IsY(y: Y);
}
type Y {
	case None;
	case IsX(x: X);
}
def eq<T>(x: T, a: Array<T>) -> int {
	var res = 0;
	for (i = 0; i < a.length; i++) {
		if (x == a(i)) res = res | (1 << byte.!(i));
	}
	return res;
}
def make(d: X) -> Array<X> {
	return [
	X.None,
	d,
	X.IsY(Y.IsX(X.None)),
	d,
	X.IsY(Y.IsX(X.None))
];
}
def m = make(X.IsY(Y.None));
def main(a: int) -> int {
	return eq(m(a), m);
}
