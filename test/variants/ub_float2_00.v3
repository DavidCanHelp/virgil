//@execute 0=42; 3=42; 67=42; -876674=42
//@heap-size=20000
type Data #unboxed {
	case X(v: float);
	case Y(v: float);
}

class Tester(v1: (float, float), v2: (float, float)) {
	// Bitmatrix outcomes for a == b cases
	def IDa_	=        0b_0000_0100_0000_0001;
	def ID_b	=        0b_1000_0000_0010_0000;
	def EQa_	= IDa_ | 0b_0000_0001_0000_0100;
	def EQ_b	= ID_b | 0b_0010_0000_1000_0000;
	def EQab 	= EQa_ | EQ_b;

	def vals = [
		Data.X(v1.0),
		Data.Y(v1.1),
		Data.X(v2.0),
		Data.Y(v2.1)
	];

	def match_equals(a: Data, b: Data) -> bool {
		match (a) {
			X(v) => match (b) {
				X(w) => return v == w;
				Y(w) => return false;
			}
			Y(v) => match (b) {
				X(w) => return false;
				Y(w) => return v == w;
			}
		}
	}
	def match_tags(a: Data, b: Data) -> bool {
		match (a) {
			X(v) => match (b) {
				X(w) => return true;
				Y(w) => return false;
			}
			Y(v) => match (b) {
				X(w) => return false;
				Y(w) => return true;
			}
		}
	}
	def tag_equals(a: Data, b: Data) -> bool {
		return a.tag == b.tag;
	}
	def bool_matrix(f: (Data, Data) -> bool) -> u32 {
		var mask = 1u;
		var result = 0u;
		for (i in vals) {
			for (j in vals) {
				if (f(i, j)) result |= mask;
				mask = mask << 1;
			}
		}
		return result;
	}
	def eq_matrix() -> u32 {
		return bool_matrix(Data.==);
	}
	def match_matrix() -> u32 {
		return bool_matrix(match_equals);
	}
	def tag_matrix() -> u32 {
		return bool_matrix(tag_equals);
	}
	def match_tag_matrix() -> u32 {
		return bool_matrix(match_tags);
	}
	def test() -> u32 {
		var r: u32;
		r = match_tag_matrix();
		if (r != EQab) return fail(0x10, r);
		r = tag_matrix();
		if (r != EQab) return fail(0x30, r);
		r = eq_matrix();

		// equality is not reflexive for floats because of NaN
		var expect = 0;
		if (v1.0 == v1.0) expect |= 0b_0000_0000_0000_0001;
		if (v1.1 == v1.1) expect |= 0b_0000_0000_0010_0000;
		
		if (v2.0 == v2.0) expect |= 0b_0000_0100_0000_0000;
		if (v2.1 == v2.1) expect |= 0b_1000_0000_0000_0000;
		
		if (v1.0 == v2.0) expect |= EQa_;
		if (v1.1 == v2.1) expect |= EQ_b;

		r = match_matrix();
		if (r != expect) return fail(0x50, r);
		r = eq_matrix();
		if (r != expect) return fail(0x70, r);
		
		return 0;
	}
}

def fail(code: u32, r: u32) -> u32 {
	return (code << 16) | u32.view(r);
}

def main(a: int) -> u32 {
	var r: u32;
	var f = float.roundi(a);
	
	r = Tester.new((0, 0), (0, 0)).test();
	if (r != 0) return fail(0x100, r);
	
	r = Tester.new((f, f), (f, f)).test();
	if (r != 0) return fail(0x300, r);
	
	r = Tester.new((0, 1), (2, 3)).test();
	if (r != 0) return fail(0x500, r);

	r = Tester.new((4, 5), (4, 5)).test();
	if (r != 0) return fail(0x700, r);

	r = Tester.new((11, 7), (11, 5)).test();
	if (r != 0) return fail(0x900, r);

	r = Tester.new((-12, 66666), (-13, 66666)).test();
	if (r != 0) return fail(0xb00, r);

// TODO: check non-reflexive float nans
//	r = Tester.new((float.nan, 66666), (-13, 66666)).test();
	if (r != 0) return fail(0xb00, r);
	
//	r = Tester.new((-11, float.nan), (-14, 66666)).test();
	if (r != 0) return fail(0xb00, r);
	
//	r = Tester.new((-9, 333), (float.nan, 777)).test();
	if (r != 0) return fail(0xb00, r);
	
//	r = Tester.new((-8, 762345), (-17, float.nan)).test();
	if (r != 0) return fail(0xb00, r);
	
	return 42;
}