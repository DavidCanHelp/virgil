//@execute (0,0)=!BoundsCheckException; (1,0)=1; (1,1)=!BoundsCheckException; (2,0)=3; (2,1)=4; (2,2)=!BoundsCheckException
type Some<T> {
	case None;
	case One(val: T);
	case Many(vals: Array<T>);
	def [index: int] -> T {
		match (this) {
			None => ;
			One(val) => if (index == 0) return val;
			Many(vals) => return vals[index];
		}
		var x = [0][1];
		var d: T;
		return d;
	}
}
def v = [Some<int>.None, Some<int>.One(1), Some<int>.Many([3,4])];
def main(a: int, b: int) -> int {
	return v[a][b];
}