//@execute 0=63; 1=63; -1=36; 878623487=36
type Prim32 #unboxed {
	case Bool(x: bool);
	case Int(x: int);
	case Float(x: float);
}

def bit_equal(a: Prim32, b: Prim32) -> bool {
	match (a) {
		Bool(x) => match (b) {
			Bool(y) => return x == y;
			Int(y) => return if(x, 1) == y;
			Float(y) => return if(x, 1) == int.view(y);
		}
		Int(x) => match(b) {
			Bool(y) => return x == if(y, 1);
			Int(y) => return x == y;
			Float(y) => return x == int.view(y);
		}
		Float(x) => match(b) {
			Bool(y) => return int.view(x) == if(y, 1);
			Int(y) => return int.view(x) == y;
			Float(y) => return int.view(x) == int.view(y);
		}
	}
}

def main(a: int) -> int {
	var x = Prim32.Bool(a != 0);
	var y = Prim32.Int(a);
	var z = Prim32.Float(float.view(a));
	var b0 = if(bit_equal(x, y), 0b000001);
	var b1 = if(bit_equal(x, z), 0b000010);
	var b2 = if(bit_equal(y, z), 0b000100);
	var b3 = if(bit_equal(y, x), 0b001000);
	var b4 = if(bit_equal(z, x), 0b010000);
	var b5 = if(bit_equal(z, y), 0b100000);
	return b0 | b1 | b2 | b3 | b4 | b5;
}
