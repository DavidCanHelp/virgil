//@execute 0=63; 1=63; 2=36; 3=36; 4=36
type Prim64 #unboxed {
	case Bool(x: bool);
	case Long(x: long);
	case Double(x: double);
}

def bit_equal(a: Prim64, b: Prim64) -> bool {
	match (a) {
		Bool(x) => match (b) {
			Bool(y) => return x == y;
			Long(y) => return if(x, 1) == y;
			Double(y) => return if(x, 1) == long.view(y);
		}
		Long(x) => match(b) {
			Bool(y) => return x == if(y, 1);
			Long(y) => return x == y;
			Double(y) => return x == long.view(y);
		}
		Double(x) => match(b) {
			Bool(y) => return long.view(x) == if(y, 1);
			Long(y) => return long.view(x) == y;
			Double(y) => return long.view(x) == long.view(y);
		}
	}
}

def inputs = [0L, 1L, -1L, 878623487L, 8888888888888L];

def main(i: int) -> int {
	var a = inputs[i];
	var x = Prim64.Bool(a != 0);
	var y = Prim64.Long(a);
	var z = Prim64.Double(double.view(a));
	var b0 = if(bit_equal(x, y), 0b000001);
	var b1 = if(bit_equal(x, z), 0b000010);
	var b2 = if(bit_equal(y, z), 0b000100);
	var b3 = if(bit_equal(y, x), 0b001000);
	var b4 = if(bit_equal(z, x), 0b010000);
	var b5 = if(bit_equal(z, y), 0b100000);
	return b0 | b1 | b2 | b3 | b4 | b5;
}
