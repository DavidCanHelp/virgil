//@execute 0=1; 1=2; 2=4; 3=8; 4=16; 5=32; 6=64; 7=128; 8=256; 9=!BoundsCheckException
//@heap-size=8000
type Expr {
	case Const(val: int);
	case Add(x: Expr, y: Expr);
	case Mul(x: Expr, y: Expr);
	case Not(x: Expr);
}

def gen(zero: Expr, one: Expr) -> Array<Expr> {
	return [
		Expr.Const(3),
		zero,
		one,
		Expr.Add(zero, one),
		Expr.Add(one, zero),
		Expr.Mul(Expr.Add(zero, zero), one),
		Expr.Mul(Expr.Const(7), Expr.Mul(one, one)),
		Expr.Not(Expr.Mul(one, one)),
		Expr.Not(Expr.Add(zero, one))
	];
}

def main(a: int) -> int {
	def x = gen(Expr.Const(a), Expr.Const(0 - a));
	var result = 0;
	var v = x[a];
	for (i < x.length) {
		if (v == x[i]) result |= 1 << byte.!(i);
	}
	return result;
}