//@seman

// A feature-detection program for the #boxed and #unboxed annotations.
// You can copy this file into your project and use it to programmatically detect
// that the compiler supports unboxing annotations for your project and target platform.

//@seman
type U0 #unboxed { }
type U1(x: int) #unboxed { }
type U2(x: int, y: int) #unboxed { }
type U3(x: int, y: int, z: int) #unboxed { }

//TODO: def x0: Array<U0> = [U0, U0];
def x1: Array<U1> = [U1(11), U1(3333)];
def x2: Array<U2> = [U2(11, 22), U2(3333, 1111)];
def x3: Array<U3> = [U3(11, 22, 44), U3(3333, 1111, 55555)];

type MutCell<T> #unboxed {
	case Array(x: Array<T>, i: int) { }
	case Func(getf: void -> T, setf: T -> void) { }

	def get() -> T {
		match (this) {
			Array(x, i) => return x[i];
			Func(getf, setf) => return getf();
		}
	}
	def set(v: T) {
		match (this) {
			Array(x, i) => x[i] = v;
			Func(getf, setf) => return setf(v);
		}
	}
}
var y = 99;
def get_y() -> int { return y; }
def set_y(v: int) { y = v; }
def cells = [
	MutCell<int>.Array([0], 0),
	MutCell<int>.Func(get_y, set_y)
];

type X0b #boxed {}
type X1b(x: int) #boxed {}
type X0u #unboxed {}
type X1u(x: int) #unboxed {}
type XCu #unboxed {
	case A;
	case B;
}
type XCu1 {
	case A #unboxed;
	case B;
}
type XCu2 {
	case A #unboxed { }
	case B;
}
type XCu3 {
	case B;
	case A #unboxed { }
}
type XCu4 {
	case B;
	case A(x: int) #unboxed { }
}
