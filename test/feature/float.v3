//@seman

// A feature-detection program for Virgil floating point.
// You can copy this file into your project and use it to programmatically detect
// that the compiler supports floating point for your project and target platform.

// This test should only pass the semantic phase if the compiler supports
// all float features. Note that this only a positive test; it does not
// check that the compiler correctly reports semantic errors for all cases.
// (That is the job of the actual test suite.)

// type resolution
def f1: float;
def d1: double;
def m(x: double, y: float) -> (double, float) {
	return (x, y);
}

// literals
def LiteralsF() {
	def af1: Array<float> = [
		0f, -0f, 1f, 1.1f, 2.333f, -29887309458.398f,
		0e1f, 1e+1f, 2e-1f
	];
}
def LiteralsD() {
	def ad1: Array<double> = [
		0d, -0d, 0d, 1d, 1.1d, 2.344d, -29887309458.398d,
		0e1d, 1e+1d, 2e-1d
	];
}

// promotion
def PromotionF(b1: byte, i1: i23, u1: u23) {
	def f2: float = f1;
	def f3: float = 0f;
	def f4: float = 0u;
	def f5: float = 0uL;
	def f6: float = 0L;
	def f7: float = 'c';
	def f8: float = b1;
	def f9: float = i1;
}
def PromotionD(b1: byte, i1: int, u1: u32, g1: u52) {
	def d2: double = f1;
	def d3: double = 0f;
	def d4: double = 0u;
	def d5: double = 0uL;
	def d6: double = 0L;
	def d7: double = 'c';
	def d8: double = b1;
	def d9: double = i1;
	def dA: double = g1;
}

// infix operators
def InfixF(x: float, y: float) {
	def f1: float = x + y;
	def f2: float = x - y;
	def f3: float = x / y;
	def f4: float = x * y;
	def z1: bool = x == y;
	def z2: bool = x != y;
	def z3: bool = x < y;
	def z4: bool = x <= y;
	def z5: bool = x > y;
	def z6: bool = x >= y;
}
def InfixD(x: double, y: double) {
	def d1: double = x + y;
	def d2: double = x - y;
	def d3: double = x / y;
	def d4: double = x * y;
	def z1: bool = x == y;
	def z2: bool = x != y;
	def z3: bool = x < y;
	def z4: bool = x <= y;
	def z5: bool = x > y;
	def z6: bool = x >= y;
}

// views
def ViewF(f1: float, i1: i32, u1: u32) {
	var i2: i32 = i32.view(f1);
	var i3: u32 = u32.view(f1);
	var f2: float = float.view(i1);
	var f3: float = float.view(u1);
}
def ViewD(d1: double, i1: i64, u1: u64) {
	var i2: i64 = i64.view(d1);
	var i3: u64 = u64.view(d1);
	var d2: double = double.view(i1);
	var d3: double = double.view(u1);
}

// casts
def CastF(x: float, i1: i32, u1: u32) {
	var i2: i32 = i32.!(f1);
	var i3: u32 = u32.!(f1);
	var f2: float = float.!(i1);
	var f3: float = float.!(u1);
}
def CastD(x: double, i1: i64, u1: u64) {
	var i2: i64 = i64.!(d1);
	var i3: u64 = u64.!(d1);
	var d2: double = double.!(i1);
	var d3: double = double.!(u1);
}

// queries
def QueryF(x: float, i1: i32, u1: u32) {
	var i2: bool = i32.?(f1);
	var i3: bool = u32.?(f1);
	var f2: bool = float.?(i1);
	var f3: bool = float.?(u1);
}
def QueryD(x: double, i1: i64, u1: u64) {
	var i2: bool = i64.?(d1);
	var i3: bool = u64.?(d1);
	var d2: bool = double.?(i1);
	var d3: bool = double.?(u1);
}

// members
def MemberF(x: float) {
	var v1: u1 = x.sign;
	var v2: i8 = x.exponent;
	var v3: u23 = x.fraction;

	var f1: float = float.nan;
	var f2: float = float.infinity;

	var o1: int -> float = float.roundi;
	var o2: float -> float = float.abs;
	var o3: float -> float = float.ceil;
	var o4: float -> float = float.floor;
	var o5: float -> float = float.sqrt;
	var o6: float -> float = float.round;
	var o7: double -> float = float.roundd;
	var o8: u32 -> float = float.roundi;
}
def MemberD(x: double) {
	var v1: u1 = x.sign;
	var v2: i11 = x.exponent;
	var v3: u52 = x.fraction;

	var f1: double = double.nan;
	var f2: double = double.infinity;

	var o1: int -> double = double.roundi;
	var o2: double -> double = double.abs;
	var o3: double -> double = double.ceil;
	var o4: double -> double = double.floor;
	var o5: double -> double = double.sqrt;
	var o6: double -> double = double.round;
	var o8: u32 -> double = double.roundi;
}
