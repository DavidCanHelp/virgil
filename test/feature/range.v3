//@seman

// A feature-detection program for Range<T> types.
// You can copy this file into your project and use it to programmatically detect
// that the compiler supports ranges for your project and target platform.

// Type constructor resolution
def TypeConr<T>() {
	def r1: range<int>;
	def r2: range<T>;
	def r3: range<string>;
	def r4: range<void>;
	def r5: range<range<int>>;
	def r6: range<(int, int)>;
	def r7: range<int -> int>;
	def r8: int -> range<T>;
}
def TypeConR<T>() {
	def r1: Range<int>;
	def r2: Range<T>;
	def r3: Range<string>;
	def r4: Range<void>;
	def r5: Range<Range<int>>;
	def r6: Range<(int, int)>;
	def r7: Range<int -> int>;
	def r8: int -> Range<T>;
}

// Indexing
def Index_r<T>(x: range<T>, y: range<int>, t: T) {
	def v1: T = x[0];
	def v2: T = x[101133];
	def v3: int = y[0];
	def v4: int = y[7624];

	def v5: T = x[0u];
	def v6: T = x[101133u];
	def v7: T = x[1L];
	def v8: T = x[10133L];
	def v9: T = x[3uL];
	def vA: T = x[1133uL];
}
def Index_R<T>(x: Range<T>, y: Range<int>, t: T) {
	def v1: T = x[0];
	def v2: T = x[101133];
	def v3: int = y[0];
	def v4: int = y[7624];
	def v5: T = x[0u];
	def v6: T = x[101133u];
	def v7: T = x[1L];
	def v8: T = x[10133L];
	def v9: T = x[3uL];
	def vA: T = x[1133uL];

	x[0] = -8934;
	x[33] = -8934;
	x[1033u] = 111;
	x[789L] = -8934;
	x[78499uL] = -8934;
	y[0] = t;
	y[44] = t;
	y[7624u] = t;
	y[76241L] = t;
	y[762422uL] = t;
}

// Subranges
def Subrange_r<T>(x: range<T>, y: range<int>) {
	var start = 100uL, end = 99u, length = 88;
	def x2: range<T> = x[0 ... 9];
	def x3: range<T> = x[start ... 11];
	def x4: range<T> = x[start ... end];
	def y2: range<int> = y[0 ... 64];
	def y3: range<int> = y[start ... 1273];
	def y4: range<int> = y[start ... end];

	def x6: range<T> = x[0 ..+ 9];
	def x7: range<T> = x[start ..+ 11];
	def x8: range<T> = x[start ..+ length];
	def y6: range<int> = y[0 ..+ 64];
	def y7: range<int> = y[start ..+ 1273];
	def y8: range<int> = y[start ..+ length];
}
def Subrange_R<T>(x: Range<T>, y: Range<int>) {
	var start = 100uL, end = 99u;
	def x2: Range<T> = x[0 ... 9];
	def x3: Range<T> = x[start ... 11];
	def x4: Range<T> = x[start ... end];
	def y2: Range<int> = y[0 ... 64];
	def y3: Range<int> = y[start ... 1273];
	def y4: Range<int> = y[start ... end];

	def x6: Range<T> = x[0 ..+ 9];
	def x7: Range<T> = x[start ..+ 11];
	def x8: Range<T> = x[start ..+ length];
	def y6: Range<int> = y[0 ..+ 64];
	def y7: Range<int> = y[start ..+ 1273];
	def y8: Range<int> = y[start ..+ length];
}

// Covariance
class A { }
class B extends A { }
def Covariance(x: range<B>, y: range<(B, B)>) {
	var x2: range<A> = x;
	var y2: range<(A, A)> = y;
	var y3: range<(B, A)> = y;
	var y4: range<(A, B)> = y;
}

// Length
def Length(x: Range<byte>, y: range<byte>) {
	def i1 = x.length;
	def i2 = y.length;
	def f: Range<int> -> int = Range<int>.length;
	def f: range<int> -> int = range<int>.length;
}

// Implicit promotion
def Promote_r(x: Array<B>, y: Range<B>, b: B) {
	def r1: Range<B> = x;
	def r2: range<B> = x;
	def r3: range<B> = y;
	def r4: range<A> = x;
	def r5: range<A> = y;

	def r6: Range<B> = [b];
	def r7: range<B> = [b];
	def r8: range<A> = [b];

	def r9: Range<B> = Array<B>.new(33);
	def rA: range<B> = Array<B>.new(44);
	def rB: range<A> = Array<B>.new(55);
}

// Equality comparison
def Equality(x: Range<int>, y: range<int>, z: Array<int>) {
	var z1: bool = (x == x);
	var z1: bool = (x == y);
	var z1: bool = (x == z);
	var z1: bool = (y == x);
	var z1: bool = (y == y);
	var z1: bool = (y == z);
	var z1: bool = (z == x);
	var z1: bool = (z == y);
	var z1: bool = (z == z);
}
