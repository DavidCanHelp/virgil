//@seman

// declarations
struct Empty {
	=0;
}
struct X {
	+0	x:	byte;
	=1;
}
struct S1 {
	+0	header: u32;
	=4;
}
struct Hex {
	+0	header1: u32;
	+0x4	header2: u32;
	=0x8;
}

struct B1 #big-endian {
	+0	foo1:	u16;
	+2	foo2:	u16;
	=4;
}

struct M1 {
	+0	foo1:	u16 #big-endian;
	+2	foo2:	u16 #little-endian;
	=4;
}

struct M2 {
	+0	data:	byte[128]; // TODO
	=128;
}

struct M3 {
	+0	data:	u16[4] #little-endian; // TODO
	+8	more:	inline[4]<u16>; // TODO
	=16;
}

struct M4 {
	+0	inline	M3;	// TODO
	+16	more:	inline<M3>;	// TODO
}

def Ref1(p: ref<S1>, q: Ref<S1>) {
	var x1: u32 = p.header;
	var x2: u32 = q.header;
	q.header = 0x89;

//TODO	p := q; copying assignment
	p = q;
}

def RangeOf(a: Array<byte>) {
	var x1: ref<S1> = a[S1 @ 0];
	var x2: Ref<S1> = a[S1 @ 987];
	var x3: ref<X> = a[S2 @ 33];
	var x4: Ref<X> = a[S2 @ 88];
}

def Compare(x: Ref<X>, y: Ref<X>) {
	var z1: bool = x == y;
	var z2: bool = x != y;
	var z3: bool = x == null;
}
