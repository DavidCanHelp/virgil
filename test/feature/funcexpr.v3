//@seman
def Empty() {
	var f1: void -> void = def m() { };
	var f2: void -> void = def m() => ();

	var f3: int -> void = def m(x: int) { };
	var f4: int -> void = def m(x: int) => ();

	var f5: (int, bool) -> void = def m(x: int, y: bool) { };
	var f6: (int, bool) -> void = def m(x: int, y: bool) => ();
	var f7: (int, bool) -> void = def m(x: (int, bool)) { };
	var f8: (int, bool) -> void = def m(x: (int, bool)) => ();
}

def Anon() {
	var f1: void -> void = def () { };
	var f2: void -> void = def () => ();

	var f3: int -> void = def (x: int) { };
	var f4: int -> void = def (x: int) => ();

	var f5: (int, bool) -> void = def (x: int, y: bool) { };
	var f6: (int, bool) -> void = def (x: int, y: bool) => ();
	var f7: (int, bool) -> void = def (x: (int, bool)) { };
	var f8: (int, bool) -> void = def (x: (int, bool)) => ();
}

def Infer() {
	var f3: int -> void = def m(x) { };
	var f4: int -> void = def m(x) => ();

	var f5: (int, bool) -> void = def m(x, y) { };
	var f6: (int, bool) -> void = def m(x, y) => ();
	var f7: (int, bool) -> void = def m(x) { };
	var f8: (int, bool) -> void = def m(x) => ();

	var f9 = def m() => ();
	var fA = def m(x: int) => ();
}

def ArrayOf() {
	def a1: Array<(int, bool) -> void> = [
		def (x: int, y: bool) { },
		def (x: int, y: bool) => (),
		def (x: (int, bool)) { },
		def (x: (int, bool)) => ()
	];
}

class C(x: int -> void) { }
def f2(x: int -> void, bool -> void) {
}

def Expr() {
	var a1 = Array<int -> void>.new(1);
	a1[0] = def (x: int) => ();
	
	var c = C.new(def (x: int) => ());

	f2(def (x: int) => (), def (x: bool) => ());
	f2(def (x) => (), def (x) => ());
	f2(def nnn(x) => (), def mmm(x) => ());
}

def Nested() {
	var x: void -> void -> void = def () =>
		def () =>
			def () => ();
}

def Single() {
	var f1: int -> void = def y: int => ();
	var f2: int -> void = def y => ();
}

def Body() {
	var f1: int -> int = def (y: int) => 0;
	var f2: int -> int = def (y: int) => y;

	var f3: int -> void = def (y: int) { };
	var f4: int -> void = def (y: int) { };
}

def RetType() {
	var f1: int -> int = def (y: int) -> int { return 0; }
	var f2: int -> int = def (y: int) -> int { return y; }
	var f3: int -> int = def (y) -> int { return 0; }
	var f4: int -> int = def (y) -> int { return y; }

	var f5: int -> void = def (y: int) -> void { };
	var f6: int -> void = def (y: int) -> void { };
}

def Scope(x: int) {
	var f1: void -> void = def () {
		var y: int = x + 12;
	}
	var f2: void -> void = def () {
		var z: void = f1();
	}
	var f3: (void -> void) -> void = def (fx: void -> void) {
		return fx();
	}
	f3(f1);
	f3(f2);
	var f4: (void -> void) -> void = def (fx) => f1(fx());
	f4(f1);
	f4(f2);
}

def none<T>() -> T {
	var x: T;
	return x;
}

def InferRet() {
	var f1: void -> int = def () => none();
	var f2: void -> bool = def () => none();
	var f3: void -> string = def () => none();

	var f1: void -> int = def () -> int { return none(); }
	var f2: void -> bool = def () -> bool { return none(); }
	var f3: void -> string = def () -> string { return none(); }
}

def Stmt() {
	def f1() {
	}
	def f2(x: int) -> int {
		return 0;
	}
	def f3(x: int) => x;

	var v: void = f1();
	var i1: int = f2();
	var i2: int = f3();
}
