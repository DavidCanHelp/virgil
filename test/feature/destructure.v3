//@seman

// A feature-detection program for destructuring tuple assignments.
// You can copy this file into your project and use it to programmatically detect
// that the compiler supports destructuring for your project and target platform.

def f() -> (int, bool) {
	return (22, true);
}

def TupleVar(t: (int, bool)) {
	var (x1, y1) = t;
	var (x2: int, y2) = t;
	var (x3, y3: bool) = t;
	var (x4: int, y4: bool) = t;

	var a1: Array<int> = [x1, x2, x3, x4];
	var a2: Array<bool> = [y1, y2, y3, y4];
}

def TupleVarWider(t: (int, bool)) {
	var (x1, y1) = t;
	var (x2: long, y2) = t;
	var (x3, y3: bool) = t;
	var (x4: long, y4: bool) = t;

	var a1: Array<long> = [x1, x2, x3, x4];
	var a2: Array<bool> = [y1, y2, y3, y4];
}

def RetVar() {
	var (x1, y1) = f();
	var (x2: int, y2) = f();
	var (x3, y3: bool) = f();
	var (x4: int, y4: bool) = f();

	var a1: Array<int> = [x1, x2, x3, x4];
	var a2: Array<bool> = [y1, y2, y3, y4];
}

type D(x: long, y: string) { }

def DataVar(t: D) {
	var (x1, y1) = t;
	var (x2: long, y2) = t;
	var (x3, y3: string) = t;
	var (x4: long, y4: string) = t;

	var a1: Array<long> = [x1, x2, x3, x4];
	var a2: Array<string> = [y1, y2, y3, y4];
}
