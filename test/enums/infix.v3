//@execute 0=1; 1=1; 2=1; 3=1; 4=1; 5=1; 6=1; 7=1; 8=1; 9=9
enum InfixFlag { LEGAL_MEMBER, LEGAL_COMPOUND, LEGAL_BINOP }
def M = InfixFlag.LEGAL_MEMBER, C = InfixFlag.LEGAL_COMPOUND, B = InfixFlag.LEGAL_BINOP;

enum Infix(op: string, prec: byte, flags: InfixFlag.set) {
	Equal	("==",   6, M),
	NotEqual("!=",   6, M),
	Or	("|",    3, M|C),
	AndAnd	("&&",   2, M|C),
	OrOr	("||",   1, M|C),
	Shr	("#>>", 12, M|C),
	Lt	("<",    8, M|C),
	QSar	(">>",  12, M|C),
	QShr	(">>>", 12, M|C)
}

def check(x: Infix, op: string, prec: byte, flags: InfixFlag.set) -> int {
	if (x.op.length != op.length) return 1/0;
	for (i < op.length) if (x.op(i) != op(i)) return 1/0;
	if (x.prec != prec) return 1/0;
	if (x.flags != flags) return 1/0;
	return 1;
}

def main(a: int) -> int {
	match(a) {
		0: return check(Infix.Equal, "==",   6, M);
		1: return check(Infix.NotEqual, "!=",   6, M);
		2: return check(Infix.Or, "|",    3, M|C);
		3: return check(Infix.AndAnd, "&&",   2, M|C);
		4: return check(Infix.OrOr, "||",   1, M|C);
		5: return check(Infix.Shr, "#>>", 12, M|C);
		6: return check(Infix.Lt, "<",    8, M|C);
		7: return check(Infix.QSar, ">>",  12, M|C);
		8: return check(Infix.QShr, ">>>", 12, M|C);
	}
	return 9;
}