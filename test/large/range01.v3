//@execute 0=0; 1=0; 100=0
//@heap-size=10000000

component Arrays {
	// grow an {array} if it is smaller than size, returning either {array} or a new one
	def grow<T>(array: Array<T>, size: int) -> Array<T> {
		if (size > array.length) {
			var n = Array<T>.new(size), max = array.length;
			for (i < max) n[i] = array[i];
			return n;
		}
		return array;
	}
}

class SsaInstr {
	var mark: int;
}

class SsaGraph {
	var markGen: int;
}

class SsaRebuilder(graph: SsaGraph) {
	var startMark: int;
	var numInstrs: int;
	var instrs = Array<SsaInstr>.new(1);

	def addMapping(index: int, t: (int, int)) {
	}

	def setN(i: SsaInstr, r: Range<SsaInstr>) {
		i.mark = graph.markGen++;
		var index = i.mark - startMark;
		addMapping(index, (numInstrs, numInstrs + r.length));
		instrs = Arrays.grow(instrs, instrs.length + r.length + 10);
		for (j < r.length) instrs[numInstrs + j] = r[j];
		numInstrs += r.length;
	}
}

def main(a: int) -> int {
	var g = SsaGraph.new();
	var r = SsaRebuilder.new(g);
	var i = SsaInstr.new(), j = SsaInstr.new();
	var array = [j, j, j, j, j];

	while (a-- >= 0) {
		r.setN(i, array[0 ...]);
		r.setN(i, array[1 ...]);
		r.setN(i, array[2 ...]);
		r.setN(i, array[3 ...]);
	}

	return 0;
}
