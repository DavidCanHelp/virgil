//@execute 0=1; 1=2; 2=2; 3=3; 4=3; 5=2; 6=42
component tuple_perm01 {
	def main(a: int) -> int {
		match(a) {
			0: return cycle(pA);
			1: return cycle(pB);
			2: return cycle(pC);
			3: return cycle(pD);
			4: return cycle(pE);
			5: return cycle(pF);
		}
		return 42;
	}
	// find the cycle length of a permutation, if there is one
	def cycle(p: (int, int, int) -> (int, int, int)) -> int {
		var test = (1, 2, 3), x = test;
		for (i = 0; i < 9; i++) {
			x = p(x);
			if (x == test) return i + 1;
		}
		return -1;
	}

	def pA(a: int, b: int, c: int) -> (int, int, int) { return (a, b, c); }
	def pB(a: int, b: int, c: int) -> (int, int, int) { return (a, c, b); }
	def pC(a: int, b: int, c: int) -> (int, int, int) { return (b, a, c); }
	def pD(a: int, b: int, c: int) -> (int, int, int) { return (b, c, a); }
	def pE(a: int, b: int, c: int) -> (int, int, int) { return (c, a, b); }
	def pF(a: int, b: int, c: int) -> (int, int, int) { return (c, b, a); }
}
