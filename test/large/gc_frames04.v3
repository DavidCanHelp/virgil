//@execute 0=-891065472; 1=-891065472; 3=-891065472
//@heap-size=8000
def main(a: int) -> int {
	var hash = dohash();
	for (i = 0; i < a; i++) {
		if (dohash() != hash) return -1;
	}
	return hash;
}
def dohash() -> int {
	return f0(copy("abcd_0"), copy("efghi_1"), copy("jkl_2"), "mnopq_3", copy("rs_4"), copy("tuv_5"), "wxyz_6", copy("!&@^*$"));
}
// make a new copy of the string
def copy(s: string) -> string {
	var c = Array<byte>.new(s.length);
	for (i = 0; i < c.length; i++) c[i] = s[i];
	return c;
}
// def should have overflow parameters that are each the sole root of the array they reference
def f0(a: string, b: string, c: string, d: string, e: string, f: string, g: string, h: string) -> int {
	var hash = 0;
	hash = hash + f1(a, b, c, d, e, f, g, h);
	hash = hash + f1(b, c, d, e, f, g, h, a);
	hash = hash + f1(c, d, e, f, g, h, a, b);
	hash = hash + f1(d, e, f, g, h, a, b, c);
	hash = hash + f1(e, f, g, h, a, b, c, d);
	hash = hash + f1(f, g, h, a, b, c, d, e);
	hash = hash + f1(g, h, a, b, c, d, e, f);
	hash = hash + f1(h, a, b, c, d, e, f, g);
	return hash;
}
// def should have overflow parameters
def f1(a: string, b: string, c: string, d: string, e: string, f: string, g: string, h: string) -> int {
	// concat all strings together
	var x = [a, b, c, d, e, f, g, h], size = 0;
	for (i = 0; i < x.length; i++) size = size + x[i].length;
	var c = Array<byte>.new(size), s = 0;
	for (i = 0; i < x.length; i++) {
		for (j = 0; j < x[i].length; j++) {
			c[s++] = x[i][j];
		}
	}
	// compute the hash of the new string
	var hash = 0;
	for (i = 0; i < c.length; i++) {
		hash = hash * 33 + c[i];
	}
	return hash;
}
