//@execute 0=-891065472; 1=-891065472; 2=-891065472
//@heap-size=4000
component gc_frames03 {
	def main(a: int) -> int {
		var hash = dohash();
		for (i = 0; i < a; i++) {
			if (dohash() != hash) return -1;
		}
		return hash;
	}
	def dohash() -> int {
		var x = ["abcd_0", "efghi_1", "jkl_2", "mnopq_3", "rs_4", "tuv_5", "wxyz_6", "!&@^*$"];
		var hash = 0;
		for (i = 0; i < x.length; i++) {
			hash = hash + f1(copy(x, i), copy(x, i + 1), copy(x, i + 2), copy(x, i + 3), copy(x, i + 4), copy(x, i + 5), copy(x, i + 6), copy(x, i + 7));
		}
		return hash;
	}
	// make a new copy of the string at the index
	def copy(a: Array<string>, i: int) -> string {
		var s = a[i % a.length], c = Array<byte>.new(s.length);
		for (i = 0; i < c.length; i++) c[i] = s[i];
		return c;
	}
	// def should have overflow parameters that are each the sole root of the array they reference
	def f1(a: string, b: string, c: string, d: string, e: string, f: string, g: string, h: string) -> int {
		// concat all strings together
		var x = [a, b, c, d, e, f, g, h], size = 0;
		for (i = 0; i < x.length; i++) size = size + x[i].length;
		var c = Array<byte>.new(size), s = 0;
		for (i = 0; i < x.length; i++) {
			for (j = 0; j < x[i].length; j++) {
				c[s++] = x[i][j];
			}
		}
		// compute the hash of the new string
		var hash = 0;
		for (i = 0; i < c.length; i++) {
			hash = hash * 33 + c[i];
		}
		return hash;
	}
}
