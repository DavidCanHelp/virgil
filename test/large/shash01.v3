//@execute 0=0; 20=35; 30=55; 500=995; 1123=2243
//@heap-size=30000
class shash01_Bucket<K, V> {
	def key: K;
	var val: V;
	var next: shash01_Bucket<K, V>;

	new(key, val: V, next: shash01_Bucket<K,V>) {
		this.next = next;
		this.val = val;
	}
}
class shash01_map<K, V> {
	def hash: K -> int;			// user-supplied hash function
	def equals: (K, K) -> bool;		// user-supplied equality method
	var table: Array<shash01_Bucket<K, V>>;	// lazily allocated hashtable
	var cache: shash01_Bucket<K, V>;		// cache for last entry get/set

	new(hash, equals) { }
	def get(key: K) -> V {
		var c = cache;
		if (c == null) { var none: V; return none; }
		// cache is valid, must be at least one entry
		if (c.key == key) return c.val;
		// if table is null, there is only one key/def pair
		if (table == null) {
			if (equals(c.key, key)) return c.val; // a slow hit in the cache
			var none: V; 
			return none;
		}
		// cache did not match, hash and do bucket search
		for (bucket = table[dohash(key)]; bucket != null; bucket = bucket.next) {
			if (bucket.key == key || equals(bucket.key, key)) {
				cache = bucket;
				return bucket.val;
			}
		}
		var none: V;
		return none;
	}
	def set(key: K, val: V) {
		var c = cache;
		if (c == null) {
			// no entries yet, simply add it as the cache
			cache = shash01_Bucket<K, V>.new(key, val, null);
			return ();
		}
		if (c.key == key) {
			// ==, a fast hit in the cache
			c.val = val;
			return ();
		}
		if (table == null) {
			if (equals(c.key, key)) {
				// equals(), a slow hit in the cache
				c.val = val;
				return ();
			}
			// missed the cache, table not yet allocated, insert both
			table = Array.new(11);
			insert(c);
			insert(cache = shash01_Bucket.new(key, val, null));
			return ();
		}
		// missed the cache, hash and search the table
		var hashval = dohash(key);
		var i = 0;
		for (bucket = table[hashval]; bucket != null; bucket = bucket.next) {
			if (equals(bucket.key, key)) {
				bucket.val = val;
				cache = bucket;
				return ();
			}
			i++;
		}
		// insert into table and cache
		table[hashval] = cache = shash01_Bucket.new(key, val, table[hashval]);
		if (i > 4 && table.length < 1001) balance();
	}
	private def insert(bucket: shash01_Bucket<K, V>) {
		var hashval = dohash(bucket.key);
		bucket.next = table[hashval];
		table[hashval] = bucket;
	}
	private def dohash(key: K) -> int {
		return int.!(2147483647 & hash(key)) % table.length;
	}
	private def balance() {
		var old = table;
		var nlen = table.length * 3 + 1;
		table = Array.new(nlen);
		for (i = 0; i < old.length; i++) {
			for (b = old[i]; b != null; b = b.next) {
				var hashval = dohash(b.key);
				table[hashval] = shash01_Bucket.new(b.key, b.val, table[hashval]);
			}
		}
	}
}
var strings: Array<string> = [
	"string 1",
	"string 2",
	"string 3",
	"longer string 4",
	"var m = shash01_map<int, int>.new(hashString, equalString)"
];
def main(a: int) -> int {
	var m = shash01_map<string, int>.new(hash, equal);
	for (i = 0; i < a; i++) {
		m.set(strings[i % strings.length], i + a);
	}
	return m.get(strings[0]);
}
def hash(str: string) -> int {
	var max = str.length;
	var hashval = max;
	for (i = 0; i < max; i++) {
		hashval = hashval * 31 + str[i];
	}
	return hashval;
}
def equal(arr1: string, arr2: string) -> bool {
	if (arr1 == arr2) return true;
	if (arr1.length != arr2.length) return false;
	for (i = 0; i < arr1.length; i++) {
		if (arr1[i] != arr2[i]) return false;
	}
	return true;
}
