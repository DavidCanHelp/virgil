//@execute true=true; false=true
var all: bool = F100();
def main(a: bool) -> bool {
	if (a) return all;
	return F100();
}
def F100() -> bool {
	if (F(-100,0xffffff9c,0b11111111111111111111111110011100)) return false;
	if (F(-99,0xffffff9d,0b11111111111111111111111110011101)) return false;
	if (F(-98,0xffffff9e,0b11111111111111111111111110011110)) return false;
	if (F(-97,0xffffff9f,0b11111111111111111111111110011111)) return false;
	if (F(-96,0xffffffa0,0b11111111111111111111111110100000)) return false;
	if (F(-95,0xffffffa1,0b11111111111111111111111110100001)) return false;
	if (F(-94,0xffffffa2,0b11111111111111111111111110100010)) return false;
	if (F(-93,0xffffffa3,0b11111111111111111111111110100011)) return false;
	if (F(-92,0xffffffa4,0b11111111111111111111111110100100)) return false;
	if (F(-91,0xffffffa5,0b11111111111111111111111110100101)) return false;
	if (F(-90,0xffffffa6,0b11111111111111111111111110100110)) return false;
	if (F(-89,0xffffffa7,0b11111111111111111111111110100111)) return false;
	if (F(-88,0xffffffa8,0b11111111111111111111111110101000)) return false;
	if (F(-87,0xffffffa9,0b11111111111111111111111110101001)) return false;
	if (F(-86,0xffffffaa,0b11111111111111111111111110101010)) return false;
	if (F(-85,0xffffffab,0b11111111111111111111111110101011)) return false;
	if (F(-84,0xffffffac,0b11111111111111111111111110101100)) return false;
	if (F(-83,0xffffffad,0b11111111111111111111111110101101)) return false;
	if (F(-82,0xffffffae,0b11111111111111111111111110101110)) return false;
	if (F(-81,0xffffffaf,0b11111111111111111111111110101111)) return false;
	if (F(-80,0xffffffb0,0b11111111111111111111111110110000)) return false;
	if (F(-79,0xffffffb1,0b11111111111111111111111110110001)) return false;
	if (F(-78,0xffffffb2,0b11111111111111111111111110110010)) return false;
	if (F(-77,0xffffffb3,0b11111111111111111111111110110011)) return false;
	if (F(-76,0xffffffb4,0b11111111111111111111111110110100)) return false;
	if (F(-75,0xffffffb5,0b11111111111111111111111110110101)) return false;
	if (F(-74,0xffffffb6,0b11111111111111111111111110110110)) return false;
	if (F(-73,0xffffffb7,0b11111111111111111111111110110111)) return false;
	if (F(-72,0xffffffb8,0b11111111111111111111111110111000)) return false;
	if (F(-71,0xffffffb9,0b11111111111111111111111110111001)) return false;
	if (F(-70,0xffffffba,0b11111111111111111111111110111010)) return false;
	if (F(-69,0xffffffbb,0b11111111111111111111111110111011)) return false;
	if (F(-68,0xffffffbc,0b11111111111111111111111110111100)) return false;
	if (F(-67,0xffffffbd,0b11111111111111111111111110111101)) return false;
	if (F(-66,0xffffffbe,0b11111111111111111111111110111110)) return false;
	if (F(-65,0xffffffbf,0b11111111111111111111111110111111)) return false;
	if (F(-64,0xffffffc0,0b11111111111111111111111111000000)) return false;
	if (F(-63,0xffffffc1,0b11111111111111111111111111000001)) return false;
	if (F(-62,0xffffffc2,0b11111111111111111111111111000010)) return false;
	if (F(-61,0xffffffc3,0b11111111111111111111111111000011)) return false;
	if (F(-60,0xffffffc4,0b11111111111111111111111111000100)) return false;
	if (F(-59,0xffffffc5,0b11111111111111111111111111000101)) return false;
	if (F(-58,0xffffffc6,0b11111111111111111111111111000110)) return false;
	if (F(-57,0xffffffc7,0b11111111111111111111111111000111)) return false;
	if (F(-56,0xffffffc8,0b11111111111111111111111111001000)) return false;
	if (F(-55,0xffffffc9,0b11111111111111111111111111001001)) return false;
	if (F(-54,0xffffffca,0b11111111111111111111111111001010)) return false;
	if (F(-53,0xffffffcb,0b11111111111111111111111111001011)) return false;
	if (F(-52,0xffffffcc,0b11111111111111111111111111001100)) return false;
	if (F(-51,0xffffffcd,0b11111111111111111111111111001101)) return false;
	if (F(-50,0xffffffce,0b11111111111111111111111111001110)) return false;
	if (F(-49,0xffffffcf,0b11111111111111111111111111001111)) return false;
	if (F(-48,0xffffffd0,0b11111111111111111111111111010000)) return false;
	if (F(-47,0xffffffd1,0b11111111111111111111111111010001)) return false;
	if (F(-46,0xffffffd2,0b11111111111111111111111111010010)) return false;
	if (F(-45,0xffffffd3,0b11111111111111111111111111010011)) return false;
	if (F(-44,0xffffffd4,0b11111111111111111111111111010100)) return false;
	if (F(-43,0xffffffd5,0b11111111111111111111111111010101)) return false;
	if (F(-42,0xffffffd6,0b11111111111111111111111111010110)) return false;
	if (F(-41,0xffffffd7,0b11111111111111111111111111010111)) return false;
	if (F(-40,0xffffffd8,0b11111111111111111111111111011000)) return false;
	if (F(-39,0xffffffd9,0b11111111111111111111111111011001)) return false;
	if (F(-38,0xffffffda,0b11111111111111111111111111011010)) return false;
	if (F(-37,0xffffffdb,0b11111111111111111111111111011011)) return false;
	if (F(-36,0xffffffdc,0b11111111111111111111111111011100)) return false;
	if (F(-35,0xffffffdd,0b11111111111111111111111111011101)) return false;
	if (F(-34,0xffffffde,0b11111111111111111111111111011110)) return false;
	if (F(-33,0xffffffdf,0b11111111111111111111111111011111)) return false;
	if (F(-32,0xffffffe0,0b11111111111111111111111111100000)) return false;
	if (F(-31,0xffffffe1,0b11111111111111111111111111100001)) return false;
	if (F(-30,0xffffffe2,0b11111111111111111111111111100010)) return false;
	if (F(-29,0xffffffe3,0b11111111111111111111111111100011)) return false;
	if (F(-28,0xffffffe4,0b11111111111111111111111111100100)) return false;
	if (F(-27,0xffffffe5,0b11111111111111111111111111100101)) return false;
	if (F(-26,0xffffffe6,0b11111111111111111111111111100110)) return false;
	if (F(-25,0xffffffe7,0b11111111111111111111111111100111)) return false;
	if (F(-24,0xffffffe8,0b11111111111111111111111111101000)) return false;
	if (F(-23,0xffffffe9,0b11111111111111111111111111101001)) return false;
	if (F(-22,0xffffffea,0b11111111111111111111111111101010)) return false;
	if (F(-21,0xffffffeb,0b11111111111111111111111111101011)) return false;
	if (F(-20,0xffffffec,0b11111111111111111111111111101100)) return false;
	if (F(-19,0xffffffed,0b11111111111111111111111111101101)) return false;
	if (F(-18,0xffffffee,0b11111111111111111111111111101110)) return false;
	if (F(-17,0xffffffef,0b11111111111111111111111111101111)) return false;
	if (F(-16,0xfffffff0,0b11111111111111111111111111110000)) return false;
	if (F(-15,0xfffffff1,0b11111111111111111111111111110001)) return false;
	if (F(-14,0xfffffff2,0b11111111111111111111111111110010)) return false;
	if (F(-13,0xfffffff3,0b11111111111111111111111111110011)) return false;
	if (F(-12,0xfffffff4,0b11111111111111111111111111110100)) return false;
	if (F(-11,0xfffffff5,0b11111111111111111111111111110101)) return false;
	if (F(-10,0xfffffff6,0b11111111111111111111111111110110)) return false;
	if (F(-9,0xfffffff7,0b11111111111111111111111111110111)) return false;
	if (F(-8,0xfffffff8,0b11111111111111111111111111111000)) return false;
	if (F(-7,0xfffffff9,0b11111111111111111111111111111001)) return false;
	if (F(-6,0xfffffffa,0b11111111111111111111111111111010)) return false;
	if (F(-5,0xfffffffb,0b11111111111111111111111111111011)) return false;
	if (F(-4,0xfffffffc,0b11111111111111111111111111111100)) return false;
	if (F(-3,0xfffffffd,0b11111111111111111111111111111101)) return false;
	if (F(-2,0xfffffffe,0b11111111111111111111111111111110)) return false;
	if (F(-1,0xffffffff,0b11111111111111111111111111111111)) return false;
	if (F(0,0x0,0b0)) return false;
	if (F(1,0x1,0b1)) return false;
	if (F(2,0x2,0b10)) return false;
	if (F(3,0x3,0b11)) return false;
	if (F(4,0x4,0b100)) return false;
	if (F(5,0x5,0b101)) return false;
	if (F(6,0x6,0b110)) return false;
	if (F(7,0x7,0b111)) return false;
	if (F(8,0x8,0b1000)) return false;
	if (F(9,0x9,0b1001)) return false;
	if (F(10,0xa,0b1010)) return false;
	if (F(11,0xb,0b1011)) return false;
	if (F(12,0xc,0b1100)) return false;
	if (F(13,0xd,0b1101)) return false;
	if (F(14,0xe,0b1110)) return false;
	if (F(15,0xf,0b1111)) return false;
	if (F(16,0x10,0b10000)) return false;
	if (F(17,0x11,0b10001)) return false;
	if (F(18,0x12,0b10010)) return false;
	if (F(19,0x13,0b10011)) return false;
	if (F(20,0x14,0b10100)) return false;
	if (F(21,0x15,0b10101)) return false;
	if (F(22,0x16,0b10110)) return false;
	if (F(23,0x17,0b10111)) return false;
	if (F(24,0x18,0b11000)) return false;
	if (F(25,0x19,0b11001)) return false;
	if (F(26,0x1a,0b11010)) return false;
	if (F(27,0x1b,0b11011)) return false;
	if (F(28,0x1c,0b11100)) return false;
	if (F(29,0x1d,0b11101)) return false;
	if (F(30,0x1e,0b11110)) return false;
	if (F(31,0x1f,0b11111)) return false;
	if (F(32,0x20,0b100000)) return false;
	if (F(33,0x21,0b100001)) return false;
	if (F(34,0x22,0b100010)) return false;
	if (F(35,0x23,0b100011)) return false;
	if (F(36,0x24,0b100100)) return false;
	if (F(37,0x25,0b100101)) return false;
	if (F(38,0x26,0b100110)) return false;
	if (F(39,0x27,0b100111)) return false;
	if (F(40,0x28,0b101000)) return false;
	if (F(41,0x29,0b101001)) return false;
	if (F(42,0x2a,0b101010)) return false;
	if (F(43,0x2b,0b101011)) return false;
	if (F(44,0x2c,0b101100)) return false;
	if (F(45,0x2d,0b101101)) return false;
	if (F(46,0x2e,0b101110)) return false;
	if (F(47,0x2f,0b101111)) return false;
	if (F(48,0x30,0b110000)) return false;
	if (F(49,0x31,0b110001)) return false;
	if (F(50,0x32,0b110010)) return false;
	if (F(51,0x33,0b110011)) return false;
	if (F(52,0x34,0b110100)) return false;
	if (F(53,0x35,0b110101)) return false;
	if (F(54,0x36,0b110110)) return false;
	if (F(55,0x37,0b110111)) return false;
	if (F(56,0x38,0b111000)) return false;
	if (F(57,0x39,0b111001)) return false;
	if (F(58,0x3a,0b111010)) return false;
	if (F(59,0x3b,0b111011)) return false;
	if (F(60,0x3c,0b111100)) return false;
	if (F(61,0x3d,0b111101)) return false;
	if (F(62,0x3e,0b111110)) return false;
	if (F(63,0x3f,0b111111)) return false;
	if (F(64,0x40,0b1000000)) return false;
	if (F(65,0x41,0b1000001)) return false;
	if (F(66,0x42,0b1000010)) return false;
	if (F(67,0x43,0b1000011)) return false;
	if (F(68,0x44,0b1000100)) return false;
	if (F(69,0x45,0b1000101)) return false;
	if (F(70,0x46,0b1000110)) return false;
	if (F(71,0x47,0b1000111)) return false;
	if (F(72,0x48,0b1001000)) return false;
	if (F(73,0x49,0b1001001)) return false;
	if (F(74,0x4a,0b1001010)) return false;
	if (F(75,0x4b,0b1001011)) return false;
	if (F(76,0x4c,0b1001100)) return false;
	if (F(77,0x4d,0b1001101)) return false;
	if (F(78,0x4e,0b1001110)) return false;
	if (F(79,0x4f,0b1001111)) return false;
	if (F(80,0x50,0b1010000)) return false;
	if (F(81,0x51,0b1010001)) return false;
	if (F(82,0x52,0b1010010)) return false;
	if (F(83,0x53,0b1010011)) return false;
	if (F(84,0x54,0b1010100)) return false;
	if (F(85,0x55,0b1010101)) return false;
	if (F(86,0x56,0b1010110)) return false;
	if (F(87,0x57,0b1010111)) return false;
	if (F(88,0x58,0b1011000)) return false;
	if (F(89,0x59,0b1011001)) return false;
	if (F(90,0x5a,0b1011010)) return false;
	if (F(91,0x5b,0b1011011)) return false;
	if (F(92,0x5c,0b1011100)) return false;
	if (F(93,0x5d,0b1011101)) return false;
	if (F(94,0x5e,0b1011110)) return false;
	if (F(95,0x5f,0b1011111)) return false;
	if (F(96,0x60,0b1100000)) return false;
	if (F(97,0x61,0b1100001)) return false;
	if (F(98,0x62,0b1100010)) return false;
	if (F(99,0x63,0b1100011)) return false;
	if (F(100,0x64,0b1100100)) return false;
	return true;
}
def F(a: int, b: int, c: int) -> bool {
	return a != b || b != c;
}
