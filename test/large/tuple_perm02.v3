//@execute 0=1; 1=2; 2=3; 3=2; 4=3; 5=2; 6=2; 7=2; 8=4; 9=3; 10=4; 11=3; 12=3; 13=4; 14=3; 15=2; 16=2; 17=4; 18=3; 19=4; 20=2; 21=4; 22=3; 23=2; 24=42
component tuple_perm02 {
	def main(a: int) -> int {
		match(a) {
			0: return cycle(pA);
			1: return cycle(pB);
			2: return cycle(pC);
			3: return cycle(pD);
			4: return cycle(pE);
			5: return cycle(pF);
			6: return cycle(pG);
			7: return cycle(pH);
			8: return cycle(pI);
			9: return cycle(pJ);
			10: return cycle(pK);
			11: return cycle(pL);
			12: return cycle(pM);
			13: return cycle(pN);
			14: return cycle(pO);
			15: return cycle(pP);
			16: return cycle(pQ);
			17: return cycle(pR);
			18: return cycle(pS);
			19: return cycle(pT);
			20: return cycle(pU);
			21: return cycle(pV);
			22: return cycle(pW);
			23: return cycle(pX);
		}
		return 42;
	}
	// find the cycle length of a permutation, if there is one
	def cycle(p: (int, int, int, int) -> (int, int, int, int)) -> int {
		var test = (1, 2, 3, 4), x = test;
		for (i = 0; i < 5; i++) {
			if ((x = p(x)) == test) return i + 1;
		}
		return -1;
	}

	def pA(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (a, b, c, d); }
	def pB(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (a, b, d, c); }
	def pC(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (a, c, d, b); }
	def pD(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (a, c, b, d); }
	def pE(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (a, d, b, c); }
	def pF(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (a, d, c, b); }

	def pG(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (b, a, c, d); }
	def pH(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (b, a, d, c); }
	def pI(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (b, c, d, a); }
	def pJ(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (b, c, a, d); }
	def pK(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (b, d, a, c); }
	def pL(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (b, d, c, a); }

	def pM(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (c, a, b, d); }
	def pN(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (c, a, d, b); }
	def pO(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (c, b, d, a); }
	def pP(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (c, b, a, d); }
	def pQ(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (c, d, a, b); }
	def pR(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (c, d, b, a); }

	def pS(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (d, a, c, b); }
	def pT(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (d, a, b, c); }
	def pU(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (d, c, b, a); }
	def pV(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (d, c, a, b); }
	def pW(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (d, b, a, c); }
	def pX(a: int, b: int, c: int, d: int) -> (int, int, int, int) { return (d, b, c, a); }

}
