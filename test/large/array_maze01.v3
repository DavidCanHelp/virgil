//@execute (11,300)=-701886815; (11,1000)=-110094020; (133, 294)=1096148777
//@heap-size=200000
component array_maze01 {
	var seed: int;
	var extra: int;
	var size: int;

	def main(size: int, max: int) -> int {
		this.seed = 121013;
		this.extra = max + 55 + size;
		this.size = size;
		var master = Array<Array<int>>.new(size);
		for (j = 0; j < size; j++) master(j) = newArray();
		for (j = 0; j < max; j++) {
			var i = index(j), mi = master(i);
			match (j % 7) {
				0: exchange(master, i, index(master(i)(i)));
				1: master(i) = newArray();
				2: sum(mi, master(index(mi(index(j+7)))));
			}
			sum(master(index(mi(i))), mi);
		}
		return sum(master(size - 1), master(0));
	}
	def newArray() -> Array<int> {
		var array = Array<int>.new(size);
		for (i = 0; i < array.length; i++) array(i) = random();
		return array;
	}
	def sum(a: Array<int>, b: Array<int>) -> int {
		var sum = 0;
		for (i = 0; i < a.length; i++) {
			var s = a(i) + b(i);
			a(i) = s;
			sum = sum + s;
		}
		return sum;
	}
	def exchange(master: Array<Array<int>>, a: int, b: int) {
		var tmp = master(a);
		master(a) = master(b);
		master(b) = tmp;
	}
	def random() -> int {
		seed = seed * 1664525 + 1013904223 + extra;  // multiplicative random
		seed = seed ^ (seed >>> 16) ^ (seed >>> 24); // XOR in some higher bits
		return seed;
	}
	def index(i: int) -> int {
		return (i & 0x7FFFFFFF) % size;
	}
}
