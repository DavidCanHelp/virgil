//@execute 0=3; 1=4; 2=9
component gskip02 {
	var inputs: Array<string> = [
		"//\nc",
		"//c\nc",
		"//@parse\nf"
	];

	var globalPos: int;
	var globalCol: int;
	def main(a: int) -> int {
		setPos(0, 1);
		skip(inputs[a]);
		return globalPos;
	}
	def skip(input: string) {
		// skip forward over whitespace and comments
                var curPos = globalPos, curCol = globalCol;
                var max = input.length;
                while (curPos < max) {
                        var ch = input[curPos];
                        match (ch) {
                                '\t' => { curCol = 1 + ((curCol + 8) / 8) * 8; }
                                ' ' => { curCol = curCol + 1; }
                                '\n' => {
                                        addLineEnd(curPos);
                                        curCol = 1;
                                }
                                '/' => {
                                        if (curPos >= max - 1 || input[curPos + 1] != '/') break;
                                        // skip line comment
                                        curPos = curPos + 2;
                                        while (curPos < max) {
                                                if (input[curPos] == '\n') {
                                                        addLineEnd(curPos);
                                                        curCol = 1;
                                                        break;
                                                }
                                                curPos = curPos + 1;
                                        }
                                }
                        } else {
                                if (ch < ' ' || ch > '~') {
                                        // illegal byteacter!
                                        setPos(curPos, curCol);
                                        error("invalid byteacter");
                                        curCol = curCol + 1;
                                } else {
                                        // non-whitespace byteacter, break
                                        break;
                                }
                        }
                        curPos = curPos + 1;
                }
                // reached the end or a non-whitespace byteacter
                setPos(curPos, curCol);
	}
	def setPos(p: int, c: int) {
		globalPos = p;
		globalCol = c;
	}
	def addLineEnd(c: int) {
	}
	def error(msg: string) {
	}
}
