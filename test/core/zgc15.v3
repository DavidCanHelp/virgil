//@execute 0=0; 100=100; 300=300
//@heap-size=10000

// Machine-independent representation of a virtual register.
class VReg {
	// -- state for code gen --------------------------------
	def ssa: SsaInstr;		// corresponding ssa instruction (if any)
	def varNum: int;		// virtual register number
	def varSize: int;		// number of virtual registers this var represents
	var start: int = -1;		// start position of code that defines this var
	var end: int = -1;		// end position of code that defines this var
	var live: bool;			// true if live
	// -- state for register allocation ---------------------
	var hint: byte;			// physical register hint
	var regClass: RegClass;		// required register type
	var reg: byte;			// assigned physical register
	var prev: VReg;			// prev link for list management
	var next: VReg;			// next link for list management
	var spill: int;			// assigned spill slot (< 0 indicates a constant)
	var endPos: int;		// last live position
	// -- state for stackifier -----------------------------
	var usage = Usage.NONE;
	var parmoveState: int;
	var stackIndex = -2;

	new(ssa, varNum, varSize, isConst: bool) {
		if (isConst) spill = -2 - varNum; // constants have invalid spill slots
	}
}
// Machine-independent representation of virtual register classes
enum RegClass {
	REF,
	I32,
	I64,
	F32,
	F64
}
enum Usage { NONE, ONCE, MULTIPLE }

// Ssa items that can be placed into a block's linked list, including the
// basic block itself, instructions in the block, and the end.
class SsaLink {
	var prev: SsaLink;
	var next: SsaLink;
	var mark: int = -1;		// fast mapping of instr->int
	def clearMark() { this.mark = -1; }
}
// An instruction that produces a value, including dataflow facts and usages
class SsaInstr(t: Type) extends SsaLink {
	def getType() -> Type {
		return t;
	}
	def isConst() -> bool {
		return false;
	}
}

class ZCodeGen {
	def vars = Vector<VReg>.new();
	var markGen = 22;

	def makeVar(i: SsaInstr) -> VReg {
		var max = markGen;
		if (i.mark >= max) return vars[i.mark - max]; // already has a variable
		var isConst = i.isConst();
		var varNum = vars.length;
		var t = i.getType();
		if (t.isTuple()) {
			var size = t.length();
			for (l = t.nested; l != null; l = l.tail) {
				var vreg = VReg.new(i, vars.length, size, isConst);
				vreg.regClass = toRegClass(l.head);
				vars.put(vreg);
				size = 1;
			}
		} else {
			var vreg = VReg.new(i, varNum, 1, isConst);
			vreg.regClass = toRegClass(t);
			vars.put(vreg);
		}
		i.mark = varNum + max; // maps instruction to var
		return vars[varNum];
	}
	def toRegClass(t: Type) -> RegClass {
		return RegClass.REF;
	}
}

class Vector<T> {
	def var length: int;
	def [i: int] -> T { var d: T; return d; }
	def put(x: T) { length++; }
}

class Type(nested: List<Type>) {
	def length() -> int {
		var count = 0;
		for (l = nested; l != null; l = l.tail) count++;
		return count;
	}
	def isTuple() -> bool {
		return nested != null;
	}
}

class List<T>(head: T, tail: List<T>) { }


def t1 = Type.new(null);
def t2 = Type.new(List.new(t1, null));

def main(a: int) -> int {
	var gen = ZCodeGen.new();
	for (i < a) {
		var t = if(0 == (i & 1), t1, t2);
		gen.makeVar(SsaInstr.new(t));
	}
	return gen.vars.length;
}
