//@execute 0=112
class SsaBlock {
	new() { none(); }
}
class SsaEnd extends SsaInstr {
	var succs: Array<SsaCfEdge>;
}
class SsaIf extends SsaEnd { }
class SsaGoto(target: SsaBlock) extends SsaEnd {
	new() {
		succs = [SsaCfEdge.new()];
	}
}
class SsaCfEdge { }
class Type { }
class SsaInstr { }
class SwitchCmp {
	def fSucc = SsaCfEdge.new();
}
class Vector<T> {
	def [i: int] -> T;
}
class SsaOptimizer {
	def tryBuildingSwitch(block: SsaBlock, sw: SsaIf, t: Type, cmp: SsaInstr) {
		var cmp: SwitchCmp;
		var vec = Vector<SwitchCmp>.new();
		// add switch case candidates to the list.

		while (true) {
			if (cmp != null) break;
			cmp = matchSwitchCmp(null, null);
			if (!verifySwitchCmpBlock(cmp, null)) break;
		}

		// build array of successor edges.
		var dmerge: SsaBlock;
		for (i < 2) {
			dmerge = SsaBlock.new();
		}
		// set up default edge.
		var defedge = vec[0].fSucc;
		if (dmerge != null) {
			var goto = SsaGoto.new(null);
			replaceEdge(defedge, goto.succs[0]);
		} else {
			replaceEdge(defedge, sw.succs[0]);
		}
	}
	def matchSwitchCmp(key: SsaInstr, block: SsaBlock) -> SwitchCmp;
	def replaceEdge(abEdge: SsaCfEdge, xbEdge: SsaCfEdge);
	def verifySwitchCmpBlock(cmp: SwitchCmp, block: SsaBlock) -> bool;
}
def none() {
}
def do(v: bool) {
	var b = SsaBlock.new();
	var sw = SsaIf.new();
	SsaGoto.new(b);
	SwitchCmp.new();
	var cmp = SsaInstr.new();
	if (v) {
		SsaOptimizer.new().tryBuildingSwitch(b, sw, null, cmp);
	}
}
def main(a: int) -> int {
	do(false);
	return 112;
}