// Copyright 2019 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def CTRL_RED	      = "\x1B[0;31m";
def CTRL_GREEN	      = "\x1B[0;32m";
def CTRL_DEFAULT      = "\x1B[1;00m";

def CMD_STRING = "\x1B[1;00m#";

def BUF_SIZE = 128;
def MAX_LINE_LENGTH = 256;

def STDIN  = 0;
def STDOUT = 1;
def STDERR = 2;

// List utility class.
class List<T>(head: T, tail: List<T>) {
	def length: int = if(tail != null, 1 + tail.length, 1);
}

def length<T>(list: List<T>) -> int {
	return if(list != null, list.length, 0);
}

def escb(b: byte) {
	match (b) {
		'\r' => out.puts("\\r");
		'\t' => out.puts("\\t");
		'\n' => out.puts("\\n");
		_ => out.putc(b);
	}
}

def out: System;

// A buffered input stream with a number of utility methods to make
// parsing easier.
class InputStream(fd: int, bufferSize: int) {
	def buffer = Array<byte>.new(bufferSize);
	private var pos = 0;
	private var limit = 0;
	private var offset = 0;

	// Read into the buffer until the predictate {pred} returns
	// {false} for a byte. Returns the number of bytes read.
	def readWhile(dest: Array<byte>, pred: byte -> bool) -> int {
		var i = 0;
		while (fill(1) == 1) {
			if (i >= dest.length) break;
			var b = buffer[pos];
			if (!pred(b)) return i;
			dest[i++] = b;
			pos++;
		}
		return i;
	}
	// Peek at the next byte but do not consume it.
	// EOF is stupidly encoded as 0, like out.fileRead().
	def peek() -> byte {
		if (fill(1) == 1) return buffer[pos];
		return 0;
	}
	// Skip the given number of bytes.
	def skipN(num: int) {
		def max = buffer.length;
		while (num > max) {
			if (fill(max) != max) break; // EOF
			empty();
			num -= max;
		}
		fill(num);
		pos += num;
	}
	// Skip all characters that match the predicate, return {false} if EOF.
	def skipP(pred: byte -> bool) -> bool {
		while (fill(1) == 1) {
			if (pred(peek())) skipN(1);
			else return true;
		}
		return false;
	}
	// Skip to the next occurrence of the given {lit} byte, returning
	// {false} if EOF.
	def skipToByte(lit: byte) -> bool {
		while (fill(1) == 1) {
			if (buffer[pos++] == lit) return true;
		}
		return false;
	}
	// Skip to the next occurrence of the given {lit} string, returning
	// {false} if EOF.
	def skipToString(lit: string) -> bool {
		var len = lit.length;
		while (fill(len) == len) {
			if (matchString(lit)) return true;
			pos++;
		}
		return false;
	}
	// Match and consume the given byte {lit}, returning {true} if so.
	def matchByte(lit: byte) -> bool {
		if (fill(1) == 1 && buffer[pos] == lit) {
			pos++;
			return true;
		}
		return false;
	}
	// Match and consume the given string {lit}, returning {true} if so.
	def matchString(lit: string) -> bool {
		var len = lit.length;
		if (fill(len) == len) {
			for (i < len) if (buffer[pos+i] != lit[i]) return false;
			pos += len;
			return true;
		}
		return false;
	}
	// Read {num} bytes into the buffer, returning {num} if successful,
	// or the number of bytes in the buffer if less than {num} and EOF.
	def fill(num: int) -> int {
		if (pos + num <= limit) return num;  // already enough in the buffer
		var len = limit - pos;
		if (pos + num >= buffer.length) {
			// need to wrap around to the front of the buffer by copying
			for (i < len) buffer[i] = buffer[i + pos];
			offset += pos;
			pos = 0;
			limit = len;
		}
		// XXX: use out.fileReadK() in the future
		while ((limit - pos) < num) {
			var b = out.fileRead(fd);
			if (b == 0) return (limit - pos);  // EOF is stupidly encoded as 0
			buffer[limit++] = b;
		}
		return num;
	}
	// Empty the input buffer, updating the line number if specified.
	def empty() -> this {
		offset += (limit - pos);
		pos = limit = 0;
	}
	// Check for EOF (end-of-file) condition. This will not return {true}
	// if there are bytes remaining in the buffer.
	def eof() -> bool {
		return pos >= limit && fill(1) == 0;
	}
	// Scan within the buffer for the given byte, returning the position
	// in the buffer of the byte if found, or {-1} if not found.
	def scanForByte(lit: byte) -> int {
		for (pos = this.pos; pos < limit; pos++) {
			if (buffer[pos] == lit) return pos + 1;
		}
		return -1;
	}
	// Returns the byte offset in the stream.
	def fileOffset() -> int {
		return offset + pos;
	}
	def debug() {
		out.puts("|");
		for (i = pos; i < limit; i++) escb(buffer[i]);
		out.puts("|\n");
	}
}

enum Status {
	RUN,
	OK,
	FAIL
}

class Test(parent: Test, name: string) {
	var status: Status;
	var failReason: string;
	var numSubtests: int;
	var passed: List<Test>;
	var failed: List<Test>;

	def ok() -> bool {
		if (status != Status.RUN) return false;
		status = Status.OK;
		return true;
	}
	def fail(reason: string) -> bool {
		if (status != Status.RUN) return false;
		status = Status.FAIL;
		failReason = reason;
		return true;
	}
}

component Char {
	def isNotNewLine = byte.!=('\n', _);
	def isDecimal(b: byte) -> bool {
		return b >= '0' && b <= '9';
	}
	def isWhitespaceInLine(b: byte) -> bool {
		return b == ' ' || b == '\t';
	}
	def isNotWhitespace(b: byte) -> bool {
		return b != ' ' && b != '\t' && b != '\n';
	}
}

class Parser(input: InputStream, commandStart: string) {
	def line = Array<byte>.new(MAX_LINE_LENGTH);
	var current = Test.new(null, null);
	def parse() {
		if (input.matchString("#start")) {
			// ---
			out.puts("=> START\n");
			skipWhitespace();
			var subtests = parseNum();
			if (subtests >= 0) {
				current.numSubtests = subtests;
				out.puts("  -> subtests=");
				out.puti(subtests);
				out.ln();
			}
		}
		while (true) {
			out.puts("=> parse loop\n");
			if (!input.skipToString(commandStart)) break;
			parseCmd();
		}
	}

	def parseCmd() {
		if (input.matchString("ok")) {
			// ---
			out.puts("=> OK ");
			input.debug();
			endTest(Status.OK, null);
		} else if (input.matchString("end")) {
			// ---
			out.puts("=> END ");
			input.debug();
			closeTest();
		} else if(input.matchString("fail")) {
			// ---
			out.puts("=> FAIL ");
			input.debug();
			skipWhitespace();
			var failReason = parseLine();
			out.puts("  -> reason = {");
			out.puts(failReason);
			out.puts("}\n");
			endTest(Status.FAIL, failReason);
		} else if (input.matchString("begin")) {
			// ---
			out.puts("=> BEGIN ");
			input.debug();
			skipWhitespace();
			var name = parseUpToWhitespace();
			out.puts("  -> test = {");
			out.puts(name);
			current = Test.new(current, name);
			skipWhitespace();
			var subtests = parseNum();
			if (subtests > 0) {
				current.numSubtests = subtests;
				out.puts(", subtests=");
				out.puti(subtests);
			}
			out.puts("}\n");
		}  else {
			// TODO: warn for unrecognized command
			out.puts("=> IGNORE \n");
		}
	}

	def parseLine() -> string {
		var count = input.readWhile(line, Char.isNotNewLine);
		return copy(count);
	}

	def parseUpToWhitespace() -> string {
		var count = input.readWhile(line, Char.isNotWhitespace);
		return if(count > 0, copy(count));
	}

	def parseNum() -> int {
		var count = input.readWhile(line, Char.isDecimal);
		if (count == 0) return -1;
		var a = line, pos = 0, v0 = a[0];
		var max = count, accum = v0 - int.!('0'), i = pos + 1;
		var passed = true;
		while (i < max) {
			var d = a[i] - '0';
			accum = accum * 10 + d;
			if (accum < 0) passed = false; // overflow
			i++;
		}
		return if(passed, accum, -1);
	}

	def skipWhitespace() {
		input.skipP(Char.isWhitespaceInLine);
	}

	def copy(count: int) -> string {
		var result = Array<byte>.new(count);
		for (i < count) result[i] = line[i];
		return result;
	}

	def endTest(status: Status, failReason: string) {
		var c = current;
		if (c.status == Status.RUN) {
			c.status = status;
			c.failReason = failReason;
		}
		popTest();
	}

	def closeTest() {
		var c = current;
		if (c.failed == null) endTest(Status.OK, null);
		else endTest(Status.FAIL, "subtests failed");
	}

	def popTest() {
		var c = current, p = c.parent;
		if (p != null) {
			if (c.status == Status.OK) p.passed = List.new(c, p.passed);
			if (c.status == Status.FAIL) p.failed = List.new(c, p.failed);
			current = p;
			printStatus(c);
		}
	}

	def printStatus(t: Test) {
		var p = t.parent;
		if (p == null) return;
		var passed = length(p.passed), failed = length(p.failed);
		var color = if(failed > 0, CTRL_RED, CTRL_GREEN);
		out.puts(color);
		out.puts("Completed ");
		out.puti(passed + failed);
		out.puts(" of ");
		out.puti(p.numSubtests);
		if (failed > 0) {
			out.puts(" (");
			out.puti(failed);
			out.puts(" failed)");
		}
		out.puts(CTRL_DEFAULT);
		out.ln();
	}
}

def main(args: Array<string>) -> int {
	var input = InputStream.new(STDIN, BUF_SIZE);
	var p = Parser.new(input, "#");
	p.parse();
	return 0;
}
