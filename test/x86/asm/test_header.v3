// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component X86AssemblerTest {
	var buf: Buffer = Buffer.new(100, flush);
	var a: X86Assembler = X86Assembler.new(buf.getEncoder());
	var data: Array<byte>;

	// for code shortness.
	def eax: X86Reg = X86Regs.EAX;
	def ecx: X86Reg = X86Regs.ECX;
	def edx: X86Reg = X86Regs.EDX;
	def ebx: X86Reg = X86Regs.EBX;
	def esp: X86Reg = X86Regs.ESP;
	def ebp: X86Reg = X86Regs.EBP;
	def esi: X86Reg = X86Regs.ESI;
	def edi: X86Reg = X86Regs.EDI;

	def ax: X86Reg = X86Regs.EAX;
	def cx: X86Reg = X86Regs.ECX;
	def dx: X86Reg = X86Regs.EDX;
	def bx: X86Reg = X86Regs.EBX;
	def sp: X86Reg = X86Regs.ESP;
	def bp: X86Reg = X86Regs.EBP;
	def si: X86Reg = X86Regs.ESI;
	def di: X86Reg = X86Regs.EDI;

	def al: X86Reg = X86Regs.EAX;
	def cl: X86Reg = X86Regs.ECX;
	def dl: X86Reg = X86Regs.EDX;
	def bl: X86Reg = X86Regs.EBX;

	new() {
		test_add();
		test_movd();
		test_shift();
		test_mul();
		test_inc();
		test_dec();
		generated_tests();
	}

	def test_add() {
		x(a.add.rm_r(eax, eax), "01C0");
		x(a.add.rm_r(eax, ebx), "01D8");
		x(a.add.rm_r(eax, ecx), "01C8");
		x(a.add.rm_r(eax, edx), "01D0");
		x(a.add.rm_r(eax, esp), "01E0");
		x(a.add.rm_r(eax, ebp), "01E8");
		x(a.add.rm_r(eax, esi), "01F0");
		x(a.add.rm_r(eax, edi), "01F8");

		x(a.add.rm_r(eax, eax), "01C0");
		x(a.add.rm_r(ebx, eax), "01C3");
		x(a.add.rm_r(ecx, eax), "01C1");
		x(a.add.rm_r(edx, eax), "01C2");
		x(a.add.rm_r(esp, eax), "01C4");
		x(a.add.rm_r(ebp, eax), "01C5");
		x(a.add.rm_r(esi, eax), "01C6");
		x(a.add.rm_r(edi, eax), "01C7");

		x(a.add.rm_i(eax, 1), "83C001");
		x(a.add.rm_i(ebx, 1), "83C301");
		x(a.add.rm_i(ecx, 1), "83C101");
		x(a.add.rm_i(edx, 1), "83C201");
		x(a.add.rm_i(esp, 1), "83C401");
		x(a.add.rm_i(ebp, 1), "83C501");
		x(a.add.rm_i(esi, 1), "83C601");
		x(a.add.rm_i(edi, 1), "83C701");

		x(a.add.rm_i(eax, 11), "83C00B");
		x(a.add.rm_i(ebx, 11), "83C30B");
		x(a.add.rm_i(ecx, 11), "83C10B");
		x(a.add.rm_i(edx, 11), "83C20B");
		x(a.add.rm_i(esp, 11), "83C40B");
		x(a.add.rm_i(ebp, 11), "83C50B");
		x(a.add.rm_i(esi, 11), "83C60B");
		x(a.add.rm_i(edi, 11), "83C70B");

		x(a.add.rm_i(eax, 0x44332211), "0511223344");
		x(a.add.rm_i(ebx, 0x44332211), "81C311223344");
		x(a.add.rm_i(ecx, 0x44332211), "81C111223344");
		x(a.add.rm_i(edx, 0x44332211), "81C211223344");
		x(a.add.rm_i(esp, 0x44332211), "81C411223344");
		x(a.add.rm_i(ebp, 0x44332211), "81C511223344");
		x(a.add.rm_i(esi, 0x44332211), "81C611223344");
		x(a.add.rm_i(edi, 0x44332211), "81C711223344");
	}

	def test_movd() {
		var mov = a.movd_rm_r;
		x(mov(eax, eax), "89C0");
		x(mov(ebx, eax), "89C3");
		x(mov(ecx, eax), "89C1");
		x(mov(edx, eax), "89C2");
		x(mov(esi, eax), "89C6");
		x(mov(edi, eax), "89C7");
		x(mov(esp, eax), "89C4");
		x(mov(ebp, eax), "89C5");

		x(mov(eax, eax), "89C0");
		x(mov(eax, ebx), "89D8");
		x(mov(eax, ecx), "89C8");
		x(mov(eax, edx), "89D0");
		x(mov(eax, esi), "89F0");
		x(mov(eax, edi), "89F8");
		x(mov(eax, esp), "89E0");
		x(mov(eax, ebp), "89E8");

		x(mov(ind(eax), eax), "8900");
		x(mov(ind(eax), ebx), "8918");
		x(mov(ind(eax), ecx), "8908");
		x(mov(ind(eax), edx), "8910");
		x(mov(ind(eax), esi), "8930");
		x(mov(ind(eax), edi), "8938");
		x(mov(ind(eax), esp), "8920");
		x(mov(ind(eax), ebp), "8928");
		x(mov(ind(eax), eax), "8900");
		x(mov(ind(ebx), eax), "8903");
		x(mov(ind(ecx), eax), "8901");
		x(mov(ind(edx), eax), "8902");
		x(mov(ind(esi), eax), "8906");
		x(mov(ind(edi), eax), "8907");
		x(mov(ind(esp), eax), "890424"); 
		x(mov(ind(ebp), eax), "894500"); 

		x(mov(off(eax, 4), eax), "894004");
		x(mov(off(eax, 4), ebx), "895804");
		x(mov(off(eax, 4), ecx), "894804");
		x(mov(off(eax, 4), edx), "895004");
		x(mov(off(eax, 4), esi), "897004");
		x(mov(off(eax, 4), edi), "897804");
		x(mov(off(eax, 4), esp), "896004");
		x(mov(off(eax, 4), ebp), "896804");

		x(mov(off(eax, 4), eax), "894004");
		x(mov(off(ebx, 4), eax), "894304");
		x(mov(off(ecx, 4), eax), "894104");
		x(mov(off(edx, 4), eax), "894204");
		x(mov(off(esi, 4), eax), "894604");
		x(mov(off(edi, 4), eax), "894704");
		x(mov(off(esp, 4), eax), "89442404");
		x(mov(off(ebp, 4), eax), "894504");

		x(mov(off(eax, 0x44332211), eax), "898011223344");
		x(mov(off(eax, 0x44332211), ebx), "899811223344");
		x(mov(off(eax, 0x44332211), ecx), "898811223344");
		x(mov(off(eax, 0x44332211), edx), "899011223344");
		x(mov(off(eax, 0x44332211), esi), "89B011223344");
		x(mov(off(eax, 0x44332211), edi), "89B811223344");
		x(mov(off(eax, 0x44332211), esp), "89A011223344");
		x(mov(off(eax, 0x44332211), ebp), "89A811223344");

		x(mov(off(eax, 0x44332211), eax), "898011223344");
		x(mov(off(ebx, 0x44332211), eax), "898311223344");
		x(mov(off(ecx, 0x44332211), eax), "898111223344");
		x(mov(off(edx, 0x44332211), eax), "898211223344");
		x(mov(off(esi, 0x44332211), eax), "898611223344");
		x(mov(off(edi, 0x44332211), eax), "898711223344");
		x(mov(off(esp, 0x44332211), eax), "89842411223344");
		x(mov(off(ebp, 0x44332211), eax), "898511223344");

		x(mov(abs(0x04030201), eax), "A301020304");
		x(mov(abs(0x04030201), ebx), "891D01020304");
		x(mov(abs(0x04030201), ecx), "890D01020304");
		x(mov(abs(0x04030201), edx), "891501020304");
		x(mov(abs(0x04030201), esi), "893501020304");
		x(mov(abs(0x04030201), edi), "893D01020304");
		x(mov(abs(0x04030201), esp), "892501020304");
		x(mov(abs(0x04030201), ebp), "892D01020304");

		x(mov(addr(eax, 2, 0), eax), "890400");
		x(mov(addr(eax, 4, 0), eax), "89048500000000");
		x(mov(addr(eax, 8, 0), eax), "8904C500000000");
		x(mov(addr(ebx, 2, 0), eax), "89041B");
		x(mov(addr(ebx, 4, 0), eax), "89049D00000000");
		x(mov(addr(ebx, 8, 0), eax), "8904DD00000000");
		x(mov(addr(ebp, 2, 0), eax), "89442D00");
		x(mov(addr(ebp, 4, 0), eax), "8904AD00000000");
		x(mov(addr(ebp, 8, 0), eax), "8904ED00000000");
		x(mov(addr(eax, 2, 0), eax), "890400");
		x(mov(addr(ebx, 2, 0), eax), "89041B");
		x(mov(addr(ecx, 2, 0), eax), "890409");
		x(mov(addr(edx, 2, 0), eax), "890412");
		x(mov(addr(esi, 2, 0), eax), "890436");
		x(mov(addr(edi, 2, 0), eax), "89043F");
		x(mov(addr(ebp, 2, 0), eax), "89442D00");

		x(mov(addr(eax, 2, 0x44332211), eax), "89840011223344");
		x(mov(addr(eax, 4, 0x44332211), eax), "89048511223344");
		x(mov(addr(eax, 8, 0x44332211), eax), "8904C511223344");
		x(mov(addr(ebx, 2, 0x44332211), eax), "89841B11223344");
		x(mov(addr(ebx, 4, 0x44332211), eax), "89049D11223344");
		x(mov(addr(ebx, 8, 0x44332211), eax), "8904DD11223344");
		x(mov(addr(ebp, 2, 0x44332211), eax), "89842D11223344");
		x(mov(addr(ebp, 4, 0x44332211), eax), "8904AD11223344");
		x(mov(addr(ebp, 8, 0x44332211), eax), "8904ED11223344");
		x(mov(addr(eax, 2, 0x44332211), eax), "89840011223344");
		x(mov(addr(ebx, 2, 0x44332211), eax), "89841B11223344");
		x(mov(addr(ecx, 2, 0x44332211), eax), "89840911223344");
		x(mov(addr(edx, 2, 0x44332211), eax), "89841211223344");
		x(mov(addr(esi, 2, 0x44332211), eax), "89843611223344");
		x(mov(addr(edi, 2, 0x44332211), eax), "89843F11223344");
		x(mov(addr(ebp, 2, 0x44332211), eax), "89842D11223344");
	}

	def test_shift() {
		x(a.shl_1(eax), "D1E0");
		x(a.shl_1(ebx), "D1E3");
		x(a.shl_1(ecx), "D1E1");
		x(a.shl_1(edx), "D1E2");
		x(a.shl_1(esi), "D1E6");
		x(a.shl_1(edi), "D1E7");
		x(a.shl_1(esp), "D1E4");
		x(a.shl_1(ebp), "D1E5");

		x(a.shl_cl(eax), "D3E0");
		x(a.shl_cl(ebx), "D3E3");
		x(a.shl_cl(ecx), "D3E1");
		x(a.shl_cl(edx), "D3E2");
		x(a.shl_cl(esi), "D3E6");
		x(a.shl_cl(edi), "D3E7");
		x(a.shl_cl(esp), "D3E4");
		x(a.shl_cl(ebp), "D3E5");

		x(a.shr_1(eax), "D1E8");
		x(a.shr_1(ebx), "D1EB");
		x(a.shr_1(ecx), "D1E9");
		x(a.shr_1(edx), "D1EA");
		x(a.shr_1(esi), "D1EE");
		x(a.shr_1(edi), "D1EF");
		x(a.shr_1(esp), "D1EC");
		x(a.shr_1(ebp), "D1ED");

		x(a.shr_cl(eax), "D3E8");
		x(a.shr_cl(ebx), "D3EB");
		x(a.shr_cl(ecx), "D3E9");
		x(a.shr_cl(edx), "D3EA");
		x(a.shr_cl(esi), "D3EE");
		x(a.shr_cl(edi), "D3EF");
		x(a.shr_cl(esp), "D3EC");
		x(a.shr_cl(ebp), "D3ED");
	}

	def test_mul() {
		x(a.mul(eax), "F7E0");
		x(a.mul(ebx), "F7E3");
		x(a.mul(ecx), "F7E1");
		x(a.mul(edx), "F7E2");
		x(a.mul(esi), "F7E6");
		x(a.mul(edi), "F7E7");
		x(a.mul(esp), "F7E4");
		x(a.mul(ebp), "F7E5");

		x(a.imul(eax), "F7E8");
		x(a.imul(ebx), "F7EB");
		x(a.imul(ecx), "F7E9");
		x(a.imul(edx), "F7EA");
		x(a.imul(esi), "F7EE");
		x(a.imul(edi), "F7EF");
		x(a.imul(esp), "F7EC");
		x(a.imul(ebp), "F7ED");

		x(a.mul(ind(eax)), "F720");
		x(a.mul(ind(ebx)), "F723");
		x(a.mul(ind(ecx)), "F721");
		x(a.mul(ind(edx)), "F722");
		x(a.mul(ind(esi)), "F726");
		x(a.mul(ind(edi)), "F727");
		x(a.mul(ind(esp)), "F72424");
		x(a.mul(ind(ebp)), "F76500");

		x(a.imul(ind(eax)), "F728");
		x(a.imul(ind(ebx)), "F72B");
		x(a.imul(ind(ecx)), "F729");
		x(a.imul(ind(edx)), "F72A");
		x(a.imul(ind(esi)), "F72E");
		x(a.imul(ind(edi)), "F72F");
		x(a.imul(ind(esp)), "F72C24");
		x(a.imul(ind(ebp)), "F76D00");
	}

	def test_div() {
		x(a.div(eax), "F7F0");
		x(a.div(ebx), "F7F3");
		x(a.div(ecx), "F7F1");
		x(a.div(edx), "F7F2");
		x(a.div(esi), "F7F6");
		x(a.div(edi), "F7F7");
		x(a.div(esp), "F7F4");
		x(a.div(ebp), "F7F5");

		x(a.idiv(eax), "F7F8");
		x(a.idiv(ebx), "F7FB");
		x(a.idiv(ecx), "F7F9");
		x(a.idiv(edx), "F7FA");
		x(a.idiv(esi), "F7FE");
		x(a.idiv(edi), "F7FF");
		x(a.idiv(esp), "F7FC");
		x(a.idiv(ebp), "F7FD");

		x(a.div(ind(eax)), "F730");
		x(a.div(ind(ebx)), "F733");
		x(a.div(ind(ecx)), "F731");
		x(a.div(ind(edx)), "F732");
		x(a.div(ind(esi)), "F736");
		x(a.div(ind(edi)), "F737");
		x(a.div(ind(esp)), "F73424");
		x(a.div(ind(ebp)), "F77500");

		x(a.idiv(ind(eax)), "F738");
		x(a.idiv(ind(ebx)), "F73B");
		x(a.idiv(ind(ecx)), "F739");
		x(a.idiv(ind(edx)), "F73A");
		x(a.idiv(ind(esi)), "F73E");
		x(a.idiv(ind(edi)), "F73F");
		x(a.idiv(ind(esp)), "F73C24");
		x(a.idiv(ind(ebp)), "F77D00");
	}

	def test_inc() {
		x(a.inc(eax), "40");
		x(a.inc(ebx), "43");
		x(a.inc(ecx), "41");
		x(a.inc(edx), "42");
		x(a.inc(esi), "46");
		x(a.inc(edi), "47");
		x(a.inc(esp), "44");
		x(a.inc(ebp), "45");

		x(a.inc(eax), "40");
		x(a.inc(ebx), "43");
		x(a.inc(ecx), "41");
		x(a.inc(edx), "42");
		x(a.inc(esi), "46");
		x(a.inc(edi), "47");
		x(a.inc(esp), "44");
		x(a.inc(ebp), "45");

		x(a.inc(ind(eax)), "FF00");
		x(a.inc(ind(ebx)), "FF03");
		x(a.inc(ind(ecx)), "FF01");
		x(a.inc(ind(edx)), "FF02");
		x(a.inc(ind(esi)), "FF06");
		x(a.inc(ind(edi)), "FF07");
		x(a.inc(ind(esp)), "FF0424");
		x(a.inc(ind(ebp)), "FF4500");

		x(a.inc(ind(eax)), "FF00");
		x(a.inc(ind(ebx)), "FF03");
		x(a.inc(ind(ecx)), "FF01");
		x(a.inc(ind(edx)), "FF02");
		x(a.inc(ind(esi)), "FF06");
		x(a.inc(ind(edi)), "FF07");
		x(a.inc(ind(esp)), "FF0424");
		x(a.inc(ind(ebp)), "FF4500");
	}

	def test_dec() {
		x(a.dec(eax), "48");
		x(a.dec(ebx), "4B");
		x(a.dec(ecx), "49");
		x(a.dec(edx), "4A");
		x(a.dec(esi), "4E");
		x(a.dec(edi), "4F");
		x(a.dec(esp), "4C");
		x(a.dec(ebp), "4D");

		x(a.dec(eax), "48");
		x(a.dec(ebx), "4B");
		x(a.dec(ecx), "49");
		x(a.dec(edx), "4A");
		x(a.dec(esi), "4E");
		x(a.dec(edi), "4F");
		x(a.dec(esp), "4C");
		x(a.dec(ebp), "4D");

		x(a.dec(ind(eax)), "FF08");
		x(a.dec(ind(ebx)), "FF0B");
		x(a.dec(ind(ecx)), "FF09");
		x(a.dec(ind(edx)), "FF0A");
		x(a.dec(ind(esi)), "FF0E");
		x(a.dec(ind(edi)), "FF0F");
		x(a.dec(ind(esp)), "FF0C24");
		x(a.dec(ind(ebp)), "FF4D00");

		x(a.dec(ind(eax)), "FF08");
		x(a.dec(ind(ebx)), "FF0B");
		x(a.dec(ind(ecx)), "FF09");
		x(a.dec(ind(edx)), "FF0A");
		x(a.dec(ind(esi)), "FF0E");
		x(a.dec(ind(edi)), "FF0F");
		x(a.dec(ind(esp)), "FF0C24");
		x(a.dec(ind(ebp)), "FF4D00");
	}

	def ind(reg: X86Reg) -> X86Addr {
		return X86Addr.new(reg, 1, 0);
	}
	def off(reg: X86Reg, off: int) -> X86Addr {
		return X86Addr.new(reg, 1, off);
	}
	def addr(reg: X86Reg, scale: int, off: int) -> X86Addr {
		return X86Addr.new(reg, scale, off);
	}
	def abs(addr: int) -> X86Addr {
		return X86Addr.new(null, 1, addr);
	}

	def x(v: void, expect: string) {
		data = null;
		buf.flush();
		if (data == null) System.error("SelfTestError", "x86 assembler produced no output");
		if (data.length != expect.length / 2) error(data.length, expect);
		for (i = 0; i < data.length; i = i + 1) {
			var d = data(i);
			var hv = Int.hexValue(expect(i * 2));
			var lv = Int.hexValue(expect(i * 2 + 1));
			if ((d & 0xf) != lv) error(i, expect);
			if ((d #>> 4) != hv) error(i, expect);
		}
	}
	def flush(a: Array<byte>, pos: int, len: int) {
		data = Arrays.range(a, pos, len);
	}
	def error(pos: int, expect: string) {
		var dl = data.length, el = expect.length;
		var b = StringBuffer.new().puts("x86 asm produced ");
		var j = 0;
		while (j < pos && j < dl) {
			b.appendHexByte(data(j)); // append correct data
			j = j + 1;
		}
		b.putc('[');
		while (j < dl) {
			b.appendHexByte(data(j)); // append error data
			j = j + 1;
		}
		b.puts("] != ");
		
		j = 0;
		while (j < pos*2 && j < el) {
			b.putc(expect(j));     // append correct data
			b.putc(expect(j + 1)); // append correct data
			j = j + 2;
		}
		b.putc('[');
		while (j < el) {
			b.putc(expect(j));     // append correct data
			b.putc(expect(j + 1)); // append correct data
			j = j + 2;
		}
		b.putc(']');

		System.error("SelfTestError", b.toString());
	}

	def generated_tests() {

