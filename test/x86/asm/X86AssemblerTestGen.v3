// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def main(a: Array<string>) -> int {
	Terminal.put("bits 32\n");
	var gen = X86AsmGen.new(a);

	// SSE move instructions
	gen.do_m_s("movss", gen.asm.movss_m_s);
	gen.do_s_rm("movss", gen.asm.movss_s_rm);
	gen.do_m_s("movsd", gen.asm.movsd_m_s);
	gen.do_s_rm("movsd", gen.asm.movsd_s_rm);

	Terminal.put(";; passed\n");
	return 0;
}

def ADDRS = [
	X86Regs.EAX.indirect(),
	X86Regs.EBX.indirect(),
	X86Regs.ESI.indirect(),
	X86Addr.new(X86Regs.EAX, null, 1, 0x11223344),
	X86Addr.new(X86Regs.ECX, null, 1, 0x77),
	X86Addr.new(X86Regs.EBX, X86Regs.EBX, 1, 0x11223344),
	X86Addr.new(X86Regs.ECX, X86Regs.EDX, 4, 0x11223344),
	X86Addr.new(X86Regs.EDI, X86Regs.ESI, 8, 0x11223344)
];

class X86AsmGen(args: Array<string>) {
	def data = DataBuffer.new(false, Array.new(256), 0, null);
	var asm = X86Assembler.new(data);
	var buf = StringBuffer.new();

	def render() {
		for (i < data.pos) buf.appendHexByte(data.array[i]);
		data.pos = 0;
	}

	def skip(mnemonic: string) -> bool {
		if (args.length == 0) return false;
		for (i < args.length) {
			if (Strings.equal(args[i], mnemonic)) return false;
		}
		return true;
	}

	def do_rm_s(mnemonic: string, asm_func: (X86Rm, SSEReg) -> void) {
		if (skip(mnemonic)) return;
		var addr = X86Regs.EAX.indirect();
		for (s in [X86Regs.XMM0, X86Regs.XMM1, X86Regs.XMM7]) {
			asm_func(addr, s);
			buf.reset();
			render();
			Terminal.putbln(buf);
		}
	}
	def do_m_s(mnemonic: string, asm_func: (X86Addr, SSEReg) -> void) {
		if (skip(mnemonic)) return;
		for (addr in ADDRS) {
			for (s in [X86Regs.XMM0, X86Regs.XMM1, X86Regs.XMM7]) {
				asm_func(addr, s);
				buf.reset();
				buf.puts(mnemonic).sp();
				addr.render(buf);
				buf.puts(", ");
				buf.puts(s.name);
				buf.puts(" ;;== ");
				render();
				Terminal.putbln(buf);
			}
		}
	}
	def do_s_rm(mnemonic: string, asm_func: (SSEReg, X86Rm) -> void) {
		if (skip(mnemonic)) return;
		for (addr in ADDRS) {
			for (s in [X86Regs.XMM0, X86Regs.XMM1, X86Regs.XMM7]) {
				asm_func(s, addr);
				buf.reset();
				buf.puts(mnemonic).sp();
				buf.puts(s.name);
				buf.puts(", ");
				addr.render(buf);
				buf.puts(" ;;== ");
				render();
				Terminal.putbln(buf);
			}
		}
	}
}
