// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// generates many combinations of instruction / addressing mode for testing X86Assembler.
component X86AssemblerTestGen {
	var doEmit: bool = true;
	var buf1 = StringBuffer.new();
	var buf2 = StringBuffer.new();

	def GPRs    = [X86Regs.EAX, X86Regs.EBX, X86Regs.ECX, X86Regs.EDX, X86Regs.ESP, X86Regs.EBP, X86Regs.ESI, X86Regs.EDI];
	def SCALEs  = [1, 2, 4, 8];
	def OFFSETs = [0x80000000, -128, -5, 0, 1, 127, 128, 0x44332211, 0x7FFFFFFF];

	var addrs: int;

	var rm32 = gen_rm(32, true, "dword");
	var rm16 = gen_rm(16, true, "word");
	var rm8 = gen_rm(8, true, "byte");

	var r32 = gen_r(32);
	var r16 = gen_r(16);
	var r8 = gen_r(8);

	var i32 = gen_i("dword", [0x80000000, 0x44332211, 0x11223344, 0x7FFFFFFF]);
	var i16 = gen_i("word", [-32768, 0x5566, 0x6655, 32767]);
	var i8 = gen_i("byte", [-128, -127, -1, 0, 1, 127]);
	var u8 = gen_i("byte", [0, 1, 5, 127, 128, 255]);

	new() { if (doEmit) emit(); }

	def emit() {
		Terminal.puts("bits 32\n");

		for (i = 0; i < rm32.length; i = i + 1) {
			var r = rm32.get(i);
			Terminal.print2("shl %1, 1  ; shl_i(%2, 1)\n", r.0, r.1);
			Terminal.print2("shl %1, 5  ; shl_i(%2, 5)\n", r.0, r.1);
			Terminal.print2("shl %1, 31 ; shl_i(%2, 31)\n", r.0, r.1);
			Terminal.print2("shl %1, cl ; shl_cl(%2)\n", r.0, r.1);
			Terminal.print2("shr %1, 1  ; shr_i(%2, 1)\n", r.0, r.1);
			Terminal.print2("shr %1, 5  ; shr_i(%2, 5)\n", r.0, r.1);
			Terminal.print2("shr %1, 31 ; shr_i(%2, 31)\n", r.0, r.1);
			Terminal.print2("shr %1, cl ; shr_cl(%2)\n", r.0, r.1);
		}

		emit_1s(rm32, ["mul", "imul", "div", "idiv", "inc", "dec", "push", "not", "neg", "pop"]);
		emit_1s(rm8, ["seto", "setno", "setc", "setnc", "setz", "setnz", "seta", "setna", "sets", "setns", "setp", "setnp", "setl", "setge"]);

		var br = ["jmp", "jo", "jno", "jc", "jnc", "jz", "jnz", "ja", "jna", "js", "jns", "jp", "jnp", "jl", "jge", "jle", "jg"];
		var j32 = gen_i("", [0x80000000, 0x44332211, 0x11223344, 0x7FFFFFFF]);
		var j8 = [-128, -127, -1, 0, 1, 3, 127];
		for (i = 0; i < br.length; i = i + 1) {
			var brn = br(i);
			emit_op1(brn, brn, j32);
			for (j = 0; j < j8.length; j = j + 1) {
				var a: string, off = j8(j);
				if (off < -2) a = Strings.format1("$%1", off+2);
				else if (off == -2) a = "$";
				else a = Strings.format1("$+%1", off+2);
				emit1(brn, brn, (a, Strings.format1("%1", off)));
			}
		}

		Terminal.puts("int3 ; intK(3)\n");
		Terminal.puts("sysenter ; sysenter()\n");
		Terminal.puts("sysexit ; sysexit()\n");
		Terminal.puts("cdq ; cdq()\n");
		Terminal.puts("ret ; ret()\n");
		Terminal.puts("retn ; ret()\n");

		Terminal.puts("repz movsb; repz().movsb()\n");
		Terminal.puts("repne movsb; repne().movsb()\n");
		Terminal.puts("repz scasb; repz().scasb()\n");
		Terminal.puts("repne scasb; repne().scasb()\n");

		emit_op1("int", "intK", u8);
		emit_op1("jmp", "ijmp", rm32);
		emit_op1("call", "icall", rm32);
		emit_op1("call", "call", i32);
		emit_op1("push", "push_i", i32);
		emit_op1("push", "push_i", i8);

		emit_op2("imul", "imul_r_rm", r32, rm32);
		emit_op2("imul", "imul_r_i", r32, i32);
		emit_op2("imul", "imul_r_i", r32, i8);
		emit_op2("mov", "movd_rm_r", rm32, r32);
		emit_op2("mov", "movw_rm_r", rm16, r16);
		emit_op2("mov", "movb_rm_r", rm8, r8);


		var cmovs = ["cmovo", "cmovno", "cmovc", "cmovnc", "cmovz", "cmovnz", "cmova", 
				"cmovna", "cmovs", "cmovns", "cmovp", "cmovnp", "cmovl", "cmovge"];
		for (i = 0; i < cmovs.length; i++) {
			emit_op2(cmovs(i), cmovs(i), r32, rm32);
		}

		emit_op2("xadd", "xadd", rm32, r32);

		emit_op2("mov", "movd_rm_i", rm32, i32);
		emit_op2("mov", "movb_rm_i", rm8, i8);

		emit_op2("movzx", "movbzx", r32, rm8);
		emit_op2("movsx", "movbsx", r32, rm8);

		emit_op2("movzx", "movwzx", r32, rm16);
		emit_op2("movsx", "movwsx", r32, rm16);

		emit_op2("mov", "movw_rm_r", rm16, r16);
		emit_op2("mov", "movw_rm_i", rm16, i16);

		emit_op2("lea", "lea", r32, gen_rm(32, false, ""));

		emit_op2("test", "test_rm_r", rm32, r32);
		emit_op2("test", "test_rm_i", r32, i32);

		emit_op2("xchg", "xchg", r32, r32);

		emit_gpop("add");
		emit_gpop("or");
		emit_gpop("adc");
		emit_gpop("sbb");
		emit_gpop("and");
		emit_gpop("sub");
		emit_gpop("xor");
		emit_gpop("cmp");
	}
	def emit_1s(seq: Sequence<(string, string)>, a: Array<string>) {
		for (i = 0; i < a.length; i = i + 1) {
			emit_op1(a(i), a(i), seq);
		}
	}
	def emit_gpop(opname: string) {
		emit_op2(opname, Strings.format1("%1.rm_r", opname), rm32, r32);
		emit_op2(opname, Strings.format1("%1.r_rm", opname), r32, rm32);
		emit_op2(opname, Strings.format1("%1.rm_i", opname), rm32, i32);
		emit_op2(opname, Strings.format1("%1.rm_i", opname), rm32, i8);
	}
	def gen_rm(size: int, regs: bool, sname: string) -> Sequence<(string, string)> {
		var seq = Sequence<(string, string)>.new().grow(1000);
		if (regs) {
			for (j = 0; j < GPRs.length; j = j + 1) {
				var n = GPRs(j).name(size);
				if (n != null) seq.add(n, n);
			}
		}
		var buf1 = this.buf1.reset(), buf2 = this.buf2.reset();
		for (j = 0; j < GPRs.length; j = j + 1) {
			var ra = GPRs(j);
			for (k = 0; k < SCALEs.length; k = k + 1) {
				var scale = SCALEs(k);
				if (scale != 1 && ra == X86Regs.ESP) continue;
				for (m = 0; m < OFFSETs.length; m = m + 1) {
					var addr = X86Addr.new(ra, scale, OFFSETs(m));
					buf1.puts(sname).putc(' ');
					buf2.putc(' ');
					addr.render(buf1);
					naddr(addr, buf2);
					seq.add(buf1.toString(), buf2.toString());
					buf1.length = buf2.length = 0;
				}
			}
		}
		return seq;
	}
	def naddr(addr: X86Addr, buf2: StringBuffer) -> StringBuffer {
		var num = addrs++;
		Terminal.puts("; var a");
		Terminal.puti(num);
		Terminal.puts("=addr(");
		Terminal.puts(addr.reg.name32);
		Terminal.puts(",");
		Terminal.puti(addr.scale);
		Terminal.puts(",");
		Terminal.puti(addr.disp);
		Terminal.puts(");\n");
		return buf2.putc('a').puti(num);
	}
	def gen_r(size: int) -> Sequence<(string, string)> {
		var seq = Sequence<(string, string)>.new().grow(10);
		for (j = 0; j < GPRs.length; j = j + 1) {
			var n = GPRs(j).name(size);
			if (n != null) seq.add(n, n);
		}
		return seq;
	}
	def gen_i(sname: string, vals: Array<int>) -> Sequence<(string, string)> {
		var seq = Sequence<(string, string)>.new().grow(10);
		for (j = 0; j < vals.length; j = j + 1) {
			var ra = vals(j);
			var buf1 = this.buf1.reset().puts(sname).putc(' ').puti(ra);
			var buf2 = this.buf2.reset().puti(ra);
			seq.add(buf1.toString(), buf2.toString());
		}
		return seq;
	}
	def emit_op2(synName: string, methName: string, a: Sequence<(string, string)>, b: Sequence<(string, string)>) {
		for (i = 0; i < a.length; i = i + 1) {
			for (j = 0; j < b.length; j = j + 1) {
				emit2(synName, methName, a.get(i), b.get(j));
			}
		}
	}
	def emit_op1(synName: string, methName: string, a: Sequence<(string, string)>) {
		for (j = 0; j < a.length; j = j + 1) {
			emit1(synName, methName, a.get(j));
		}
	}
	def emit2(synName: string, methName: string, a: (string, string), b: (string, string)) {
		var s = buf1.reset();
		s.format3("%1 %2, %3 ", synName, a.0, b.0).puts("; ");
		s.format3("%1(%2, %3)", methName, a.1, b.1);
		Terminal.putbln(s);
	}
	def emit1(synName: string, methName: string, a: (string, string)) {
		var s = buf1.reset();
		s.format2("%1 %2 ", synName, a.0).puts("; ");
		s.format2("%1(%2)", methName, a.1);
		Terminal.putbln(s);
	}
}
