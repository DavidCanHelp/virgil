//@execute 0=0
class if_cond09_a {
}
class if_cond09_b {
}
class if_cond09_c {
}
component if_cond09 {
	def main(arg: int) -> int {
		m1(null, null);
		return 0;
	}
	def m1(expr: if_cond09_a, outer: if_cond09_b) -> if_cond09_b {
		var arity = 0;
		var etypes: Array<if_cond09_b>;
		if (outer == null || arity != (etypes = toArray(outer)).length) {
		}
		var i = 0;
		while (i < arity) {
			typeCheckExpr(expr, etypes(i));
		}
		return null;
	}

	def toArray(expr: if_cond09_b) -> Array<if_cond09_b> { return []; }
	def typeCheckExpr(expr: if_cond09_a, t: if_cond09_b) { }
}
