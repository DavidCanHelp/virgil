//@execute 0=2; 1=0; 2=0; 3=0; 4=42
class jopt2a {
	def input: Array<byte>;
	var curPos: int;
	var curByte: byte;
	new(input) {
		curByte = input[0];
	}
	def advance(len: int) {
		curPos = curPos + len;
		curByte = input[curPos];
	}
}
component jopt2 {
	def main(a: int) -> int {
		if (a == 0) return optKeyword(jopt2a.new("if ("), "if").curPos;
		if (a == 1) return optKeyword(jopt2a.new("i"), "if").curPos;
		if (a == 2) return optKeyword(jopt2a.new("else"), "if").curPos;
		if (a == 3) return optKeyword(jopt2a.new("ifi"), "if").curPos;
		return 42;
	}
	def optKeyword(p: jopt2a, kw: string) -> jopt2a {
		if (p.curByte != kw[0]) return p;
		var i = p.curPos, d = p.input, max = i + kw.length;
		if (max > d.length) return p;
		for (c in kw) {
			if (d[i++] != c) return p;
		}
		if (max < d.length && isIdentMiddle(d[max])) return p;
		p.advance(kw.length);
		return p;
	}
	def isIdentMiddle(b: byte) -> bool {
		return b <= 'z' && b >= 'a';
	}
}
