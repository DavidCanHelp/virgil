//@execute 0=77; 1=26; 2=25; 3=16; 4=11; 5=10; 6=6; 7=2; 8=1; 9=77
class def16_a { def a: int = def16.next(); } // 26
class def16_b extends def16_a { def b: int = def16.next(); } // 25
class def16_c extends def16_b { def c: int = def16.next(); } // 24
class def16_d extends def16_c { def d: int = def16.next(); } // 23
class def16_e extends def16_d { def e: int = def16.next(); } // 22
class def16_f extends def16_e { def f: int = def16.next(); } // 21
class def16_g extends def16_f { def g: int = def16.next(); } // 20
class def16_h extends def16_g { def h: int = def16.next(); } // 19
class def16_i extends def16_h { def i: int = def16.next(); } // 18
class def16_j extends def16_i { def j: int = def16.next(); } // 17
class def16_k extends def16_j { def k: int = def16.next(); } // 16
class def16_l extends def16_k { def l: int = def16.next(); } // 15
class def16_m extends def16_l { def m: int = def16.next(); } // 14
class def16_n extends def16_m { def n: int = def16.next(); } // 13
class def16_o extends def16_n { def o: int = def16.next(); } // 12
class def16_p extends def16_o { def p: int = def16.next(); } // 11
class def16_q extends def16_p { def q: int = def16.next(); } // 10
class def16_r extends def16_q { def r: int = def16.next(); } // 9
class def16_s extends def16_r { def s: int = def16.next(); } // 8
class def16_t extends def16_s { def t: int = def16.next(); } // 7
class def16_u extends def16_t { def u: int = def16.next(); } // 6
class def16_v extends def16_u { def v: int = def16.next(); } // 5
class def16_w extends def16_v { def w: int = def16.next(); } // 4
class def16_x extends def16_w { def x: int = def16.next(); } // 3
class def16_y extends def16_x { def y: int = def16.next(); } // 2
class def16_z extends def16_y { def z: int = def16.next(); } // 1

component def16 {
	var count: int;
	def foo = def16_z.new();

	def main(arg: int) -> int {
		if (arg == 1) return foo.a;
		if (arg == 2) return foo.b;
		if (arg == 3) return foo.k;
		if (arg == 4) return foo.p;
		if (arg == 5) return foo.q;
		if (arg == 6) return foo.u;
		if (arg == 7) return foo.y;
		if (arg == 8) return foo.z;
		else return 77;
	}

	def next() -> int {
		count = count + 1;
		return count;
	}
}
