//@execute 0=0
class SsaCfEdge { }
class SsaEnd { }
class SsaBlock {
	def succs() -> Array<SsaCfEdge> { return []; }
	def end() -> SsaEnd { return null; }
}
class SsaContext(compiler: Compiler) {
}
class Compiler {
	var EmitSwitch = getBool();
}
class SsaCfOptimizer(context: SsaContext) {
	def optBlock(block: SsaBlock) {
		var changed = true;
		// XXX: this could be O(n^2)?
		while (changed) {
			changed = false;
			for (s in block.succs()) {
				if (optEdge(s)) { changed = true; break; }
			}
		}
		var end = block.end();
		if (context.compiler.EmitSwitch) ; // TODO
	}
	def optEdge(edge: SsaCfEdge) -> bool {
		return false;
	}
}
def getBool() -> bool {
	return true;
}
def main(a: int) -> int {
	var block = SsaBlock.new();
	var context = SsaContext.new(Compiler.new());
	SsaCfOptimizer.new(context).optBlock(block);
	return 0;
}