//@execute 0=0; 1=1123; 5=912414998; 35=1630247810; 66=-714603526
component tuple_ret02 {
	def main(a: int) -> int {
		var hash = 0;
		for (i = 0; i < a; i++) {
			var t = pick3(i, 1, 2, 3, 4);
			hash = hash * 33 + t.0;
			hash = hash * 33 + t.1;
			hash = hash * 33 + t.2;
		}
		return hash;
	}
	def pick3(a: int, x: int, y: int, z: int, w: int) -> (int,int,int) {
		match(a) {
			0x00: return (x, x, x);
			0x01: return (x, x, y);
			0x02: return (x, x, z);
			0x03: return (x, x, w);
			0x04: return (x, y, x);
			0x05: return (x, y, y);
			0x06: return (x, y, z);
			0x07: return (x, y, w);
			0x08: return (x, z, x);
			0x09: return (x, z, y);
			0x0a: return (x, z, z);
			0x0b: return (x, z, w);
			0x0c: return (x, w, x);
			0x0d: return (x, w, y);
			0x0e: return (x, w, z);
			0x0f: return (x, w, w);

			0x10: return (y, x, x);
			0x11: return (y, x, y);
			0x12: return (y, x, z);
			0x13: return (y, x, w);
			0x14: return (y, y, x);
			0x15: return (y, y, y);
			0x16: return (y, y, z);
			0x17: return (y, y, w);
			0x18: return (y, z, x);
			0x19: return (y, z, y);
			0x1a: return (y, z, z);
			0x1b: return (y, z, w);
			0x1c: return (y, w, x);
			0x1d: return (y, w, y);
			0x1e: return (y, w, z);
			0x1f: return (y, w, w);

			0x20: return (z, x, x);
			0x21: return (z, x, y);
			0x22: return (z, x, z);
			0x23: return (z, x, w);
			0x24: return (z, y, x);
			0x25: return (z, y, y);
			0x26: return (z, y, z);
			0x27: return (z, y, w);
			0x28: return (z, z, x);
			0x29: return (z, z, y);
			0x2a: return (z, z, z);
			0x2b: return (z, z, w);
			0x2c: return (z, w, x);
			0x2d: return (z, w, y);
			0x2e: return (z, w, z);
			0x2f: return (z, w, w);

			0x30: return (w, x, x);
			0x31: return (w, x, y);
			0x32: return (w, x, z);
			0x33: return (w, x, w);
			0x34: return (w, y, x);
			0x35: return (w, y, y);
			0x36: return (w, y, z);
			0x37: return (w, y, w);
			0x38: return (w, z, x);
			0x39: return (w, z, y);
			0x3a: return (w, z, z);
			0x3b: return (w, z, w);
			0x3c: return (w, w, x);
			0x3d: return (w, w, y);
			0x3e: return (w, w, z);
			0x3f: return (w, w, w);
		}
		return (-1, -1, -1);
	}
}
