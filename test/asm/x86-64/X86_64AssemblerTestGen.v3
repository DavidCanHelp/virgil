// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def data = DataWriter.new();
var asm = X86_64Assembler.new(data);
var x = asm.shorten = false;
var buf = StringBuilder.new();
var args: Array<string>;
var regSize = 64;

def main(a: Array<string>) -> int {
	args = a;
	System.puts("bits 64\n");

	do_modrm();

	do_add();
	do_or();
	do_sbb();
	do_and();
	do_sub();
	do_xor();
	do_cmp();

	do_movq();
	do_movd();
	do_movw();
	do_movb();

	do_r_r("bsr", asm.bsrq_r_r);
	do_r_m("bsr qword", asm.bsrq_r_m);

	do0("pushfq", asm.pushfq);
	do0("syscall", asm.syscall);
	do0("sysenter", asm.sysenter);
	do0("sysexit", asm.sysexit);
	do00("repz scasb", asm.repz, asm.scasb);
	do00("repne movsb", asm.repne, asm.movsb);

	do_r("push", asm.pushq_r);
	do_m("push qword", asm.pushq_m);
	do_i("push qword", asm.pushq_i);

	do_r("pop", asm.popq_r);
	do_m("pop qword", asm.popq_m);

	do_r("jmp", asm.ijmp_r);
	do_m("jmp", asm.ijmp_m);
	do_r_m("lea", asm.leaq);

	do_r_dq("inc", do_r, asm.incd_r, asm.incq_r);
	do_m_dq("inc", do_m, asm.incd_m, asm.incq_m);
	do_r_dq("dec", do_r, asm.decd_r, asm.decq_r);
	do_m_dq("dec", do_m, asm.decd_m, asm.decq_m);

	do_r("call", asm.icall_r);
	do_m("call", asm.icall_m);

	do_i("call", asm.callr);
	do_ub("int", asm.intK);

	do_r("mul", asm.mulq_r);
	do_m("mul qword", asm.mulq_m);
	do_r_dq("imul", do_r, asm.imuld_r, asm.imulq_r);
	do_m_dq("imul", do_m, asm.imuld_m, asm.imulq_m);
	do_r_dq("div", do_r, asm.divd_r, asm.divq_r);
	do_m_dq("div", do_m, asm.divd_m, asm.divq_m);
	do_r_dq("idiv", do_r, asm.idivd_r, asm.idivq_r);
	do_m_dq("idiv", do_m, asm.idivd_m, asm.idivq_m);
	do_r_dq("imul", do_r_i, asm.imuld_r_i, asm.imulq_r_i);

	do0("ret", asm.ret);
	do0("iret", asm.iret);
	do0("sysenter", asm.sysenter);
	do0("sysexit", asm.sysexit);
	do0("movsb", asm.movsb);
	do0("scasb", asm.scasb);
	do0("cdq", asm.cdq);
	do0("cqo", asm.cqo);

	do_r_dq("neg", do_r, asm.negd_r, asm.negq_r);
	do_m_dq("neg", do_m, asm.negd_m, asm.negq_m);
	do_r_dq("not", do_r, asm.notd_r, asm.notq_r);
	do_m_dq("not", do_m, asm.notd_m, asm.notq_m);

	do_r_dq("test", do_r_r, asm.testd_r_r, asm.testq_r_r);
	do_m_dq("test", do_m_r, asm.testd_m_r, asm.testq_m_r);
	do_r_dq("test", do_r_i, asm.testd_r_i, asm.testq_r_i);
	do_m_dq("test", do_m_i, asm.testd_m_i, asm.testq_m_i);

	do_shifts();

	do_set();
	do_cmov();

	do_movsx();
	do_movzx();

	do_jmp();

	do_cmpxchng();

	do_r_r("xchg", asm.xchgq_r_r);
	do_m_r("xchg", asm.xchgq_m_r);
	do_r_r("xadd", asm.xaddq_r_r);
	do_m_r("xadd", asm.xaddq_m_r);

	do_sse();
	System.puts(";; passed\n");
	return 0;
}

def do_modrm() {
	var scales: Array<byte> = [1, 2, 4, 8];
	var disps: Array<int> = [0, 8, 0x77BBCCDD];
	for (base in X86_64Regs.GPRs) {
		if (base == X86_64Regs.R13) continue; // TODO: nasm compat?
		for (index in X86_64Regs.GPRs) {
			if (index == X86_64Regs.RSP) continue; // TODO: nasm compat?
			if (base == X86_64Regs.RSP && index == X86_64Regs.RSP) continue; // TODO: illegal?
			for (scale in scales) {
				if (index == X86_64Regs.RSP && scale != 1) continue; // would be illegal
				for (disp in disps) {
					var addr = X86_64Addr.new(base, index, scale, disp);
					asm.addq_r_m(X86_64Regs.RAX, addr);
					buf.puts("add rax, ").sp();
					addr.render(buf);
					buf.puts(" ;;== ");
					render();
					outln(buf);
				}
			}
		}
	}
	for (disp in disps) {
		var addr = X86_64Addr.new(null, null, 1, disp);
		asm.addq_r_m(X86_64Regs.RAX, addr);
		buf.puts("add rax, ").sp();
		addr.render(buf);
		buf.puts(" ;;== ");
		render();
		outln(buf);
	}
}

def do_add() {
	do_r_dq("add", do_r_i, asm.addd_r_i, asm.addq_r_i);
	do_m_dq("add", do_m_i, asm.addd_m_i, asm.addq_m_i);
	do_r_dq("add", do_r_r, asm.addd_r_r, asm.addq_r_r);
	do_r_dq("add", do_r_m, asm.addd_r_m, asm.addq_r_m);
	do_m_dq("add", do_m_r, asm.addd_m_r, asm.addq_m_r);
}

def do_or() {
	do_r_dq("or", do_r_i, asm.ord_r_i, asm.orq_r_i);
	do_m_dq("or", do_m_i, asm.ord_m_i, asm.orq_m_i);
	do_m_dq("or", do_m_r, asm.ord_m_r, asm.orq_m_r);
	do_r_dq("or", do_r_r, asm.ord_r_r, asm.orq_r_r);
	do_r_dq("or", do_r_m, asm.ord_r_m, asm.orq_r_m);
}

def do_sbb() {
	do_r_dq("sbb", do_r_i, asm.sbbd_r_i, asm.sbbq_r_i);
	do_m_dq("sbb", do_m_i, asm.sbbd_m_i, asm.sbbq_m_i);
	do_m_dq("sbb", do_m_r, asm.sbbd_m_r, asm.sbbq_m_r);
	do_r_dq("sbb", do_r_r, asm.sbbd_r_r, asm.sbbq_r_r);
	do_r_dq("sbb", do_r_m, asm.sbbd_r_m, asm.sbbq_r_m);
}

def do_and() {
	do_r_dq("and", do_r_i, asm.andd_r_i, asm.andq_r_i);
	do_m_dq("and", do_m_i, asm.andd_m_i, asm.andq_m_i);
	do_m_dq("and", do_m_r, asm.andd_m_r, asm.andq_m_r);
	do_r_dq("and", do_r_r, asm.andd_r_r, asm.andq_r_r);
	do_r_dq("and", do_r_m, asm.andd_r_m, asm.andq_r_m);
}

def do_sub() {
	do_r_dq("sub", do_r_i, asm.subd_r_i, asm.subq_r_i);
	do_m_dq("sub", do_m_i, asm.subd_m_i, asm.subq_m_i);
	do_m_dq("sub", do_m_r, asm.subd_m_r, asm.subq_m_r);
	do_r_dq("sub", do_r_r, asm.subd_r_r, asm.subq_r_r);
	do_r_dq("sub", do_r_m, asm.subd_r_m, asm.subq_r_m);
}

def do_xor() {
	do_r_dq("xor", do_r_i, asm.xord_r_i, asm.xorq_r_i);
	do_m_dq("xor", do_m_i, asm.xord_m_i, asm.xorq_m_i);
	do_m_dq("xor", do_m_r, asm.xord_m_r, asm.xorq_m_r);
	do_r_dq("xor", do_r_r, asm.xord_r_r, asm.xorq_r_r);
	do_r_dq("xor", do_r_m, asm.xord_r_m, asm.xorq_r_m);
}

def do_cmp() {
	do_r_dq("cmp", do_r_i, asm.cmpd_r_i, asm.cmpq_r_i);
	do_m_dq("cmp", do_m_i, asm.cmpd_m_i, asm.cmpq_m_i);
	do_m_dq("cmp", do_m_r, asm.cmpd_m_r, asm.cmpq_m_r);
	do_r_dq("cmp", do_r_r, asm.cmpd_r_r, asm.cmpq_r_r);
	do_r_dq("cmp", do_r_m, asm.cmpd_r_m, asm.cmpq_r_m);

	regSize = 8;
	do_r_b("cmp", asm.cmpb_r_i);
	do_m_b("cmp byte", asm.cmpb_m_i);
	do_m_r("cmp byte", asm.cmpb_m_r);
	do_r_r("cmp", asm.cmpb_r_r);
	do_r_m("cmp byte", asm.cmpb_r_m);
	regSize = 64;
}

def do_movq() {
	do_r_i("mov", asm.movq_r_i);
	do_m_i("mov qword", asm.movq_m_i);
	do_m_r("mov", asm.movq_m_r);
	do_r_r("mov", asm.movq_r_r);
	do_r_m("mov", asm.movq_r_m);
}

def do_movd() {
	regSize = 32;
	do_r_i("mov", asm.movd_r_i);
	do_m_i("mov dword", asm.movd_m_i);
	do_m_r("mov dword", asm.movd_m_r);
	do_r_r("mov", asm.movd_r_r);
	do_r_m("mov dword", asm.movd_r_m);
	regSize = 64;
}

def do_movw() {
	regSize = 16;
	do_r_w("mov", asm.movw_r_i);
	do_m_w("mov word", asm.movw_m_i);
	do_m_r("mov word", asm.movw_m_r);
	do_r_r("mov", asm.movw_r_r);
	do_r_m("mov word", asm.movw_r_m);
	regSize = 64;
}

def do_movb() {
	regSize = 8;
	do_r_b("mov", asm.movb_r_i);
	do_m_b("mov byte", asm.movb_m_i);
	do_m_r("mov byte", asm.movb_m_r);
	do_r_r("mov", asm.movb_r_r);
	do_r_m("mov byte", asm.movb_r_m);
	regSize = 64;
}

def do_movsx() {
	do_r_bm("movsx", asm.movbsx_r_m);
	do_r_br("movsx", asm.movbsx_r_r);
	do_r_wm("movsx", asm.movwsx_r_m);
	do_r_wr("movsx", asm.movwsx_r_r);
}

def do_movzx() {
	do_r_bm("movzx", asm.movbzx_r_m);
	do_r_br("movzx", asm.movbzx_r_r);
	do_r_wm("movzx", asm.movwzx_r_m);
	do_r_wr("movzx", asm.movwzx_r_r);
}

def do_jmp() {
	if (true) return; // TODO: adjust offsets relative to start of instruction
	var buf = StringBuilder.new();
	for (cond in X86_64Conds.all) {
		var name = buf.puts("j").puts(cond.name).puts(" short").extract();
		do_b(name, asm.jc_rel(cond, _));
		name = buf.puts("j").puts(cond.name).extract();
		do_nb(name, asm.jc_rel(cond, _));
	}
	do_b("jmp short", asm.jmp_rel);
	do_nb("jmp", asm.jmp_rel);
}

def do_cmpxchng() {
	regSize = 8;
	do_r_r("cmpxchg", asm.cmpxchgb_r_r);
	do_m_r("cmpxchg byte", asm.cmpxchgb_m_r);
	regSize = 16;
	do_r_r("cmpxchg", asm.cmpxchgw_r_r);
	do_m_r("cmpxchg word", asm.cmpxchgw_m_r);
	regSize = 32;
	do_r_r("cmpxchg", asm.cmpxchgd_r_r);
	do_m_r("cmpxchg dword", asm.cmpxchgd_m_r);
	regSize = 64;
	do_r_r("cmpxchg", asm.cmpxchgq_r_r);
	do_m_r("cmpxchg qword", asm.cmpxchgq_m_r);
}

def do_set() {
	var buf = StringBuilder.new();
	for (cond in X86_64Conds.all) {
		var name = buf.puts("set").puts(cond.name).extract();
		do1(name, arg_br, asm.set_r(cond, _));
		do_m(name, asm.set_m(cond, _));
	}
}

def do_cmov() {
	var buf = StringBuilder.new();
	for (cond in X86_64Conds.all) {
		var name = buf.puts("cmov").puts(cond.name).extract();
		do_r_r(name, asm.cmov_r(cond, _, _));
		do_r_m(name, asm.cmov_m(cond, _, _));
	}
}

def do_shifts() {
	do_shift_r_i("shl", asm.shld_r_i, asm.shlq_r_i);
	do_shift_m_i("shl", asm.shld_m_i, asm.shlq_m_i);
	do_shift_r_i("shr", asm.shrd_r_i, asm.shrq_r_i);
	do_shift_m_i("shr", asm.shrd_m_i, asm.shrq_m_i);
	do_shift_r_i("sar", asm.sard_r_i, asm.sarq_r_i);
	do_shift_m_i("sar", asm.sard_m_i, asm.sarq_m_i);

	def do_r_cl = do2(_, arg_r, arg_cl, _);
	def do_m_cl = do2(_, arg_m, arg_cl, _);
	def discard_r = discardR<X86_64Gpr, X86_64Gpr>;
	def discard_m = discardR<X86_64Addr, X86_64Gpr>;

	do_r_dq("shl", do_r_cl, discard_r(asm.shld_r_cl, _, _), discard_r(asm.shlq_r_cl, _, _));
	do_m_dq("shl", do_m_cl, discard_m(asm.shld_m_cl, _, _), discard_m(asm.shlq_m_cl, _, _));
	do_r_dq("shr", do_r_cl, discard_r(asm.shrd_r_cl, _, _), discard_r(asm.shrq_r_cl, _, _));
	do_m_dq("shr", do_m_cl, discard_m(asm.shrd_m_cl, _, _), discard_m(asm.shrq_m_cl, _, _));
	do_r_dq("sar", do_r_cl, discard_r(asm.sard_r_cl, _, _), discard_r(asm.sarq_r_cl, _, _));
	do_m_dq("sar", do_m_cl, discard_m(asm.sard_m_cl, _, _), discard_m(asm.sarq_m_cl, _, _));
}

def do_shift_r_i(name: string, asm32: (X86_64Gpr, u5) -> X86_64Assembler, asm64: (X86_64Gpr, u6) -> X86_64Assembler) {
	regSize = 32;
	do2(name, arg_r, arg_u5, asm32);
	regSize = 64;
	do2(name, arg_r, arg_u6, asm64);
}

def do_shift_m_i(name: string, asm32: (X86_64Addr, u5) -> X86_64Assembler, asm64: (X86_64Addr, u6) -> X86_64Assembler) {
	var buf = StringBuilder.new();
	buf.reset().puts(name).puts(" dword");
	do2(buf.toString(), arg_m, arg_u5, asm32);

	buf.reset().puts(name).puts(" qword");
	do2(buf.toString(), arg_m, arg_u6, asm64);
}

def do_sse() {
	do_s_s("movss", asm.movss_s_s);
	do_m_s("movss", asm.movss_m_s);
	do_s_m("movss", asm.movss_s_m);

	do_s_s("movsd", asm.movsd_s_s);
	do_m_s("movsd", asm.movsd_m_s);
	do_s_m("movsd", asm.movsd_s_m);

	regSize = 32;
	do_s_r("movd", asm.movd_s_r);
	do_r_s("movd", asm.movd_r_s);
	regSize = 64;
	do_s_r("movq", asm.movq_s_r);
	do_r_s("movq", asm.movq_r_s);

	do_s_s("addss", asm.addss_s_s);
	do_s_m("addss", asm.addss_s_m);
	do_s_s("subss", asm.subss_s_s);
	do_s_m("subss", asm.subss_s_m);
	do_s_s("mulss", asm.mulss_s_s);
	do_s_m("mulss", asm.mulss_s_m);
	do_s_s("divss", asm.divss_s_s);
	do_s_m("divss", asm.divss_s_m);
	do_s_s("sqrtss", asm.sqrtss_s_s);
	do_s_m("sqrtss", asm.sqrtss_s_m);
	do_s_s("maxss", asm.maxss_s_s);
	do_s_m("maxss", asm.maxss_s_m);
	do_s_s("minss", asm.minss_s_s);
	do_s_m("minss", asm.minss_s_m);

	do_s_s("addsd", asm.addsd_s_s);
	do_s_m("addsd", asm.addsd_s_m);
	do_s_s("subsd", asm.subsd_s_s);
	do_s_m("subsd", asm.subsd_s_m);
	do_s_s("mulsd", asm.mulsd_s_s);
	do_s_m("mulsd", asm.mulsd_s_m);
	do_s_s("divsd", asm.divsd_s_s);
	do_s_m("divsd", asm.divsd_s_m);
	do_s_s("sqrtsd", asm.sqrtsd_s_s);
	do_s_m("sqrtsd", asm.sqrtsd_s_m);
	do_s_s("maxsd", asm.maxsd_s_s);
	do_s_m("maxsd", asm.maxsd_s_m);
	do_s_s("minsd", asm.minsd_s_s);
	do_s_m("minsd", asm.minsd_s_m);

	do_m("fadd dword", asm.faddd);
	do_m("fld dword", asm.fldd);
	do_m("fld qword", asm.fldq);
	do_m("fild qword", asm.fildq);
	do_m("fstp dword", asm.fstpd);
	do_m("fstp qword", asm.fstpq);
	do_m("fisttp qword", asm.fisttpq);

	do_s_s("ucomisd", asm.ucomisd_s_s);
	do_s_m("ucomisd", asm.ucomisd_s_m);
	do_s_s("ucomiss", asm.ucomiss_s_s);
	do_s_m("ucomiss", asm.ucomiss_s_m);

	def do_s_s_rmode = do3(_, arg_s, arg_s, arg_rmode, _);
	def do_s_m_rmode = do3(_, arg_s, arg_m, arg_rmode, _);

	do_s_s_rmode("roundsd", asm.roundsd_s_s);
	do_s_m_rmode("roundsd", asm.roundsd_s_m);
	do_s_s_rmode("roundss", asm.roundss_s_s);
	do_s_m_rmode("roundss", asm.roundss_s_m);

	do_s_s("andps", asm.andps_s_s);
	do_s_m("andps", asm.andps_s_m);
	do_s_s("andpd", asm.andpd_s_s);
	do_s_m("andpd", asm.andpd_s_m);
	do_s_s("xorps", asm.xorps_s_s);
	do_s_m("xorps", asm.xorps_s_m);
	do_s_s("xorpd", asm.xorpd_s_s);
	do_s_m("xorpd", asm.xorpd_s_m);

	do_s_s("pcmpeqd", asm.pcmpeqd_s_s);
	do_s_m("pcmpeqd", asm.pcmpeqd_s_m);
	do_s_s("pcmpeqq", asm.pcmpeqq_s_s);
	do_s_m("pcmpeqq", asm.pcmpeqq_s_m);

	var buf = StringBuilder.new();
	for (cmp in SSECmps.all) {
		var cmpss = buf.puts("cmp").puts(cmp.name).puts("ss").extract();
		do_s_s(cmpss, asm.cmpss_s_s(cmp, _, _));
		do_s_m(cmpss, asm.cmpss_s_m(cmp, _, _));
		var cmpsd = buf.puts("cmp").puts(cmp.name).puts("sd").extract();
		do_s_s(cmpsd, asm.cmpsd_s_s(cmp, _, _));
		do_s_m(cmpsd, asm.cmpsd_s_m(cmp, _, _));
	}

	do2("psrld", arg_s, arg_u5, asm.psrld_i);
	do2("psrlq", arg_s, arg_u6, asm.psrlq_i);
	do2("pslld", arg_s, arg_u5, asm.pslld_i);
	do2("psllq", arg_s, arg_u6, asm.psllq_i);

	do_r_dq("cvtsd2si", do_r_s, asm.cvtsd2sid_r_s, asm.cvtsd2siq_r_s);
	do_r_dq("cvtsd2si", do_r_m, asm.cvtsd2sid_r_m, asm.cvtsd2siq_r_m);
	do_r_dq("cvtss2si", do_r_s, asm.cvtss2sid_r_s, asm.cvtss2siq_r_s);
	do_r_dq("cvtss2si", do_r_m, asm.cvtss2sid_r_m, asm.cvtss2siq_r_m);
	do_r_dq("cvtsi2sd", do_s_r, asm.cvtsi2sdd_s_r, asm.cvtsi2sdq_s_r);
	do_r_dq("cvtsi2sd", do_s_ms, asm.cvtsi2sdd_s_m, asm.cvtsi2sdq_s_m);
	do_r_dq("cvtsi2ss", do_s_r, asm.cvtsi2ssd_s_r, asm.cvtsi2ssq_s_r);
	do_r_dq("cvtsi2ss", do_s_ms, asm.cvtsi2ssd_s_m, asm.cvtsi2ssq_s_m);

	do_s_s("cvtss2sd", asm.cvtss2sd_s_s);
	do_s_m("cvtss2sd", asm.cvtss2sd_s_m);
	do_s_s("cvtsd2ss", asm.cvtsd2ss_s_s);
	do_s_m("cvtsd2ss", asm.cvtsd2ss_s_m);
	do_r_s("cvttss2si", asm.cvttss2si_r_s);
	do_r_m("cvttss2si", asm.cvttss2si_r_m);
	do_r_s("cvttsd2si", asm.cvttsd2si_r_s);
	do_r_m("cvttsd2si", asm.cvttsd2si_r_m);
}

def ADDRS = [
	X86_64Regs.RAX.indirect(),
	X86_64Regs.RBP.indirect(),
	X86_64Regs.RSI.indirect(),
	X86_64Addr.new(X86_64Regs.RAX, null, 1, 0x33445566),
	X86_64Addr.new(null, X86_64Regs.RCX, 1, 0x77),
	X86_64Addr.new(null, X86_64Regs.RDX, 4, 0x99),
	X86_64Addr.new(X86_64Regs.RBX, X86_64Regs.RBX, 1, 0x11223344),
	X86_64Addr.new(X86_64Regs.RCX, X86_64Regs.RDX, 4, 0x55667788),
	X86_64Addr.new(X86_64Regs.RDI, X86_64Regs.RSI, 8, 0xaabbccdd),
	X86_64Addr.new(X86_64Regs.RDX, X86_64Regs.R11, 8, 0x66),
	X86_64Addr.new(X86_64Regs.R12, X86_64Regs.RAX, 4, 0x55),
	X86_64Addr.new(X86_64Regs.R13, X86_64Regs.R14, 2, 0x33445566),
	X86_64Addr.new(null, null, 1, 0x1899aabb)
	// TODO: absolute addresses > 2gb
];

def render() {
	for (i < data.pos) buf.putx_8(data.data[i]);
	data.at(0);
}

def skip(mnemonic: string) -> bool {
	if (args.length == 0) return false;
	for (i < args.length) {
		if (Strings.startsWith(mnemonic, args[i])) return false;
	}
	return true;
}

def discardR<A, B>(f: A -> X86_64Assembler, a: A, b: B) -> X86_64Assembler {
	return f(a);
}

def do0<R>(mnemonic: string, asm_func: void -> R) {
	asm_func();
	buf.puts(mnemonic);
	buf.puts(" ;;== ");
	render();
	outln(buf);
}

def do00<R>(mnemonic: string, f1: void -> R, f2: void -> R) {
	f1();
	f2();
	buf.puts(mnemonic);
	buf.puts(" ;;== ");
	render();
	outln(buf);
}

def do1<A>(mnemonic: string,
	p: (Array<A>, (A, StringBuilder) -> StringBuilder),
	asm_func: A -> X86_64Assembler) {
	if (skip(mnemonic)) return;
	for (a in p.0) {
		asm_func(a);
		buf.puts(mnemonic).sp();
		p.1(a, buf);
		buf.puts(" ;;== ");
		render();
		outln(buf);
	}
}

def do2<A, B>(mnemonic: string,
	p: (Array<A>, (A, StringBuilder) -> StringBuilder),
	q: (Array<B>, (B, StringBuilder) -> StringBuilder),
	asm_func: (A, B) -> X86_64Assembler) {
	if (skip(mnemonic)) return;
	for (a in p.0) {
		for (b in q.0) {
			asm_func(a, b);
			buf.puts(mnemonic).sp();
			p.1(a, buf);
			buf.puts(", ");
			q.1(b, buf);
			buf.puts(" ;;== ");
			render();
			outln(buf);
		}
	}
}

def do3<A, B, C>(mnemonic: string,
	p: (Array<A>, (A, StringBuilder) -> StringBuilder),
	q: (Array<B>, (B, StringBuilder) -> StringBuilder),
	r: (Array<C>, (C, StringBuilder) -> StringBuilder),
	asm_func: (A, B, C) -> X86_64Assembler) {
	if (skip(mnemonic)) return;
	for (a in p.0) {
		for (b in q.0) {
			for (c in r.0) {
				asm_func(a, b, c);
				buf.puts(mnemonic).sp();
				p.1(a, buf);
				buf.puts(", ");
				q.1(b, buf);
				buf.puts(", ");
				r.1(c, buf);
				buf.puts(" ;;== ");
				render();
				outln(buf);
			}
		}
	}
}

def renderSse(r: X86_64Xmmr, buf: StringBuilder) -> StringBuilder {
	buf.puts(r.name);
	return buf;
}

def renderGpr(r: X86_64Gpr, buf: StringBuilder) -> StringBuilder {
	match (regSize) {
		8 => buf.puts(r.name8);
		16 => buf.puts(r.name16);
		32 => buf.puts(r.name32);
		64 => buf.puts(r.name64);
	}
	return buf;
}

def renderGpr8(r: X86_64Gpr, buf: StringBuilder) -> StringBuilder {
	buf.puts(r.name8);
	return buf;
}

def renderGpr16(r: X86_64Gpr, buf: StringBuilder) -> StringBuilder {
	buf.puts(r.name16);
	return buf;
}

def renderGpr32(r: X86_64Gpr, buf: StringBuilder) -> StringBuilder {
	buf.puts(r.name32);
	return buf;
}

def renderAddr8(a: X86_64Addr, buf: StringBuilder) -> StringBuilder {
	buf.puts("byte ");
	a.render(buf);
	return buf;
}

def renderAddr16(a: X86_64Addr, buf: StringBuilder) -> StringBuilder {
	buf.puts("word ");
	a.render(buf);
	return buf;
}

def renderAddrRegSize(a: X86_64Addr, buf: StringBuilder) -> StringBuilder {
	match (regSize) {
		8 => buf.puts("byte ");
		16 => buf.puts("word ");
		32 => buf.puts("dword ");
		_ => buf.puts("qword ");
	}
	a.render(buf);
	return buf;
}

def IMMS = [0, 1, 2, -1, -2, -128, 127, 128, 253, 255, 1023, 65535, -32767, 0x11223344, 0x55443322, 0x99aabbcc];

def IMMS_NOT_BYTE = [128, 253, 255, 1023, 65535, -32767, 0x11223344, 0x55443322, 0x99aabbcc];

def BYTES = [0, 1, 2, -1, -2, -128, 96, 127];
def UBYTES = [0, 1, 2, 55, 96, 127, 128, 253];

def WORDS = [0, 1, 2, -1, -2, -128, 96, 127, 128, 1023, -999, 32767, -32768];

def U5: Array<u5> = [1, 2, 3, 7, 15, 16, 30, 31];
def U6: Array<u6> = [1, 2, 3, 7, 30, 31, 32, 62, 63];

def renderImm(i: int, buf: StringBuilder) -> StringBuilder {
	buf.putd(i);
	return buf;
}

def renderU5(i: u5, buf: StringBuilder) -> StringBuilder {
	buf.putd(int.!(i));
	return buf;
}

def renderU6(i: u6, buf: StringBuilder) -> StringBuilder {
	buf.putd(int.!(i));
	return buf;
}

def renderX86_64Rounding(r: X86_64Rounding, buf: StringBuilder) -> StringBuilder {
	buf.putd(r.value);
	return buf;
}

def arg_r = (X86_64Regs.GPRs, renderGpr);
def arg_br = (X86_64Regs.GPRs, renderGpr8);
def arg_wr = (X86_64Regs.GPRs, renderGpr16);
def arg_m = (ADDRS, X86_64Addr.render); // XXX: use renderAddrRegSize by default?
def arg_ms = (ADDRS, renderAddrRegSize);
def arg_i = (IMMS, renderImm);
def arg_nb = (IMMS_NOT_BYTE, renderImm);
def arg_b = (BYTES, renderImm);
def arg_w = (WORDS, renderImm);
def arg_ub = (UBYTES, renderImm);
def arg_bm = (ADDRS, renderAddr8);
def arg_wm = (ADDRS, renderAddr16);
def arg_s = (X86_64Regs.XMMs, renderSse);
def arg_u5 = (U5, renderU5);
def arg_u6 = (U6, renderU6);
def arg_cl = ([X86_64Regs.RCX], renderGpr8);
def arg_rmode = ([
	X86_64Rounding.TO_NEAREST,
	X86_64Rounding.TO_NEG_INF,
	X86_64Rounding.TO_POS_INF,
	X86_64Rounding.TO_ZERO
], renderX86_64Rounding);

def do_r = do1(_, arg_r, _);
def do_m = do1(_, arg_m, _);
def do_i = do1(_, arg_i, _);
def do_nb = do1(_, arg_nb, _);
def do_b = do1(_, arg_b, _);
def do_ub = do1(_, arg_ub, _);

def do_m_r = do2(_, arg_m, arg_r, _);
def do_r_m = do2(_, arg_r, arg_m, _);
def do_r_bm = do2(_, arg_r, arg_bm, _);
def do_r_wm = do2(_, arg_r, arg_wm, _);
def do_r_r = do2(_, arg_r, arg_r, _);
def do_r_br = do2(_, arg_r, arg_br, _);
def do_r_wr = do2(_, arg_r, arg_wr, _);
def do_r_i = do2(_, arg_r, arg_i, _);
def do_r_b = do2(_, arg_r, arg_b, _);
def do_r_w = do2(_, arg_r, arg_w, _);
def do_m_i = do2(_, arg_m, arg_i, _);
def do_m_b = do2(_, arg_m, arg_b, _);
def do_m_w = do2(_, arg_m, arg_w, _);

def do_s_s = do2(_, arg_s, arg_s, _);
def do_s_r = do2(_, arg_s, arg_r, _);
def do_r_s = do2(_, arg_r, arg_s, _);
def do_m_s = do2(_, arg_m, arg_s, _);
def do_s_m = do2(_, arg_s, arg_m, _);
def do_s_ms = do2(_, arg_s, arg_ms, _);

def do_r_dq<A, B>(name: string, do: (string, A -> B) -> void, do32: A -> B, do64: A -> B) {
	regSize = 32;
	do(name, do32);
	regSize = 64;
	do(name, do64);
}

def do_m_dq<A, B>(name: string, do: (string, A -> B) -> void, do32: A -> B, do64: A -> B) {
	var buf = StringBuilder.new();
	buf.reset().puts(name).puts(" dword");
	regSize = 32;
	do(buf.toString(), do32);

	buf.reset().puts(name).puts(" qword");
	regSize = 64;
	do(buf.toString(), do64);
}

def outln(b: StringBuilder) {
	b.ln();
	System.fileWriteK(1, b.buf, 0, b.length);
	b.reset();
}