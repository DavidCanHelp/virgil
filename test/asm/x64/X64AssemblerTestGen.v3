// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def data = DataWriter.new();
var asm = X64Assembler.new(data);
var x = asm.shorten = false;
var buf = StringBuilder.new();
var args: Array<string>;
var regSize = 64;

def main(a: Array<string>) -> int {
	args = a;
	System.puts("bits 64\n");

	do_add();
	do_or();
	do_sbb();
	do_and();
	do_sub();
	do_xor();
	do_cmp();

	do_movq();
	do_movd();
	do_movw();
	do_movb();

	do_r_r("bsr", asm.bsrq_r_r);
	do_r_m("bsr qword", asm.bsrq_r_m);

	do0("pushfq", asm.pushfq);
	do0("sysenter", asm.sysenter);
	do0("sysexit", asm.sysexit);

	do_r("push", asm.pushq_r);
	do_m("push qword", asm.pushq_m);
	do_i("push qword", asm.pushq_i);

	do_r("pop", asm.popq_r);
	do_m("pop qword", asm.popq_m);

	do_r("jmp", asm.ijmp_r);
	do_m("jmp", asm.ijmp_m);
	do_r_m("lea", asm.leaq);

	do_r("inc", asm.incq_r);
	do_m("inc qword", asm.incq_m);
	do_r("dec", asm.decq_r);
	do_m("dec qword", asm.decq_m);

	do_r("call", asm.icall_r);
	do_m("call", asm.icall_m);

	do_i("call", asm.callr);
	do_ub("int", asm.intK);

	do_r("mul", asm.mulq_r);
	do_m("mul qword", asm.mulq_m);
	do_r("imul", asm.imulq_r);
	do_m("imul qword", asm.imulq_m);
	do_r("div", asm.divq_r);
	do_m("div qword", asm.divq_m);
	do_r("idiv", asm.idivq_r);
	do_m("idiv qword", asm.idivq_m);
	do_r_i("imul", asm.imulq_r_i);

	do0("ret", asm.ret);
	do0("iret", asm.iret);
	do0("sysenter", asm.sysenter);
	do0("sysexit", asm.sysexit);
	do0("movsb", asm.movsb);
	do0("scasb", asm.scasb);
	do0("cdq", asm.cdq);

	do_r("neg", asm.negq_r);
	do_m("neg qword", asm.negq_m);
	do_r("not", asm.notq_r);
	do_m("not qword", asm.notq_m);

	do_r_r("test", asm.testq_r_r);
	do_m_r("test qword", asm.testq_m_r);
	do_r_i("test", asm.testq_r_i);
	do_m_i("test qword", asm.testq_m_i);

	do_shifts();

	do_set();
	do_cmov();

	if (false) do_sse(); // TODO: SSE
	System.puts(";; passed\n");
	return 0;
}

def do_add() {
	do_r_i("add", asm.addq_r_i);
	do_m_i("add qword", asm.addq_m_i);
	do_r_r("add", asm.addq_r_r);
	do_r_m("add", asm.addq_r_m);
	do_m_r("add", asm.addq_m_r);
}

def do_or() {
	do_r_i("or", asm.orq_r_i);
	do_m_i("or qword", asm.orq_m_i);
	do_m_r("or", asm.orq_m_r);
	do_r_r("or", asm.orq_r_r);
	do_r_m("or", asm.orq_r_m);
}

def do_sbb() {
	do_r_i("sbb", asm.sbbq_r_i);
	do_m_i("sbb qword", asm.sbbq_m_i);
	do_m_r("sbb", asm.sbbq_m_r);
	do_r_r("sbb", asm.sbbq_r_r);
	do_r_m("sbb", asm.sbbq_r_m);
}

def do_and() {
	do_r_i("and", asm.andq_r_i);
	do_m_i("and qword", asm.andq_m_i);
	do_m_r("and", asm.andq_m_r);
	do_r_r("and", asm.andq_r_r);
	do_r_m("and", asm.andq_r_m);
}

def do_sub() {
	do_r_i("sub", asm.subq_r_i);
	do_m_i("sub qword", asm.subq_m_i);
	do_m_r("sub", asm.subq_m_r);
	do_r_r("sub", asm.subq_r_r);
	do_r_m("sub", asm.subq_r_m);
}

def do_xor() {
	do_r_i("xor", asm.xorq_r_i);
	do_m_i("xor qword", asm.xorq_m_i);
	do_m_r("xor", asm.xorq_m_r);
	do_r_r("xor", asm.xorq_r_r);
	do_r_m("xor", asm.xorq_r_m);
}

def do_cmp() {
	do_r_i("cmp", asm.cmpq_r_i);
	do_m_i("cmp qword", asm.cmpq_m_i);
	do_m_r("cmp", asm.cmpq_m_r);
	do_r_r("cmp", asm.cmpq_r_r);
	do_r_m("cmp", asm.cmpq_r_m);
}

def do_movq() {
	do_r_i("mov", asm.movq_r_i);
	do_m_i("mov qword", asm.movq_m_i);
	do_m_r("mov", asm.movq_m_r);
	do_r_r("mov", asm.movq_r_r);
	do_r_m("mov", asm.movq_r_m);
}

def do_movd() {
	regSize = 32;
	do_r_i("mov", asm.movd_r_i);
	do_m_i("mov dword", asm.movd_m_i);
	do_m_r("mov dword", asm.movd_m_r);
	do_r_r("mov", asm.movd_r_r);
	do_r_m("mov dword", asm.movd_r_m);
	regSize = 64;
}

def do_movw() {
	regSize = 16;
	do_r_w("mov", asm.movw_r_i);
	do_m_w("mov word", asm.movw_m_i);
	do_m_r("mov word", asm.movw_m_r);
	do_r_r("mov", asm.movw_r_r);
	do_r_m("mov word", asm.movw_r_m);
	regSize = 64;
}

def do_movb() {
	regSize = 8;
	do_r_b("mov", asm.movb_r_i);
	do_m_b("mov byte", asm.movb_m_i);
	do_m_r("mov byte", asm.movb_m_r);
	do_r_r("mov", asm.movb_r_r);
	do_r_m("mov byte", asm.movb_r_m);
	regSize = 64;
}

def do_set() {
	for (p in [
		("seta", X64Conds.A),
		("setc", X64Conds.C),
		("setg", X64Conds.G),
		("setge", X64Conds.GE),
		("setl", X64Conds.L),
		("setle", X64Conds.LE),
		("setna", X64Conds.NA),
		("setnc", X64Conds.NC),
		("setno", X64Conds.NO),
		("setnp", X64Conds.NP),
		("setns", X64Conds.NS),
		("setnz", X64Conds.NZ),
		("seto", X64Conds.O),
		("setp", X64Conds.P),
		("sets", X64Conds.S),
		("setz", X64Conds.Z)
	]) {
		do1<X64Reg, X64Assembler>(p.0, asm.set_r(p.1, _), X64Regs.GPRs, renderGpr8);
		do_m(p.0, asm.set_m(p.1, _));
	}
}

def do_cmov() {
	for (p in [
		("cmova", X64Conds.A),
		("cmovc", X64Conds.C),
		("cmovg", X64Conds.G),
		("cmovge", X64Conds.GE),
		("cmovl", X64Conds.L),
		("cmovle", X64Conds.LE),
		("cmovna", X64Conds.NA),
		("cmovnc", X64Conds.NC),
		("cmovno", X64Conds.NO),
		("cmovnp", X64Conds.NP),
		("cmovns", X64Conds.NS),
		("cmovnz", X64Conds.NZ),
		("cmovo", X64Conds.O),
		("cmovp", X64Conds.P),
		("cmovs", X64Conds.S),
		("cmovz", X64Conds.Z)
	]) {
		do_r_r(p.0, asm.cmov_r(p.1, _, _));
		do_r_m(p.0, asm.cmov_m(p.1, _, _));
	}
}

def do_shifts() {
	def do_r_i = do2<X64Reg, int, X64Assembler>(_, _,
		X64Regs.GPRs, renderGpr, SHIFTS, renderImm);

	def do_m_i = do2<X64Addr, int, X64Assembler>(_, _,
		ADDRS, X64Addr.render, SHIFTS, renderImm);

	do_r_i("shl", asm.shlq_r_i);
	do_m_i("shl qword", asm.shlq_m_i);
	do_r_i("shr", asm.shrq_r_i);
	do_m_i("shr qword", asm.shrq_m_i);
	do_r_i("sar", asm.sarq_r_i);
	do_m_i("sar qword", asm.sarq_m_i);

	def do_r_cl = do2<X64Reg, X64Reg, X64Assembler>(_, _,
		X64Regs.GPRs, renderGpr, [X64Regs.RCX], renderGpr8);
	def do_m_cl = do2<X64Addr, X64Reg, X64Assembler>(_, _,
		ADDRS, X64Addr.render, [X64Regs.RCX], renderGpr8);

	do_r_cl("shl", do2_1(asm.shlq_r_cl, _, _));
	do_m_cl("shl qword", do2_1(asm.shlq_m_cl, _, _));
	do_r_cl("shr", do2_1(asm.shrq_r_cl, _, _));
	do_m_cl("shr qword", do2_1(asm.shrq_m_cl, _, _));
	do_r_cl("sar", do2_1(asm.sarq_r_cl, _, _));
	do_m_cl("sar qword", do2_1(asm.sarq_m_cl, _, _));
}

def do_sse() {
	do_sm_s("movss", asm.movss_sm_s);
	do_s_sm("movss", asm.movss_s_sm);
	do_sm_s("movsd", asm.movsd_sm_s);
	do_s_sm("movsd", asm.movsd_s_sm);

	do_s_rm("movd", asm.movd_s_rm);
	do_rm_s("movd", asm.movd_rm_s);

	do_s_sm("addsd", asm.addsd);
	do_s_sm("subsd", asm.subsd);
	do_s_sm("mulsd", asm.mulsd);
	do_s_sm("divsd", asm.divsd);

	do_s_sm("addss", asm.addss);
	do_s_sm("subss", asm.subss);
	do_s_sm("mulss", asm.mulss);
	do_s_sm("divss", asm.divss);

	do_s_sm("cmpeqsd", asm.cmpeqsd);
	do_s_sm("cmpltsd", asm.cmpltsd);
	do_s_sm("cmplesd", asm.cmplesd);
	do_s_sm("cmpunordsd", asm.cmpunordsd);
	do_s_sm("cmpneqsd", asm.cmpneqsd);
	do_s_sm("cmpnltsd", asm.cmpnltsd);
	do_s_sm("cmpnlesd", asm.cmpnlesd);
	do_s_sm("cmpordsd", asm.cmpordsd);

	do_s_sm_b("roundsd", asm.roundsd);
	do_s_sm_b("roundss", asm.roundss);

	do_s_sm("ucomiss", asm.ucomiss);

	do_s_sm("cmpeqss", asm.cmpeqss);
	do_s_sm("cmpltss", asm.cmpltss);
	do_s_sm("cmpless", asm.cmpless);
	do_s_sm("cmpunordss", asm.cmpunordss);
	do_s_sm("cmpneqss", asm.cmpneqss);
	do_s_sm("cmpnltss", asm.cmpnltss);
	do_s_sm("cmpnless", asm.cmpnless);
	do_s_sm("cmpordss", asm.cmpordss);

	do_r_sm("cvtsd2si", asm.cvtsd2si);
	do_r_sm("cvtss2si", asm.cvtss2si);
	do_s_rm("cvtsi2sd", asm.cvtsi2sd);
	do_s_rm("cvtsi2ss", asm.cvtsi2ss);
	do_s_sm("cvtss2sd", asm.cvtss2sd);
	do_s_sm("cvtsd2ss", asm.cvtsd2ss);
	do_r_sm("cvttsd2si", asm.cvttsd2si);
	do_r_sm("cvttss2si", asm.cvttss2si);

	do_s_sm("andps", asm.andps);
	do_s_sm("andpd", asm.andpd);
	do_s_sm("xorps", asm.xorps);
	do_s_sm("xorpd", asm.xorpd);

	do_s_i("psrld", asm.psrld_i);
	do_s_i("psrlq", asm.psrlq_i);
	do_s_i("pslld", asm.pslld_i);
	do_s_i("psllq", asm.psllq_i);

	do_s_sm("pcmpeqd", asm.pcmpeqd);
	do_s_sm("pcmpeqq", asm.pcmpeqq);

	do_sm("fld DWORD", asm.fld_d);
	do_sm("fisttp QWORD", asm.fisttp_q);

}

def ADDRS = [
	X64Regs.RAX.indirect(),
	X64Regs.RBX.indirect(),
	X64Regs.RSI.indirect(),
	X64Addr.new(X64Regs.RAX, null, 1, 0x33445566),
	X64Addr.new(X64Regs.RCX, null, 1, 0x77),
	X64Addr.new(X64Regs.RBX, X64Regs.RBX, 1, 0x11223344),
	X64Addr.new(X64Regs.RCX, X64Regs.RDX, 4, 0x55667788),
	X64Addr.new(X64Regs.RDI, X64Regs.RSI, 8, 0xaabbccdd),
	X64Addr.new(X64Regs.RDX, X64Regs.R11, 8, 0x66),
	X64Addr.new(X64Regs.R12, X64Regs.RAX, 4, 0x55),
	X64Addr.new(X64Regs.R13, X64Regs.R14, 2, 0x33445566),
	X64Addr.new(null, null, 1, 0x1899aabb)
	// TODO: REX-prefixed extended registers
	// TODO: absolute addresses > 2gb
];

def SSE_ADDRS = Arrays.map(ADDRS, toSSEAddr);

def toSSEAddr(addr: X64Addr) -> SSEAddr {
	return SSEAddr.new(addr.base, addr.index, addr.scale, addr.disp);
}

def render() {
	for (i < data.pos) buf.putx_8(data.data[i]);
	data.at(0);
}

def skip(mnemonic: string) -> bool {
	if (args.length == 0) return false;
	for (i < args.length) {
		if (Strings.startsWith(mnemonic, args[i])) return false;
	}
	return true;
}

def discardR<A, B, R>(f: A -> R, a: A, b: B) -> R {
	return f(a);
}

def do0<R>(mnemonic: string, asm_func: void -> R) {
	asm_func();
	buf.puts(mnemonic);
	buf.puts(" ;;== ");
	render();
	outln(buf);
}

def do1<A, R>(mnemonic: string, asm_func: A -> R,
	as: Array<A>, ra: (A, StringBuilder) -> StringBuilder) {
	if (skip(mnemonic)) return;
	for (a in as) {
		asm_func(a);
		buf.puts(mnemonic).sp();
		ra(a, buf);
		buf.puts(" ;;== ");
		render();
		outln(buf);
	}
}

def do2<A, B, R>(mnemonic: string, asm_func: (A, B) -> R,
	as: Array<A>, ra: (A, StringBuilder) -> StringBuilder,
	bs: Array<B>, rb: (B, StringBuilder) -> StringBuilder) {
	if (skip(mnemonic)) return;
	for (a in as) {
		for (b in bs) {
			asm_func(a, b);
			buf.puts(mnemonic).sp();
			ra(a, buf);
			buf.puts(", ");
			rb(b, buf);
			buf.puts(" ;;== ");
			render();
			outln(buf);
		}
	}
}

def renderSse(r: SSEReg, buf: StringBuilder) -> StringBuilder {
	buf.puts(r.name);
	return buf;
}

def renderGpr(r: X64Reg, buf: StringBuilder) -> StringBuilder {
	match (regSize) {
		8 => buf.puts(r.name8);
		16 => buf.puts(r.name16);
		32 => buf.puts(r.name32);
		64 => buf.puts(r.name64);
	}
	return buf;
}

def renderGpr8(r: X64Reg, buf: StringBuilder) -> StringBuilder {
	buf.puts(r.name8);
	return buf;
}

def SOME_GPRs = [
	X64Regs.RAX, X64Regs.RCX,
	X64Regs.RSP, X64Regs.RBP, X64Regs.R8, X64Regs.R15
];

def IMMS = [0, 1, 2, -1, -2, -128, 127, 128, 253, 255, 1023, 65535, -32767, 0x11223344, 0x55443322, 0x99aabbcc];

def BYTES = [0, 1, 2, -1, -2, -128, 96, 127];
def UBYTES = [0, 1, 2, 55, 96, 127, 128, 253];

def WORDS = [0, 1, 2, -1, -2, -128, 96, 127, 128, 1023, -999, 32767, -32768];

def SHIFTS = [1, 2, 3, 7, 30, 31, 32, 62, 63];

def renderImm(i: int, buf: StringBuilder) -> StringBuilder {
	buf.putd(i);
	return buf;
}

def do_r = do1<X64Reg, X64Assembler>(_, _, X64Regs.GPRs, renderGpr);
def do_m = do1<X64Addr, X64Assembler>(_, _, ADDRS, X64Addr.render);
def do_i = do1<int, X64Assembler>(_, _, IMMS, renderImm);
def do_b = do1<int, X64Assembler>(_, _, BYTES, renderImm);
def do_ub = do1<int, X64Assembler>(_, _, UBYTES, renderImm);

def do_rm(mnemonic: string, asmfunc: X64Rm -> X64Assembler) {
	do_r(mnemonic, asmfunc);
	do_m(mnemonic, asmfunc);
}

def do_m_r = do2<X64Addr, X64Reg, X64Assembler>(_, _,
	ADDRS, X64Addr.render, X64Regs.GPRs, renderGpr);
def do_r_m = do2<X64Reg, X64Addr, X64Assembler>(_, _,
	X64Regs.GPRs, renderGpr, ADDRS, X64Addr.render);
def do_r_r = do2<X64Reg, X64Reg, X64Assembler>(_, _,
	X64Regs.GPRs, renderGpr, X64Regs.GPRs, renderGpr);
def do_r_i = do2<X64Reg, int, X64Assembler>(_, _,
	X64Regs.GPRs, renderGpr, IMMS, renderImm);
def do_r_b = do2<X64Reg, int, X64Assembler>(_, _,
	X64Regs.GPRs, renderGpr, BYTES, renderImm);
def do_r_w = do2<X64Reg, int, X64Assembler>(_, _,
	X64Regs.GPRs, renderGpr, WORDS, renderImm);
def do_m_i = do2<X64Addr, int, X64Assembler>(_, _,
	ADDRS, X64Addr.render, IMMS, renderImm);
def do_m_b = do2<X64Addr, int, X64Assembler>(_, _,
	ADDRS, X64Addr.render, BYTES, renderImm);
def do_m_w = do2<X64Addr, int, X64Assembler>(_, _,
	ADDRS, X64Addr.render, WORDS, renderImm);

def do_r_rm(mnemonic: string, asmfunc: (X64Reg, X64Rm) -> X64Assembler) {
	do_r_r(mnemonic, asmfunc);
	do_r_m(mnemonic, asmfunc);
}

def do_s_m = do2<SSEReg, SSEAddr, void>(_, _,
	X64Regs.XMMs, renderSse, SSE_ADDRS, SSEAddr.render);
def do_m_s = do2<SSEAddr, SSEReg, void>(_, _,
	SSE_ADDRS, SSEAddr.render, X64Regs.XMMs, renderSse);
def do_s_s = do2<SSEReg, SSEReg, void>(_, _,
	X64Regs.XMMs, renderSse, X64Regs.XMMs, renderSse);
def do_s_r = do2<SSEReg, X64Reg, void>(_, _,
	X64Regs.XMMs, renderSse, X64Regs.GPRs, renderGpr);
def do_r_s = do2<X64Reg, SSEReg, void>(_, _,
	X64Regs.GPRs, renderGpr, X64Regs.XMMs, renderSse);
//def do_m_i = do2<SSEAddr, int, void>(_, _, SSE_ADDRS, SSEAddr.render, IMMS, renderImm);

def do2_1<A, B, R>(f: A -> R, a: A, b: B) -> R {
	return f(a);
}

def do_s_sm(mnemonic: string, asm_func: (SSEReg, SSERm) -> void) {
	do_s_m(mnemonic, asm_func);
	do_s_s(mnemonic, asm_func);
}

def do_s_rm(mnemonic: string, asm_func: (SSEReg, X64Rm) -> void) {
//TODO	do_s_m(mnemonic, asm_func);
	do_s_r(mnemonic, asm_func);
}

def do_r_sm(mnemonic: string, asm_func: (X64Reg, SSERm) -> void) {
//TODO	do_s_m(mnemonic, asm_func);
	do_r_s(mnemonic, asm_func);
}

def do_s_sm_b(mnemonic: string, asm_func: (SSEReg, SSERm, RoundingMode) -> void) {
	if (skip(mnemonic)) return;
	for (addr in SSE_ADDRS) {
		for (s in [X64Regs.XMM0, X64Regs.XMM1, X64Regs.XMM7]) {
			for (mode in RoundingMode) {
				asm_func(s, addr, mode);
				buf.puts(mnemonic).sp();
				buf.puts(s.name);
				buf.puts(", ");
				addr.render(buf);
				buf.puts(", ");
				buf.putd(mode.value);
				buf.puts(" ;;== ");
				render();
				outln(buf);
			}
		}
	}
}

def do_s_i(mnemonic: string, asm_func: (SSEReg, byte) -> void) {
	if (skip(mnemonic)) return;
	for (s in [X64Regs.XMM0, X64Regs.XMM1, X64Regs.XMM7]) {
		for (imm in ['\x01', '\x02', '\x03']) {
			asm_func(s, imm);
			buf.puts(mnemonic).sp();
			buf.puts(s.name);
			buf.puts(", ");
			buf.putd(imm);
			buf.puts(" ;;== ");
			render();
			outln(buf);
		}
	}
}

def do_sm(mnemonic: string, asm_func: SSEAddr -> void) {
	if (skip(mnemonic)) return;
	// TODO
}

def do_sm_s(mnemonic: string, asm_func: (SSERm, SSEReg) -> void) {
	if (skip(mnemonic)) return;
	do_s_s(mnemonic, asm_func);
	do_m_s(mnemonic, asm_func);
}

def do_rm_s(mnemonic: string, asm_func: (X64Rm, SSEReg) -> void) {
	if (skip(mnemonic)) return;
	do_r_s(mnemonic, asm_func);
//TODO	do_m_s(mnemonic, asm_func);
}

def outln(b: StringBuilder) {
	b.ln();
	System.fileWriteK(1, b.buf, 0, b.length);
	b.reset();
}