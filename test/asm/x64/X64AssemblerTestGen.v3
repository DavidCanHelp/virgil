// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def data = DataWriter.new();
var asm = X64Assembler.new(data);
var buf = StringBuilder.new();
var args: Array<string>;

def main(a: Array<string>) -> int {
	args = a;
	System.puts("bits 64\n");

	do_add();
	if (false) do_sse(); // TODO: SSE
	System.puts(";; passed\n");
	return 0;
}

def do_add() {
	do_m_r("add", asm.addq_rm_r);
	do_r_r("add", asm.addq_rm_r);
	do_r_r("add", asm.addq_r_rm);
	do_r_m("add", asm.addq_r_rm);
	do_r_i("add", asm.addq_rm_i);
//TODO	do_m_i("add", asm.addq_rm_i);
}

def do_sse() {
	do_sm_s("movss", asm.movss_sm_s);
	do_s_sm("movss", asm.movss_s_sm);
	do_sm_s("movsd", asm.movsd_sm_s);
	do_s_sm("movsd", asm.movsd_s_sm);

	do_s_rm("movd", asm.movd_s_rm);
	do_rm_s("movd", asm.movd_rm_s);

	do_s_sm("addsd", asm.addsd);
	do_s_sm("subsd", asm.subsd);
	do_s_sm("mulsd", asm.mulsd);
	do_s_sm("divsd", asm.divsd);

	do_s_sm("addss", asm.addss);
	do_s_sm("subss", asm.subss);
	do_s_sm("mulss", asm.mulss);
	do_s_sm("divss", asm.divss);

	do_s_sm("cmpeqsd", asm.cmpeqsd);
	do_s_sm("cmpltsd", asm.cmpltsd);
	do_s_sm("cmplesd", asm.cmplesd);
	do_s_sm("cmpunordsd", asm.cmpunordsd);
	do_s_sm("cmpneqsd", asm.cmpneqsd);
	do_s_sm("cmpnltsd", asm.cmpnltsd);
	do_s_sm("cmpnlesd", asm.cmpnlesd);
	do_s_sm("cmpordsd", asm.cmpordsd);

	do_s_sm_b("roundsd", asm.roundsd);
	do_s_sm_b("roundss", asm.roundss);

	do_s_sm("ucomiss", asm.ucomiss);

	do_s_sm("cmpeqss", asm.cmpeqss);
	do_s_sm("cmpltss", asm.cmpltss);
	do_s_sm("cmpless", asm.cmpless);
	do_s_sm("cmpunordss", asm.cmpunordss);
	do_s_sm("cmpneqss", asm.cmpneqss);
	do_s_sm("cmpnltss", asm.cmpnltss);
	do_s_sm("cmpnless", asm.cmpnless);
	do_s_sm("cmpordss", asm.cmpordss);

	do_r_sm("cvtsd2si", asm.cvtsd2si);
	do_r_sm("cvtss2si", asm.cvtss2si);
	do_s_rm("cvtsi2sd", asm.cvtsi2sd);
	do_s_rm("cvtsi2ss", asm.cvtsi2ss);
	do_s_sm("cvtss2sd", asm.cvtss2sd);
	do_s_sm("cvtsd2ss", asm.cvtsd2ss);
	do_r_sm("cvttsd2si", asm.cvttsd2si);
	do_r_sm("cvttss2si", asm.cvttss2si);

	do_s_sm("andps", asm.andps);
	do_s_sm("andpd", asm.andpd);
	do_s_sm("xorps", asm.xorps);
	do_s_sm("xorpd", asm.xorpd);

	do_s_i("psrld", asm.psrld_i);
	do_s_i("psrlq", asm.psrlq_i);
	do_s_i("pslld", asm.pslld_i);
	do_s_i("psllq", asm.psllq_i);

	do_s_sm("pcmpeqd", asm.pcmpeqd);
	do_s_sm("pcmpeqq", asm.pcmpeqq);

	do_sm("fld DWORD", asm.fld_d);
	do_sm("fisttp QWORD", asm.fisttp_q);

}

def ADDRS = [
	X64Regs.RAX.indirect(),
	X64Regs.RBX.indirect(),
	X64Regs.RSI.indirect(),
	X64Addr.new(X64Regs.RAX, null, 1, 0x11223344),
	X64Addr.new(X64Regs.RCX, null, 1, 0x77),
	X64Addr.new(X64Regs.RBX, X64Regs.RBX, 1, 0x11223344),
	X64Addr.new(X64Regs.RCX, X64Regs.RDX, 4, 0x11223344),
	X64Addr.new(X64Regs.RDI, X64Regs.RSI, 8, 0x11223344)
	// TODO: REX-prefixed extended registers
];

def SSE_ADDRS = Arrays.map(ADDRS, toSSEAddr);

def toSSEAddr(addr: X64Addr) -> SSEAddr {
	return SSEAddr.new(addr.base, addr.index, addr.scale, addr.disp);
}

def render() {
	for (i < data.pos) buf.putx_8(data.data[i]);
	data.at(0);
}

def skip(mnemonic: string) -> bool {
	if (args.length == 0) return false;
	for (i < args.length) {
		if (Strings.equal(args[i], mnemonic)) return false;
	}
	return true;
}

def do2<A, B, R>(mnemonic: string, asm_func: (A, B) -> R,
	as: Array<A>, ra: (A, StringBuilder) -> StringBuilder,
	bs: Array<B>, rb: (B, StringBuilder) -> StringBuilder) {
	if (skip(mnemonic)) return;
	for (a in as) {
		for (b in bs) {
			asm_func(a, b);
			buf.puts(mnemonic).sp();
			ra(a, buf);
			buf.puts(", ");
			rb(b, buf);
			buf.puts(" ;;== ");
			render();
			outln(buf);
		}
	}
}

def renderSse(r: SSEReg, buf: StringBuilder) -> StringBuilder {
	buf.puts(r.name);
	return buf;
}

def renderGpr(r: X64Reg, buf: StringBuilder) -> StringBuilder {
	buf.puts(r.name64);
	return buf;
}

def IMMS = [0, 1, 2, -1, -2, -128, 127, 128, 253, 255, 1023, 65535, -32767, 0x11223344, 0x55443322, 0x99aabbcc];

def renderImm(i: int, buf: StringBuilder) -> StringBuilder {
	buf.putd(i);
	return buf;
}

def do_m_r = do2<X64Addr, X64Reg, X64Assembler>(_, _, ADDRS, X64Addr.render, X64Regs.LOW_GPRs, renderGpr);
def do_r_m = do2<X64Reg, X64Addr, X64Assembler>(_, _, X64Regs.LOW_GPRs, renderGpr, ADDRS, X64Addr.render);
def do_r_r = do2<X64Reg, X64Reg, X64Assembler>(_, _, X64Regs.LOW_GPRs, renderGpr, X64Regs.LOW_GPRs, renderGpr);
def do_r_i = do2<X64Reg, int, X64Assembler>(_, _, X64Regs.LOW_GPRs, renderGpr, IMMS, renderImm);
def do_m_i = do2<X64Addr, int, X64Assembler>(_, _, ADDRS, X64Addr.render, IMMS, renderImm);

def do_s_m = do2<SSEReg, SSEAddr, void>(_, _, X64Regs.XMMs, renderSse, SSE_ADDRS, SSEAddr.render);
def do_m_s = do2<SSEAddr, SSEReg, void>(_, _, SSE_ADDRS, SSEAddr.render, X64Regs.XMMs, renderSse);
def do_s_s = do2<SSEReg, SSEReg, void>(_, _, X64Regs.XMMs, renderSse, X64Regs.XMMs, renderSse);
def do_s_r = do2<SSEReg, X64Reg, void>(_, _, X64Regs.XMMs, renderSse, X64Regs.GPRs, renderGpr);
def do_r_s = do2<X64Reg, SSEReg, void>(_, _, X64Regs.GPRs, renderGpr, X64Regs.XMMs, renderSse);
//def do_m_i = do2<SSEAddr, int, void>(_, _, SSE_ADDRS, SSEAddr.render, IMMS, renderImm);

def do_s_sm(mnemonic: string, asm_func: (SSEReg, SSERm) -> void) {
	do_s_m(mnemonic, asm_func);
	do_s_s(mnemonic, asm_func);
}

def do_s_rm(mnemonic: string, asm_func: (SSEReg, X64Rm) -> void) {
//TODO	do_s_m(mnemonic, asm_func);
	do_s_r(mnemonic, asm_func);
}

def do_r_sm(mnemonic: string, asm_func: (X64Reg, SSERm) -> void) {
//TODO	do_s_m(mnemonic, asm_func);
	do_r_s(mnemonic, asm_func);
}

def do_s_sm_b(mnemonic: string, asm_func: (SSEReg, SSERm, RoundingMode) -> void) {
	if (skip(mnemonic)) return;
	for (addr in SSE_ADDRS) {
		for (s in [X64Regs.XMM0, X64Regs.XMM1, X64Regs.XMM7]) {
			for (mode in RoundingMode) {
				asm_func(s, addr, mode);
				buf.puts(mnemonic).sp();
				buf.puts(s.name);
				buf.puts(", ");
				addr.render(buf);
				buf.puts(", ");
				buf.putd(mode.value);
				buf.puts(" ;;== ");
				render();
				outln(buf);
			}
		}
	}
}

def do_s_i(mnemonic: string, asm_func: (SSEReg, byte) -> void) {
	if (skip(mnemonic)) return;
	for (s in [X64Regs.XMM0, X64Regs.XMM1, X64Regs.XMM7]) {
		for (imm in ['\x01', '\x02', '\x03']) {
			asm_func(s, imm);
			buf.puts(mnemonic).sp();
			buf.puts(s.name);
			buf.puts(", ");
			buf.putd(imm);
			buf.puts(" ;;== ");
			render();
			outln(buf);
		}
	}
}

def do_sm(mnemonic: string, asm_func: SSEAddr -> void) {
	if (skip(mnemonic)) return;
	// TODO
}

def do_sm_s(mnemonic: string, asm_func: (SSERm, SSEReg) -> void) {
	if (skip(mnemonic)) return;
	do_s_s(mnemonic, asm_func);
	do_m_s(mnemonic, asm_func);
}

def do_rm_s(mnemonic: string, asm_func: (X64Rm, SSEReg) -> void) {
	if (skip(mnemonic)) return;
	do_r_s(mnemonic, asm_func);
//TODO	do_m_s(mnemonic, asm_func);
}

def outln(b: StringBuilder) {
	b.ln();
	System.fileWriteK(1, b.buf, 0, b.length);
	b.reset();
}