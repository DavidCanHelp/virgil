def main() { m__n(3); }
//@execute 0=5; 1=2; 2=5; 3=!BoundsCheckException
type X {
	case None;
	case IsY(y: Y);
}
type Y {
	case None;
	case IsX(x: X);
}
def eq<T>(x: T, a: Array<T>) -> int {
	var res = 0;
	for (i = 0; i < a.length; i++) {
		if (x == a[i]) res = res | (1 << byte.!(i));
	}
	return res;
}
def make(d: X) -> Array<X> {
	return [
		d,
		X.IsY(Y.IsX(X.None)),
		d
	];
}
def m = make(X.IsY(Y.None));
def m__n(a: int) -> int {
	return eq(m[a], m);
}
