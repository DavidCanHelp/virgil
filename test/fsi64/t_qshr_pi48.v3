//@execute 1=11; 2=11; 3=11; 4=11; 5=11; 6=11; 7=11; 8=11; 9=11; 10=11; 11=11; 12=11; 13=11; 14=11; 15=11; 16=11; 17=11; 18=11; 19=11; 20=11; 21=11; 22=11; 23=11; 24=11; 25=11; 26=11; 27=11; 28=11; 29=11; 30=11; 31=11; 32=11; 33=11; 34=11; 35=11; 36=11; 37=11; 38=11; 39=11; 40=11; 41=11; 42=11; 43=11; 44=11; 45=11; 46=11; 47=11; 48=11; 49=11; 50=11
def vals: Array<u48> = [
	0b101101101001101001101011000000010101100111111011,
	0b010110110100110100110101100000001010110011111101,
	0b001011011010011010011010110000000101011001111110,
	0b000101101101001101001101011000000010101100111111,
	0b000010110110100110100110101100000001010110011111,
	0b000001011011010011010011010110000000101011001111,
	0b000000101101101001101001101011000000010101100111,
	0b000000010110110100110100110101100000001010110011,
	0b000000001011011010011010011010110000000101011001,
	0b000000000101101101001101001101011000000010101100,
	0b000000000010110110100110100110101100000001010110,
	0b000000000001011011010011010011010110000000101011,
	0b000000000000101101101001101001101011000000010101,
	0b000000000000010110110100110100110101100000001010,
	0b000000000000001011011010011010011010110000000101,
	0b000000000000000101101101001101001101011000000010,
	0b000000000000000010110110100110100110101100000001,
	0b000000000000000001011011010011010011010110000000,
	0b000000000000000000101101101001101001101011000000,
	0b000000000000000000010110110100110100110101100000,
	0b000000000000000000001011011010011010011010110000,
	0b000000000000000000000101101101001101001101011000,
	0b000000000000000000000010110110100110100110101100,
	0b000000000000000000000001011011010011010011010110,
	0b000000000000000000000000101101101001101001101011,
	0b000000000000000000000000010110110100110100110101,
	0b000000000000000000000000001011011010011010011010,
	0b000000000000000000000000000101101101001101001101,
	0b000000000000000000000000000010110110100110100110,
	0b000000000000000000000000000001011011010011010011,
	0b000000000000000000000000000000101101101001101001,
	0b000000000000000000000000000000010110110100110100,
	0b000000000000000000000000000000001011011010011010,
	0b000000000000000000000000000000000101101101001101,
	0b000000000000000000000000000000000010110110100110,
	0b000000000000000000000000000000000001011011010011,
	0b000000000000000000000000000000000000101101101001,
	0b000000000000000000000000000000000000010110110100,
	0b000000000000000000000000000000000000001011011010,
	0b000000000000000000000000000000000000000101101101,
	0b000000000000000000000000000000000000000010110110,
	0b000000000000000000000000000000000000000001011011,
	0b000000000000000000000000000000000000000000101101,
	0b000000000000000000000000000000000000000000010110,
	0b000000000000000000000000000000000000000000001011,
	0b000000000000000000000000000000000000000000000101,
	0b000000000000000000000000000000000000000000000010,
	0b000000000000000000000000000000000000000000000001,
	0b000000000000000000000000000000000000000000000000,
	0b000000000000000000000000000000000000000000000000,
	0b000000000000000000000000000000000000000000000000,
	0b000000000000000000000000000000000000000000000000,
	0b000000000000000000000000000000000000000000000000
];
def main(a: byte) -> int {
	for (x = a; x < vals.length; x = x + a) {
		var n = vals(x - a) >>> a;
		if (n != vals(x)) return -11;
	}
	return 11;
}
