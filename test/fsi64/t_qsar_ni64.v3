//@execute 1=3; 2=3; 3=3; 4=3; 5=3; 6=3; 7=3; 8=3; 9=3; 10=3; 11=3; 12=3; 13=3; 14=3; 15=3; 16=3; 17=3; 18=3; 19=3; 20=3; 21=3; 22=3; 23=3; 24=3; 25=3; 26=3; 27=3; 28=3; 29=3; 30=3; 31=3; 32=3; 33=3; 34=3; 35=3; 36=3; 37=3; 38=3; 39=3; 40=3; 41=3; 42=3; 43=3; 44=3; 45=3; 46=3; 47=3; 48=3; 49=3; 50=3; 51=3; 52=3; 53=3; 54=3; 55=3; 56=3; 57=3; 58=3; 59=3; 60=3; 61=3; 62=3; 63=3; 64=3; 65=3; 66=3
def vals: Array<i64> = [
	0b0010010101011000010101001011100011010010001101100100101000100100,
	0b0001001010101100001010100101110001101001000110110010010100010010,
	0b0000100101010110000101010010111000110100100011011001001010001001,
	0b0000010010101011000010101001011100011010010001101100100101000100,
	0b0000001001010101100001010100101110001101001000110110010010100010,
	0b0000000100101010110000101010010111000110100100011011001001010001,
	0b0000000010010101011000010101001011100011010010001101100100101000,
	0b0000000001001010101100001010100101110001101001000110110010010100,
	0b0000000000100101010110000101010010111000110100100011011001001010,
	0b0000000000010010101011000010101001011100011010010001101100100101,
	0b0000000000001001010101100001010100101110001101001000110110010010,
	0b0000000000000100101010110000101010010111000110100100011011001001,
	0b0000000000000010010101011000010101001011100011010010001101100100,
	0b0000000000000001001010101100001010100101110001101001000110110010,
	0b0000000000000000100101010110000101010010111000110100100011011001,
	0b0000000000000000010010101011000010101001011100011010010001101100,
	0b0000000000000000001001010101100001010100101110001101001000110110,
	0b0000000000000000000100101010110000101010010111000110100100011011,
	0b0000000000000000000010010101011000010101001011100011010010001101,
	0b0000000000000000000001001010101100001010100101110001101001000110,
	0b0000000000000000000000100101010110000101010010111000110100100011,
	0b0000000000000000000000010010101011000010101001011100011010010001,
	0b0000000000000000000000001001010101100001010100101110001101001000,
	0b0000000000000000000000000100101010110000101010010111000110100100,
	0b0000000000000000000000000010010101011000010101001011100011010010,
	0b0000000000000000000000000001001010101100001010100101110001101001,
	0b0000000000000000000000000000100101010110000101010010111000110100,
	0b0000000000000000000000000000010010101011000010101001011100011010,
	0b0000000000000000000000000000001001010101100001010100101110001101,
	0b0000000000000000000000000000000100101010110000101010010111000110,
	0b0000000000000000000000000000000010010101011000010101001011100011,
	0b0000000000000000000000000000000001001010101100001010100101110001,
	0b0000000000000000000000000000000000100101010110000101010010111000,
	0b0000000000000000000000000000000000010010101011000010101001011100,
	0b0000000000000000000000000000000000001001010101100001010100101110,
	0b0000000000000000000000000000000000000100101010110000101010010111,
	0b0000000000000000000000000000000000000010010101011000010101001011,
	0b0000000000000000000000000000000000000001001010101100001010100101,
	0b0000000000000000000000000000000000000000100101010110000101010010,
	0b0000000000000000000000000000000000000000010010101011000010101001,
	0b0000000000000000000000000000000000000000001001010101100001010100,
	0b0000000000000000000000000000000000000000000100101010110000101010,
	0b0000000000000000000000000000000000000000000010010101011000010101,
	0b0000000000000000000000000000000000000000000001001010101100001010,
	0b0000000000000000000000000000000000000000000000100101010110000101,
	0b0000000000000000000000000000000000000000000000010010101011000010,
	0b0000000000000000000000000000000000000000000000001001010101100001,
	0b0000000000000000000000000000000000000000000000000100101010110000,
	0b0000000000000000000000000000000000000000000000000010010101011000,
	0b0000000000000000000000000000000000000000000000000001001010101100,
	0b0000000000000000000000000000000000000000000000000000100101010110,
	0b0000000000000000000000000000000000000000000000000000010010101011,
	0b0000000000000000000000000000000000000000000000000000001001010101,
	0b0000000000000000000000000000000000000000000000000000000100101010,
	0b0000000000000000000000000000000000000000000000000000000010010101,
	0b0000000000000000000000000000000000000000000000000000000001001010,
	0b0000000000000000000000000000000000000000000000000000000000100101,
	0b0000000000000000000000000000000000000000000000000000000000010010,
	0b0000000000000000000000000000000000000000000000000000000000001001,
	0b0000000000000000000000000000000000000000000000000000000000000100,
	0b0000000000000000000000000000000000000000000000000000000000000010,
	0b0000000000000000000000000000000000000000000000000000000000000001,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000
];
def main(a: byte) -> int {
	for (x = a; x < vals.length; x = x + a) {
		var n = vals[x - a] >> a;
		if (n != vals[x]) return -3;
	}
	return 3;
}
