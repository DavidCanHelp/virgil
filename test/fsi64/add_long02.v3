//@execute = 33
def a = doOp();
def b = doFolded();
def main() -> int {
	def c = doOp();
	def d = doFolded();
	for (i = 0; i < a.length; i++) if (a[i] != b[i] || a[i] != c[i] || a[i] != d[i]) return -20 - i;
	return 33;
}
def op(x: int, y: int) -> long {
	return long.!(x) + long.!(y);
}
def doOp() -> Array<long> {
	return  [
		op(0x00000000, 0x00000000),
		op(0x00000000, 0x00000001),
		op(0x00000000, 0x80000000),
		op(0x00000000, 0x7FFFFFFF),
		op(0x00000000, 0x40000000),
		op(0x00000000, 0x3FFFFFFF),
		op(0x00000000, 0xC0000000),
		op(0x00000000, 0xCFFFFFFF), 
		op(0x00000001, 0x00000000),
		op(0x00000001, 0x00000001),
		op(0x00000001, 0x80000000),
		op(0x00000001, 0x7FFFFFFF),
		op(0x00000001, 0x40000000),
		op(0x00000001, 0x3FFFFFFF),
		op(0x00000001, 0xC0000000),
		op(0x00000001, 0xCFFFFFFF), 
		op(0x80000000, 0x00000000),
		op(0x80000000, 0x00000001),
		op(0x80000000, 0x80000000),
		op(0x80000000, 0x7FFFFFFF),
		op(0x80000000, 0x40000000),
		op(0x80000000, 0x3FFFFFFF),
		op(0x80000000, 0xC0000000),
		op(0x80000000, 0xCFFFFFFF), 
		op(0x7FFFFFFF, 0x00000000),
		op(0x7FFFFFFF, 0x00000001),
		op(0x7FFFFFFF, 0x80000000),
		op(0x7FFFFFFF, 0x7FFFFFFF),
		op(0x7FFFFFFF, 0x40000000),
		op(0x7FFFFFFF, 0x3FFFFFFF),
		op(0x7FFFFFFF, 0xC0000000),
		op(0x7FFFFFFF, 0xCFFFFFFF), 
		op(0x40000000, 0x00000000),
		op(0x40000000, 0x00000001),
		op(0x40000000, 0x80000000),
		op(0x40000000, 0x7FFFFFFF),
		op(0x40000000, 0x40000000),
		op(0x40000000, 0x3FFFFFFF),
		op(0x40000000, 0xC0000000),
		op(0x40000000, 0xCFFFFFFF), 
		op(0x3FFFFFFF, 0x00000000),
		op(0x3FFFFFFF, 0x00000001),
		op(0x3FFFFFFF, 0x80000000),
		op(0x3FFFFFFF, 0x7FFFFFFF),
		op(0x3FFFFFFF, 0x40000000),
		op(0x3FFFFFFF, 0x3FFFFFFF),
		op(0x3FFFFFFF, 0xC0000000),
		op(0x3FFFFFFF, 0xCFFFFFFF), 
		op(0xC0000000, 0x00000000),
		op(0xC0000000, 0x00000001),
		op(0xC0000000, 0x80000000),
		op(0xC0000000, 0x7FFFFFFF),
		op(0xC0000000, 0x40000000),
		op(0xC0000000, 0x3FFFFFFF),
		op(0xC0000000, 0xC0000000),
		op(0xC0000000, 0xCFFFFFFF), 
		op(0xCFFFFFFF, 0x00000000),
		op(0xCFFFFFFF, 0x00000001),
		op(0xCFFFFFFF, 0x80000000),
		op(0xCFFFFFFF, 0x7FFFFFFF),
		op(0xCFFFFFFF, 0x40000000),
		op(0xCFFFFFFF, 0x3FFFFFFF),
		op(0xCFFFFFFF, 0xC0000000),
		op(0xCFFFFFFF, 0xCFFFFFFF)
	];
}
def doFolded() -> Array<long> {
	return  [
		long.!(0x00000000) + long.!(0x00000000),
		long.!(0x00000000) + long.!(0x00000001),
		long.!(0x00000000) + long.!(0x80000000),
		long.!(0x00000000) + long.!(0x7FFFFFFF),
		long.!(0x00000000) + long.!(0x40000000),
		long.!(0x00000000) + long.!(0x3FFFFFFF),
		long.!(0x00000000) + long.!(0xC0000000),
		long.!(0x00000000) + long.!(0xCFFFFFFF), 
		long.!(0x00000001) + long.!(0x00000000),
		long.!(0x00000001) + long.!(0x00000001),
		long.!(0x00000001) + long.!(0x80000000),
		long.!(0x00000001) + long.!(0x7FFFFFFF),
		long.!(0x00000001) + long.!(0x40000000),
		long.!(0x00000001) + long.!(0x3FFFFFFF),
		long.!(0x00000001) + long.!(0xC0000000),
		long.!(0x00000001) + long.!(0xCFFFFFFF), 
		long.!(0x80000000) + long.!(0x00000000),
		long.!(0x80000000) + long.!(0x00000001),
		long.!(0x80000000) + long.!(0x80000000),
		long.!(0x80000000) + long.!(0x7FFFFFFF),
		long.!(0x80000000) + long.!(0x40000000),
		long.!(0x80000000) + long.!(0x3FFFFFFF),
		long.!(0x80000000) + long.!(0xC0000000),
		long.!(0x80000000) + long.!(0xCFFFFFFF), 
		long.!(0x7FFFFFFF) + long.!(0x00000000),
		long.!(0x7FFFFFFF) + long.!(0x00000001),
		long.!(0x7FFFFFFF) + long.!(0x80000000),
		long.!(0x7FFFFFFF) + long.!(0x7FFFFFFF),
		long.!(0x7FFFFFFF) + long.!(0x40000000),
		long.!(0x7FFFFFFF) + long.!(0x3FFFFFFF),
		long.!(0x7FFFFFFF) + long.!(0xC0000000),
		long.!(0x7FFFFFFF) + long.!(0xCFFFFFFF), 
		long.!(0x40000000) + long.!(0x00000000),
		long.!(0x40000000) + long.!(0x00000001),
		long.!(0x40000000) + long.!(0x80000000),
		long.!(0x40000000) + long.!(0x7FFFFFFF),
		long.!(0x40000000) + long.!(0x40000000),
		long.!(0x40000000) + long.!(0x3FFFFFFF),
		long.!(0x40000000) + long.!(0xC0000000),
		long.!(0x40000000) + long.!(0xCFFFFFFF), 
		long.!(0x3FFFFFFF) + long.!(0x00000000),
		long.!(0x3FFFFFFF) + long.!(0x00000001),
		long.!(0x3FFFFFFF) + long.!(0x80000000),
		long.!(0x3FFFFFFF) + long.!(0x7FFFFFFF),
		long.!(0x3FFFFFFF) + long.!(0x40000000),
		long.!(0x3FFFFFFF) + long.!(0x3FFFFFFF),
		long.!(0x3FFFFFFF) + long.!(0xC0000000),
		long.!(0x3FFFFFFF) + long.!(0xCFFFFFFF), 
		long.!(0xC0000000) + long.!(0x00000000),
		long.!(0xC0000000) + long.!(0x00000001),
		long.!(0xC0000000) + long.!(0x80000000),
		long.!(0xC0000000) + long.!(0x7FFFFFFF),
		long.!(0xC0000000) + long.!(0x40000000),
		long.!(0xC0000000) + long.!(0x3FFFFFFF),
		long.!(0xC0000000) + long.!(0xC0000000),
		long.!(0xC0000000) + long.!(0xCFFFFFFF), 
		long.!(0xCFFFFFFF) + long.!(0x00000000),
		long.!(0xCFFFFFFF) + long.!(0x00000001),
		long.!(0xCFFFFFFF) + long.!(0x80000000),
		long.!(0xCFFFFFFF) + long.!(0x7FFFFFFF),
		long.!(0xCFFFFFFF) + long.!(0x40000000),
		long.!(0xCFFFFFFF) + long.!(0x3FFFFFFF),
		long.!(0xCFFFFFFF) + long.!(0xC0000000),
		long.!(0xCFFFFFFF) + long.!(0xCFFFFFFF)
	];
}
