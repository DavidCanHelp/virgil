//@execute = 33
def a = doOp();
def b = doFolded();
def main() -> int {
	def c = doOp();
	def d = doFolded();
	for (i = 0; i < a.length; i++) if (a(i) != b(i) || a(i) != c(i) || a(i) != d(i)) return -20 - i;
	return 33;
}
def op(x: long, y: long) -> long {
	return long.!(x) + long.!(y);
}
def doOp() -> Array<long> {
	return  [
		op(0x0000000000000000, 0x0000000000000000),
		op(0x0000000000000000, 0x0000000000000001),
		op(0x0000000000000000, 0x8000000000000000),
		op(0x0000000000000000, 0x7FFFFFFFFFFFFFFF),
		op(0x0000000000000000, 0x4000000000000000),
		op(0x0000000000000000, 0x3FFFFFFFFFFFFFFF),
		op(0x0000000000000000, 0xC000000000000000),
		op(0x0000000000000000, 0xCFFFFFFFFFFFFFFF), 
		op(0x0000000000000001, 0x0000000000000000),
		op(0x0000000000000001, 0x0000000000000001),
		op(0x0000000000000001, 0x8000000000000000),
		op(0x0000000000000001, 0x7FFFFFFFFFFFFFFF),
		op(0x0000000000000001, 0x4000000000000000),
		op(0x0000000000000001, 0x3FFFFFFFFFFFFFFF),
		op(0x0000000000000001, 0xC000000000000000),
		op(0x0000000000000001, 0xCFFFFFFFFFFFFFFF), 
		op(0x8000000000000000, 0x0000000000000000),
		op(0x8000000000000000, 0x0000000000000001),
		op(0x8000000000000000, 0x8000000000000000),
		op(0x8000000000000000, 0x7FFFFFFFFFFFFFFF),
		op(0x8000000000000000, 0x4000000000000000),
		op(0x8000000000000000, 0x3FFFFFFFFFFFFFFF),
		op(0x8000000000000000, 0xC000000000000000),
		op(0x8000000000000000, 0xCFFFFFFFFFFFFFFF), 
		op(0x7FFFFFFFFFFFFFFF, 0x0000000000000000),
		op(0x7FFFFFFFFFFFFFFF, 0x0000000000000001),
		op(0x7FFFFFFFFFFFFFFF, 0x8000000000000000),
		op(0x7FFFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFFF),
		op(0x7FFFFFFFFFFFFFFF, 0x4000000000000000),
		op(0x7FFFFFFFFFFFFFFF, 0x3FFFFFFFFFFFFFFF),
		op(0x7FFFFFFFFFFFFFFF, 0xC000000000000000),
		op(0x7FFFFFFFFFFFFFFF, 0xCFFFFFFFFFFFFFFF), 
		op(0x4000000000000000, 0x0000000000000000),
		op(0x4000000000000000, 0x0000000000000001),
		op(0x4000000000000000, 0x8000000000000000),
		op(0x4000000000000000, 0x7FFFFFFFFFFFFFFF),
		op(0x4000000000000000, 0x4000000000000000),
		op(0x4000000000000000, 0x3FFFFFFFFFFFFFFF),
		op(0x4000000000000000, 0xC000000000000000),
		op(0x4000000000000000, 0xCFFFFFFFFFFFFFFF), 
		op(0x3FFFFFFFFFFFFFFF, 0x0000000000000000),
		op(0x3FFFFFFFFFFFFFFF, 0x0000000000000001),
		op(0x3FFFFFFFFFFFFFFF, 0x8000000000000000),
		op(0x3FFFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFFF),
		op(0x3FFFFFFFFFFFFFFF, 0x4000000000000000),
		op(0x3FFFFFFFFFFFFFFF, 0x3FFFFFFFFFFFFFFF),
		op(0x3FFFFFFFFFFFFFFF, 0xC000000000000000),
		op(0x3FFFFFFFFFFFFFFF, 0xCFFFFFFFFFFFFFFF), 
		op(0xC000000000000000, 0x0000000000000000),
		op(0xC000000000000000, 0x0000000000000001),
		op(0xC000000000000000, 0x8000000000000000),
		op(0xC000000000000000, 0x7FFFFFFFFFFFFFFF),
		op(0xC000000000000000, 0x4000000000000000),
		op(0xC000000000000000, 0x3FFFFFFFFFFFFFFF),
		op(0xC000000000000000, 0xC000000000000000),
		op(0xC000000000000000, 0xCFFFFFFFFFFFFFFF), 
		op(0xCFFFFFFFFFFFFFFF, 0x0000000000000000),
		op(0xCFFFFFFFFFFFFFFF, 0x0000000000000001),
		op(0xCFFFFFFFFFFFFFFF, 0x8000000000000000),
		op(0xCFFFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFFF),
		op(0xCFFFFFFFFFFFFFFF, 0x4000000000000000),
		op(0xCFFFFFFFFFFFFFFF, 0x3FFFFFFFFFFFFFFF),
		op(0xCFFFFFFFFFFFFFFF, 0xC000000000000000),
		op(0xCFFFFFFFFFFFFFFF, 0xCFFFFFFFFFFFFFFF)
	];
}
def doFolded() -> Array<long> {
	return  [
		0x0000000000000000 + 0x0000000000000000,
		0x0000000000000000 + 0x0000000000000001,
		0x0000000000000000 + 0x8000000000000000,
		0x0000000000000000 + 0x7FFFFFFFFFFFFFFF,
		0x0000000000000000 + 0x4000000000000000,
		0x0000000000000000 + 0x3FFFFFFFFFFFFFFF,
		0x0000000000000000 + 0xC000000000000000,
		0x0000000000000000 + 0xCFFFFFFFFFFFFFFF, 
		0x0000000000000001 + 0x0000000000000000,
		0x0000000000000001 + 0x0000000000000001,
		0x0000000000000001 + 0x8000000000000000,
		0x0000000000000001 + 0x7FFFFFFFFFFFFFFF,
		0x0000000000000001 + 0x4000000000000000,
		0x0000000000000001 + 0x3FFFFFFFFFFFFFFF,
		0x0000000000000001 + 0xC000000000000000,
		0x0000000000000001 + 0xCFFFFFFFFFFFFFFF, 
		0x8000000000000000 + 0x0000000000000000,
		0x8000000000000000 + 0x0000000000000001,
		0x8000000000000000 + 0x8000000000000000,
		0x8000000000000000 + 0x7FFFFFFFFFFFFFFF,
		0x8000000000000000 + 0x4000000000000000,
		0x8000000000000000 + 0x3FFFFFFFFFFFFFFF,
		0x8000000000000000 + 0xC000000000000000,
		0x8000000000000000 + 0xCFFFFFFFFFFFFFFF, 
		0x7FFFFFFFFFFFFFFF + 0x0000000000000000,
		0x7FFFFFFFFFFFFFFF + 0x0000000000000001,
		0x7FFFFFFFFFFFFFFF + 0x8000000000000000,
		0x7FFFFFFFFFFFFFFF + 0x7FFFFFFFFFFFFFFF,
		0x7FFFFFFFFFFFFFFF + 0x4000000000000000,
		0x7FFFFFFFFFFFFFFF + 0x3FFFFFFFFFFFFFFF,
		0x7FFFFFFFFFFFFFFF + 0xC000000000000000,
		0x7FFFFFFFFFFFFFFF + 0xCFFFFFFFFFFFFFFF, 
		0x4000000000000000 + 0x0000000000000000,
		0x4000000000000000 + 0x0000000000000001,
		0x4000000000000000 + 0x8000000000000000,
		0x4000000000000000 + 0x7FFFFFFFFFFFFFFF,
		0x4000000000000000 + 0x4000000000000000,
		0x4000000000000000 + 0x3FFFFFFFFFFFFFFF,
		0x4000000000000000 + 0xC000000000000000,
		0x4000000000000000 + 0xCFFFFFFFFFFFFFFF, 
		0x3FFFFFFFFFFFFFFF + 0x0000000000000000,
		0x3FFFFFFFFFFFFFFF + 0x0000000000000001,
		0x3FFFFFFFFFFFFFFF + 0x8000000000000000,
		0x3FFFFFFFFFFFFFFF + 0x7FFFFFFFFFFFFFFF,
		0x3FFFFFFFFFFFFFFF + 0x4000000000000000,
		0x3FFFFFFFFFFFFFFF + 0x3FFFFFFFFFFFFFFF,
		0x3FFFFFFFFFFFFFFF + 0xC000000000000000,
		0x3FFFFFFFFFFFFFFF + 0xCFFFFFFFFFFFFFFF, 
		0xC000000000000000 + 0x0000000000000000,
		0xC000000000000000 + 0x0000000000000001,
		0xC000000000000000 + 0x8000000000000000,
		0xC000000000000000 + 0x7FFFFFFFFFFFFFFF,
		0xC000000000000000 + 0x4000000000000000,
		0xC000000000000000 + 0x3FFFFFFFFFFFFFFF,
		0xC000000000000000 + 0xC000000000000000,
		0xC000000000000000 + 0xCFFFFFFFFFFFFFFF, 
		0xCFFFFFFFFFFFFFFF + 0x0000000000000000,
		0xCFFFFFFFFFFFFFFF + 0x0000000000000001,
		0xCFFFFFFFFFFFFFFF + 0x8000000000000000,
		0xCFFFFFFFFFFFFFFF + 0x7FFFFFFFFFFFFFFF,
		0xCFFFFFFFFFFFFFFF + 0x4000000000000000,
		0xCFFFFFFFFFFFFFFF + 0x3FFFFFFFFFFFFFFF,
		0xCFFFFFFFFFFFFFFF + 0xC000000000000000,
		0xCFFFFFFFFFFFFFFF + 0xCFFFFFFFFFFFFFFF
	];
}
