//@execute 0=1; 1=2; 3=4; 6=7
type Tree<T> {
	case Leaf(val: T);
	case Node(left: Tree<T>, right: Tree<T>);
}
def height<T>(tree: Tree<T>) -> int {
	match (tree) {
		Leaf => return 1;
		Node(left, right) => {
			var l = height(left), r = height(right);
			return 1 + if(l < r, r, l);
		}
	}
}
def make<T>(depth: int, val: T) -> Tree<T> {
	if (depth <= 0) return Tree.Leaf(val);
	return Tree.Node(make(depth - 1, val), make(depth - 1, val));
}
def main(a: int) -> int {
	return height(make(a, 87234L));
}
