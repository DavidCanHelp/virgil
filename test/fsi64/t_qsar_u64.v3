//@execute 1=6; 2=6; 3=6; 4=6; 5=6; 6=6; 7=6; 8=6; 9=6; 10=6; 11=6; 12=6; 13=6; 14=6; 15=6; 16=6; 17=6; 18=6; 19=6; 20=6; 21=6; 22=6; 23=6; 24=6; 25=6; 26=6; 27=6; 28=6; 29=6; 30=6; 31=6; 32=6; 33=6; 34=6; 35=6; 36=6; 37=6; 38=6; 39=6; 40=6; 41=6; 42=6; 43=6; 44=6; 45=6; 46=6; 47=6; 48=6; 49=6; 50=6; 51=6; 52=6; 53=6; 54=6; 55=6; 56=6; 57=6; 58=6; 59=6; 60=6; 61=6; 62=6; 63=6; 64=6; 65=6; 66=6
def vals: Array<u64> = [
	0b1001110010010100100101100100101110111111100101110100111010100110,
	0b0100111001001010010010110010010111011111110010111010011101010011,
	0b0010011100100101001001011001001011101111111001011101001110101001,
	0b0001001110010010100100101100100101110111111100101110100111010100,
	0b0000100111001001010010010110010010111011111110010111010011101010,
	0b0000010011100100101001001011001001011101111111001011101001110101,
	0b0000001001110010010100100101100100101110111111100101110100111010,
	0b0000000100111001001010010010110010010111011111110010111010011101,
	0b0000000010011100100101001001011001001011101111111001011101001110,
	0b0000000001001110010010100100101100100101110111111100101110100111,
	0b0000000000100111001001010010010110010010111011111110010111010011,
	0b0000000000010011100100101001001011001001011101111111001011101001,
	0b0000000000001001110010010100100101100100101110111111100101110100,
	0b0000000000000100111001001010010010110010010111011111110010111010,
	0b0000000000000010011100100101001001011001001011101111111001011101,
	0b0000000000000001001110010010100100101100100101110111111100101110,
	0b0000000000000000100111001001010010010110010010111011111110010111,
	0b0000000000000000010011100100101001001011001001011101111111001011,
	0b0000000000000000001001110010010100100101100100101110111111100101,
	0b0000000000000000000100111001001010010010110010010111011111110010,
	0b0000000000000000000010011100100101001001011001001011101111111001,
	0b0000000000000000000001001110010010100100101100100101110111111100,
	0b0000000000000000000000100111001001010010010110010010111011111110,
	0b0000000000000000000000010011100100101001001011001001011101111111,
	0b0000000000000000000000001001110010010100100101100100101110111111,
	0b0000000000000000000000000100111001001010010010110010010111011111,
	0b0000000000000000000000000010011100100101001001011001001011101111,
	0b0000000000000000000000000001001110010010100100101100100101110111,
	0b0000000000000000000000000000100111001001010010010110010010111011,
	0b0000000000000000000000000000010011100100101001001011001001011101,
	0b0000000000000000000000000000001001110010010100100101100100101110,
	0b0000000000000000000000000000000100111001001010010010110010010111,
	0b0000000000000000000000000000000010011100100101001001011001001011,
	0b0000000000000000000000000000000001001110010010100100101100100101,
	0b0000000000000000000000000000000000100111001001010010010110010010,
	0b0000000000000000000000000000000000010011100100101001001011001001,
	0b0000000000000000000000000000000000001001110010010100100101100100,
	0b0000000000000000000000000000000000000100111001001010010010110010,
	0b0000000000000000000000000000000000000010011100100101001001011001,
	0b0000000000000000000000000000000000000001001110010010100100101100,
	0b0000000000000000000000000000000000000000100111001001010010010110,
	0b0000000000000000000000000000000000000000010011100100101001001011,
	0b0000000000000000000000000000000000000000001001110010010100100101,
	0b0000000000000000000000000000000000000000000100111001001010010010,
	0b0000000000000000000000000000000000000000000010011100100101001001,
	0b0000000000000000000000000000000000000000000001001110010010100100,
	0b0000000000000000000000000000000000000000000000100111001001010010,
	0b0000000000000000000000000000000000000000000000010011100100101001,
	0b0000000000000000000000000000000000000000000000001001110010010100,
	0b0000000000000000000000000000000000000000000000000100111001001010,
	0b0000000000000000000000000000000000000000000000000010011100100101,
	0b0000000000000000000000000000000000000000000000000001001110010010,
	0b0000000000000000000000000000000000000000000000000000100111001001,
	0b0000000000000000000000000000000000000000000000000000010011100100,
	0b0000000000000000000000000000000000000000000000000000001001110010,
	0b0000000000000000000000000000000000000000000000000000000100111001,
	0b0000000000000000000000000000000000000000000000000000000010011100,
	0b0000000000000000000000000000000000000000000000000000000001001110,
	0b0000000000000000000000000000000000000000000000000000000000100111,
	0b0000000000000000000000000000000000000000000000000000000000010011,
	0b0000000000000000000000000000000000000000000000000000000000001001,
	0b0000000000000000000000000000000000000000000000000000000000000100,
	0b0000000000000000000000000000000000000000000000000000000000000010,
	0b0000000000000000000000000000000000000000000000000000000000000001,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000
];
def main(a: byte) -> int {
	for (x = a; x < vals.length; x = x + a) {
		var n = vals[x - a] >> a;
		if (n != vals[x]) return -6;
	}
	return 6;
}
