//@execute = 52
def inputs = [
	0x337E50410B920A4A,
	0x328CC4DFBC51EDFB,
	0x7865CBBF1A2778A3,
	0x1CEC10E2557C17C4,
	0x014098C058BA3B3C,
	0x219EEAC736B6A2B9,
	0x77D9BEFABEF5B2C3,
	0x6F3C50CB732BB2AE,
	0x0117BFECFC2FA6E9,
	0x69DE1F8B8BBBEA3C,
	0x2019E4ED1C377CAA,
	0x42F27817E0DA3FD0,
	0x3AD823CD5F934EAA,
	0x657F2DB0D34ED1DF,
	0x11D4642A0272E9BB,
	0x7E4C151F747D8C37,
	0x4A4E8F50F2DECF7B,
	0x339CAFB1FA889071,
	0x6FD974CE1DA9811A,
	0x57EF4BD3ACF37383,
	0x3DC52D921C8B743A,
	0x663F5546A26B8272,
	0x0B3447BFCAB633EF,
	0x1E2A2EFF392A6024,
	0x407BA513D6314FE6,
	0x56B1909D6C2B6E53,
	0x364195F04B9BDBA1,
	0x64CC01875541939E,
	0x5D4F5B0539975FE0,
	0x4723ABA1CE2210B9,
	0x71D0D79A454D401C,
	0x0BED5FAC09D236C5,
	0x1070DE7BE84DB62C,
	0x744545386FB0F0BB,
	0x1BFD23825997A60B,
	0x279C50464EB23201,
	0x7DA37BBC020AABB1,
	0x0919367EB1717C1F,
	0x310AB637FBF8E51D,
	0x7A013E098BA1CD8B,
	0x7323F76FCC241A74,
	0x0AE8E00CF2346BA0,
	0x0B362153504A0643,
	0x6F31D8C2EE7519AD,
	0x67F371EEBE9D9FE1,
	0x4ADBDF35D0716F2A,
	0x5F0222B7764769F0,
	0x5B86DE998F6A1F06,
	0x5EE372766164E702,
	0x36592B461AE8221C,
	0x763123D11D1F7657,
	0x22E9CD4F617CD6C3,
	0x06601A72BE74FAC4,
	0x7EF69AC2DA534784,
	0x643760D71650CDB0,
	0x692F7B7EF5A9EAE7,
	0x0F9580B5ABB9A039,
	0x065BD0AD592F4E66,
	0x1B92B809DF410C74,
	0x793499DE25313E83,
	0x0E2D34BDD1ABB8D1,
	0x421D91BFCDB51DF5,
	0x6C1520F53D150F9C,
	0x32111C7BC8093DFD,
	0x3C80E9F419BFAC9F,
	0x673681AE4D4A29D8,
	0x06CECBAD0E73C2E5,
	0x7F578C0231D3F74D,
	0x3EBF4AE899DEDC99,
	0x1C624867F7C6CE66,
	0x2CE4E81062FC770D,
	0x2AF53EF348C6FA3B,
	0x721FF49820451CD8,
	0x36401F535413F4E9,
	0x2B4215083859C017,
	0x34E87AEDA71700A2,
	0x7BE399A8353B36D3,
	0x17C1C694A6C0FFDF,
	0x35AD77C770F9DB83,
	0x4EA17DE758985EB0,
	0x267D4DA8BE4773A8,
	0x3D0BE2471E52FF33,
	0x18757B0AB0959E96,
	0x1D836F726B653B23,
	0x29E1F852E88D2E53,
	0x368CBFC1082E2C88,
	0x107B365846CEEC98,
	0x019A39FAB37A8F8C,
	0x3E9AF0CB9E346DF4,
	0x6DAE82D2DC1AAF6E,
	0x660B7D42304FB510,
	0x4B3A4C044E5CF08F,
	0x51D8C0E00CD2880D,
	0x7429BB074B85A9AA,
	0x279296A27AF27A0A,
	0x0BDF416FA4F61E21,
	0x5B63104828ECCAC1,
	0x5A9D60E2A4BF8B72,
	0x15D79BDD819D5E51,
	0x043E74B4DEFC5BC8
];
def test(x: long, y: long) -> bool {
	var expect = x / y;
	var result1 = u64.view(x) / u64.view(y);
	if (expect != result1) return false;
	var result2 = u64.view(x << 1) / u64.view(y << 1);
	if (expect != result2) return false;
	return true;
}
def main() -> int {
	for (i < inputs.length - 1) {
		if (!test(inputs[i], inputs[i + 1])) return -3 - i;
	}
	return 52;
}
