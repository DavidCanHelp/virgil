//@execute 0=129961; 1=274; 2=506366047; 3=774823277
//@heap-size=10000
def id<T>(x: T) -> T { return x; }
def select0<A, B, C>(a: A, b: B, c: C) -> A { return a; }
def select1<A, B, C>(a: A, b: B, c: C) -> B { return b; }
def select2<A, B, C>(a: A, b: B, c: C) -> C { return c; }
def tu0<A, B, T>(a: A, b: B, x: T) -> T { return id((x, a, b)).0; }
def tu1<A, B, T>(a: A, b: B, x: T) -> T { return id((a, x, b)).1; }
def tu2<A, B, T>(a: A, b: B, x: T) -> T { return id((a, b, x)).2; }

def apply2<T>(x: T, f: T -> T, g: T -> T) -> T {
	return f(g(x));
}

def selectors<A, B, T>(a: A, b: B) -> Array<T -> T> {
	return [
		select0(_, a, a),
		select0(_, a, b),
		select0(_, b, a),
		select0(_, b, b),
		select1(a, _, a),
		select1(a, _, b),
		select1(b, _, a),
		select1(b, _, b),
		select2(a, a, _),
		select2(a, b, _),
		select2(b, a, _),
		select2(b, b, _)
	];
}

def cartesian<T>(f: Array<T -> T>, g: Array<T -> T>) -> Array<T -> T> {
	var n = Array<T -> T>.new(f.length * g.length), index = 0;
	for (i < f.length) {
		for (j < g.length) {
			n(index++) = apply2(_, f(i), g(i));
		}
	}
	return n;
}

def chain<T>(f: Array<T -> T>) -> T -> T {
	var r: T -> T;
	for (i < f.length) {
		if (i == 0) r = f(i);
		else r = apply2(_, r, f(i));
	}
	return r;
}


def run(v: long) -> int {
	def sel = selectors<int, string, long>(55555555, "foo");
	for (f in sel) {
		if (f(v) != v) return -11;
	}
	def cart = cartesian(sel, sel);
	for (f in cart) {
		if (f(v) != v) return -12;
	}
	var tup = [
		tu0<int, string, long>(66666666, "bar", _),
		tu1<int, string, long>(66766666, "baz", _),
		tu2<int, string, long>(66664666, "bat", _)
	];
	for (f in tup) {
		if (f(v) != v) return -13;
	}
	for (f in cartesian(tup, sel)) {
		if (f(v) != v) return -14;
	}

	if (chain(sel)(v) != v) return -15;
	if (chain(cart)(v) != v) return -16;
	if (chain(tup)(v) != v) return -17;
	return u30.!(v ^ (v #>> 32) ^ (v #>> 47));
}
def data = [-1111, 0x112L, 0x00297612DE07FE1F, 0xFFFFFFFFD1D0DD6D, 0xFFFFFFFFFF1A2DDE];
def main(a: int) -> int {
	return run(data(a));
}
