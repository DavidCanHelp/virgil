//@execute 0=111; 33=111; 55=111; 254=111
class le00(longs: int) {
	var array = Array<long>.new(longs);
	def get(b: int) -> byte {
		var lx = array[b / 8];
		match (b % 8) {
			0 => return byte.view(lx >> 0);
			1 => return byte.view(lx >> 8);
			2 => return byte.view(lx >> 16);
			3 => return byte.view(lx >> 24);
			4 => return byte.view(lx >> 32);
			5 => return byte.view(lx >> 40);
			6 => return byte.view(lx >> 48);
			7 => return byte.view(lx >> 56);
		}
		return 0;
	}
	def set(b: int, v: byte) {
		var lx = array[b / 8], lv = long.view(v);
		match (b % 8) {
			0 => lx = (lx & 0xFFFFFFFFFFFFFF00) | (lv << 0);
			1 => lx = (lx & 0xFFFFFFFFFFFF00FF) | (lv << 8);
			2 => lx = (lx & 0xFFFFFFFFFF00FFFF) | (lv << 16);
			3 => lx = (lx & 0xFFFFFFFF00FFFFFF) | (lv << 24);
			4 => lx = (lx & 0xFFFFFF00FFFFFFFF) | (lv << 32);
			5 => lx = (lx & 0xFFFF00FFFFFFFFFF) | (lv << 40);
			6 => lx = (lx & 0xFF00FFFFFFFFFFFF) | (lv << 48);
			7 => lx = (lx & 0x00FFFFFFFFFFFFFF) | (lv << 56);
		}
		array[b / 8] = lx;
	}
}
var before = Array<byte>.new(16);
def main(a: int) -> int {
	var l = le00.new(2);
	for (b in [0x01, 0xF0, 0xAA, 0xFF]) {
		for (j < 16) check(l, j, byte.view(b + a));
	}
	return 111;
}
def check(l: le00, b: int, v: byte) -> int {
	for (i < before.length) before[i] = l.get(i);
	l.set(b, v);
	for (i < before.length) {
		if (i == b) { if (l.get(i) != v) return 1 / 0; }
		else { if (l.get(i) != before[i]) return 1 / 0; }
	}
	return 12;
}