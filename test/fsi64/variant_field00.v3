//@execute 0=0; 1=3; 2=3; 3=9; 4=9
type F<T> {
	case None;
	case One(x: T)       { def fold(f: (T, T) -> T) -> T { return x; } }
	case Two(x: T, y: T) { def fold(f: (T, T) -> T) -> T { return f(x, y); } }
	def fold(f: (T, T) -> T) -> T {
		var d: T;
		return d;
	}
}
var a = '\x01', b = '\x02', c = '\x03';
var x = [F<long>.None, F.One(2L), F.One(2L), F.Two(1L, 3L), F.Two(1L, 3L)];
var y = [F<byte>.None, F.One(a), F.One(a), F.Two(b, c), F.Two(b, c)];
def main(a: int) -> int {
	return int.!(x[a].fold(long.+)) + y[a].fold(byte.+);
}
