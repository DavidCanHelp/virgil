//@execute = true
var x = test();
def main() -> bool {
	return test();
}
def sub(x: long, y: long, z: long) -> int {
	if ((x - y) != z) return 1 / 0;
	return 99;
}
def test() -> bool {
	sub(0x0000000000000007, 0xFFFFFFFFFFFFFFFD, 0x000000000000000A);
	sub(0x0000000000000016, 0xFFFFFFFFFFFFFFF3, 0x0000000000000023);
	sub(0x0000000000000043, 0xFFFFFFFFFFFFFFC1, 0x0000000000000082);
	sub(0x00000000000000CA, 0xFFFFFFFFFFFFFEC7, 0x0000000000000203);
	sub(0x000000000000025F, 0xFFFFFFFFFFFFF9E5, 0x000000000000087A);
	sub(0x000000000000071E, 0xFFFFFFFFFFFFE17B, 0x00000000000025A3);
	sub(0x000000000000155B, 0xFFFFFFFFFFFF6769, 0x000000000000ADF2);
	sub(0x0000000000004012, 0xFFFFFFFFFFFD050F, 0x0000000000033B03);
	sub(0x000000000000C037, 0xFFFFFFFFFFF1194D, 0x00000000000FA6EA);
	sub(0x00000000000240A6, 0xFFFFFFFFFFB57E83, 0x00000000004CC223);
	sub(0x000000000006C1F3, 0xFFFFFFFFFE8B7891, 0x00000000017B4962);
	sub(0x00000000001445DA, 0xFFFFFFFFF8B95AD7, 0x00000000075AEB03);
	sub(0x00000000003CD18F, 0xFFFFFFFFDB9EC635, 0x00000000249E0B5A);
	sub(0x0000000000B674AE, 0xFFFFFFFF4A19DF0B, 0x00000000B69C95A3);
	sub(0x0000000002235E0B, 0xFFFFFFFC72815B39, 0x000000038FA202D2);
	sub(0x00000000066A1A22, 0xFFFFFFEE3C86C81F, 0x00000011C9E35203);
	sub(0x00000000133E4E67, 0xFFFFFFA72EA1E89D, 0x00000058E49C65CA);
	sub(0x0000000039BAEB36, 0xFFFFFE43E9298B13, 0x000001BC50916023);
	sub(0x00000000AD30C1A3, 0xFFFFF7538DCFB761, 0x000008AD1F610A42);
	sub(0x00000002079244EA, 0xFFFFD4A1C50E94E7, 0x00002B604283B003);
	sub(0x0000000616B6CEBF, 0xFFFF2728D948E885, 0x0000D8DD3D6DE63A);
	sub(0x0000001244246C3E, 0xFFFBC3CC3E6C8A9B, 0x00043C4605B7E1A3);
	sub(0x00000036CC6D44BB, 0xFFEAD2FD381EB509, 0x00152D39944E8FB2);
	sub(0x000000A46547CE32, 0xFF961EF21899892F, 0x0069E1B24CAE4503);
	sub(0x000001ED2FD76A97, 0xFDEE9ABA7AFFADED, 0x02116732B4D7BCAA);
	sub(0x000005C78F863FC6, 0xF5A905A466FE65A3, 0x0A5700232887DA23);
	sub(0x00001156AE92BF53, 0xCC4D1C3602F7FC31, 0x33B2F520AB9AC322);
	sub(0x000034040BB83DFA, 0xFD818D0E0ED7ECF7, 0x027EA6F5FCE05103);
	sub(0x00009C0C2328B9EF, 0xF387C1464A37A0D5, 0x0C78DAC5D8F1191A);
	sub(0x0001D424697A2DCE, 0xC1A6C65F7316242B, 0x3E5B0DC4F66409A3);
	sub(0x00057C6D3C6E896B, 0xC841DFDD3F6EB4D9, 0x37C39C8FFCFFD492);
	sub(0x00107547B54B9C42, 0xE9495F523D29883F, 0x16C715F578221403);
	sub(0x00315FD71FE2D4C7, 0x8E6EDC9B31CFA93D, 0x71C2833BEE132B8A);
	sub(0x00941F855FA87E56, 0xC82A4F07F90E4E33, 0x3869D07D669A3023);
	sub(0x01BC5E901EF97B03, 0xE8D38B27DD478701, 0x18E8D36841B1F402);
	sub(0x05351BB05CEC710A, 0x8C21B7C75265A307, 0x791363E90A86CE03);
	sub(0x0F9F531116C5531F, 0xBCA896E49BFC2F25, 0x52F6BC2C7AC923FA);
	sub(0x2EDDF933444FF95E, 0xAF4AF2770BECEBBB, 0x7F9306BC38630DA3);
	sub(0x8C99EB99CCEFEC1B, 0x6C76BC533BA09AA9, 0x20232F46914F5172);
	sub(0xA5CDC2CD66CFC452, 0x1E51ADA02A23054F, 0x877C152D3CACBF03);
	return true;
}
