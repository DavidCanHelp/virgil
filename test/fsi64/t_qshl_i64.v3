//@execute 1=7; 2=7; 3=7; 4=7; 5=7; 6=7; 7=7; 8=7; 9=7; 10=7; 11=7; 12=7; 13=7; 14=7; 15=7; 16=7; 17=7; 18=7; 19=7; 20=7; 21=7; 22=7; 23=7; 24=7; 25=7; 26=7; 27=7; 28=7; 29=7; 30=7; 31=7; 32=7; 33=7; 34=7; 35=7; 36=7; 37=7; 38=7; 39=7; 40=7; 41=7; 42=7; 43=7; 44=7; 45=7; 46=7; 47=7; 48=7; 49=7; 50=7; 51=7; 52=7; 53=7; 54=7; 55=7; 56=7; 57=7; 58=7; 59=7; 60=7; 61=7; 62=7; 63=7; 64=7; 65=7; 66=7
def vals: Array<i64> = [
	0b0111000110010000011000101011011011101110110101001010001011000001,
	0b1110001100100000110001010110110111011101101010010100010110000010,
	0b1100011001000001100010101101101110111011010100101000101100000100,
	0b1000110010000011000101011011011101110110101001010001011000001000,
	0b0001100100000110001010110110111011101101010010100010110000010000,
	0b0011001000001100010101101101110111011010100101000101100000100000,
	0b0110010000011000101011011011101110110101001010001011000001000000,
	0b1100100000110001010110110111011101101010010100010110000010000000,
	0b1001000001100010101101101110111011010100101000101100000100000000,
	0b0010000011000101011011011101110110101001010001011000001000000000,
	0b0100000110001010110110111011101101010010100010110000010000000000,
	0b1000001100010101101101110111011010100101000101100000100000000000,
	0b0000011000101011011011101110110101001010001011000001000000000000,
	0b0000110001010110110111011101101010010100010110000010000000000000,
	0b0001100010101101101110111011010100101000101100000100000000000000,
	0b0011000101011011011101110110101001010001011000001000000000000000,
	0b0110001010110110111011101101010010100010110000010000000000000000,
	0b1100010101101101110111011010100101000101100000100000000000000000,
	0b1000101011011011101110110101001010001011000001000000000000000000,
	0b0001010110110111011101101010010100010110000010000000000000000000,
	0b0010101101101110111011010100101000101100000100000000000000000000,
	0b0101011011011101110110101001010001011000001000000000000000000000,
	0b1010110110111011101101010010100010110000010000000000000000000000,
	0b0101101101110111011010100101000101100000100000000000000000000000,
	0b1011011011101110110101001010001011000001000000000000000000000000,
	0b0110110111011101101010010100010110000010000000000000000000000000,
	0b1101101110111011010100101000101100000100000000000000000000000000,
	0b1011011101110110101001010001011000001000000000000000000000000000,
	0b0110111011101101010010100010110000010000000000000000000000000000,
	0b1101110111011010100101000101100000100000000000000000000000000000,
	0b1011101110110101001010001011000001000000000000000000000000000000,
	0b0111011101101010010100010110000010000000000000000000000000000000,
	0b1110111011010100101000101100000100000000000000000000000000000000,
	0b1101110110101001010001011000001000000000000000000000000000000000,
	0b1011101101010010100010110000010000000000000000000000000000000000,
	0b0111011010100101000101100000100000000000000000000000000000000000,
	0b1110110101001010001011000001000000000000000000000000000000000000,
	0b1101101010010100010110000010000000000000000000000000000000000000,
	0b1011010100101000101100000100000000000000000000000000000000000000,
	0b0110101001010001011000001000000000000000000000000000000000000000,
	0b1101010010100010110000010000000000000000000000000000000000000000,
	0b1010100101000101100000100000000000000000000000000000000000000000,
	0b0101001010001011000001000000000000000000000000000000000000000000,
	0b1010010100010110000010000000000000000000000000000000000000000000,
	0b0100101000101100000100000000000000000000000000000000000000000000,
	0b1001010001011000001000000000000000000000000000000000000000000000,
	0b0010100010110000010000000000000000000000000000000000000000000000,
	0b0101000101100000100000000000000000000000000000000000000000000000,
	0b1010001011000001000000000000000000000000000000000000000000000000,
	0b0100010110000010000000000000000000000000000000000000000000000000,
	0b1000101100000100000000000000000000000000000000000000000000000000,
	0b0001011000001000000000000000000000000000000000000000000000000000,
	0b0010110000010000000000000000000000000000000000000000000000000000,
	0b0101100000100000000000000000000000000000000000000000000000000000,
	0b1011000001000000000000000000000000000000000000000000000000000000,
	0b0110000010000000000000000000000000000000000000000000000000000000,
	0b1100000100000000000000000000000000000000000000000000000000000000,
	0b1000001000000000000000000000000000000000000000000000000000000000,
	0b0000010000000000000000000000000000000000000000000000000000000000,
	0b0000100000000000000000000000000000000000000000000000000000000000,
	0b0001000000000000000000000000000000000000000000000000000000000000,
	0b0010000000000000000000000000000000000000000000000000000000000000,
	0b0100000000000000000000000000000000000000000000000000000000000000,
	0b1000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000
];
def main(a: byte) -> int {
	for (x = a; x < vals.length; x = x + a) {
		var n = vals[x - a] << a;
		if (n != vals[x]) return -7;
	}
	return 7;
}
