//@execute = 33
def a = doOp();
def b = doFolded();
def main() -> int {
	def c = doOp();
	def d = doFolded();
	for (i = 0; i < a.length; i++) if (a[i] != b[i] || a[i] != c[i] || a[i] != d[i]) return -20 - i;
	return 33;
}
def op(x: long, y: long) -> long {
	return long.!(x) + long.!(y);
}
def doOp() -> Array<long> {
	return  [
		op(0x00000000L, 0x00000000L),
		op(0x00000000L, 0x00000001L),
		op(0x00000000L, 0x80000000L),
		op(0x00000000L, 0x7FFFFFFFL),
		op(0x00000000L, 0x40000000L),
		op(0x00000000L, 0x3FFFFFFFL),
		op(0x00000000L, 0xC0000000L),
		op(0x00000000L, 0xCFFFFFFFL), 
		op(0x00000001L, 0x00000000L),
		op(0x00000001L, 0x00000001L),
		op(0x00000001L, 0x80000000L),
		op(0x00000001L, 0x7FFFFFFFL),
		op(0x00000001L, 0x40000000L),
		op(0x00000001L, 0x3FFFFFFFL),
		op(0x00000001L, 0xC0000000L),
		op(0x00000001L, 0xCFFFFFFFL), 
		op(0x80000000L, 0x00000000L),
		op(0x80000000L, 0x00000001L),
		op(0x80000000L, 0x80000000L),
		op(0x80000000L, 0x7FFFFFFFL),
		op(0x80000000L, 0x40000000L),
		op(0x80000000L, 0x3FFFFFFFL),
		op(0x80000000L, 0xC0000000L),
		op(0x80000000L, 0xCFFFFFFFL), 
		op(0x7FFFFFFFL, 0x00000000L),
		op(0x7FFFFFFFL, 0x00000001L),
		op(0x7FFFFFFFL, 0x80000000L),
		op(0x7FFFFFFFL, 0x7FFFFFFFL),
		op(0x7FFFFFFFL, 0x40000000L),
		op(0x7FFFFFFFL, 0x3FFFFFFFL),
		op(0x7FFFFFFFL, 0xC0000000L),
		op(0x7FFFFFFFL, 0xCFFFFFFFL), 
		op(0x40000000L, 0x00000000L),
		op(0x40000000L, 0x00000001L),
		op(0x40000000L, 0x80000000L),
		op(0x40000000L, 0x7FFFFFFFL),
		op(0x40000000L, 0x40000000L),
		op(0x40000000L, 0x3FFFFFFFL),
		op(0x40000000L, 0xC0000000L),
		op(0x40000000L, 0xCFFFFFFFL), 
		op(0x3FFFFFFFL, 0x00000000L),
		op(0x3FFFFFFFL, 0x00000001L),
		op(0x3FFFFFFFL, 0x80000000L),
		op(0x3FFFFFFFL, 0x7FFFFFFFL),
		op(0x3FFFFFFFL, 0x40000000L),
		op(0x3FFFFFFFL, 0x3FFFFFFFL),
		op(0x3FFFFFFFL, 0xC0000000L),
		op(0x3FFFFFFFL, 0xCFFFFFFFL), 
		op(0xC0000000L, 0x00000000L),
		op(0xC0000000L, 0x00000001L),
		op(0xC0000000L, 0x80000000L),
		op(0xC0000000L, 0x7FFFFFFFL),
		op(0xC0000000L, 0x40000000L),
		op(0xC0000000L, 0x3FFFFFFFL),
		op(0xC0000000L, 0xC0000000L),
		op(0xC0000000L, 0xCFFFFFFFL), 
		op(0xCFFFFFFFL, 0x00000000L),
		op(0xCFFFFFFFL, 0x00000001L),
		op(0xCFFFFFFFL, 0x80000000L),
		op(0xCFFFFFFFL, 0x7FFFFFFFL),
		op(0xCFFFFFFFL, 0x40000000L),
		op(0xCFFFFFFFL, 0x3FFFFFFFL),
		op(0xCFFFFFFFL, 0xC0000000L),
		op(0xCFFFFFFFL, 0xCFFFFFFFL)
	];
}
def doFolded() -> Array<long> {
	return  [
		0x00000000L + 0x00000000L,
		0x00000000L + 0x00000001L,
		0x00000000L + 0x80000000L,
		0x00000000L + 0x7FFFFFFFL,
		0x00000000L + 0x40000000L,
		0x00000000L + 0x3FFFFFFFL,
		0x00000000L + 0xC0000000L,
		0x00000000L + 0xCFFFFFFFL, 
		0x00000001L + 0x00000000L,
		0x00000001L + 0x00000001L,
		0x00000001L + 0x80000000L,
		0x00000001L + 0x7FFFFFFFL,
		0x00000001L + 0x40000000L,
		0x00000001L + 0x3FFFFFFFL,
		0x00000001L + 0xC0000000L,
		0x00000001L + 0xCFFFFFFFL, 
		0x80000000L + 0x00000000L,
		0x80000000L + 0x00000001L,
		0x80000000L + 0x80000000L,
		0x80000000L + 0x7FFFFFFFL,
		0x80000000L + 0x40000000L,
		0x80000000L + 0x3FFFFFFFL,
		0x80000000L + 0xC0000000L,
		0x80000000L + 0xCFFFFFFFL, 
		0x7FFFFFFFL + 0x00000000L,
		0x7FFFFFFFL + 0x00000001L,
		0x7FFFFFFFL + 0x80000000L,
		0x7FFFFFFFL + 0x7FFFFFFFL,
		0x7FFFFFFFL + 0x40000000L,
		0x7FFFFFFFL + 0x3FFFFFFFL,
		0x7FFFFFFFL + 0xC0000000L,
		0x7FFFFFFFL + 0xCFFFFFFFL, 
		0x40000000L + 0x00000000L,
		0x40000000L + 0x00000001L,
		0x40000000L + 0x80000000L,
		0x40000000L + 0x7FFFFFFFL,
		0x40000000L + 0x40000000L,
		0x40000000L + 0x3FFFFFFFL,
		0x40000000L + 0xC0000000L,
		0x40000000L + 0xCFFFFFFFL, 
		0x3FFFFFFFL + 0x00000000L,
		0x3FFFFFFFL + 0x00000001L,
		0x3FFFFFFFL + 0x80000000L,
		0x3FFFFFFFL + 0x7FFFFFFFL,
		0x3FFFFFFFL + 0x40000000L,
		0x3FFFFFFFL + 0x3FFFFFFFL,
		0x3FFFFFFFL + 0xC0000000L,
		0x3FFFFFFFL + 0xCFFFFFFFL, 
		0xC0000000L + 0x00000000L,
		0xC0000000L + 0x00000001L,
		0xC0000000L + 0x80000000L,
		0xC0000000L + 0x7FFFFFFFL,
		0xC0000000L + 0x40000000L,
		0xC0000000L + 0x3FFFFFFFL,
		0xC0000000L + 0xC0000000L,
		0xC0000000L + 0xCFFFFFFFL, 
		0xCFFFFFFFL + 0x00000000L,
		0xCFFFFFFFL + 0x00000001L,
		0xCFFFFFFFL + 0x80000000L,
		0xCFFFFFFFL + 0x7FFFFFFFL,
		0xCFFFFFFFL + 0x40000000L,
		0xCFFFFFFFL + 0x3FFFFFFFL,
		0xCFFFFFFFL + 0xC0000000L,
		0xCFFFFFFFL + 0xCFFFFFFFL
	];
}
