//@execute = true
def main() -> bool {
	return test();
}
def and(x: long, y: long, z: long) -> int {
	if ((x & y) != z) return 1 / 0;
	return 99;
}
def test() -> bool {
	and(0xFFFFFFFFFFFFFFFD, 0x0000000000000007, 0x0000000000000005);
	and(0xFFFFFFFFFFFFFFF9, 0x0000000000000032, 0x0000000000000030);
	and(0xFFFFFFFFFFFFFFED, 0x000000000000015F, 0x000000000000014D);
	and(0xFFFFFFFFFFFFFFC9, 0x000000000000099A, 0x0000000000000988);
	and(0xFFFFFFFFFFFFFF5D, 0x0000000000004337, 0x0000000000004315);
	and(0xFFFFFFFFFFFFFE19, 0x000000000001D682, 0x000000000001D600);
	and(0xFFFFFFFFFFFFFA4D, 0x00000000000CDD8F, 0x00000000000CD80D);
	and(0xFFFFFFFFFFFFEEE9, 0x00000000005A0EEA, 0x00000000005A0EE8);
	and(0xFFFFFFFFFFFFCCBD, 0x0000000002766867, 0x0000000002764825);
	and(0xFFFFFFFFFFFF6639, 0x00000000113CDAD2, 0x00000000113C4210);
	and(0xFFFFFFFFFFFE32AD, 0x0000000078A9FBBF, 0x0000000078A832AD);
	and(0xFFFFFFFFFFFA9809, 0x000000034CA5E23A, 0x000000034CA08008);
	and(0xFFFFFFFFFFEFC81D, 0x0000001718892F97, 0x0000001718890815);
	and(0xFFFFFFFFFFCF5859, 0x000000A1ABC04D22, 0x000000A1ABC04800);
	and(0xFFFFFFFFFF6E090D, 0x0000046BB2421BEF, 0x0000046BB242090D);
	and(0xFFFFFFFFFE4A1B29, 0x00001EF1DFCEC38A, 0x00001EF1DE4A0308);
	and(0xFFFFFFFFFADE517D, 0x0000D89D1EA758C7, 0x0000D89D1A865045);
	and(0xFFFFFFFFF09AF479, 0x0005EC4BD6936D72, 0x0005EC4BD0926470);
	and(0xFFFFFFFFD1D0DD6D, 0x00297612DE07FE1F, 0x00297612D000DC0D);
	and(0xFFFFFFFF75729849, 0x01223A841237F2DA, 0x01223A8410329048);
	and(0xFFFFFFFE6057C8DD, 0x07EF999C7F87A3F7, 0x07EF999C600780D5);
	and(0xFFFFFFFB21075A99, 0x378D33477CB57BC2, 0x378D334320055A80);
	and(0xFFFFFFF163160FCD, 0x84DC66F468F6624F, 0x84DC66F06016024D);
	and(0xFFFFFFD429422F69, 0xA206D0AEDEBCB02A, 0xA206D08408002028);
	and(0xFFFFFF7C7BC68E3D, 0x6E2FB4C81728D127, 0x6E2FB44813008025);
	and(0xFFFFFE757353AAB9, 0x034DF178A21DB812, 0x034DF0702211A810);
	and(0xFFFFFB6059FB002D, 0x17219A4C6ED0087F, 0x17219A4048D0002D);
	and(0xFFFFF2210DF10089, 0xA1EB381707B03B7A, 0xA1EB300105B00008);
	and(0xFFFFD66329D3019D, 0x6D6E88A135D1A057, 0x6D6E802121D10015);
	and(0xFFFF83297D7904D9, 0xFE05BC6878BB6262, 0xFE05802878390040);
	and(0xFFFE897C786B0E8D, 0xF22826DB4D1FB0AF, 0xF2280058480B008D);
	and(0xFFFB9C7569412BA9, 0x9F190FFF1BDDD4CA, 0x9F190C7509410088);
	and(0xFFF2D5603BC382FD, 0x59AF6FF9C310D187, 0x59A2456003008085);
	and(0xFFD88020B34A88F9, 0x73CC0FD45575BAB2, 0x73C80000114088B0);
	and(0xFF89806219DF9AED, 0x2A946ECE56381ADF, 0x2A80004210181ACD);
	and(0xFE9C81264D9ED0C9, 0x2A0F07A45B88BC1A, 0x2A0C012449889008);
	and(0xFBD58372E8DC725D, 0x2669357E80BD24B7, 0x22410172809C2015);
	and(0xF3808A58BA955719, 0x0CE07675852C0102, 0x0080025080040100);
	and(0xDA819F0A2FC0054D, 0x5A233D36A434070F, 0x5A011D022400050D);
	and(0x8F84DD1E8F400FE9, 0x76F6AC7E7D6C316A, 0x06848C1E0D400168);
	return true;
}
