//@execute 1=3; 2=3; 3=3; 4=3; 5=3; 6=3; 7=3; 8=3; 9=3; 10=3; 11=3; 12=3; 13=3; 14=3; 15=3; 16=3; 17=3; 18=3; 19=3; 20=3; 21=3; 22=3; 23=3; 24=3; 25=3; 26=3; 27=3; 28=3; 29=3; 30=3; 31=3; 32=3; 33=3; 34=3; 35=3; 36=3; 37=3; 38=3; 39=3; 40=3; 41=3; 42=3; 43=3; 44=3; 45=3; 46=3; 47=3; 48=3; 49=3; 50=3; 51=3; 52=3; 53=3; 54=3; 55=3; 56=3; 57=3; 58=3; 59=3; 60=3; 61=3; 62=3; 63=3; 64=3; 65=3; 66=3
def vals: Array<i64> = [
	0b1010110110010111110110110111001001010111001001100010000101001011,
	0b0101011011001011111011011011100100101011100100110001000010100101,
	0b0010101101100101111101101101110010010101110010011000100001010010,
	0b0001010110110010111110110110111001001010111001001100010000101001,
	0b0000101011011001011111011011011100100101011100100110001000010100,
	0b0000010101101100101111101101101110010010101110010011000100001010,
	0b0000001010110110010111110110110111001001010111001001100010000101,
	0b0000000101011011001011111011011011100100101011100100110001000010,
	0b0000000010101101100101111101101101110010010101110010011000100001,
	0b0000000001010110110010111110110110111001001010111001001100010000,
	0b0000000000101011011001011111011011011100100101011100100110001000,
	0b0000000000010101101100101111101101101110010010101110010011000100,
	0b0000000000001010110110010111110110110111001001010111001001100010,
	0b0000000000000101011011001011111011011011100100101011100100110001,
	0b0000000000000010101101100101111101101101110010010101110010011000,
	0b0000000000000001010110110010111110110110111001001010111001001100,
	0b0000000000000000101011011001011111011011011100100101011100100110,
	0b0000000000000000010101101100101111101101101110010010101110010011,
	0b0000000000000000001010110110010111110110110111001001010111001001,
	0b0000000000000000000101011011001011111011011011100100101011100100,
	0b0000000000000000000010101101100101111101101101110010010101110010,
	0b0000000000000000000001010110110010111110110110111001001010111001,
	0b0000000000000000000000101011011001011111011011011100100101011100,
	0b0000000000000000000000010101101100101111101101101110010010101110,
	0b0000000000000000000000001010110110010111110110110111001001010111,
	0b0000000000000000000000000101011011001011111011011011100100101011,
	0b0000000000000000000000000010101101100101111101101101110010010101,
	0b0000000000000000000000000001010110110010111110110110111001001010,
	0b0000000000000000000000000000101011011001011111011011011100100101,
	0b0000000000000000000000000000010101101100101111101101101110010010,
	0b0000000000000000000000000000001010110110010111110110110111001001,
	0b0000000000000000000000000000000101011011001011111011011011100100,
	0b0000000000000000000000000000000010101101100101111101101101110010,
	0b0000000000000000000000000000000001010110110010111110110110111001,
	0b0000000000000000000000000000000000101011011001011111011011011100,
	0b0000000000000000000000000000000000010101101100101111101101101110,
	0b0000000000000000000000000000000000001010110110010111110110110111,
	0b0000000000000000000000000000000000000101011011001011111011011011,
	0b0000000000000000000000000000000000000010101101100101111101101101,
	0b0000000000000000000000000000000000000001010110110010111110110110,
	0b0000000000000000000000000000000000000000101011011001011111011011,
	0b0000000000000000000000000000000000000000010101101100101111101101,
	0b0000000000000000000000000000000000000000001010110110010111110110,
	0b0000000000000000000000000000000000000000000101011011001011111011,
	0b0000000000000000000000000000000000000000000010101101100101111101,
	0b0000000000000000000000000000000000000000000001010110110010111110,
	0b0000000000000000000000000000000000000000000000101011011001011111,
	0b0000000000000000000000000000000000000000000000010101101100101111,
	0b0000000000000000000000000000000000000000000000001010110110010111,
	0b0000000000000000000000000000000000000000000000000101011011001011,
	0b0000000000000000000000000000000000000000000000000010101101100101,
	0b0000000000000000000000000000000000000000000000000001010110110010,
	0b0000000000000000000000000000000000000000000000000000101011011001,
	0b0000000000000000000000000000000000000000000000000000010101101100,
	0b0000000000000000000000000000000000000000000000000000001010110110,
	0b0000000000000000000000000000000000000000000000000000000101011011,
	0b0000000000000000000000000000000000000000000000000000000010101101,
	0b0000000000000000000000000000000000000000000000000000000001010110,
	0b0000000000000000000000000000000000000000000000000000000000101011,
	0b0000000000000000000000000000000000000000000000000000000000010101,
	0b0000000000000000000000000000000000000000000000000000000000001010,
	0b0000000000000000000000000000000000000000000000000000000000000101,
	0b0000000000000000000000000000000000000000000000000000000000000010,
	0b0000000000000000000000000000000000000000000000000000000000000001,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000,
	0b0000000000000000000000000000000000000000000000000000000000000000
];
def main(a: byte) -> int {
	for (x = a; x < vals.length; x = x + a) {
		var n = vals(x - a) >>> a;
		if (n != vals(x)) return -3;
	}
	return 3;
}
