//@execute 0=-11; 1=-10; 4=-7
type Tree<T> {
	case Leaf(val: T);
	case Node(left: Tree<T>, right: Tree<T>);
}
def leftest<T>(tree: Tree<T>) -> T {
	match (tree) {
		Leaf(v): return v;
		Node(left, right): return leftest(left);
	}
}
def make<T>(depth: int, val: T) -> Tree<T> {
	if (depth <= 0) return Tree.Leaf(val);
	return Tree.Node(make(depth - 1, val), make(depth - 1, val));
}
def main(a: int) -> int {
	return int.!(leftest(make(a, long.!(a - 11))));
}
