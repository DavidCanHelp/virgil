//@execute 1=11; 2=11; 3=11; 4=11; 5=11; 6=11; 7=11; 8=11; 9=11; 10=11; 11=11; 12=11; 13=11; 14=11; 15=11; 16=11; 17=11; 18=11; 19=11; 20=11; 21=11; 22=11; 23=11; 24=11; 25=11; 26=11; 27=11; 28=11; 29=11; 30=11; 31=11; 32=11; 33=11; 34=11; 35=11; 36=11; 37=11; 38=11; 39=11; 40=11; 41=11; 42=11; 43=11; 44=11; 45=11; 46=11; 47=11; 48=11; 49=11
def vals: Array<i47> = [
	0b10011011011000010100100000100011010001011000010,
	0b01001101101100001010010000010001101000101100001,
	0b00100110110110000101001000001000110100010110000,
	0b00010011011011000010100100000100011010001011000,
	0b00001001101101100001010010000010001101000101100,
	0b00000100110110110000101001000001000110100010110,
	0b00000010011011011000010100100000100011010001011,
	0b00000001001101101100001010010000010001101000101,
	0b00000000100110110110000101001000001000110100010,
	0b00000000010011011011000010100100000100011010001,
	0b00000000001001101101100001010010000010001101000,
	0b00000000000100110110110000101001000001000110100,
	0b00000000000010011011011000010100100000100011010,
	0b00000000000001001101101100001010010000010001101,
	0b00000000000000100110110110000101001000001000110,
	0b00000000000000010011011011000010100100000100011,
	0b00000000000000001001101101100001010010000010001,
	0b00000000000000000100110110110000101001000001000,
	0b00000000000000000010011011011000010100100000100,
	0b00000000000000000001001101101100001010010000010,
	0b00000000000000000000100110110110000101001000001,
	0b00000000000000000000010011011011000010100100000,
	0b00000000000000000000001001101101100001010010000,
	0b00000000000000000000000100110110110000101001000,
	0b00000000000000000000000010011011011000010100100,
	0b00000000000000000000000001001101101100001010010,
	0b00000000000000000000000000100110110110000101001,
	0b00000000000000000000000000010011011011000010100,
	0b00000000000000000000000000001001101101100001010,
	0b00000000000000000000000000000100110110110000101,
	0b00000000000000000000000000000010011011011000010,
	0b00000000000000000000000000000001001101101100001,
	0b00000000000000000000000000000000100110110110000,
	0b00000000000000000000000000000000010011011011000,
	0b00000000000000000000000000000000001001101101100,
	0b00000000000000000000000000000000000100110110110,
	0b00000000000000000000000000000000000010011011011,
	0b00000000000000000000000000000000000001001101101,
	0b00000000000000000000000000000000000000100110110,
	0b00000000000000000000000000000000000000010011011,
	0b00000000000000000000000000000000000000001001101,
	0b00000000000000000000000000000000000000000100110,
	0b00000000000000000000000000000000000000000010011,
	0b00000000000000000000000000000000000000000001001,
	0b00000000000000000000000000000000000000000000100,
	0b00000000000000000000000000000000000000000000010,
	0b00000000000000000000000000000000000000000000001,
	0b00000000000000000000000000000000000000000000000,
	0b00000000000000000000000000000000000000000000000,
	0b00000000000000000000000000000000000000000000000,
	0b00000000000000000000000000000000000000000000000,
	0b00000000000000000000000000000000000000000000000
];
def main(a: byte) -> int {
	for (x = a; x < vals.length; x = x + a) {
		var n = vals[x - a] >>> a;
		if (n != vals[x]) return -11;
	}
	return 11;
}
