//@execute = 0
def check<T>(x: T, y: T) -> int {
	if (x != y) return 1 / 0;
	return 1;
}
class Holder<A, B, C> {
	var a: A;
	var b: B;
	var c: C;
	def assign(na: u64, nb: u64, nc: u64) {
		a = A.!(na);
		b = B.!(nb);
		c = C.!(nc);
		assert(na, nb, nc);
	}
	def assert(na: u64, nb: u64, nc: u64) {
		check(a, A.!(na));
		check(b, B.!(nb));
		check(c, C.!(nc));
	}
}
def data = [
	0x0000000000000007ul,
	0x0000000000000976ul,
	0x000000000001D682ul,
	0x00000000086D3CE6ul,
	0x0000001718892F97ul,
	0x0000D89D1EA758C7ul,
	0x034DF178A21DB812ul,
	0x2669357E80BD24B7ul,
	0x5A233D36A434070Ful,
	0x9F190FFF1BDDD4CAul,
	0xF3808A58BA955719ul,
	0xFFD88020B34A88F9ul,
	0xFFFFD66329D3019Dul,
	0xFFFFFFD429422F69ul,
	0xFFFFFFFF75729849ul,
	0xFFFFFFFFFADE517Dul,
	0xFFFFFFFFFF1A2DDEul,
	0xFFFFFFFFFFF83F2Dul,
	0xFFFFFFFFFFFF6639ul,
	0xFFFFFFFFFFFFFDBFul,
	0xFFFFFFFFFFFFFFF9ul
];
def G = [0ul, 0xFFFFFFFFFFFFFFFFul];
def run<A, B, C>() {
	var h = Holder<A, B, C>.new();
	for (x in data) {
		for (g in G) {
			h.assign(g, g, g);

			h.a = A.!(x);
			h.assert(x, g, g);
			h.a = A.!(g);
			h.assert(g, g, g);

			h.b = B.!(x);
			h.assert(g, x, g);
			h.b = B.!(g);
			h.assert(g, g, g);

			h.c = C.!(x);
			h.assert(g, g, x);
			h.c = C.!(g);
			h.assert(g, g, g);
		}
	}
}
def t2<A, B>() {
	run<A, B, u8>();
	run<A, B, u16>();
	run<A, B, u32>();
	run<A, B, u64>();
}
def t1<A>() {
	t2<A, u8>();
	t2<A, u16>();
	t2<A, u32>();
	t2<A, u64>();
}
def t0() {
	t1<u8>();
}
def main() -> int {
	t0();
	return 0;
}