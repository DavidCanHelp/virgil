// constants for System calls on Darwin
def SYS_exit = 1;
def SYS_fork = 2;
def SYS_read = 3;
def SYS_write = 4;
def SYS_open = 5;
def SYS_close = 6;
def SYS_wait4 = 7;
def SYS_chmod = 15;
def SYS_getpid = 20;
def SYS_pipe = 42;
def SYS_execve = 59;
def SYS_vfork = 66;
def SYS_dup2 = 90;
def SYS_fsync = 95;
def CF_FLAG = 1;

// Implementation of OS component for Darwin using direct system calls
component OS {
	def STDIN = 0;
	def STDOUT = 1;
	def STDERR = 2;
	def dummyArg = "a\x00";
	def pathbuf = Array<byte>.new(256);
	def argsbuf = Array<Pointer>.new(128);
	def waitbuf = Array<int>.new(16);

	// open a file for reading and return the file descriptor
	def open(path: string) -> int {
		var t = Darwin.syscall(SYS_open, (ztPath(path), 0, 0));
		if ((t.2 & CF_FLAG) != 0) return 0 - t.0;
		return t.0;
	}
	// close the given file descriptor
	def close(fd: int) {
		Darwin.syscall(SYS_close, fd);
	}
	// read up to "len" bytes from the file descriptor
	def read(fd: int, buf: Array<byte>, len: int) -> int {
		var io = Pointer.atContents(buf);
		var t = Darwin.syscall(SYS_read, (fd, io, len));
		if ((t.2 & CF_FLAG) != 0) return -1;
		return t.0;
	}
	// copy the file descriptor into the given file descriptor
	def dup2(fda: int, fdb: int) -> int {
		Darwin.syscall(SYS_dup2, (fda, fdb));
		return 0; // TODO: proper return code
	}
	// create a pipe
	def pipe(buf: Array<int>) -> int {
		var t = Darwin.syscall(SYS_pipe, Pointer.atContents(buf));
		if ((t.2 & CF_FLAG) != 0) return 0 - t.0;
		buf(0) = t.0;
		buf(1) = t.1;
		return 0;
	}
	def wait(pid: int) -> int {
		Darwin.syscall(SYS_wait4, (pid, Pointer.atContents(waitbuf), 0, Pointer.NULL));
		return waitbuf(0); // TODO: proper return code
	}
	def chmod(path: string, mode: int) -> int {
		var z = ztPath(path);
		var t = Darwin.syscall(SYS_chmod, (z, mode));
		if ((t.2 & CF_FLAG) != 0) return -1;
		return if(t.1 == 1, t.0, 0);
	}
	def exec(path: string, args: Array<string>) -> int;
	// execute the given path with N dummy arguments
	def execN(path: string, numargs: int) -> int {
		var z = ztPath(path);
		argsbuf(0) = z;
		for (i = 0; i < numargs; i++) {
			argsbuf(i + 1) = Pointer.atContents(dummyArg);
		}
		argsbuf(numargs + 1) = Pointer.NULL;
		var a = Pointer.atContents(argsbuf);
		var t = Darwin.syscall(SYS_execve, (z, a, Pointer.NULL));
		if ((t.2 & CF_FLAG) != 0) return 0 - t.0;
		return t.0;
	}
	def fork() -> int {
		var t = Darwin.syscall(SYS_fork, 0);
		if ((t.2 & CF_FLAG) != 0) return -1;
		return if(t.1 == 0, t.0, 0);
	}
	def exit(code: int) {
		Darwin.syscall(SYS_exit, code);
	}
	def getpid() -> int {
		return Darwin.syscall(SYS_getpid, ()).0;
	}

	// support for timeout thread
	def async(f: void -> void);
	def kill(pid: int, signo: int) -> int;
	def sleep(seconds: int);

	def isSignaled(waitstatus: int) -> bool;
	def isExited(waitstatus: int) -> bool;
	def isStopped(waitstatus: int) -> bool;
	def termSignal(waitstatus: int) -> int;

	def ztPath(path: string) -> Pointer {
		var max = if (path.length < pathbuf.length, path.length, pathbuf.length - 1), i = 0;
		for (j = 0; i < max; i++) {
			var c = path(i);
			pathbuf(i) = c;
			if (c == '\x00') return Pointer.atContents(pathbuf);
		}
		pathbuf(i) = '\x00';
		return Pointer.atContents(pathbuf);
	}
}
// Provides basic functionality printing to the console
// TODO: factor into an OS-independent module
component Terminal {
	def iobuf = Array<byte>.new(16);
	def puti(i: int) -> Terminal {
		if (i == 0) return putc('0');
		var negative = true;
		if (i > 0) {
			negative = false;
			i = 0 - i;
		}
		var pos = 11;
		while (i != 0) {
			var digit = byte.!('0' - i % 10);
			iobuf(--pos) = digit;
			i = i / 10;
		}
		if (negative) iobuf(--pos) = '-';
		Darwin.syscall(SYS_write, (1, Pointer.atContents(iobuf).add(pos), 11 - pos));
		return this;
	}
	def puts(x: string) -> Terminal {
		Darwin.syscall(SYS_write, (1, Pointer.atContents(x), x.length));
		return this;
	}
	def putc(x: byte) -> Terminal {
		iobuf(0) = x;
		Darwin.syscall(SYS_write, (1, Pointer.atContents(iobuf), 1));
		return this;
	}
	def putr(x: string, s: int, end: int) -> Terminal {
		var len = end - s;
		Darwin.syscall(SYS_write, (1, Pointer.atContents(x) + s, len));
		return this;
	}
	def ln() -> Terminal {
		putc('\n');
		return this;
	}
}
