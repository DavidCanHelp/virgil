def main(args: Array<string>) -> int {
	if (args.length < 1) {
		System.puts("Usage: <output-dir> [files]\n");
		return 1;
	}
	var outdir = args[0];
	for (i = 1; i < args.length; i++) {
		var r = TextReader.new(args[i], System.fileLoad(args[i]));
		if (r.data == null) {
			var buf = StringBuilder.new().put1("File not found: %s", r.fileName).ln();
			System.puts(buf.toString());
			return 2;
		}
		var p = Parser.new(r).parse();
		if (!r.ok) {
			var buf = StringBuilder.new().put3("%s @ %d:%d: ", r.fileName, r.error_line, r.error_column).puts(r.error_msg).ln();
			System.puts(buf.toString());
			return 3;
		}
		var buf = StringBuilder.new();
		for (j < p.runs.length) {
			buf.reset().put1("%s (", p.r.fileName);
			var run = p.runs[j];
			for (k < run.args.length) {
				if (k > 0) buf.sp();
				buf.puts(run.args[k]);
			}
			buf.put1(") = %d ", run.exit);
			if (run.stdout.0 != null) {
				buf.put1("stdout=%s ", run.stdout.1.image);
			}
			if (run.stderr.0 != null) {
				buf.put1("stderr=%s ", run.stderr.1.image);
			}
			System.puts(buf.ln().toString());
		}
	}
	return 0;
}
class Run(args: Array<string>, exit: int, stdout: (string, Token), stderr: (string, Token)) {
}
class Parser(r: TextReader) {
	var x = r.skipWs = TextReader.skipSpacesAndTabs;
	var args = Vector<string>.new();
	var runs = Vector<Run>.new();

	def parse() -> this {
		while (true) {
			var run = parseRun();
			if (run == null) return;
			runs.put(run);
		}
	}
	def parseRun() -> Run {
		if (r.optN("//@io") < 0) return null;
		args.resize(0);
		var exit: int;
		var stdout: string, stdoutToken: Token;
		var stderr: string, stderrToken: Token;
		
		while (r.pos < r.data.length) {
			match (r.char) {
				'\"', '=', '\n' => break;
				_ => args.put(parseArg());
			}
		}
		if (r.opt1('=') >= 0) {
			var p = Ints.parseDecimal(r.data, r.pos);
			if (p.0 < 0) { r.fail("invalid int literal"); return null; }
			r.advance(p.0);
			exit = p.1;
		}
		if (r.char == '\"') {
			var p = Strings.parseLiteral(r.data, r.pos);
			if (p.0 <= 0) { r.fail("invalid string literal"); return null; }
			stdoutToken = r.read_token(p.0);
			stdout = p.1;
		}
		if (r.char == '\"') {
			var p = Strings.parseLiteral(r.data, r.pos);
			if (p.0 <= 0) { r.fail("invalid string literal"); return null; }
			stderrToken = r.read_token(p.0);
			stderr = p.1;
		}
		if (r.char == '\n') r.advance1();
		return Run.new(args.extract(), exit, (stdout, stdoutToken), (stderr, stderrToken));
	}
	def parseArg() -> string {
		var pos = r.pos;
		while (pos < r.data.length) {
			match (r.data[pos]) {
				0, ' ', '\t', '\n' => break;
				_ => pos++;
			}
		}
		return r.read_token(pos - r.pos).image;
	}
}
