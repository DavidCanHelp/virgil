//@execute = 111
var failures = 111;
def main() -> int {
	failures = 111;

	test(u1.!<int>);
	test(u2.!<int>);
	test(u3.!<int>);
	test(u4.!<int>);
	test(u5.!<int>);
	test(u6.!<int>);
	test(u7.!<int>);
	test(u8.!<int>);
	test(u9.!<int>);

	test(u10.!<int>);
	test(u11.!<int>);
	test(u12.!<int>);
	test(u13.!<int>);
	test(u14.!<int>);
	test(u15.!<int>);
	test(u16.!<int>);
	test(u17.!<int>);
	test(u18.!<int>);
	test(u19.!<int>);

	test(u20.!<int>);
	test(u21.!<int>);
	test(u22.!<int>);
	test(u23.!<int>);
	test(u24.!<int>);
	test(u25.!<int>);
	test(u26.!<int>);
	test(u27.!<int>);
	test(u28.!<int>);
	test(u29.!<int>);

	test(u30.!<int>);
	test(u31.!<int>);
	test(u32.!<int>);

	return failures;
}

class field_ov02c<T> {
	var a: T;
	var b: T;
	var c: T;
}

def vals = [int.min, -1, 0, 1, int.max];
def test<T>(f: int -> T) {
	var o = field_ov02c<T>.new();
	for (v in vals) {
		o.a = f(v - 0x01020304);
		o.b = f(v);
		o.c = f(v + 0x01020304);

		if (o.a != f(v - 0x01020304)) failures++;
		if (o.b != f(v)) failures++;
		if (o.c != f(v + 0x01020304)) failures++;
	}
}
