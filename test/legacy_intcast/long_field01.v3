//@execute 0=11; 33=11; 55=11; 254=11
class lf00 {
	var x: long;
	var y: long;
	def get(b: int) -> byte {
		var lx = x, ly = y;
		match (b) {
			0 =>  return byte.!(lx >> 0);
			1 =>  return byte.!(lx >> 8);
			2 =>  return byte.!(lx >> 16);
			3 =>  return byte.!(lx >> 24);
			4 =>  return byte.!(lx >> 32);
			5 =>  return byte.!(lx >> 40);
			6 =>  return byte.!(lx >> 48);
			7 =>  return byte.!(lx >> 56);
			8 =>  return byte.!(ly >> 0);
			9 =>  return byte.!(ly >> 8);
			10 => return byte.!(ly >> 16);
			11 => return byte.!(ly >> 24);
			12 => return byte.!(ly >> 32);
			13 => return byte.!(ly >> 40);
			14 => return byte.!(ly >> 48);
			15 => return byte.!(ly >> 56);
		}
		return 0;
	}
	def set(b: int, v: byte) -> byte {
		var lx = x, ly = y, lv = long.!(v);
		match (b) {
			0 =>  x = (lx & 0xFFFFFFFFFFFFFF00) | (lv << 0);
			1 =>  x = (lx & 0xFFFFFFFFFFFF00FF) | (lv << 8);
			2 =>  x = (lx & 0xFFFFFFFFFF00FFFF) | (lv << 16);
			3 =>  x = (lx & 0xFFFFFFFF00FFFFFF) | (lv << 24);
			4 =>  x = (lx & 0xFFFFFF00FFFFFFFF) | (lv << 32);
			5 =>  x = (lx & 0xFFFF00FFFFFFFFFF) | (lv << 40);
			6 =>  x = (lx & 0xFF00FFFFFFFFFFFF) | (lv << 48);
			7 =>  x = (lx & 0x00FFFFFFFFFFFFFF) | (lv << 56);
			8 =>  y = (ly & 0xFFFFFFFFFFFFFF00) | (lv << 0);
			9 =>  y = (ly & 0xFFFFFFFFFFFF00FF) | (lv << 8);
			10 => y = (ly & 0xFFFFFFFFFF00FFFF) | (lv << 16);
			11 => y = (ly & 0xFFFFFFFF00FFFFFF) | (lv << 24);
			12 => y = (ly & 0xFFFFFF00FFFFFFFF) | (lv << 32);
			13 => y = (ly & 0xFFFF00FFFFFFFFFF) | (lv << 40);
			14 => y = (ly & 0xFF00FFFFFFFFFFFF) | (lv << 48);
			15 => y = (ly & 0x00FFFFFFFFFFFFFF) | (lv << 56);
		}
		return 0;
	}
}
var before = Array<byte>.new(16);
def main(a: int) -> int {
	var l = lf00.new();
	for (b in [0x01, 0xF0, 0xAA, 0xFF]) {
		for (j < 16) check(l, j, byte.!(b + a));
	}
	return 11;
}
def check(l: lf00, b: int, v: byte) -> int {
	for (i < before.length) before[i] = l.get(i);
	l.set(b, v);
	for (i < before.length) {
		if (i == b) { if (l.get(i) != v) return 1 / 0; }
		else { if (l.get(i) != before[i]) return 1 / 0; }
	}
	return 12;
}
