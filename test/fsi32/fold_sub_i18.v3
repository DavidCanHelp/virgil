//@execute = 19
def a = doOp();
def b = doFolded();
def main() -> int {
	def c = doOp();
	def d = doFolded();
	for (i = 0; i < a.length; i++) if (a[i] != b[i] || a[i] != c[i] || a[i] != d[i]) return -20 - i;
	return 19;
}
def op(x: int, y: int) -> i18 {
	return i18.!(x) - i18.!(y);
}
def doOp() -> Array<i18> {
	return  [
		op(0, 0), op(0, 1), op(0, 131072), op(0, 131073), op(0, 65536), op(0, 65537), op(0, 196608), op(0, 196609), 
		op(1, 0), op(1, 1), op(1, 131072), op(1, 131073), op(1, 65536), op(1, 65537), op(1, 196608), op(1, 196609), 
		op(131072, 0), op(131072, 1), op(131072, 131072), op(131072, 131073), op(131072, 65536), op(131072, 65537), op(131072, 196608), op(131072, 196609), 
		op(131073, 0), op(131073, 1), op(131073, 131072), op(131073, 131073), op(131073, 65536), op(131073, 65537), op(131073, 196608), op(131073, 196609), 
		op(65536, 0), op(65536, 1), op(65536, 131072), op(65536, 131073), op(65536, 65536), op(65536, 65537), op(65536, 196608), op(65536, 196609), 
		op(65537, 0), op(65537, 1), op(65537, 131072), op(65537, 131073), op(65537, 65536), op(65537, 65537), op(65537, 196608), op(65537, 196609), 
		op(196608, 0), op(196608, 1), op(196608, 131072), op(196608, 131073), op(196608, 65536), op(196608, 65537), op(196608, 196608), op(196608, 196609), 
		op(196609, 0), op(196609, 1), op(196609, 131072), op(196609, 131073), op(196609, 65536), op(196609, 65537), op(196609, 196608), op(196609, 196609)
	];
}
def doFolded() -> Array<i18> {
	return  [
		i18.!(0) - i18.!(0), i18.!(0) - i18.!(1), i18.!(0) - i18.!(131072), i18.!(0) - i18.!(131073), i18.!(0) - i18.!(65536), i18.!(0) - i18.!(65537), i18.!(0) - i18.!(196608), i18.!(0) - i18.!(196609), 
		i18.!(1) - i18.!(0), i18.!(1) - i18.!(1), i18.!(1) - i18.!(131072), i18.!(1) - i18.!(131073), i18.!(1) - i18.!(65536), i18.!(1) - i18.!(65537), i18.!(1) - i18.!(196608), i18.!(1) - i18.!(196609), 
		i18.!(131072) - i18.!(0), i18.!(131072) - i18.!(1), i18.!(131072) - i18.!(131072), i18.!(131072) - i18.!(131073), i18.!(131072) - i18.!(65536), i18.!(131072) - i18.!(65537), i18.!(131072) - i18.!(196608), i18.!(131072) - i18.!(196609), 
		i18.!(131073) - i18.!(0), i18.!(131073) - i18.!(1), i18.!(131073) - i18.!(131072), i18.!(131073) - i18.!(131073), i18.!(131073) - i18.!(65536), i18.!(131073) - i18.!(65537), i18.!(131073) - i18.!(196608), i18.!(131073) - i18.!(196609), 
		i18.!(65536) - i18.!(0), i18.!(65536) - i18.!(1), i18.!(65536) - i18.!(131072), i18.!(65536) - i18.!(131073), i18.!(65536) - i18.!(65536), i18.!(65536) - i18.!(65537), i18.!(65536) - i18.!(196608), i18.!(65536) - i18.!(196609), 
		i18.!(65537) - i18.!(0), i18.!(65537) - i18.!(1), i18.!(65537) - i18.!(131072), i18.!(65537) - i18.!(131073), i18.!(65537) - i18.!(65536), i18.!(65537) - i18.!(65537), i18.!(65537) - i18.!(196608), i18.!(65537) - i18.!(196609), 
		i18.!(196608) - i18.!(0), i18.!(196608) - i18.!(1), i18.!(196608) - i18.!(131072), i18.!(196608) - i18.!(131073), i18.!(196608) - i18.!(65536), i18.!(196608) - i18.!(65537), i18.!(196608) - i18.!(196608), i18.!(196608) - i18.!(196609), 
		i18.!(196609) - i18.!(0), i18.!(196609) - i18.!(1), i18.!(196609) - i18.!(131072), i18.!(196609) - i18.!(131073), i18.!(196609) - i18.!(65536), i18.!(196609) - i18.!(65537), i18.!(196609) - i18.!(196608), i18.!(196609) - i18.!(196609)
	];
}
