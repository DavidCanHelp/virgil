//@execute = 13
def a = doOp();
def b = doFolded();
def main() -> int {
	def c = doOp();
	def d = doFolded();
	for (i = 0; i < a.length; i++) if (a[i] != b[i] || a[i] != c[i] || a[i] != d[i]) return -20 - i;
	return 13;
}
def op(x: int, y: int) -> u12 {
	return u12.view(x) / u12.view(y);
}
def doOp() -> Array<u12> {
	return  [
		op(0, 1), op(0, 2048), op(0, 2049), op(0, 1024), op(0, 1025), op(0, 3072), op(0, 3073), 
		op(1, 1), op(1, 2048), op(1, 2049), op(1, 1024), op(1, 1025), op(1, 3072), op(1, 3073), 
		op(2048, 1), op(2048, 2048), op(2048, 2049), op(2048, 1024), op(2048, 1025), op(2048, 3072), op(2048, 3073), 
		op(2049, 1), op(2049, 2048), op(2049, 2049), op(2049, 1024), op(2049, 1025), op(2049, 3072), op(2049, 3073), 
		op(1024, 1), op(1024, 2048), op(1024, 2049), op(1024, 1024), op(1024, 1025), op(1024, 3072), op(1024, 3073), 
		op(1025, 1), op(1025, 2048), op(1025, 2049), op(1025, 1024), op(1025, 1025), op(1025, 3072), op(1025, 3073), 
		op(3072, 1), op(3072, 2048), op(3072, 2049), op(3072, 1024), op(3072, 1025), op(3072, 3072), op(3072, 3073), 
		op(3073, 1), op(3073, 2048), op(3073, 2049), op(3073, 1024), op(3073, 1025), op(3073, 3072), op(3073, 3073)
	];
}
def doFolded() -> Array<u12> {
	return  [
		u12.view(0) / u12.view(1), u12.view(0) / u12.view(2048), u12.view(0) / u12.view(2049), u12.view(0) / u12.view(1024), u12.view(0) / u12.view(1025), u12.view(0) / u12.view(3072), u12.view(0) / u12.view(3073), 
		u12.view(1) / u12.view(1), u12.view(1) / u12.view(2048), u12.view(1) / u12.view(2049), u12.view(1) / u12.view(1024), u12.view(1) / u12.view(1025), u12.view(1) / u12.view(3072), u12.view(1) / u12.view(3073), 
		u12.view(2048) / u12.view(1), u12.view(2048) / u12.view(2048), u12.view(2048) / u12.view(2049), u12.view(2048) / u12.view(1024), u12.view(2048) / u12.view(1025), u12.view(2048) / u12.view(3072), u12.view(2048) / u12.view(3073), 
		u12.view(2049) / u12.view(1), u12.view(2049) / u12.view(2048), u12.view(2049) / u12.view(2049), u12.view(2049) / u12.view(1024), u12.view(2049) / u12.view(1025), u12.view(2049) / u12.view(3072), u12.view(2049) / u12.view(3073), 
		u12.view(1024) / u12.view(1), u12.view(1024) / u12.view(2048), u12.view(1024) / u12.view(2049), u12.view(1024) / u12.view(1024), u12.view(1024) / u12.view(1025), u12.view(1024) / u12.view(3072), u12.view(1024) / u12.view(3073), 
		u12.view(1025) / u12.view(1), u12.view(1025) / u12.view(2048), u12.view(1025) / u12.view(2049), u12.view(1025) / u12.view(1024), u12.view(1025) / u12.view(1025), u12.view(1025) / u12.view(3072), u12.view(1025) / u12.view(3073), 
		u12.view(3072) / u12.view(1), u12.view(3072) / u12.view(2048), u12.view(3072) / u12.view(2049), u12.view(3072) / u12.view(1024), u12.view(3072) / u12.view(1025), u12.view(3072) / u12.view(3072), u12.view(3072) / u12.view(3073), 
		u12.view(3073) / u12.view(1), u12.view(3073) / u12.view(2048), u12.view(3073) / u12.view(2049), u12.view(3073) / u12.view(1024), u12.view(3073) / u12.view(1025), u12.view(3073) / u12.view(3072), u12.view(3073) / u12.view(3073)
	];
}
