//@execute = 25
def a = doOp();
def b = doFolded();
def main() -> int {
	def c = doOp();
	def d = doFolded();
	for (i = 0; i < a.length; i++) if (a[i] != b[i] || a[i] != c[i] || a[i] != d[i]) return -20 - i;
	return 25;
}
def op(x: int, y: int) -> u24 {
	return u24.!(x) - u24.!(y);
}
def doOp() -> Array<u24> {
	return  [
		op(0, 0), op(0, 1), op(0, 8388608), op(0, 8388609), op(0, 4194304), op(0, 4194305), op(0, 12582912), op(0, 12582913), 
		op(1, 0), op(1, 1), op(1, 8388608), op(1, 8388609), op(1, 4194304), op(1, 4194305), op(1, 12582912), op(1, 12582913), 
		op(8388608, 0), op(8388608, 1), op(8388608, 8388608), op(8388608, 8388609), op(8388608, 4194304), op(8388608, 4194305), op(8388608, 12582912), op(8388608, 12582913), 
		op(8388609, 0), op(8388609, 1), op(8388609, 8388608), op(8388609, 8388609), op(8388609, 4194304), op(8388609, 4194305), op(8388609, 12582912), op(8388609, 12582913), 
		op(4194304, 0), op(4194304, 1), op(4194304, 8388608), op(4194304, 8388609), op(4194304, 4194304), op(4194304, 4194305), op(4194304, 12582912), op(4194304, 12582913), 
		op(4194305, 0), op(4194305, 1), op(4194305, 8388608), op(4194305, 8388609), op(4194305, 4194304), op(4194305, 4194305), op(4194305, 12582912), op(4194305, 12582913), 
		op(12582912, 0), op(12582912, 1), op(12582912, 8388608), op(12582912, 8388609), op(12582912, 4194304), op(12582912, 4194305), op(12582912, 12582912), op(12582912, 12582913), 
		op(12582913, 0), op(12582913, 1), op(12582913, 8388608), op(12582913, 8388609), op(12582913, 4194304), op(12582913, 4194305), op(12582913, 12582912), op(12582913, 12582913)
	];
}
def doFolded() -> Array<u24> {
	return  [
		u24.!(0) - u24.!(0), u24.!(0) - u24.!(1), u24.!(0) - u24.!(8388608), u24.!(0) - u24.!(8388609), u24.!(0) - u24.!(4194304), u24.!(0) - u24.!(4194305), u24.!(0) - u24.!(12582912), u24.!(0) - u24.!(12582913), 
		u24.!(1) - u24.!(0), u24.!(1) - u24.!(1), u24.!(1) - u24.!(8388608), u24.!(1) - u24.!(8388609), u24.!(1) - u24.!(4194304), u24.!(1) - u24.!(4194305), u24.!(1) - u24.!(12582912), u24.!(1) - u24.!(12582913), 
		u24.!(8388608) - u24.!(0), u24.!(8388608) - u24.!(1), u24.!(8388608) - u24.!(8388608), u24.!(8388608) - u24.!(8388609), u24.!(8388608) - u24.!(4194304), u24.!(8388608) - u24.!(4194305), u24.!(8388608) - u24.!(12582912), u24.!(8388608) - u24.!(12582913), 
		u24.!(8388609) - u24.!(0), u24.!(8388609) - u24.!(1), u24.!(8388609) - u24.!(8388608), u24.!(8388609) - u24.!(8388609), u24.!(8388609) - u24.!(4194304), u24.!(8388609) - u24.!(4194305), u24.!(8388609) - u24.!(12582912), u24.!(8388609) - u24.!(12582913), 
		u24.!(4194304) - u24.!(0), u24.!(4194304) - u24.!(1), u24.!(4194304) - u24.!(8388608), u24.!(4194304) - u24.!(8388609), u24.!(4194304) - u24.!(4194304), u24.!(4194304) - u24.!(4194305), u24.!(4194304) - u24.!(12582912), u24.!(4194304) - u24.!(12582913), 
		u24.!(4194305) - u24.!(0), u24.!(4194305) - u24.!(1), u24.!(4194305) - u24.!(8388608), u24.!(4194305) - u24.!(8388609), u24.!(4194305) - u24.!(4194304), u24.!(4194305) - u24.!(4194305), u24.!(4194305) - u24.!(12582912), u24.!(4194305) - u24.!(12582913), 
		u24.!(12582912) - u24.!(0), u24.!(12582912) - u24.!(1), u24.!(12582912) - u24.!(8388608), u24.!(12582912) - u24.!(8388609), u24.!(12582912) - u24.!(4194304), u24.!(12582912) - u24.!(4194305), u24.!(12582912) - u24.!(12582912), u24.!(12582912) - u24.!(12582913), 
		u24.!(12582913) - u24.!(0), u24.!(12582913) - u24.!(1), u24.!(12582913) - u24.!(8388608), u24.!(12582913) - u24.!(8388609), u24.!(12582913) - u24.!(4194304), u24.!(12582913) - u24.!(4194305), u24.!(12582913) - u24.!(12582912), u24.!(12582913) - u24.!(12582913)
	];
}
