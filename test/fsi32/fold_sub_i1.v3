//@execute = 2
def a = doOp();
def b = doFolded();
def main() -> int {
	def c = doOp();
	def d = doFolded();
	for (i = 0; i < a.length; i++) if (a[i] != b[i] || a[i] != c[i] || a[i] != d[i]) return -20 - i;
	return 2;
}
def op(x: int, y: int) -> i1 {
	return i1.view(x) - i1.view(y);
}
def doOp() -> Array<i1> {
	return  [
		op(0, 0), op(0, 1), op(0, 1), op(0, 1), op(0, 0), op(0, 1), op(0, 1), op(0, 1), 
		op(1, 0), op(1, 1), op(1, 1), op(1, 1), op(1, 0), op(1, 1), op(1, 1), op(1, 1), 
		op(1, 0), op(1, 1), op(1, 1), op(1, 1), op(1, 0), op(1, 1), op(1, 1), op(1, 1), 
		op(1, 0), op(1, 1), op(1, 1), op(1, 1), op(1, 0), op(1, 1), op(1, 1), op(1, 1), 
		op(0, 0), op(0, 1), op(0, 1), op(0, 1), op(0, 0), op(0, 1), op(0, 1), op(0, 1), 
		op(1, 0), op(1, 1), op(1, 1), op(1, 1), op(1, 0), op(1, 1), op(1, 1), op(1, 1), 
		op(1, 0), op(1, 1), op(1, 1), op(1, 1), op(1, 0), op(1, 1), op(1, 1), op(1, 1), 
		op(1, 0), op(1, 1), op(1, 1), op(1, 1), op(1, 0), op(1, 1), op(1, 1), op(1, 1)
	];
}
def doFolded() -> Array<i1> {
	return  [
		i1.view(0) - i1.view(0), i1.view(0) - i1.view(1), i1.view(0) - i1.view(1), i1.view(0) - i1.view(1), i1.view(0) - i1.view(0), i1.view(0) - i1.view(1), i1.view(0) - i1.view(1), i1.view(0) - i1.view(1), 
		i1.view(1) - i1.view(0), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(0), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), 
		i1.view(1) - i1.view(0), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(0), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), 
		i1.view(1) - i1.view(0), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(0), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), 
		i1.view(0) - i1.view(0), i1.view(0) - i1.view(1), i1.view(0) - i1.view(1), i1.view(0) - i1.view(1), i1.view(0) - i1.view(0), i1.view(0) - i1.view(1), i1.view(0) - i1.view(1), i1.view(0) - i1.view(1), 
		i1.view(1) - i1.view(0), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(0), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), 
		i1.view(1) - i1.view(0), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(0), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), 
		i1.view(1) - i1.view(0), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(0), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1), i1.view(1) - i1.view(1)
	];
}
