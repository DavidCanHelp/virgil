//@execute = 10
def a = doOp();
def b = doFolded();
def main() -> int {
	def c = doOp();
	def d = doFolded();
	for (i = 0; i < a.length; i++) if (a[i] != b[i] || a[i] != c[i] || a[i] != d[i]) return -20 - i;
	return 10;
}
def op(x: int, y: int) -> u9 {
	return u9.!(x) * u9.!(y);
}
def doOp() -> Array<u9> {
	return  [
		op(0, 0), op(0, 1), op(0, 256), op(0, 257), op(0, 128), op(0, 129), op(0, 384), op(0, 385), 
		op(1, 0), op(1, 1), op(1, 256), op(1, 257), op(1, 128), op(1, 129), op(1, 384), op(1, 385), 
		op(256, 0), op(256, 1), op(256, 256), op(256, 257), op(256, 128), op(256, 129), op(256, 384), op(256, 385), 
		op(257, 0), op(257, 1), op(257, 256), op(257, 257), op(257, 128), op(257, 129), op(257, 384), op(257, 385), 
		op(128, 0), op(128, 1), op(128, 256), op(128, 257), op(128, 128), op(128, 129), op(128, 384), op(128, 385), 
		op(129, 0), op(129, 1), op(129, 256), op(129, 257), op(129, 128), op(129, 129), op(129, 384), op(129, 385), 
		op(384, 0), op(384, 1), op(384, 256), op(384, 257), op(384, 128), op(384, 129), op(384, 384), op(384, 385), 
		op(385, 0), op(385, 1), op(385, 256), op(385, 257), op(385, 128), op(385, 129), op(385, 384), op(385, 385)
	];
}
def doFolded() -> Array<u9> {
	return  [
		u9.!(0) * u9.!(0), u9.!(0) * u9.!(1), u9.!(0) * u9.!(256), u9.!(0) * u9.!(257), u9.!(0) * u9.!(128), u9.!(0) * u9.!(129), u9.!(0) * u9.!(384), u9.!(0) * u9.!(385), 
		u9.!(1) * u9.!(0), u9.!(1) * u9.!(1), u9.!(1) * u9.!(256), u9.!(1) * u9.!(257), u9.!(1) * u9.!(128), u9.!(1) * u9.!(129), u9.!(1) * u9.!(384), u9.!(1) * u9.!(385), 
		u9.!(256) * u9.!(0), u9.!(256) * u9.!(1), u9.!(256) * u9.!(256), u9.!(256) * u9.!(257), u9.!(256) * u9.!(128), u9.!(256) * u9.!(129), u9.!(256) * u9.!(384), u9.!(256) * u9.!(385), 
		u9.!(257) * u9.!(0), u9.!(257) * u9.!(1), u9.!(257) * u9.!(256), u9.!(257) * u9.!(257), u9.!(257) * u9.!(128), u9.!(257) * u9.!(129), u9.!(257) * u9.!(384), u9.!(257) * u9.!(385), 
		u9.!(128) * u9.!(0), u9.!(128) * u9.!(1), u9.!(128) * u9.!(256), u9.!(128) * u9.!(257), u9.!(128) * u9.!(128), u9.!(128) * u9.!(129), u9.!(128) * u9.!(384), u9.!(128) * u9.!(385), 
		u9.!(129) * u9.!(0), u9.!(129) * u9.!(1), u9.!(129) * u9.!(256), u9.!(129) * u9.!(257), u9.!(129) * u9.!(128), u9.!(129) * u9.!(129), u9.!(129) * u9.!(384), u9.!(129) * u9.!(385), 
		u9.!(384) * u9.!(0), u9.!(384) * u9.!(1), u9.!(384) * u9.!(256), u9.!(384) * u9.!(257), u9.!(384) * u9.!(128), u9.!(384) * u9.!(129), u9.!(384) * u9.!(384), u9.!(384) * u9.!(385), 
		u9.!(385) * u9.!(0), u9.!(385) * u9.!(1), u9.!(385) * u9.!(256), u9.!(385) * u9.!(257), u9.!(385) * u9.!(128), u9.!(385) * u9.!(129), u9.!(385) * u9.!(384), u9.!(385) * u9.!(385)
	];
}
