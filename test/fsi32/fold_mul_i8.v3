//@execute = 9
def a = doOp();
def b = doFolded();
def main() -> int {
	def c = doOp();
	def d = doFolded();
	for (i = 0; i < a.length; i++) if (a[i] != b[i] || a[i] != c[i] || a[i] != d[i]) return -20 - i;
	return 9;
}
def op(x: int, y: int) -> i8 {
	return i8.!(x) * i8.!(y);
}
def doOp() -> Array<i8> {
	return  [
		op(0, 0), op(0, 1), op(0, 128), op(0, 129), op(0, 64), op(0, 65), op(0, 192), op(0, 193), 
		op(1, 0), op(1, 1), op(1, 128), op(1, 129), op(1, 64), op(1, 65), op(1, 192), op(1, 193), 
		op(128, 0), op(128, 1), op(128, 128), op(128, 129), op(128, 64), op(128, 65), op(128, 192), op(128, 193), 
		op(129, 0), op(129, 1), op(129, 128), op(129, 129), op(129, 64), op(129, 65), op(129, 192), op(129, 193), 
		op(64, 0), op(64, 1), op(64, 128), op(64, 129), op(64, 64), op(64, 65), op(64, 192), op(64, 193), 
		op(65, 0), op(65, 1), op(65, 128), op(65, 129), op(65, 64), op(65, 65), op(65, 192), op(65, 193), 
		op(192, 0), op(192, 1), op(192, 128), op(192, 129), op(192, 64), op(192, 65), op(192, 192), op(192, 193), 
		op(193, 0), op(193, 1), op(193, 128), op(193, 129), op(193, 64), op(193, 65), op(193, 192), op(193, 193)
	];
}
def doFolded() -> Array<i8> {
	return  [
		i8.!(0) * i8.!(0), i8.!(0) * i8.!(1), i8.!(0) * i8.!(128), i8.!(0) * i8.!(129), i8.!(0) * i8.!(64), i8.!(0) * i8.!(65), i8.!(0) * i8.!(192), i8.!(0) * i8.!(193), 
		i8.!(1) * i8.!(0), i8.!(1) * i8.!(1), i8.!(1) * i8.!(128), i8.!(1) * i8.!(129), i8.!(1) * i8.!(64), i8.!(1) * i8.!(65), i8.!(1) * i8.!(192), i8.!(1) * i8.!(193), 
		i8.!(128) * i8.!(0), i8.!(128) * i8.!(1), i8.!(128) * i8.!(128), i8.!(128) * i8.!(129), i8.!(128) * i8.!(64), i8.!(128) * i8.!(65), i8.!(128) * i8.!(192), i8.!(128) * i8.!(193), 
		i8.!(129) * i8.!(0), i8.!(129) * i8.!(1), i8.!(129) * i8.!(128), i8.!(129) * i8.!(129), i8.!(129) * i8.!(64), i8.!(129) * i8.!(65), i8.!(129) * i8.!(192), i8.!(129) * i8.!(193), 
		i8.!(64) * i8.!(0), i8.!(64) * i8.!(1), i8.!(64) * i8.!(128), i8.!(64) * i8.!(129), i8.!(64) * i8.!(64), i8.!(64) * i8.!(65), i8.!(64) * i8.!(192), i8.!(64) * i8.!(193), 
		i8.!(65) * i8.!(0), i8.!(65) * i8.!(1), i8.!(65) * i8.!(128), i8.!(65) * i8.!(129), i8.!(65) * i8.!(64), i8.!(65) * i8.!(65), i8.!(65) * i8.!(192), i8.!(65) * i8.!(193), 
		i8.!(192) * i8.!(0), i8.!(192) * i8.!(1), i8.!(192) * i8.!(128), i8.!(192) * i8.!(129), i8.!(192) * i8.!(64), i8.!(192) * i8.!(65), i8.!(192) * i8.!(192), i8.!(192) * i8.!(193), 
		i8.!(193) * i8.!(0), i8.!(193) * i8.!(1), i8.!(193) * i8.!(128), i8.!(193) * i8.!(129), i8.!(193) * i8.!(64), i8.!(193) * i8.!(65), i8.!(193) * i8.!(192), i8.!(193) * i8.!(193)
	];
}
