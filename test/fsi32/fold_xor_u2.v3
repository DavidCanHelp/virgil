//@execute = 3
def a = doOp();
def b = doFolded();
def main() -> int {
	def c = doOp();
	def d = doFolded();
	for (i = 0; i < a.length; i++) if (a(i) != b(i) || a(i) != c(i) || a(i) != d(i)) return -20 - i;
	return 3;
}
def op(x: int, y: int) -> u2 {
	return u2.!(x) ^ u2.!(y);
}
def doOp() -> Array<u2> {
	return  [
		op(0, 0), op(0, 1), op(0, 2), op(0, 3), op(0, 1), op(0, 1), op(0, 3), op(0, 3), 
		op(1, 0), op(1, 1), op(1, 2), op(1, 3), op(1, 1), op(1, 1), op(1, 3), op(1, 3), 
		op(2, 0), op(2, 1), op(2, 2), op(2, 3), op(2, 1), op(2, 1), op(2, 3), op(2, 3), 
		op(3, 0), op(3, 1), op(3, 2), op(3, 3), op(3, 1), op(3, 1), op(3, 3), op(3, 3), 
		op(1, 0), op(1, 1), op(1, 2), op(1, 3), op(1, 1), op(1, 1), op(1, 3), op(1, 3), 
		op(1, 0), op(1, 1), op(1, 2), op(1, 3), op(1, 1), op(1, 1), op(1, 3), op(1, 3), 
		op(3, 0), op(3, 1), op(3, 2), op(3, 3), op(3, 1), op(3, 1), op(3, 3), op(3, 3), 
		op(3, 0), op(3, 1), op(3, 2), op(3, 3), op(3, 1), op(3, 1), op(3, 3), op(3, 3)
	];
}
def doFolded() -> Array<u2> {
	return  [
		u2.!(0) ^ u2.!(0), u2.!(0) ^ u2.!(1), u2.!(0) ^ u2.!(2), u2.!(0) ^ u2.!(3), u2.!(0) ^ u2.!(1), u2.!(0) ^ u2.!(1), u2.!(0) ^ u2.!(3), u2.!(0) ^ u2.!(3), 
		u2.!(1) ^ u2.!(0), u2.!(1) ^ u2.!(1), u2.!(1) ^ u2.!(2), u2.!(1) ^ u2.!(3), u2.!(1) ^ u2.!(1), u2.!(1) ^ u2.!(1), u2.!(1) ^ u2.!(3), u2.!(1) ^ u2.!(3), 
		u2.!(2) ^ u2.!(0), u2.!(2) ^ u2.!(1), u2.!(2) ^ u2.!(2), u2.!(2) ^ u2.!(3), u2.!(2) ^ u2.!(1), u2.!(2) ^ u2.!(1), u2.!(2) ^ u2.!(3), u2.!(2) ^ u2.!(3), 
		u2.!(3) ^ u2.!(0), u2.!(3) ^ u2.!(1), u2.!(3) ^ u2.!(2), u2.!(3) ^ u2.!(3), u2.!(3) ^ u2.!(1), u2.!(3) ^ u2.!(1), u2.!(3) ^ u2.!(3), u2.!(3) ^ u2.!(3), 
		u2.!(1) ^ u2.!(0), u2.!(1) ^ u2.!(1), u2.!(1) ^ u2.!(2), u2.!(1) ^ u2.!(3), u2.!(1) ^ u2.!(1), u2.!(1) ^ u2.!(1), u2.!(1) ^ u2.!(3), u2.!(1) ^ u2.!(3), 
		u2.!(1) ^ u2.!(0), u2.!(1) ^ u2.!(1), u2.!(1) ^ u2.!(2), u2.!(1) ^ u2.!(3), u2.!(1) ^ u2.!(1), u2.!(1) ^ u2.!(1), u2.!(1) ^ u2.!(3), u2.!(1) ^ u2.!(3), 
		u2.!(3) ^ u2.!(0), u2.!(3) ^ u2.!(1), u2.!(3) ^ u2.!(2), u2.!(3) ^ u2.!(3), u2.!(3) ^ u2.!(1), u2.!(3) ^ u2.!(1), u2.!(3) ^ u2.!(3), u2.!(3) ^ u2.!(3), 
		u2.!(3) ^ u2.!(0), u2.!(3) ^ u2.!(1), u2.!(3) ^ u2.!(2), u2.!(3) ^ u2.!(3), u2.!(3) ^ u2.!(1), u2.!(3) ^ u2.!(1), u2.!(3) ^ u2.!(3), u2.!(3) ^ u2.!(3)
	];
}
