//@execute = 23
def a = doOp();
def b = doFolded();
def main() -> int {
	def c = doOp();
	def d = doFolded();
	for (i = 0; i < a.length; i++) if (a[i] != b[i] || a[i] != c[i] || a[i] != d[i]) return -20 - i;
	return 23;
}
def op(x: int, y: int) -> i22 {
	return i22.view(x) * i22.view(y);
}
def doOp() -> Array<i22> {
	return  [
		op(0, 0), op(0, 1), op(0, 2097152), op(0, 2097153), op(0, 1048576), op(0, 1048577), op(0, 3145728), op(0, 3145729), 
		op(1, 0), op(1, 1), op(1, 2097152), op(1, 2097153), op(1, 1048576), op(1, 1048577), op(1, 3145728), op(1, 3145729), 
		op(2097152, 0), op(2097152, 1), op(2097152, 2097152), op(2097152, 2097153), op(2097152, 1048576), op(2097152, 1048577), op(2097152, 3145728), op(2097152, 3145729), 
		op(2097153, 0), op(2097153, 1), op(2097153, 2097152), op(2097153, 2097153), op(2097153, 1048576), op(2097153, 1048577), op(2097153, 3145728), op(2097153, 3145729), 
		op(1048576, 0), op(1048576, 1), op(1048576, 2097152), op(1048576, 2097153), op(1048576, 1048576), op(1048576, 1048577), op(1048576, 3145728), op(1048576, 3145729), 
		op(1048577, 0), op(1048577, 1), op(1048577, 2097152), op(1048577, 2097153), op(1048577, 1048576), op(1048577, 1048577), op(1048577, 3145728), op(1048577, 3145729), 
		op(3145728, 0), op(3145728, 1), op(3145728, 2097152), op(3145728, 2097153), op(3145728, 1048576), op(3145728, 1048577), op(3145728, 3145728), op(3145728, 3145729), 
		op(3145729, 0), op(3145729, 1), op(3145729, 2097152), op(3145729, 2097153), op(3145729, 1048576), op(3145729, 1048577), op(3145729, 3145728), op(3145729, 3145729)
	];
}
def doFolded() -> Array<i22> {
	return  [
		i22.view(0) * i22.view(0), i22.view(0) * i22.view(1), i22.view(0) * i22.view(2097152), i22.view(0) * i22.view(2097153), i22.view(0) * i22.view(1048576), i22.view(0) * i22.view(1048577), i22.view(0) * i22.view(3145728), i22.view(0) * i22.view(3145729), 
		i22.view(1) * i22.view(0), i22.view(1) * i22.view(1), i22.view(1) * i22.view(2097152), i22.view(1) * i22.view(2097153), i22.view(1) * i22.view(1048576), i22.view(1) * i22.view(1048577), i22.view(1) * i22.view(3145728), i22.view(1) * i22.view(3145729), 
		i22.view(2097152) * i22.view(0), i22.view(2097152) * i22.view(1), i22.view(2097152) * i22.view(2097152), i22.view(2097152) * i22.view(2097153), i22.view(2097152) * i22.view(1048576), i22.view(2097152) * i22.view(1048577), i22.view(2097152) * i22.view(3145728), i22.view(2097152) * i22.view(3145729), 
		i22.view(2097153) * i22.view(0), i22.view(2097153) * i22.view(1), i22.view(2097153) * i22.view(2097152), i22.view(2097153) * i22.view(2097153), i22.view(2097153) * i22.view(1048576), i22.view(2097153) * i22.view(1048577), i22.view(2097153) * i22.view(3145728), i22.view(2097153) * i22.view(3145729), 
		i22.view(1048576) * i22.view(0), i22.view(1048576) * i22.view(1), i22.view(1048576) * i22.view(2097152), i22.view(1048576) * i22.view(2097153), i22.view(1048576) * i22.view(1048576), i22.view(1048576) * i22.view(1048577), i22.view(1048576) * i22.view(3145728), i22.view(1048576) * i22.view(3145729), 
		i22.view(1048577) * i22.view(0), i22.view(1048577) * i22.view(1), i22.view(1048577) * i22.view(2097152), i22.view(1048577) * i22.view(2097153), i22.view(1048577) * i22.view(1048576), i22.view(1048577) * i22.view(1048577), i22.view(1048577) * i22.view(3145728), i22.view(1048577) * i22.view(3145729), 
		i22.view(3145728) * i22.view(0), i22.view(3145728) * i22.view(1), i22.view(3145728) * i22.view(2097152), i22.view(3145728) * i22.view(2097153), i22.view(3145728) * i22.view(1048576), i22.view(3145728) * i22.view(1048577), i22.view(3145728) * i22.view(3145728), i22.view(3145728) * i22.view(3145729), 
		i22.view(3145729) * i22.view(0), i22.view(3145729) * i22.view(1), i22.view(3145729) * i22.view(2097152), i22.view(3145729) * i22.view(2097153), i22.view(3145729) * i22.view(1048576), i22.view(3145729) * i22.view(1048577), i22.view(3145729) * i22.view(3145728), i22.view(3145729) * i22.view(3145729)
	];
}
