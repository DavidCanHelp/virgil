//@execute = 22
def a = doOp();
def b = doFolded();
def main() -> int {
	def c = doOp();
	def d = doFolded();
	for (i = 0; i < a.length; i++) if (a(i) != b(i) || a(i) != c(i) || a(i) != d(i)) return -20 - i;
	return 22;
}
def op(x: int, y: int) -> u21 {
	return u21.!(x) & u21.!(y);
}
def doOp() -> Array<u21> {
	return  [
		op(0, 0), op(0, 1), op(0, 1048576), op(0, 1048577), op(0, 524288), op(0, 524289), op(0, 1572864), op(0, 1572865), 
		op(1, 0), op(1, 1), op(1, 1048576), op(1, 1048577), op(1, 524288), op(1, 524289), op(1, 1572864), op(1, 1572865), 
		op(1048576, 0), op(1048576, 1), op(1048576, 1048576), op(1048576, 1048577), op(1048576, 524288), op(1048576, 524289), op(1048576, 1572864), op(1048576, 1572865), 
		op(1048577, 0), op(1048577, 1), op(1048577, 1048576), op(1048577, 1048577), op(1048577, 524288), op(1048577, 524289), op(1048577, 1572864), op(1048577, 1572865), 
		op(524288, 0), op(524288, 1), op(524288, 1048576), op(524288, 1048577), op(524288, 524288), op(524288, 524289), op(524288, 1572864), op(524288, 1572865), 
		op(524289, 0), op(524289, 1), op(524289, 1048576), op(524289, 1048577), op(524289, 524288), op(524289, 524289), op(524289, 1572864), op(524289, 1572865), 
		op(1572864, 0), op(1572864, 1), op(1572864, 1048576), op(1572864, 1048577), op(1572864, 524288), op(1572864, 524289), op(1572864, 1572864), op(1572864, 1572865), 
		op(1572865, 0), op(1572865, 1), op(1572865, 1048576), op(1572865, 1048577), op(1572865, 524288), op(1572865, 524289), op(1572865, 1572864), op(1572865, 1572865)
	];
}
def doFolded() -> Array<u21> {
	return  [
		u21.!(0) & u21.!(0), u21.!(0) & u21.!(1), u21.!(0) & u21.!(1048576), u21.!(0) & u21.!(1048577), u21.!(0) & u21.!(524288), u21.!(0) & u21.!(524289), u21.!(0) & u21.!(1572864), u21.!(0) & u21.!(1572865), 
		u21.!(1) & u21.!(0), u21.!(1) & u21.!(1), u21.!(1) & u21.!(1048576), u21.!(1) & u21.!(1048577), u21.!(1) & u21.!(524288), u21.!(1) & u21.!(524289), u21.!(1) & u21.!(1572864), u21.!(1) & u21.!(1572865), 
		u21.!(1048576) & u21.!(0), u21.!(1048576) & u21.!(1), u21.!(1048576) & u21.!(1048576), u21.!(1048576) & u21.!(1048577), u21.!(1048576) & u21.!(524288), u21.!(1048576) & u21.!(524289), u21.!(1048576) & u21.!(1572864), u21.!(1048576) & u21.!(1572865), 
		u21.!(1048577) & u21.!(0), u21.!(1048577) & u21.!(1), u21.!(1048577) & u21.!(1048576), u21.!(1048577) & u21.!(1048577), u21.!(1048577) & u21.!(524288), u21.!(1048577) & u21.!(524289), u21.!(1048577) & u21.!(1572864), u21.!(1048577) & u21.!(1572865), 
		u21.!(524288) & u21.!(0), u21.!(524288) & u21.!(1), u21.!(524288) & u21.!(1048576), u21.!(524288) & u21.!(1048577), u21.!(524288) & u21.!(524288), u21.!(524288) & u21.!(524289), u21.!(524288) & u21.!(1572864), u21.!(524288) & u21.!(1572865), 
		u21.!(524289) & u21.!(0), u21.!(524289) & u21.!(1), u21.!(524289) & u21.!(1048576), u21.!(524289) & u21.!(1048577), u21.!(524289) & u21.!(524288), u21.!(524289) & u21.!(524289), u21.!(524289) & u21.!(1572864), u21.!(524289) & u21.!(1572865), 
		u21.!(1572864) & u21.!(0), u21.!(1572864) & u21.!(1), u21.!(1572864) & u21.!(1048576), u21.!(1572864) & u21.!(1048577), u21.!(1572864) & u21.!(524288), u21.!(1572864) & u21.!(524289), u21.!(1572864) & u21.!(1572864), u21.!(1572864) & u21.!(1572865), 
		u21.!(1572865) & u21.!(0), u21.!(1572865) & u21.!(1), u21.!(1572865) & u21.!(1048576), u21.!(1572865) & u21.!(1048577), u21.!(1572865) & u21.!(524288), u21.!(1572865) & u21.!(524289), u21.!(1572865) & u21.!(1572864), u21.!(1572865) & u21.!(1572865)
	];
}
