//@execute = 111
var failures = 111;
def main() -> int {
	failures = 111;

	test(i1.!<int>);
	test(i2.!<int>);
	test(i3.!<int>);
	test(i4.!<int>);
	test(i5.!<int>);
	test(i6.!<int>);
	test(i7.!<int>);
	test(i8.!<int>);
	test(i9.!<int>);

	test(i10.!<int>);
	test(i11.!<int>);
	test(i12.!<int>);
	test(i13.!<int>);
	test(i14.!<int>);
	test(i15.!<int>);
	test(i16.!<int>);
	test(i17.!<int>);
	test(i18.!<int>);
	test(i19.!<int>);

	test(i20.!<int>);
	test(i21.!<int>);
	test(i22.!<int>);
	test(i23.!<int>);
	test(i24.!<int>);
	test(i25.!<int>);
	test(i26.!<int>);
	test(i27.!<int>);
	test(i28.!<int>);
	test(i29.!<int>);

	test(i30.!<int>);
	test(i31.!<int>);
	test(i32.!<int>);

	return failures;
}

class field_ov01c<T> {
	var a: T;
	var b: T;
	var c: T;
}

def vals = [int.min, -1, 0, 1, int.max];
def test<T>(f: int -> T) {
	var o = field_ov01c<T>.new();
	for (v in vals) {
		o.a = f(v - 0x01020304);
		o.b = f(v);
		o.c = f(v + 0x01020304);

		if (o.a != f(v - 0x01020304)) failures++;
		if (o.b != f(v)) failures++;
		if (o.c != f(v + 0x01020304)) failures++;
	}
}
