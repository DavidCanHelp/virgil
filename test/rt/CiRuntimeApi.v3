// Enforces the API for CiRuntime.
component CiRuntimeApi {
	var errors: int;
	def main() -> int {
		errors = 0;
		checkNonNull(CiRuntime.HEAP_START, "HEAP_START");
		checkNonNull(CiRuntime.HEAP_END,   "HEAP_END");
		checkNonNull(CiRuntime.CODE_START, "CODE_START");
		checkNonNull(CiRuntime.CODE_END,   "CODE_END");
		checkNonNull(CiRuntime.DATA_START, "DATA_START");
		checkNonNull(CiRuntime.DATA_END,   "DATA_END");
		checkNonNull(CiRuntime.signalStub, "signalStub");
		checkNonNull(CiRuntime.heapCurLoc, "heapCurLoc");
		checkNonNull(CiRuntime.heapEndLoc, "heapEndLoc");

		checkNonNull(CiRuntime.GC_STACKMAP_PAGES,     "GC_STACKMAP_PAGES");
		checkNonNull(CiRuntime.GC_STACKMAP_TABLE,     "GC_STACKMAP_TABLE");
		checkNonNull(CiRuntime.GC_EXTMAPS,            "GC_EXTMAPS");
		checkNonNull(CiRuntime.GC_ROOTS_START,        "GC_ROOTS_START");
		checkNonNull(CiRuntime.GC_ROOTS_END,          "GC_ROOTS_END");
		checkNonNull(CiRuntime.GC_TYPE_TABLE,         "GC_TYPE_TABLE");
		checkNonNull(CiRuntime.SRC_POINTS_PAGES,      "SRC_POINTS_PAGES");
		checkNonNull(CiRuntime.SRC_POINTS_TABLE,      "SRC_POINTS_TABLE");
		checkNonNull(CiRuntime.SRC_METHODS_PAGES,     "SRC_METHODS_PAGES");
		checkNonNull(CiRuntime.SRC_METHODS_TABLE,     "SRC_METHODS_TABLE");
		checkNonNull(CiRuntime.SRC_METHODS_TABLE_END, "SRC_METHODS_TABLE_END");
		checkNonNull(CiRuntime.SRC_CLASS_TABLE,       "SRC_CLASS_TABLE");
		checkNonNull(CiRuntime.SRC_STRINGS,           "SRC_STRINGS");
		checkNonNull(CiRuntime.EX_START,              "EX_START");
		checkNonNull(CiRuntime.EX_END,                "EX_END");
		checkNonNull(CiRuntime.EX_TABLE,              "EX_TABLE");
		checkNonNull(CiRuntime.EX_STRINGS,            "EX_STRINGS");

		return errors;
	}
	def checkCallers() {
		checkNonNull(CiRuntime.callerIp(), "callerIp()");
		checkNonNull(CiRuntime.callerSp(), "callerSp()");
	}
	def checkNonNull(p: Pointer, name: string) {
		if (p == Pointer.NULL) {
			System.puts("Error: CiRuntime.");
			System.puts(name);
			System.puts(" == NULL\n");
			errors++;
		}
		System.puts(name);
		System.puts(": ");
		System.puti(p - Pointer.NULL);
		System.putc('\n');
	}
}