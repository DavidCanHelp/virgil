def main() -> int {
	var code = allocCodeSpace(4096);
	code.store<byte>(0xc3/*ret*/);
	var closure = CiRuntime.forgeClosure<X, void, void>(code, null);
	closure();
	return 0;
}

class X { }

def mmap_arg = Array<int>.new(LinuxConst.MMAP_ARG_SIZE);
def allocCodeSpace(size: int) -> Pointer {
	var p = Pointer.atContents(mmap_arg);
	var prot = LinuxConst.PROT_READ | LinuxConst.PROT_WRITE | LinuxConst.PROT_EXEC;
	var flags = LinuxConst.MAP_PRIVATE | LinuxConst.MAP_ANONYMOUS;
	(p + LinuxConst.MMAP_ARG_ADDR).store(0); 
	(p + LinuxConst.MMAP_ARG_LEN).store(size);
	(p + LinuxConst.MMAP_ARG_PROT).store(prot);
	(p + LinuxConst.MMAP_ARG_FLAGS).store(flags); 
	(p + LinuxConst.MMAP_ARG_FD).store(0); 
	(p + LinuxConst.MMAP_ARG_OFFSET).store(0); 
	var r = Linux.syscall(LinuxConst.SYS_mmap, p);
	return Pointer.NULL + r.0;
}