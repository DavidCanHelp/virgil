//@execute 0=55; 1=55; 2=55; 3=55; 4=55; 5=55; 6=55; 7=55; 8=55; 9=42
def x_byte  = Case<byte>.new ([0, 1, 112, byte.max]);
def x_short = Case<short>.new([0, 1, -1, -128, 127, -1000, short.min, short.max]);
def x_u16   = Case<u16>.new  ([0, 3, 255, 256, 1000, 22333, 44555, u16.max]);
def x_int   = Case<int>.new  ([0, 4, 255, 256, 1000, -20000, short.min, short.max, u16.max, 3333333, int.min, int.max]);
def x_u32   = Case<u32>.new  ([0, 5, 255, 257, 22444, 555666, 6666666, 2147483647, 2_500_000_000u, u32.max]);
def x_long  = Case<long>.new ([0, 6, 255, 258, 31337, -2166, 66666666, int.min, int.max, 3_000_000_000, long.min, long.max]);
def x_u64   = Case<u64>.new  ([0, 6, 255, 258, 31337, 66666666, 2147483647, 3_000_000_000, 0x7fff_ffff_ffff_ffff, u64.max]);
def x_float = Case<float>.new([0, 7, 7.1f, 255f, -31337f, 31337.7f, 2147483647f, -2147483647f, -2147483648f, 1e14f, 1e15f, 1e16f, 1e17f, float.nan, float.infinity]);
def x_double = Case<double>.new([0, 7, 7.1d, 255d, -31337d, 31337.7d, 2147483647d, -2147483647d, -2147483648d, 1e14d, 1e15d, 1e16d, 1e17d, double.nan, double.infinity]);

def main(a: int) -> int {
	match (a) {
		0 => return x_byte.check();
		1 => return x_short.check();
		2 => return x_u16.check();
		3 => return x_int.check();
		4 => return x_u32.check();
		5 => return x_long.check();
		6 => return x_u64.check();
		7 => return x_float.check();
		8 => return x_double.check();
	}
	return 42;
}
class Case<T>(inputs: Array<T>) {
	def answer = do(inputs);
	def check<T>() -> int {
		for (i < inputs.length) {
			if (rank(inputs[i]) != answer[i]) return -1 -i;
		}
		return 55;
	}
}
enum IntRank {
	BYTE, INT, LONG, U64, FLOAT, DOUBLE, UNKNOWN
}

def do<T>(a: Array<T>) -> Array<IntRank> {
	var result = Array<IntRank>.new(a.length);
	for (i < a.length) result[i] = rank(a[i]);
	return result;
}
def rank<T>(a: T) -> IntRank {
	match (a) {
		x: byte => return IntRank.BYTE;
		x: int => return IntRank.INT;
		x: long => return IntRank.LONG;
		x: u64 => return IntRank.U64;
		x: float => return IntRank.FLOAT;
		x: double => return IntRank.DOUBLE;
	}
	return IntRank.UNKNOWN;
}
