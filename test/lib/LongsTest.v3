// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("Longs", _, _);
def X = [
	T("log", test_log),
	T("popcnt", test_popcnt),
	()
];

def assertOk<T>(t: LibTest, f: (StringBuilder, T) -> StringBuilder, val: T, expected: string) {
	var b = StringBuilder.new();
	f(b, val);
	t.assert_string(expected, b.extract());
}

def test_log(t: LibTest) {
	def log = Longs.log;
	def ok = t.asserteq<int>;

	ok(-1, log(0));
	ok(0, log(1));
	ok(1, log(2));
	ok(1, log(3));
	ok(2, log(4));
	ok(4, log(19));
	ok(6, log(127));
	ok(7, log(128));
	ok(7, log(129));
	ok(9, log(999));
	ok(13, log(9999));
	ok(16, log(88888));
	ok(19, log(777777));
	ok(22, log(6666666));
	ok(25, log(55555555));
	ok(28, log(444444444));
	ok(31, log(3333333333u));

	for (i < 64) {
		ok(i, log(1uL << u6.view(i)));
		ok(i, log(1uL | 1uL << u6.view(i)));
	}
}

def test_popcnt(t: LibTest) {
	t.asserteq(0, Longs.popcnt(0));
	t.asserteq(1, Longs.popcnt(1));
	t.asserteq(2, Longs.popcnt(3));
	t.asserteq(2, Longs.popcnt(5));

	for (i = 1uL; i != 0; i <<= 1) {
		t.asserteq(1, Longs.popcnt(i));
	}
	t.asserteq(64, Longs.popcnt(0xFFFF_FFFF_FFFF_FFFF));
	t.asserteq(48, Longs.popcnt(0x0000_FFFF_FFFF_FFFF));
	t.asserteq(48, Longs.popcnt(0xFFFF_FFFF_FFFF_0000));
	t.asserteq(32, Longs.popcnt(0xFFFF_FFFF_0000_0000));
	t.asserteq(32, Longs.popcnt(0x0000_0000_FFFF_FFFF));
	t.asserteq(16, Longs.popcnt(0x0000_FFFF));
	t.asserteq(16, Longs.popcnt(0xFFFF_0000));
	t.asserteq(8, Longs.popcnt(0x0000_F00F));
	t.asserteq(8, Longs.popcnt(0xF00F_0000));
	t.asserteq(4, Longs.popcnt(0x0000_C00C));
	t.asserteq(4, Longs.popcnt(0xC00C_0000));
	t.asserteq(2, Longs.popcnt(0x1001_0000));
	t.asserteq(2, Longs.popcnt(0x1000_0080));
}
