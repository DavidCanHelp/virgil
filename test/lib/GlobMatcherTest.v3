// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("GlobMatcher", _, _);

def X = [
	T("question", test_question),
	T("string", test_string),
	T("star", test_star),
	T("prefix", test_prefix),
	T("suffix", test_suffix),
	T("prefixsuffix", test_prefixsuffix),
	T("mixed", test_mixed),
	()
];

def empty = "";
def lower = "abcdefghijklmnopqrstuvwxyz";
def upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
def digits = "0123456789";
def chars = "`~!@#$%^&()-_=+[{]}\\|;:\'\",<.>/";

def assertMatch(t: LibTest, m: string -> bool, input: string) {
	if (!m(input)) t.fail1("should match \"%1\"", input);
}

def assertFail(t: LibTest, m: string -> bool, input: string) {
	if (m(input)) t.fail1("should not match \"%1\"", input);
}

def test_question(t: LibTest) {
	var strings = [
		empty, "THEre", "was", lower, upper, digits, chars
	];
	for (x in strings) {
		for (i < x.length) {
			var pat = Arrays.dup(x);
			pat[i] = '?';
			assertMatch(t, globMatcher(pat), x);
		}
	}
}

def test_string(t: LibTest) {
	var strings = [
		empty, "ab", "abc", lower, upper, digits, chars
	];
	for (x in strings) {
		for (y in strings) {
			if(Arrays.equal(x, y)) {
				assertMatch(t, globMatcher(x), y);
				assertMatch(t, globMatcher(y), x);
			} else {
				assertFail(t, globMatcher(x), y);
				assertFail(t, globMatcher(y), x);
			}
		}
	}
}

def test_star(t: LibTest) {
	for (pat in ["*", "**", "***"]) {
		var Y = assertMatch(t, globMatcher(pat), _);
		Y("");
		Y("*");
		Y("?");
		Y("a");
		Y("ab");
		Y("abcdef");
		Y("abcdef*");
		Y("*jakdji&^!*@#$&^");
		Y("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
		Y("abcdefghijklmnopqrstuvwxyz");
		Y("0123456789");
		Y("`~!@#$%^&*()-_=+[{]}\\|;:\'\",<.>/?");
	}
}

def test_prefix(t: LibTest) {
	var pat = "Pre*", fa = globMatcher(pat), Y = assertMatch(t, fa, _), N = assertFail(t, fa, _);
	Y("Pre");
	Y("Pref");
	Y("Prefi");
	Y("Prefix");
	Y("Pre.");
	Y("Pre?");
	Y("Pre*");

	N("Pr");
	N("Prf");
	N("Prfi");
	N("Prfix");
	N("Pe");
	N("Pe?");
	N("re");

	N("xPre");
	N("xPref");
	N("xPrefi");
	N("xPrefix");
	N("xPre.");
	N("xPre?");
	N("xPre*");
}

def test_suffix(t: LibTest) {
	var pat = "*Suffix", fa = globMatcher(pat), Y = assertMatch(t, fa, _), N = assertFail(t, fa, _);
	Y("Suffix");
	Y("ASuffix");
	Y(".Suffix");
	Y("NoSuffix");
	Y("TheSuffix");
	Y("xxxSuffix");

	N("uffix");
	N("ASffix");
	N(".Sufix");
	N("NoSufix");
	N("TheSuffx");
	N("xxxSuffi");
}

def test_prefixsuffix(t: LibTest) {
	var pat = "Pre*Suffix", fa = globMatcher(pat), Y = assertMatch(t, fa, _), N = assertFail(t, fa, _);
	Y("PreSuffix");
	Y("Pre.Suffix");
	Y("PreASuffix");
	Y("PreBSuffix");
	Y("Pre*&#$Suffix");

	N("PrSuffix");
	N("PeASuffix");
	N("PreSffix");
	N("PreNoSufix");
	N("Preuffix");
	N("Prefix");

	N("PreSuffi");
	N("ASuffix");
	N(".Suffix");
	N("NoSuffix");
	N("TheSuffix");
	N("xxxSuffix");

	N("uffix");
	N("ASffix");
	N(".Sufix");
	N("NoSufix");
	N("TheSuffx");
	N("xxxSuffi");
}

def test_mixed(t: LibTest) {
	var pat = "P?e*Suff?x", fa = globMatcher(pat), Y = assertMatch(t, fa, _), N = assertFail(t, fa, _);
	Y("PreSuffix");
	Y("PteSuffix");
	Y("PreSuffax");
	Y("PreSuffTx");
	Y("PreAASuffix");
	Y("P.e..Suff.x");

	N("P.e..Suff.");
	N("PrtSuffix");
	N("PreSuftix");
	N("PreSuffixx");
	N("xPreSuffix");
}

def globMatcher(pat: string) -> string -> bool {
	return GlobMatcher.new(pat).matches;
}
