// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Unit tests for library code register themselves here.
// Note that we don't use the unit test framework from the library
// itself, since that is the code under test.
component LibTests {
	var list: LibTest;
	def register(prefix: string, name: string, fun: LibTest -> void) {
		list = LibTest.new(prefix, name, fun, list);
	}
}

// For simplicity, each test is instantiated only once and has only
// pass/fail state.
class LibTest(prefix: string, name: string, fun: LibTest -> void, tail: LibTest) {
	var ok: bool = true;

	def fail(msg: string) {
		if (!ok) return;
		ok = false;
		System.puts("##-fail (");
		System.puts(msg);
		System.puts(")\n");
	}
	def asserteq<T>(a: T, b: T) -> this {
		if (a != b) fail("expected equal");
	}
	def assertne<T>(a: T, b: T) -> this {
		if (a == b) fail("expected not equal");
	}
	def assertT<F, T>(v: F) -> this {
		if (!T.?(v)) fail("expected type");
	}
	def assert_string(expected: string, got: string) -> this {
		if (!equal(expected, got)) fail("expected string");
	}
	def equal<T>(a: Array<T>, b: Array<T>) -> bool {
		if (a == b) return true;
		if (a == null) return false;
		if (b == null) return false;
		if (a.length != b.length) return false;
		for (i < a.length) if (a[i] != b[i]) return false;
		return true;
	}
}

def main() -> int {
	var count = 0;
	for (t = LibTests.list; t != null; t = t.tail) count++;

	System.puts("##>");
	System.puti(count);
	System.puts(" lib tests\n");
	var fail = false;
	for (t = LibTests.list; t != null; t = t.tail) {
		System.puts("##+");
		System.puts(t.prefix);
		System.puts(":");
		System.puts(t.name);
		System.ln();

		t.fun(t);

		if (t.ok) System.puts("##-ok\n");
		else fail = true;
	}
	return if(fail, 1, 0);
}
