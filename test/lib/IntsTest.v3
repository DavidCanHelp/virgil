// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("Ints", _, _);
def X = [
	T("parseDecimal", test_parseDecimal),
	T("regress", test_regress),
	T("log", test_log),
	T("abs", test_abs),
	()
];

def assertOk<T>(t: LibTest, f: (StringBuilder, T) -> StringBuilder, val: T, expected: string) {
	var b = StringBuilder.new();
	f(b, val);
	t.assert_string(expected, b.extract());
}

def assertDecimal(t: LibTest, status: int, val: int, str: string, pos: int) {
	var r = Ints.parseDecimal(str, pos);
	if (r.0 != status) t.fail(Strings.format3("decimal error in \"%s\", expected status = %d, got %d", str, status, r.0));
	if (r.0 <= 0) return;
	if (r.1 != val) t.fail(Strings.format3("decimal error in \"%s\", expected val = %d, got %d", str, val, r.1));
}

def assertPosDecimal(t: LibTest, status: int, val: u32, str: string, pos: int) {
	var r = Ints.parsePosDecimal(str, pos);
	if (r.0 != status) t.fail(Strings.format3("decimal error in \"%s\", expected status = %d, got %d", str, status, r.0));
	if (r.0 <= 0) return;
	if (r.1 != val) t.fail(Strings.format3("decimal error in \"%s\", expected val = %d, got %d", str, val, r.1));
}

def test_parseDecimal(t: LibTest) {
	def p = assertDecimal(t, _, _, _, _);
	p(1, 0, "0", 0);
	p(1, 4, "4", 0);
	p(1, 3, "a3", 1);
	p(1, 9, "xx9", 2);
	p(2, 56, "a56", 1);
	p(2, 89, "**89&&", 2);

	p(0, 0, "", 0);
	p(0, 0, "111", 3);

	p(2, -1, "-1", 0);
	p(3, -97, "aa-97__", 2);

	p(11, -2147483646, "-2147483646", 0);
	p(11, -2147483647, "-2147483647", 0);
	p(11, -2147483648, "-2147483648", 0);
	p(-12, 0, "-2147483649", 0);
	p(-12, 0, "-21474836479", 0);
	p(-12, 0, "-21474836489", 0);

	p(10, 2000000000, "2000000000", 0);
	p(10, 2000000009, "2000000009", 0);
	p(10, 1200000000, "1200000000", 0);
	p(10, 1300000009, "1300000009", 0);

	p(11, -2000000000, "-2000000000", 0);
	p(11, -2000000009, "-2000000009", 0);
	p(11, -1200000000, "-1200000000", 0);
	p(11, -1300000009, "-1300000009", 0);

	p(10, 2147483646, "2147483646", 0);
	p(10, 2147483647, "2147483647", 0);
	p(0, 0, "21474836471", 0);
	p(0, 0, "21474836481", 0);
	p(0, 0, "2147483648", 0);

	var buf = "cc6789cc";
	for (c < 256) {
		if (c >= '0' && c <= '9') continue;
		var b = byte.view(c);
		buf[0] = b;
		buf[1] = b;
		buf[6] = b;
		buf[7] = b;
		p(4, 6789, buf, 2);
	}
}

def test_regress(t: LibTest) {
	def p = assertPosDecimal(t, _, _, _, _);
	p(10, 1717986919, "//@execute 0=!DivideByZeroException; 1=0; 2=0; 5=1717986919; 7=-1227133513; 9=-95443717", 49);
}

def test_log(t: LibTest) {
	def log = Ints.log;
	def ok = t.asserteq<int>;

	ok(-1, log(0));
	ok(0, log(1));
	ok(1, log(2));
	ok(1, log(3));
	ok(2, log(4));
	ok(4, log(19));
	ok(6, log(127));
	ok(7, log(128));
	ok(7, log(129));
	ok(9, log(999));
	ok(13, log(9999));
	ok(16, log(88888));
	ok(19, log(777777));
	ok(22, log(6666666));
	ok(25, log(55555555));
	ok(28, log(444444444));
	ok(31, log(3333333333u));

	for (i < 32) {
		ok(i, log(1u << u5.view(i)));
		ok(i, log(1u | 1u << u5.view(i)));
	}
}

def assert_abs(t: LibTest, expect: u32, v: int) {
	t.asserteq<u32>(expect, Ints.abs(v));
}

def test_abs(t: LibTest) {
	def ok = assert_abs(t, _, _);

	ok(0, 0);
	ok(1, 1);
	ok(1, -1);
	ok(2, 2);
	ok(2, -2);
	ok(3, 3);
	ok(3, -3);

	ok(1234, 1234);
	ok(2345, -2345);

	ok(45678, -45678);
	ok(2147483646, -2147483646);
	ok(2147483647, -2147483647);
	ok(2147483648u, -2147483648);
}
