// Copyright 2024 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("Ranges", _, _);
def X = [
	T("reverse_int", test_reverse_int),
	T("reverse_string", test_reverse_string),
	()
];

def assert_reverse<T>(t: LibTest, expected: Range<T>, input: Range<T>) {
	Ranges.reverse(input);
	var got = input; // reverse is done in place

	if (got.length != expected.length) return t.fail("wrong result length");
	for (i < expected.length) t.asserteq(expected[i], got[i]);
}

def test_reverse_int(t: LibTest) {
	def p = assert_reverse<int>(t, _, _);

	p([], []);
	p([1], [1]);
	p([3, 4], [4, 3]);
	p([-44, -55, -66], [-66, -55, -44]);
}

def test_reverse_string(t: LibTest) {
	def p = assert_reverse<string>(t, _, _);
	def foo = "foo", bar = "bar";
	def ganz = "ganz", geschichte = "geschichte", pflanz = "pflanz", gebaut = "gebaut", danke = "danke", dir = "dir", sehr = "sehr";

	p([], []);
	p([bar], [bar]);
	p([foo, bar], [bar, foo]);
	p(
		[ganz, geschichte, pflanz, gebaut, danke, dir, sehr],
		[sehr, dir, danke, gebaut, pflanz, geschichte, ganz]
	);
}
